
apply plugin: 'com.android.library'

def computeCompileSdkVersion () {
    if(project.hasProperty("compileSdk")) {
        return compileSdk
    }
    else {
        return 28
    }
}

def computeBuildToolsVersion() {
    if(project.hasProperty("buildToolsVersion")) {
        return buildToolsVersion
    }
    else {
        return "28.0.3"
    }
}

def computeSupportVersion() {
    if(project.hasProperty("supportVersion")) {
        return supportVersion
    }
    else {
        return "28.0.0"
    }
}

def computeTargetSdkVersion() {
    if(project.hasProperty("targetSdk")) {
        return targetSdk
    }
    else {
        return 28
    }
}

buildscript {
    repositories {
        maven {  // At the beginning of the block
          url "https://plugins.gradle.org/m2/"
        }
        maven { // At the end of the block and after google()
           url 'https://repo.gradle.org/gradle/libs-releases'
        }
    }
    dependencies {
        // ... the Android plugin and other classpath definitions
        classpath 'com.ahasbini.tools:android-opencv-gradle-plugin:0.1.+'
    }
}
apply plugin: 'com.ahasbini.android-opencv-gradle-plugin' // After the Android plugin
android {
    compileSdkVersion computeCompileSdkVersion()
    buildToolsVersion computeBuildToolsVersion()

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion computeTargetSdkVersion()
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
androidOpenCV { // After the android block

    // Required: Version of OpenCV to be used in the project
    version '4.4.0'
}

dependencies {
//   def javaCVVersion =  project.hasProperty("javaCVVersion") ? project.javaCVVersion : "1.5.2"
//   def openCVVersion =  project.hasProperty("openCVVersion") ? project.openCVVersion : "4.1.2"
//   def ffmpegVersion =  project.hasProperty("ffmpegVersion") ? project.ffmpegVersion : "4.2.1"
//     implementation fileTree(include: ['*.jar'], dir: 'libs')
//     implementation 'com.android.support:multidex:1.0.3'
//    implementation (group: 'org.bytedeco', name: 'javacv', version: "$javaCVVersion" , {
//     exclude group: 'org.bytedeco', module: 'flandmark'
//     exclude group: 'org.bytedeco', module: 'flycapture'
//     exclude group: 'org.bytedeco', module: 'leptonica'
//     exclude group: 'org.bytedeco', module: 'libdc1394'
//     exclude group: 'org.bytedeco', module: 'libfreenect2'
//     exclude group: 'org.bytedeco', module: 'libfreenect'
//     exclude group: 'org.bytedeco', module: 'librealsense'
//     exclude group: 'org.bytedeco', module: 'tesseract'
//     exclude group: 'org.bytedeco', module: 'videoinput'
//     exclude group: 'org.bytedeco', module: 'artoolkitplus'
//     exclude group: 'org.bytedeco', module: 'openblas'
//     exclude group: 'org.bytedeco', module: 'realsense'
//   })
//   implementation group: 'org.bytedeco', name: 'ffmpeg', version: "$ffmpegVersion-$javaCVVersion", classifier: 'android-arm'
//   implementation group: 'org.bytedeco', name: 'ffmpeg', version: "$ffmpegVersion-$javaCVVersion", classifier: 'android-x86'
//   implementation group: 'org.bytedeco', name: 'opencv', version: "$openCVVersion-$javaCVVersion", classifier: 'android-arm'
//   implementation group: 'org.bytedeco', name: 'opencv', version: "$openCVVersion-$javaCVVersion", classifier: 'android-x86'
//    implementation 'com.android.support:support-v4:' + computeSupportVersion()
}

task cleanBuildDir (type: Delete) {
    delete "../build/"
}

//task copyAar {
//    copy {
//        from "build/outputs/aar/opencv-additions-*.aar"
//        into "../../../plugin/platforms/android/"
//    }
//}

task finalizeBuild {
    doLast {
        copy {
            from "build/outputs/aar/opencv-additions-debug.aar"
            into "../../../plugin/platforms/android/"
        }
        copy {
            from "build/outputs/aar/opencv-additions-release.aar"
            into "../../../plugin/platforms/android/"
        }
    }
}

tasks.whenTaskAdded { task ->
    if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
        task.finalizedBy finalizeBuild
    }
}

//assemble.dependsOn(cleanBuildDir)
//copyAar.dependsOn(assemble)
//build.dependsOn(copyAar)