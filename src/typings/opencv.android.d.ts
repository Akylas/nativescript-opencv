declare module org {
	export module bytedeco {
		export module javacpp {
			export class BoolPointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.BoolPointer>;
				public limit(param0: number): org.bytedeco.javacpp.BoolPointer;
				public capacity(param0: number): org.bytedeco.javacpp.BoolPointer;
				public constructor(param0: java.nio.Buffer);
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public put(param0: number, param1: boolean): org.bytedeco.javacpp.BoolPointer;
				public get(): boolean;
				public position(param0: number): org.bytedeco.javacpp.BoolPointer;
				public put(param0: boolean): org.bytedeco.javacpp.BoolPointer;
				public constructor();
				public limit(): number;
				public position(): number;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public get(param0: number): boolean;
				public capacity(): number;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class BooleanPointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.BooleanPointer>;
				public constructor(param0: native.Array<boolean>);
				public constructor(param0: java.nio.ByteBuffer);
				public limit(param0: number): org.bytedeco.javacpp.BooleanPointer;
				public constructor(param0: java.nio.Buffer);
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public get(): boolean;
				public put(param0: native.Array<boolean>, param1: number, param2: number): org.bytedeco.javacpp.BooleanPointer;
				public put(param0: native.Array<boolean>): org.bytedeco.javacpp.BooleanPointer;
				public constructor();
				public limit(): number;
				public capacity(param0: number): org.bytedeco.javacpp.BooleanPointer;
				public put(param0: boolean): org.bytedeco.javacpp.BooleanPointer;
				public position(): number;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public get(param0: number): boolean;
				public get(param0: native.Array<boolean>): org.bytedeco.javacpp.BooleanPointer;
				public capacity(): number;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public put(param0: number, param1: boolean): org.bytedeco.javacpp.BooleanPointer;
				public position(param0: number): org.bytedeco.javacpp.BooleanPointer;
				public get(param0: native.Array<boolean>, param1: number, param2: number): org.bytedeco.javacpp.BooleanPointer;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class BytePointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.BytePointer>;
				public getChar(param0: number): string;
				public capacity(param0: number): org.bytedeco.javacpp.BytePointer;
				public constructor(param0: java.nio.ByteBuffer);
				public limit(param0: number): org.bytedeco.javacpp.BytePointer;
				public static strpbrk(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public getDouble(param0: number): number;
				public getShort(param0: number): number;
				public getPointer(param0: number): org.bytedeco.javacpp.Pointer;
				public static strcmp(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): number;
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public getBool(): boolean;
				public getBool(param0: number): boolean;
				public static strxfrm(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): number;
				public putString(param0: string): org.bytedeco.javacpp.BytePointer;
				public get(param0: number): number;
				public static strspn(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): number;
				public constructor();
				public putFloat(param0: number): org.bytedeco.javacpp.BytePointer;
				public capacity(): number;
				public putShort(param0: number): org.bytedeco.javacpp.BytePointer;
				public getChar(): string;
				public getInt(param0: number): number;
				public putInt(param0: number): org.bytedeco.javacpp.BytePointer;
				public static strtok(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public putChar(param0: string): org.bytedeco.javacpp.BytePointer;
				public getString(): string;
				public putPointer(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.BytePointer;
				public putString(param0: string, param1: string): org.bytedeco.javacpp.BytePointer;
				public putBool(param0: number, param1: boolean): org.bytedeco.javacpp.BytePointer;
				public get(param0: native.Array<number>): org.bytedeco.javacpp.BytePointer;
				public getShort(): number;
				public putChar(param0: number, param1: string): org.bytedeco.javacpp.BytePointer;
				public putPointer(param0: number, param1: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.BytePointer;
				public getPointer(): org.bytedeco.javacpp.Pointer;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public static strcat(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static strstr(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public putDouble(param0: number): org.bytedeco.javacpp.BytePointer;
				public putDouble(param0: number, param1: number): org.bytedeco.javacpp.BytePointer;
				public putLong(param0: number): org.bytedeco.javacpp.BytePointer;
				public static strcspn(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): number;
				public get(): number;
				public getFloat(param0: number): number;
				public getLong(): number;
				public put(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.BytePointer;
				public putFloat(param0: number, param1: number): org.bytedeco.javacpp.BytePointer;
				public static strncpy(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): org.bytedeco.javacpp.BytePointer;
				public static strchr(param0: org.bytedeco.javacpp.BytePointer, param1: number): org.bytedeco.javacpp.BytePointer;
				public put(param0: number): org.bytedeco.javacpp.BytePointer;
				public constructor(param0: string);
				public limit(): number;
				public position(): number;
				public constructor(param0: native.Array<number>);
				public asBuffer(): java.nio.ByteBuffer;
				public getFloat(): number;
				public getLong(param0: number): number;
				public static strcoll(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): number;
				public getString(param0: string): string;
				public getInt(): number;
				public asBuffer(): java.nio.Buffer;
				public constructor(param0: string, param1: string);
				public putInt(param0: number, param1: number): org.bytedeco.javacpp.BytePointer;
				public constructor(param0: java.nio.Buffer);
				public static strerror(param0: number): org.bytedeco.javacpp.BytePointer;
				public putShort(param0: number, param1: number): org.bytedeco.javacpp.BytePointer;
				public position(param0: number): org.bytedeco.javacpp.BytePointer;
				public static strncmp(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): number;
				public static strrchr(param0: org.bytedeco.javacpp.BytePointer, param1: number): org.bytedeco.javacpp.BytePointer;
				public get(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.BytePointer;
				public getDouble(): number;
				public put(param0: number, param1: number): org.bytedeco.javacpp.BytePointer;
				public static strlen(param0: org.bytedeco.javacpp.BytePointer): number;
				public putLong(param0: number, param1: number): org.bytedeco.javacpp.BytePointer;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public static strncat(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): org.bytedeco.javacpp.BytePointer;
				public put(param0: native.Array<number>): org.bytedeco.javacpp.BytePointer;
				public static strcpy(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
				public getStringBytes(): native.Array<number>;
				public putBool(param0: boolean): org.bytedeco.javacpp.BytePointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class CLongPointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.CLongPointer>;
				public put(param0: number, param1: number): org.bytedeco.javacpp.CLongPointer;
				public constructor(param0: java.nio.Buffer);
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public get(param0: number): number;
				public constructor();
				public limit(): number;
				public position(): number;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public limit(param0: number): org.bytedeco.javacpp.CLongPointer;
				public capacity(): number;
				public position(param0: number): org.bytedeco.javacpp.CLongPointer;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public put(param0: number): org.bytedeco.javacpp.CLongPointer;
				public get(): number;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
				public capacity(param0: number): org.bytedeco.javacpp.CLongPointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class CharPointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.CharPointer>;
				public get(): string;
				public limit(param0: number): org.bytedeco.javacpp.CharPointer;
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public constructor(param0: string);
				public constructor();
				public limit(): number;
				public capacity(param0: number): org.bytedeco.javacpp.CharPointer;
				public position(): number;
				public capacity(): number;
				public putString(param0: string): org.bytedeco.javacpp.CharPointer;
				public put(param0: native.Array<string>): org.bytedeco.javacpp.CharPointer;
				public put(param0: native.Array<string>, param1: number, param2: number): org.bytedeco.javacpp.CharPointer;
				public asBuffer(): java.nio.Buffer;
				public get(param0: native.Array<string>, param1: number, param2: number): org.bytedeco.javacpp.CharPointer;
				public getString(): string;
				public asBuffer(): java.nio.CharBuffer;
				public constructor(param0: java.nio.Buffer);
				public put(param0: string): org.bytedeco.javacpp.CharPointer;
				public put(param0: number, param1: string): org.bytedeco.javacpp.CharPointer;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public position(param0: number): org.bytedeco.javacpp.CharPointer;
				public constructor(param0: java.nio.CharBuffer);
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public get(param0: native.Array<string>): org.bytedeco.javacpp.CharPointer;
				public constructor(param0: native.Array<string>);
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public getStringChars(): native.Array<string>;
				public get(param0: number): string;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class ClassProperties extends java.util.HashMap<string,java.util.List<string>> {
				public static class: java.lang.Class<org.bytedeco.javacpp.ClassProperties>;
				public getProperty(param0: string, param1: string): string;
				public getInheritedClasses(): java.util.List<java.lang.Class<any>>;
				public load(param0: java.lang.Class<any>, param1: boolean): void;
				public setProperty(param0: string, param1: string): string;
				public get(param0: string): java.util.List<string>;
				public addAll(param0: string, param1: native.Array<string>): void;
				public getProperty(param0: string): string;
				public getEffectiveClasses(): java.util.List<java.lang.Class<any>>;
				public addAll(param0: string, param1: java.util.Collection<string>): void;
				public isLoaded(): boolean;
				public constructor(param0: java.util.Properties);
				public constructor();
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class DoublePointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.DoublePointer>;
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public capacity(param0: number): org.bytedeco.javacpp.DoublePointer;
				public put(param0: number, param1: number): org.bytedeco.javacpp.DoublePointer;
				public get(param0: native.Array<number>): org.bytedeco.javacpp.DoublePointer;
				public get(param0: number): number;
				public get(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.DoublePointer;
				public position(param0: number): org.bytedeco.javacpp.DoublePointer;
				public constructor();
				public limit(): number;
				public position(): number;
				public constructor(param0: native.Array<number>);
				public limit(param0: number): org.bytedeco.javacpp.DoublePointer;
				public capacity(): number;
				public put(param0: number): org.bytedeco.javacpp.DoublePointer;
				public asBuffer(): java.nio.DoubleBuffer;
				public constructor(param0: java.nio.DoubleBuffer);
				public asBuffer(): java.nio.Buffer;
				public constructor(param0: java.nio.Buffer);
				public put(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.DoublePointer;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public put(param0: native.Array<number>): org.bytedeco.javacpp.DoublePointer;
				public get(): number;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class FloatPointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.FloatPointer>;
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public get(param0: number): number;
				public constructor();
				public limit(): number;
				public position(): number;
				public get(param0: native.Array<number>): org.bytedeco.javacpp.FloatPointer;
				public constructor(param0: native.Array<number>);
				public put(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.FloatPointer;
				public capacity(): number;
				public constructor(param0: java.nio.FloatBuffer);
				public asBuffer(): java.nio.Buffer;
				public limit(param0: number): org.bytedeco.javacpp.FloatPointer;
				public put(param0: number, param1: number): org.bytedeco.javacpp.FloatPointer;
				public constructor(param0: java.nio.Buffer);
				public capacity(param0: number): org.bytedeco.javacpp.FloatPointer;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public put(param0: native.Array<number>): org.bytedeco.javacpp.FloatPointer;
				public asBuffer(): java.nio.FloatBuffer;
				public position(param0: number): org.bytedeco.javacpp.FloatPointer;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public put(param0: number): org.bytedeco.javacpp.FloatPointer;
				public get(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.FloatPointer;
				public get(): number;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export abstract class FunctionPointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.FunctionPointer>;
				public constructor(param0: java.nio.Buffer);
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public constructor();
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class IntPointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.IntPointer>;
				public put(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.IntPointer;
				public asBuffer(): java.nio.IntBuffer;
				public position(param0: number): org.bytedeco.javacpp.IntPointer;
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public get(param0: number): number;
				public getStringCodePoints(): native.Array<number>;
				public constructor(param0: string);
				public constructor();
				public limit(): number;
				public position(): number;
				public constructor(param0: native.Array<number>);
				public put(param0: number, param1: number): org.bytedeco.javacpp.IntPointer;
				public constructor(param0: java.nio.IntBuffer);
				public capacity(): number;
				public asBuffer(): java.nio.Buffer;
				public getString(): string;
				public constructor(param0: java.nio.Buffer);
				public get(param0: native.Array<number>): org.bytedeco.javacpp.IntPointer;
				public capacity(param0: number): org.bytedeco.javacpp.IntPointer;
				public putString(param0: string): org.bytedeco.javacpp.IntPointer;
				public put(param0: native.Array<number>): org.bytedeco.javacpp.IntPointer;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public limit(param0: number): org.bytedeco.javacpp.IntPointer;
				public put(param0: number): org.bytedeco.javacpp.IntPointer;
				public get(): number;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
				public get(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.IntPointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class LoadEnabled {
				public static class: java.lang.Class<org.bytedeco.javacpp.LoadEnabled>;
				/**
				 * Constructs a new instance of the org.bytedeco.javacpp.LoadEnabled interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					init(param0: org.bytedeco.javacpp.ClassProperties): void;
				});
				public constructor();
				public init(param0: org.bytedeco.javacpp.ClassProperties): void;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class Loader {
				public static class: java.lang.Class<org.bytedeco.javacpp.Loader>;
				public static getTempDir(): java.io.File;
				public static extractResource(param0: string, param1: java.io.File, param2: string, param3: string): java.io.File;
				public static getCallerClass(param0: number): java.lang.Class<any>;
				public static addressof(param0: string): org.bytedeco.javacpp.Pointer;
				public static cacheResource(param0: string): java.io.File;
				public static load(): string;
				public static load(param0: java.lang.Class<any>, param1: java.util.Properties, param2: boolean): string;
				public static loadProperties(param0: native.Array<java.lang.Class<any>>, param1: java.util.Properties, param2: boolean): org.bytedeco.javacpp.ClassProperties;
				public static loadProperties(param0: string, param1: string): java.util.Properties;
				public static createLibraryLink(param0: string, param1: org.bytedeco.javacpp.ClassProperties, param2: string, param3: native.Array<string>): string;
				public constructor();
				public static extractResource(param0: java.lang.Class<any>, param1: string, param2: java.io.File, param3: string, param4: string): java.io.File;
				public static findLibrary(param0: java.lang.Class<any>, param1: org.bytedeco.javacpp.ClassProperties, param2: string, param3: boolean): native.Array<java.net.URL>;
				public static findResource(param0: java.lang.Class<any>, param1: string): java.net.URL;
				public static getCacheDir(): java.io.File;
				public static load(param0: java.lang.Class<any>): string;
				public static sizeof(param0: java.lang.Class<any>): number;
				public static getPlatform(): string;
				public static checkPlatform(param0: org.bytedeco.javacpp.annotation.Platform, param1: java.util.Properties, param2: native.Array<string>): boolean;
				public static extractResource(param0: java.net.URL, param1: java.io.File, param2: string, param3: string): java.io.File;
				public static loadProperties(): java.util.Properties;
				public static cacheResources(param0: java.lang.Class<any>, param1: string): native.Array<java.io.File>;
				public static cacheResource(param0: java.net.URL): java.io.File;
				public static isLoadLibraries(): boolean;
				public static cacheResource(param0: java.net.URL, param1: string): java.io.File;
				public static offsetof(param0: java.lang.Class<any>, param1: string): number;
				public static totalChips(): number;
				public static checkPlatform(param0: java.lang.Class<any>, param1: java.util.Properties): boolean;
				public static findLibrary(param0: java.lang.Class<any>, param1: org.bytedeco.javacpp.ClassProperties, param2: string): native.Array<java.net.URL>;
				public static totalProcessors(): number;
				public static getJavaVM(): org.bytedeco.javacpp.Pointer;
				public static findResources(param0: java.lang.Class<any>, param1: string): native.Array<java.net.URL>;
				public static loadProperties(param0: java.lang.Class<any>, param1: java.util.Properties, param2: boolean): org.bytedeco.javacpp.ClassProperties;
				public static getEnclosingClass(param0: java.lang.Class<any>): java.lang.Class<any>;
				public static extractResources(param0: string, param1: java.io.File, param2: string, param3: string): native.Array<java.io.File>;
				public static getLoadedLibraries(): java.util.Map<string,string>;
				public static totalCores(): number;
				public static cacheResource(param0: java.lang.Class<any>, param1: string): java.io.File;
				public static cacheResources(param0: string): native.Array<java.io.File>;
				public static load(param0: boolean): string;
				public static loadLibrary(param0: native.Array<java.net.URL>, param1: string, param2: native.Array<string>): string;
				public static findResources(param0: java.lang.Class<any>, param1: string, param2: number): native.Array<java.net.URL>;
				public static extractResources(param0: java.lang.Class<any>, param1: string, param2: java.io.File, param3: string, param4: string): native.Array<java.io.File>;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class LongPointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.LongPointer>;
				public get(param0: native.Array<number>): org.bytedeco.javacpp.LongPointer;
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public get(param0: number): number;
				public constructor();
				public limit(): number;
				public position(): number;
				public constructor(param0: native.Array<number>);
				public put(param0: number, param1: number): org.bytedeco.javacpp.LongPointer;
				public capacity(): number;
				public asBuffer(): java.nio.Buffer;
				public limit(param0: number): org.bytedeco.javacpp.LongPointer;
				public put(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.LongPointer;
				public constructor(param0: java.nio.LongBuffer);
				public constructor(param0: java.nio.Buffer);
				public asBuffer(): java.nio.LongBuffer;
				public get(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.LongPointer;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public put(param0: native.Array<number>): org.bytedeco.javacpp.LongPointer;
				public position(param0: number): org.bytedeco.javacpp.LongPointer;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public put(param0: number): org.bytedeco.javacpp.LongPointer;
				public get(): number;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
				public capacity(param0: number): org.bytedeco.javacpp.LongPointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.Pointer>;
				public setNull(): void;
				public static memmove(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.Pointer, param2: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public static free(param0: org.bytedeco.javacpp.Pointer): void;
				public address(): number;
				public static realloc(param0: org.bytedeco.javacpp.Pointer, param1: number): org.bytedeco.javacpp.Pointer;
				public static availablePhysicalBytes(): number;
				public zero(): org.bytedeco.javacpp.Pointer;
				public constructor();
				public static deallocateReferences(): void;
				public limit(): number;
				public position(): number;
				public deallocate(param0: boolean): void;
				public offsetof(param0: string): number;
				public hashCode(): number;
				public capacity(): number;
				public equals(param0: any): boolean;
				public static totalBytes(): number;
				public static maxBytes(): number;
				public asBuffer(): java.nio.Buffer;
				public fill(param0: number): org.bytedeco.javacpp.Pointer;
				public static malloc(param0: number): org.bytedeco.javacpp.Pointer;
				public close(): void;
				public deallocate(): void;
				public deallocator(param0: org.bytedeco.javacpp.Pointer.Deallocator): org.bytedeco.javacpp.Pointer;
				public constructor(param0: java.nio.Buffer);
				public static withDeallocator(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
				public static maxPhysicalBytes(): number;
				public toString(): string;
				public static totalPhysicalBytes(): number;
				public sizeof(): number;
				public static memset(param0: org.bytedeco.javacpp.Pointer, param1: number, param2: number): org.bytedeco.javacpp.Pointer;
				public static memchr(param0: org.bytedeco.javacpp.Pointer, param1: number, param2: number): org.bytedeco.javacpp.Pointer;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public asByteBuffer(): java.nio.ByteBuffer;
				public deallocator(): org.bytedeco.javacpp.Pointer.Deallocator;
				public static memcpy(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.Pointer, param2: number): org.bytedeco.javacpp.Pointer;
				public static formatBytes(param0: number): string;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public static calloc(param0: number, param1: number): org.bytedeco.javacpp.Pointer;
				public static parseBytes(param0: string): number;
				public static memcmp(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.Pointer, param2: number): number;
				public isNull(): boolean;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
				public static physicalBytes(): number;
			}
			export module Pointer {
				export class CustomDeallocator extends org.bytedeco.javacpp.Pointer.DeallocatorReference implements org.bytedeco.javacpp.Pointer.Deallocator {
					public static class: java.lang.Class<org.bytedeco.javacpp.Pointer.CustomDeallocator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public toString(): string;
					public deallocate(): void;
				}
				export class Deallocator {
					public static class: java.lang.Class<org.bytedeco.javacpp.Pointer.Deallocator>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.Pointer$Deallocator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						deallocate(): void;
					});
					public constructor();
					public deallocate(): void;
				}
				export class DeallocatorReference extends java.lang.ref.PhantomReference<org.bytedeco.javacpp.Pointer> {
					public static class: java.lang.Class<org.bytedeco.javacpp.Pointer.DeallocatorReference>;
					public toString(): string;
					public clear(): void;
				}
				export class DeallocatorThread {
					public static class: java.lang.Class<org.bytedeco.javacpp.Pointer.DeallocatorThread>;
					public run(): void;
				}
				export class NativeDeallocator extends org.bytedeco.javacpp.Pointer.DeallocatorReference implements org.bytedeco.javacpp.Pointer.Deallocator {
					public static class: java.lang.Class<org.bytedeco.javacpp.Pointer.NativeDeallocator>;
					public toString(): string;
					public deallocate(): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class PointerPointer<P>  extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.PointerPointer<any>>;
				public getString(param0: number, param1: string): string;
				public get(param0: java.lang.Class<any>): any;
				public getString(param0: number): string;
				public get(): org.bytedeco.javacpp.Pointer;
				public position(param0: number): org.bytedeco.javacpp.PointerPointer<any>;
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public get(param0: java.lang.Class<any>, param1: number): any;
				public get(param0: number): org.bytedeco.javacpp.Pointer;
				public put(param0: native.Array<native.Array<number>>): org.bytedeco.javacpp.PointerPointer<any>;
				public constructor();
				public limit(): number;
				public position(): number;
				public put(param0: native.Array<native.Array<string>>): org.bytedeco.javacpp.PointerPointer<any>;
				public putString(param0: native.Array<string>, param1: string): org.bytedeco.javacpp.PointerPointer<any>;
				public put(param0: number, param1: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.PointerPointer<any>;
				public capacity(): number;
				public constructor(param0: native.Array<native.Array<string>>);
				public constructor(param0: native.Array<any>);
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.PointerPointer<any>;
				public constructor(param0: java.nio.Buffer);
				public constructor(param0: native.Array<native.Array<number>>);
				public limit(param0: number): org.bytedeco.javacpp.PointerPointer<any>;
				public capacity(param0: number): org.bytedeco.javacpp.PointerPointer<any>;
				public put(param0: native.Array<any>): org.bytedeco.javacpp.PointerPointer<any>;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public putString(param0: native.Array<string>): org.bytedeco.javacpp.PointerPointer<any>;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: native.Array<string>);
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: native.Array<string>, param1: string);
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class PointerScope {
				public static class: java.lang.Class<org.bytedeco.javacpp.PointerScope>;
				public close(): void;
				public deallocate(): void;
				public detach(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.PointerScope;
				public attach(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.PointerScope;
				public constructor(param0: boolean);
				public deallocateOnClose(param0: boolean): org.bytedeco.javacpp.PointerScope;
				public static getInnerScope(): org.bytedeco.javacpp.PointerScope;
				public deallocateOnClose(): boolean;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class ShortPointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.ShortPointer>;
				public put(param0: number, param1: number): org.bytedeco.javacpp.ShortPointer;
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public get(param0: number): number;
				public constructor();
				public limit(): number;
				public position(): number;
				public constructor(param0: native.Array<number>);
				public capacity(param0: number): org.bytedeco.javacpp.ShortPointer;
				public asBuffer(): java.nio.ShortBuffer;
				public put(param0: native.Array<number>): org.bytedeco.javacpp.ShortPointer;
				public capacity(): number;
				public put(param0: number): org.bytedeco.javacpp.ShortPointer;
				public get(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.ShortPointer;
				public asBuffer(): java.nio.Buffer;
				public position(param0: number): org.bytedeco.javacpp.ShortPointer;
				public constructor(param0: java.nio.Buffer);
				public constructor(param0: java.nio.ShortBuffer);
				public get(param0: native.Array<number>): org.bytedeco.javacpp.ShortPointer;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public put(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.ShortPointer;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public get(): number;
				public limit(param0: number): org.bytedeco.javacpp.ShortPointer;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class SizeTPointer extends org.bytedeco.javacpp.Pointer {
				public static class: java.lang.Class<org.bytedeco.javacpp.SizeTPointer>;
				public position(param0: number): org.bytedeco.javacpp.SizeTPointer;
				public constructor(param0: java.nio.Buffer);
				public put(param0: number, param1: number): org.bytedeco.javacpp.SizeTPointer;
				public constructor(param0: org.bytedeco.javacpp.Pointer);
				public limit(param0: number): org.bytedeco.javacpp.SizeTPointer;
				public capacity(param0: number): org.bytedeco.javacpp.SizeTPointer;
				public get(param0: number): number;
				public put(param0: number): org.bytedeco.javacpp.SizeTPointer;
				public constructor();
				public limit(): number;
				public position(): number;
				public capacity(param0: number): org.bytedeco.javacpp.Pointer;
				public capacity(): number;
				public limit(param0: number): org.bytedeco.javacpp.Pointer;
				public constructor(param0: number);
				public position(param0: number): org.bytedeco.javacpp.Pointer;
				public get(): number;
				public put(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Adapter {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Adapter>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Adapter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
						argc(): number;
					});
					public constructor();
					public argc(): number;
					public value(): string;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Allocator {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Allocator>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Allocator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class ArrayAllocator {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.ArrayAllocator>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.ArrayAllocator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class ByPtr {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.ByPtr>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.ByPtr interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class ByPtrPtr {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.ByPtrPtr>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.ByPtrPtr interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class ByPtrRef {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.ByPtrRef>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.ByPtrRef interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class ByRef {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.ByRef>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.ByRef interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						nullValue(): string;
					});
					public constructor();
					public nullValue(): string;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class ByVal {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.ByVal>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.ByVal interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						nullValue(): string;
					});
					public constructor();
					public nullValue(): string;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Cast {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Cast>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Cast interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): native.Array<string>;
					});
					public constructor();
					public value(): native.Array<string>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Const {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Const>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Const interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): native.Array<boolean>;
					});
					public constructor();
					public value(): native.Array<boolean>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Convention {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Convention>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Convention interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
						extern(): string;
					});
					public constructor();
					public extern(): string;
					public value(): string;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class CriticalRegion {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.CriticalRegion>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.CriticalRegion interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Function {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Function>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Function interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Index {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Index>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Index interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): number;
						function(): string;
					});
					public constructor();
					public function(): string;
					public value(): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class MemberGetter {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.MemberGetter>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.MemberGetter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class MemberSetter {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.MemberSetter>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.MemberSetter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Name {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Name>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Name interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): native.Array<string>;
					});
					public constructor();
					public value(): native.Array<string>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Namespace {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Namespace>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Namespace interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class NoDeallocator {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.NoDeallocator>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.NoDeallocator interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class NoException {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.NoException>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.NoException interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class NoOffset {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.NoOffset>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.NoOffset interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Opaque {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Opaque>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Opaque interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Platform {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Platform>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Platform interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): native.Array<string>;
						not(): native.Array<string>;
						pragma(): native.Array<string>;
						define(): native.Array<string>;
						exclude(): native.Array<string>;
						include(): native.Array<string>;
						cinclude(): native.Array<string>;
						includepath(): native.Array<string>;
						includeresource(): native.Array<string>;
						compiler(): native.Array<string>;
						linkpath(): native.Array<string>;
						linkresource(): native.Array<string>;
						link(): native.Array<string>;
						frameworkpath(): native.Array<string>;
						framework(): native.Array<string>;
						preloadpath(): native.Array<string>;
						preloadresource(): native.Array<string>;
						preload(): native.Array<string>;
						resourcepath(): native.Array<string>;
						resource(): native.Array<string>;
						extension(): native.Array<string>;
						library(): string;
					});
					public constructor();
					public resource(): native.Array<string>;
					public linkpath(): native.Array<string>;
					public includepath(): native.Array<string>;
					public not(): native.Array<string>;
					public value(): native.Array<string>;
					public exclude(): native.Array<string>;
					public linkresource(): native.Array<string>;
					public link(): native.Array<string>;
					public framework(): native.Array<string>;
					public includeresource(): native.Array<string>;
					public extension(): native.Array<string>;
					public preloadresource(): native.Array<string>;
					public preload(): native.Array<string>;
					public compiler(): native.Array<string>;
					public frameworkpath(): native.Array<string>;
					public library(): string;
					public preloadpath(): native.Array<string>;
					public pragma(): native.Array<string>;
					public include(): native.Array<string>;
					public resourcepath(): native.Array<string>;
					public define(): native.Array<string>;
					public cinclude(): native.Array<string>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Properties {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Properties>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Properties interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						inherit(): native.Array<java.lang.Class<any>>;
						names(): native.Array<string>;
						value(): native.Array<org.bytedeco.javacpp.annotation.Platform>;
						target(): string;
						global(): string;
						helper(): string;
					});
					public constructor();
					public names(): native.Array<string>;
					public value(): native.Array<org.bytedeco.javacpp.annotation.Platform>;
					public global(): string;
					public helper(): string;
					public target(): string;
					public inherit(): native.Array<java.lang.Class<any>>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Raw {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Raw>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Raw interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						withEnv(): boolean;
					});
					public constructor();
					public withEnv(): boolean;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class SharedPtr {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.SharedPtr>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.SharedPtr interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class StdString {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.StdString>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.StdString interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class StdVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.StdVector>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.StdVector interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class StdWString {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.StdWString>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.StdWString interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class UniquePtr {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.UniquePtr>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.UniquePtr interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): string;
					});
					public constructor();
					public value(): string;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class ValueGetter {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.ValueGetter>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.ValueGetter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class ValueSetter {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.ValueSetter>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.ValueSetter interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
					});
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module annotation {
				export class Virtual {
					public static class: java.lang.Class<org.bytedeco.javacpp.annotation.Virtual>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.annotation.Virtual interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						value(): boolean;
					});
					public constructor();
					public value(): boolean;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class Bfloat16ArrayIndexer extends org.bytedeco.javacpp.indexer.Bfloat16Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.Bfloat16ArrayIndexer>;
					public array(): any;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: native.Array<number>): number;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number): number;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public release(): void;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public constructor(param0: native.Array<number>);
					public array(): native.Array<number>;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class Bfloat16BufferIndexer extends org.bytedeco.javacpp.indexer.Bfloat16Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.Bfloat16BufferIndexer>;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public constructor(param0: java.nio.ShortBuffer);
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public constructor(param0: java.nio.ShortBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number): number;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public release(): void;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public buffer(): java.nio.Buffer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class Bfloat16Indexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.Bfloat16Indexer>;
					public static VALUE_BYTES: number;
					public static create(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public static create(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public get(param0: number, param1: number, param2: number): number;
					public static create(param0: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public static create(param0: java.nio.ShortBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public static toFloat(param0: number): number;
					public static fromFloat(param0: number): number;
					public get(param0: native.Array<number>): number;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number): number;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public static create(param0: org.bytedeco.javacpp.ShortPointer): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public static create(param0: java.nio.ShortBuffer): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public static create(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public getDouble(param0: native.Array<number>): number;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class Bfloat16RawIndexer extends org.bytedeco.javacpp.indexer.Bfloat16Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.Bfloat16RawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public constructor(param0: org.bytedeco.javacpp.ShortPointer);
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: native.Array<number>): number;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number): number;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public release(): void;
					public constructor(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.Bfloat16Indexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class BooleanArrayIndexer extends org.bytedeco.javacpp.indexer.BooleanIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.BooleanArrayIndexer>;
					public array(): any;
					public constructor(param0: native.Array<boolean>, param1: native.Array<number>, param2: native.Array<number>);
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: number, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: native.Array<number>, param1: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: number, param2: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: native.Array<boolean>, param3: number, param4: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number): boolean;
					public put(param0: native.Array<number>, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: native.Array<number>, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: native.Array<number>, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: number): boolean;
					public put(param0: number, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number): boolean;
					public put(param0: number, param1: number, param2: number, param3: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public array(): native.Array<boolean>;
					public put(param0: number, param1: number, param2: native.Array<boolean>, param3: number, param4: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public release(): void;
					public get(param0: native.Array<number>): boolean;
					public put(param0: native.Array<number>, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public constructor(param0: native.Array<boolean>);
					public put(param0: number, param1: number, param2: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class BooleanBufferIndexer extends org.bytedeco.javacpp.indexer.BooleanIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.BooleanBufferIndexer>;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: number, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: native.Array<number>, param1: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: number, param2: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: native.Array<boolean>, param3: number, param4: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number): boolean;
					public put(param0: native.Array<number>, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: native.Array<number>, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: native.Array<number>, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: number): boolean;
					public put(param0: number, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number): boolean;
					public put(param0: number, param1: number, param2: number, param3: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: number, param2: native.Array<boolean>, param3: number, param4: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public release(): void;
					public constructor(param0: java.nio.ByteBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: native.Array<number>): boolean;
					public put(param0: native.Array<number>, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: number, param2: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public buffer(): java.nio.Buffer;
					public constructor(param0: java.nio.ByteBuffer);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class BooleanIndexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.BooleanIndexer>;
					public static VALUE_BYTES: number;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public static create(param0: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: native.Array<number>, param1: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public static create(param0: org.bytedeco.javacpp.BooleanPointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: number, param2: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: native.Array<boolean>, param3: number, param4: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number): boolean;
					public put(param0: native.Array<number>, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: native.Array<number>, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: native.Array<number>, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public static create(param0: native.Array<boolean>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: number): boolean;
					public put(param0: number, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number): boolean;
					public put(param0: number, param1: number, param2: number, param3: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: number, param2: native.Array<boolean>, param3: number, param4: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: native.Array<number>): boolean;
					public put(param0: native.Array<number>, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public static create(param0: org.bytedeco.javacpp.BooleanPointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: number, param2: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public static create(param0: java.nio.ByteBuffer): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public getDouble(param0: native.Array<number>): number;
					public static create(param0: org.bytedeco.javacpp.BooleanPointer): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public static create(param0: java.nio.ByteBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.BooleanIndexer;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class BooleanRawIndexer extends org.bytedeco.javacpp.indexer.BooleanIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.BooleanRawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public constructor(param0: org.bytedeco.javacpp.BooleanPointer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: number, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public put(param0: native.Array<number>, param1: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: number, param2: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: native.Array<boolean>, param3: number, param4: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public constructor(param0: org.bytedeco.javacpp.BooleanPointer);
					public get(param0: number, param1: number): boolean;
					public put(param0: native.Array<number>, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: native.Array<number>, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: native.Array<number>, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: number): boolean;
					public put(param0: number, param1: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number): boolean;
					public put(param0: number, param1: number, param2: number, param3: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: number, param2: native.Array<boolean>, param3: number, param4: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: number, param2: native.Array<boolean>): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public release(): void;
					public get(param0: native.Array<number>): boolean;
					public put(param0: native.Array<number>, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public get(param0: number, param1: native.Array<boolean>, param2: number, param3: number): org.bytedeco.javacpp.indexer.BooleanIndexer;
					public put(param0: number, param1: number, param2: boolean): org.bytedeco.javacpp.indexer.BooleanIndexer;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class ByteArrayIndexer extends org.bytedeco.javacpp.indexer.ByteIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.ByteArrayIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					// public buffer: java.nio.ByteBuffer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public array(): any;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putLong(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getChar(param0: number): string;
					public get(param0: number, param1: number, param2: number): number;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public putFloat(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public putInt(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putChar(param0: number, param1: string): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putShort(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getShort(param0: number): number;
					public getDouble(param0: number): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public release(): void;
					public getFloat(param0: number): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getLong(param0: number): number;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getInt(param0: number): number;
					public constructor(param0: native.Array<number>);
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public array(): native.Array<number>;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getDouble(param0: native.Array<number>): number;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class ByteBufferIndexer extends org.bytedeco.javacpp.indexer.ByteIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.ByteBufferIndexer>;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putLong(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getChar(param0: number): string;
					public get(param0: number, param1: number, param2: number): number;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public putFloat(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public putInt(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putChar(param0: number, param1: string): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putShort(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getShort(param0: number): number;
					public getDouble(param0: number): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public release(): void;
					public getFloat(param0: number): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public constructor(param0: java.nio.ByteBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public getLong(param0: number): number;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getInt(param0: number): number;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public buffer(): java.nio.Buffer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public constructor(param0: java.nio.ByteBuffer);
					public getDouble(param0: native.Array<number>): number;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class ByteIndexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.ByteIndexer>;
					public static VALUE_BYTES: number;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putLong(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getChar(param0: number): string;
					public get(param0: number, param1: number, param2: number): number;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public static create(param0: java.nio.ByteBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putFloat(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public putInt(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putChar(param0: number, param1: string): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putShort(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public static create(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public static create(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getShort(param0: number): number;
					public getDouble(param0: number): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public static create(param0: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getFloat(param0: number): number;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getLong(param0: number): number;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getInt(param0: number): number;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public static create(param0: java.nio.ByteBuffer): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getDouble(param0: native.Array<number>): number;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class ByteRawIndexer extends org.bytedeco.javacpp.indexer.ByteIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.ByteRawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putLong(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getChar(param0: number): string;
					public get(param0: number, param1: number, param2: number): number;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public putFloat(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public putInt(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putChar(param0: number, param1: string): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putShort(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public putDouble(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getShort(param0: number): number;
					public getDouble(param0: number): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public release(): void;
					public getFloat(param0: number): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getLong(param0: number): number;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getInt(param0: number): number;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ByteIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ByteIndexer;
					public getDouble(param0: native.Array<number>): number;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class CharArrayIndexer extends org.bytedeco.javacpp.indexer.CharIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.CharArrayIndexer>;
					public put(param0: number, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public array(): any;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public constructor(param0: native.Array<string>);
					public put(param0: number, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number): string;
					public put(param0: number, param1: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: number, param3: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: native.Array<number>, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number, param2: number): string;
					public constructor(param0: native.Array<string>, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: number, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: native.Array<string>, param3: number, param4: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number): string;
					public get(param0: native.Array<number>): string;
					public put(param0: number, param1: number, param2: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public release(): void;
					public get(param0: native.Array<number>, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number, param2: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number, param2: native.Array<string>, param3: number, param4: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public array(): native.Array<string>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class CharBufferIndexer extends org.bytedeco.javacpp.indexer.CharIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.CharBufferIndexer>;
					public constructor(param0: java.nio.CharBuffer);
					public put(param0: number, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public put(param0: number, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number): string;
					public put(param0: number, param1: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: number, param3: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: native.Array<number>, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number, param2: number): string;
					public constructor(param0: java.nio.CharBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: number, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: native.Array<string>, param3: number, param4: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number): string;
					public get(param0: native.Array<number>): string;
					public put(param0: number, param1: number, param2: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public release(): void;
					public get(param0: native.Array<number>, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number, param2: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public buffer(): java.nio.Buffer;
					public get(param0: number, param1: number, param2: native.Array<string>, param3: number, param4: number): org.bytedeco.javacpp.indexer.CharIndexer;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class CharIndexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.CharIndexer>;
					public static VALUE_BYTES: number;
					public static create(param0: org.bytedeco.javacpp.CharPointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public static create(param0: org.bytedeco.javacpp.CharPointer): org.bytedeco.javacpp.indexer.CharIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public static create(param0: org.bytedeco.javacpp.CharPointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number): string;
					public put(param0: number, param1: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public static create(param0: native.Array<string>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: number, param3: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: native.Array<number>, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number, param2: number): string;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public static create(param0: java.nio.CharBuffer): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: native.Array<string>, param3: number, param4: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number): string;
					public get(param0: native.Array<number>): string;
					public put(param0: number, param1: number, param2: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: native.Array<number>, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number, param2: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public static create(param0: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public static create(param0: java.nio.CharBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number, param2: native.Array<string>, param3: number, param4: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public getDouble(param0: native.Array<number>): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class CharRawIndexer extends org.bytedeco.javacpp.indexer.CharIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.CharRawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public put(param0: number, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public put(param0: number, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public get(param0: number): string;
					public put(param0: number, param1: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: number, param3: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: native.Array<number>, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number, param2: number): string;
					public get(param0: number, param1: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: native.Array<string>, param3: number, param4: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number): string;
					public get(param0: native.Array<number>): string;
					public put(param0: number, param1: number, param2: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public constructor(param0: org.bytedeco.javacpp.CharPointer, param1: native.Array<number>, param2: native.Array<number>);
					public release(): void;
					public get(param0: native.Array<number>, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: number, param2: native.Array<string>): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: native.Array<number>, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public get(param0: number, param1: native.Array<string>, param2: number, param3: number): org.bytedeco.javacpp.indexer.CharIndexer;
					public put(param0: number, param1: number, param2: string): org.bytedeco.javacpp.indexer.CharIndexer;
					public constructor(param0: org.bytedeco.javacpp.CharPointer);
					public get(param0: number, param1: number, param2: native.Array<string>, param3: number, param4: number): org.bytedeco.javacpp.indexer.CharIndexer;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class DoubleArrayIndexer extends org.bytedeco.javacpp.indexer.DoubleIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.DoubleArrayIndexer>;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public array(): any;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public release(): void;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public constructor(param0: native.Array<number>);
					public array(): native.Array<number>;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class DoubleBufferIndexer extends org.bytedeco.javacpp.indexer.DoubleIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.DoubleBufferIndexer>;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public constructor(param0: java.nio.DoubleBuffer);
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public release(): void;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public buffer(): java.nio.Buffer;
					public constructor(param0: java.nio.DoubleBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class DoubleIndexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.DoubleIndexer>;
					public static VALUE_BYTES: number;
					public static create(param0: org.bytedeco.javacpp.DoublePointer): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public static create(param0: java.nio.DoubleBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public static create(param0: org.bytedeco.javacpp.DoublePointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public static create(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public static create(param0: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public static create(param0: java.nio.DoubleBuffer): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public static create(param0: org.bytedeco.javacpp.DoublePointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public getDouble(param0: native.Array<number>): number;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class DoubleRawIndexer extends org.bytedeco.javacpp.indexer.DoubleIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.DoubleRawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public constructor(param0: org.bytedeco.javacpp.DoublePointer);
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public release(): void;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.DoubleIndexer;
					public constructor(param0: org.bytedeco.javacpp.DoublePointer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class FloatArrayIndexer extends org.bytedeco.javacpp.indexer.FloatIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.FloatArrayIndexer>;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public array(): any;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public release(): void;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public constructor(param0: native.Array<number>);
					public array(): native.Array<number>;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class FloatBufferIndexer extends org.bytedeco.javacpp.indexer.FloatIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.FloatBufferIndexer>;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public constructor(param0: java.nio.FloatBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public constructor(param0: java.nio.FloatBuffer);
					public release(): void;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public buffer(): java.nio.Buffer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class FloatIndexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.FloatIndexer>;
					public static VALUE_BYTES: number;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public static create(param0: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public static create(param0: java.nio.FloatBuffer): org.bytedeco.javacpp.indexer.FloatIndexer;
					public static create(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public static create(param0: java.nio.FloatBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public static create(param0: org.bytedeco.javacpp.FloatPointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public static create(param0: org.bytedeco.javacpp.FloatPointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public getDouble(param0: native.Array<number>): number;
					public static create(param0: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class FloatRawIndexer extends org.bytedeco.javacpp.indexer.FloatIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.FloatRawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public constructor(param0: org.bytedeco.javacpp.FloatPointer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public release(): void;
					public constructor(param0: org.bytedeco.javacpp.FloatPointer);
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.FloatIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.FloatIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class HalfArrayIndexer extends org.bytedeco.javacpp.indexer.HalfIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.HalfArrayIndexer>;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public array(): any;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public release(): void;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public constructor(param0: native.Array<number>);
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public array(): native.Array<number>;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class HalfBufferIndexer extends org.bytedeco.javacpp.indexer.HalfIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.HalfBufferIndexer>;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public constructor(param0: java.nio.ShortBuffer);
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public constructor(param0: java.nio.ShortBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public release(): void;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public buffer(): java.nio.Buffer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class HalfIndexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.HalfIndexer>;
					public static VALUE_BYTES: number;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public static toFloat(param0: number): number;
					public static fromFloat(param0: number): number;
					public get(param0: native.Array<number>): number;
					public static create(param0: java.nio.ShortBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public static create(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.HalfIndexer;
					public static create(param0: org.bytedeco.javacpp.ShortPointer): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public static create(param0: java.nio.ShortBuffer): org.bytedeco.javacpp.indexer.HalfIndexer;
					public static create(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public static create(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public static create(param0: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public getDouble(param0: native.Array<number>): number;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class HalfRawIndexer extends org.bytedeco.javacpp.indexer.HalfIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.HalfRawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public constructor(param0: org.bytedeco.javacpp.ShortPointer);
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public release(): void;
					public constructor(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.HalfIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.HalfIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class Indexable {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.Indexable>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.indexer.Indexable interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						createIndexer(param0: boolean): org.bytedeco.javacpp.indexer.Indexer;
					});
					public constructor();
					public createIndexer(param0: boolean): org.bytedeco.javacpp.indexer.Indexer;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.Indexer>;
					public static ONE_STRIDE: native.Array<number>;
					public height(): number;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public array(): any;
					public strides(): native.Array<number>;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public release(): void;
					public channels(): number;
					public size(param0: number): number;
					public stride(param0: number): number;
					public index(param0: native.Array<number>): number;
					public sizes(): native.Array<number>;
					public toString(): string;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public width(): number;
					public static checkIndex(param0: number, param1: number): number;
					public cols(): number;
					public indexable(param0: org.bytedeco.javacpp.indexer.Indexable): org.bytedeco.javacpp.indexer.Indexer;
					public close(): void;
					public indexable(): org.bytedeco.javacpp.indexer.Indexable;
					public buffer(): java.nio.Buffer;
					public getDouble(param0: native.Array<number>): number;
					public rows(): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class IntArrayIndexer extends org.bytedeco.javacpp.indexer.IntIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.IntArrayIndexer>;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public array(): any;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number): number;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public release(): void;
					public constructor(param0: native.Array<number>);
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public array(): native.Array<number>;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class IntBufferIndexer extends org.bytedeco.javacpp.indexer.IntIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.IntBufferIndexer>;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number): number;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public constructor(param0: java.nio.IntBuffer);
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public release(): void;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public constructor(param0: java.nio.IntBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public buffer(): java.nio.Buffer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class IntIndexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.IntIndexer>;
					public static VALUE_BYTES: number;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public static create(param0: org.bytedeco.javacpp.IntPointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number): number;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public static create(param0: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public static create(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.indexer.IntIndexer;
					public static create(param0: org.bytedeco.javacpp.IntPointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public static create(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public static create(param0: java.nio.IntBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public getDouble(param0: native.Array<number>): number;
					public static create(param0: java.nio.IntBuffer): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class IntRawIndexer extends org.bytedeco.javacpp.indexer.IntIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.IntRawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number): number;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public constructor(param0: org.bytedeco.javacpp.IntPointer, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.IntIndexer;
					public constructor(param0: org.bytedeco.javacpp.IntPointer);
					public release(): void;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.IntIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class LongArrayIndexer extends org.bytedeco.javacpp.indexer.LongIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.LongArrayIndexer>;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public array(): any;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number): number;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public release(): void;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public constructor(param0: native.Array<number>);
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public array(): native.Array<number>;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class LongBufferIndexer extends org.bytedeco.javacpp.indexer.LongIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.LongBufferIndexer>;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number): number;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public release(): void;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public buffer(): java.nio.Buffer;
					public constructor(param0: java.nio.LongBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public constructor(param0: java.nio.LongBuffer);
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class LongIndexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.LongIndexer>;
					public static VALUE_BYTES: number;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number): number;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public static create(param0: org.bytedeco.javacpp.LongPointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.LongIndexer;
					public static create(param0: org.bytedeco.javacpp.LongPointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public static create(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public static create(param0: java.nio.LongBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public static create(param0: java.nio.LongBuffer): org.bytedeco.javacpp.indexer.LongIndexer;
					public static create(param0: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public static create(param0: org.bytedeco.javacpp.LongPointer): org.bytedeco.javacpp.indexer.LongIndexer;
					public getDouble(param0: native.Array<number>): number;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class LongRawIndexer extends org.bytedeco.javacpp.indexer.LongIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.LongRawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number): number;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public constructor(param0: org.bytedeco.javacpp.LongPointer, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public release(): void;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.LongIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.LongIndexer;
					public constructor(param0: org.bytedeco.javacpp.LongPointer);
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class Raw {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.Raw>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class ReverseUnsafeRaw extends org.bytedeco.javacpp.indexer.UnsafeRaw {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.ReverseUnsafeRaw>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class ShortArrayIndexer extends org.bytedeco.javacpp.indexer.ShortIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.ShortArrayIndexer>;
					public array(): any;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public release(): void;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public constructor(param0: native.Array<number>);
					public array(): native.Array<number>;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class ShortBufferIndexer extends org.bytedeco.javacpp.indexer.ShortIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.ShortBufferIndexer>;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public constructor(param0: java.nio.ShortBuffer);
					public constructor(param0: java.nio.ShortBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public release(): void;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public buffer(): java.nio.Buffer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class ShortIndexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.ShortIndexer>;
					public static VALUE_BYTES: number;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public static create(param0: org.bytedeco.javacpp.ShortPointer): org.bytedeco.javacpp.indexer.ShortIndexer;
					public static create(param0: java.nio.ShortBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public static create(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.ShortIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public static create(param0: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public static create(param0: java.nio.ShortBuffer): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public static create(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public getDouble(param0: native.Array<number>): number;
					public static create(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class ShortRawIndexer extends org.bytedeco.javacpp.indexer.ShortIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.ShortRawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public constructor(param0: org.bytedeco.javacpp.ShortPointer);
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public release(): void;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public constructor(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.ShortIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class UByteArrayIndexer extends org.bytedeco.javacpp.indexer.UByteIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.UByteArrayIndexer>;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public array(): any;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public release(): void;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public constructor(param0: native.Array<number>);
					public array(): native.Array<number>;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class UByteBufferIndexer extends org.bytedeco.javacpp.indexer.UByteIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.UByteBufferIndexer>;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public release(): void;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public constructor(param0: java.nio.ByteBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public buffer(): java.nio.Buffer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public constructor(param0: java.nio.ByteBuffer);
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class UByteIndexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.UByteIndexer>;
					public static VALUE_BYTES: number;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public static create(param0: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public static create(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public static create(param0: java.nio.ByteBuffer): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public static create(param0: java.nio.ByteBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public getDouble(param0: native.Array<number>): number;
					public static create(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class UByteRawIndexer extends org.bytedeco.javacpp.indexer.UByteIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.UByteRawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public get(param0: number): number;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public pointer(): org.bytedeco.javacpp.Pointer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public release(): void;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UByteIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UByteIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class UShortArrayIndexer extends org.bytedeco.javacpp.indexer.UShortIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.UShortArrayIndexer>;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public array(): any;
					public get(param0: number, param1: number, param2: number): number;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number): number;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public release(): void;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public constructor(param0: native.Array<number>);
					public array(): native.Array<number>;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class UShortBufferIndexer extends org.bytedeco.javacpp.indexer.UShortIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.UShortBufferIndexer>;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public constructor(param0: java.nio.ShortBuffer);
					public constructor(param0: java.nio.ShortBuffer, param1: native.Array<number>, param2: native.Array<number>);
					public get(param0: native.Array<number>): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number): number;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public release(): void;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public buffer(): java.nio.Buffer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export abstract class UShortIndexer extends org.bytedeco.javacpp.indexer.Indexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.UShortIndexer>;
					public static VALUE_BYTES: number;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public static create(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.Indexer;
					public get(param0: number, param1: number, param2: number): number;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public static create(param0: java.nio.ShortBuffer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public static create(param0: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: native.Array<number>): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number): number;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public static create(param0: org.bytedeco.javacpp.ShortPointer): org.bytedeco.javacpp.indexer.UShortIndexer;
					public static create(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public static create(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>, param3: boolean): org.bytedeco.javacpp.indexer.UShortIndexer;
					public static create(param0: java.nio.ShortBuffer): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public putDouble(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public getDouble(param0: native.Array<number>): number;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class UShortRawIndexer extends org.bytedeco.javacpp.indexer.UShortIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.UShortRawIndexer>;
					public static RAW: org.bytedeco.javacpp.indexer.Raw;
					public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: number, param2: number): number;
					public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public constructor(param0: org.bytedeco.javacpp.ShortPointer);
					public get(param0: native.Array<number>): number;
					public get(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number): number;
					public pointer(): org.bytedeco.javacpp.Pointer;
					public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public release(): void;
					public constructor(param0: org.bytedeco.javacpp.ShortPointer, param1: native.Array<number>, param2: native.Array<number>);
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): org.bytedeco.javacpp.indexer.UShortIndexer;
					public get(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module indexer {
				export class UnsafeRaw extends org.bytedeco.javacpp.indexer.Raw {
					public static class: java.lang.Class<org.bytedeco.javacpp.indexer.UnsafeRaw>;
					// public static UNSAFE: sun.misc.Unsafe;
					public static arrayOffset: number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class AdapterInformation {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.AdapterInformation>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Attribute {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Attribute>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class BuildEnabled {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.BuildEnabled>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.tools.BuildEnabled interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						init(param0: org.bytedeco.javacpp.tools.Logger, param1: java.util.Properties, param2: string): void;
					});
					public constructor();
					public init(param0: org.bytedeco.javacpp.tools.Logger, param1: java.util.Properties, param2: string): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class BuildMojo {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.BuildMojo>;
					public constructor();
					public execute(): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Builder {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Builder>;
					public copyLibs(param0: boolean): org.bytedeco.javacpp.tools.Builder;
					public deleteJniFiles(param0: boolean): org.bytedeco.javacpp.tools.Builder;
					public property(param0: string): org.bytedeco.javacpp.tools.Builder;
					public propertyFile(param0: java.io.File): org.bytedeco.javacpp.tools.Builder;
					public encoding(param0: string): org.bytedeco.javacpp.tools.Builder;
					public constructor(param0: org.bytedeco.javacpp.tools.Logger);
					public outputDirectory(param0: java.io.File): org.bytedeco.javacpp.tools.Builder;
					public static main(param0: native.Array<string>): void;
					public propertyFile(param0: string): org.bytedeco.javacpp.tools.Builder;
					public classesOrPackages(param0: native.Array<string>): org.bytedeco.javacpp.tools.Builder;
					public workingDirectory(param0: java.io.File): org.bytedeco.javacpp.tools.Builder;
					public classPaths(param0: native.Array<string>): org.bytedeco.javacpp.tools.Builder;
					public constructor();
					public static printHelp(): void;
					public buildCommand(param0: native.Array<string>): org.bytedeco.javacpp.tools.Builder;
					public workingDirectory(param0: string): org.bytedeco.javacpp.tools.Builder;
					public environmentVariables(param0: java.util.Map<string,string>): org.bytedeco.javacpp.tools.Builder;
					public compilerOptions(param0: native.Array<string>): org.bytedeco.javacpp.tools.Builder;
					public compile(param0: boolean): org.bytedeco.javacpp.tools.Builder;
					public classPaths(param0: string): org.bytedeco.javacpp.tools.Builder;
					public properties(param0: java.util.Properties): org.bytedeco.javacpp.tools.Builder;
					public jarPrefix(param0: string): org.bytedeco.javacpp.tools.Builder;
					public generate(param0: boolean): org.bytedeco.javacpp.tools.Builder;
					public outputName(param0: string): org.bytedeco.javacpp.tools.Builder;
					public property(param0: string, param1: string): org.bytedeco.javacpp.tools.Builder;
					public copyResources(param0: boolean): org.bytedeco.javacpp.tools.Builder;
					public header(param0: boolean): org.bytedeco.javacpp.tools.Builder;
					public properties(param0: string): org.bytedeco.javacpp.tools.Builder;
					public outputDirectory(param0: string): org.bytedeco.javacpp.tools.Builder;
					public build(): native.Array<java.io.File>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class ClassScanner {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.ClassScanner>;
					public addClass(param0: java.lang.Class<any>): void;
					public addMatchingFile(param0: string, param1: string, param2: boolean): void;
					public addPackage(param0: string, param1: boolean): void;
					public addMatchingDir(param0: string, param1: java.io.File, param2: string, param3: boolean): void;
					public getClassLoader(): org.bytedeco.javacpp.tools.UserClassLoader;
					public addClass(param0: string): void;
					public getClasses(): java.util.Collection<java.lang.Class<any>>;
					public addClassOrPackage(param0: string): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Context {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Context>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Declaration {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Declaration>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class DeclarationList extends java.util.ArrayList<org.bytedeco.javacpp.tools.Declaration> {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.DeclarationList>;
					public add(param0: org.bytedeco.javacpp.tools.Declaration): boolean;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Declarator {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Declarator>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class EncodingFileWriter {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.EncodingFileWriter>;
					public append(param0: string): java.io.Writer;
					public constructor(param0: java.io.File, param1: string, param2: string);
					public constructor(param0: java.io.File, param1: string);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Generator {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Generator>;
					public generate(param0: string, param1: string, param2: string, param3: string, param4: string, param5: native.Array<java.lang.Class<any>>): boolean;
					public constructor(param0: org.bytedeco.javacpp.tools.Logger, param1: java.util.Properties);
					public constructor(param0: org.bytedeco.javacpp.tools.Logger, param1: java.util.Properties, param2: string);
				}
				export module Generator {
					export class ByteEnum {
						public static class: java.lang.Class<org.bytedeco.javacpp.tools.Generator.ByteEnum>;
						public static BYTE: org.bytedeco.javacpp.tools.Generator.ByteEnum;
						public static valueOf(param0: string): org.bytedeco.javacpp.tools.Generator.ByteEnum;
						public static values(): native.Array<org.bytedeco.javacpp.tools.Generator.ByteEnum>;
					}
					export class IntEnum {
						public static class: java.lang.Class<org.bytedeco.javacpp.tools.Generator.IntEnum>;
						public static INT: org.bytedeco.javacpp.tools.Generator.IntEnum;
						public static values(): native.Array<org.bytedeco.javacpp.tools.Generator.IntEnum>;
						public static valueOf(param0: string): org.bytedeco.javacpp.tools.Generator.IntEnum;
					}
					export class LongEnum {
						public static class: java.lang.Class<org.bytedeco.javacpp.tools.Generator.LongEnum>;
						public static LONG: org.bytedeco.javacpp.tools.Generator.LongEnum;
						public static valueOf(param0: string): org.bytedeco.javacpp.tools.Generator.LongEnum;
						public static values(): native.Array<org.bytedeco.javacpp.tools.Generator.LongEnum>;
					}
					export class ShortEnum {
						public static class: java.lang.Class<org.bytedeco.javacpp.tools.Generator.ShortEnum>;
						public static SHORT: org.bytedeco.javacpp.tools.Generator.ShortEnum;
						public static valueOf(param0: string): org.bytedeco.javacpp.tools.Generator.ShortEnum;
						public static values(): native.Array<org.bytedeco.javacpp.tools.Generator.ShortEnum>;
					}
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class IndexedSet<E>  extends java.util.LinkedHashMap<any,java.lang.Integer>  {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.IndexedSet<any>>;
					public iterator(): java.util.Iterator<any>;
					public index(param0: any): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Info {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Info>;
					public skipDefaults(): org.bytedeco.javacpp.tools.Info;
					public skip(): org.bytedeco.javacpp.tools.Info;
					public purify(): org.bytedeco.javacpp.tools.Info;
					public javaNames(param0: native.Array<string>): org.bytedeco.javacpp.tools.Info;
					public flatten(param0: boolean): org.bytedeco.javacpp.tools.Info;
					public virtualize(param0: boolean): org.bytedeco.javacpp.tools.Info;
					public define(param0: boolean): org.bytedeco.javacpp.tools.Info;
					public constructor(param0: native.Array<string>);
					public base(param0: string): org.bytedeco.javacpp.tools.Info;
					public cppNames(param0: native.Array<string>): org.bytedeco.javacpp.tools.Info;
					public valueTypes(param0: native.Array<string>): org.bytedeco.javacpp.tools.Info;
					public constructor();
					public cast(): org.bytedeco.javacpp.tools.Info;
					public translate(): org.bytedeco.javacpp.tools.Info;
					public cppText(param0: string): org.bytedeco.javacpp.tools.Info;
					public constructor(param0: org.bytedeco.javacpp.tools.Info);
					public cppTypes(param0: native.Array<string>): org.bytedeco.javacpp.tools.Info;
					public purify(param0: boolean): org.bytedeco.javacpp.tools.Info;
					public skip(param0: boolean): org.bytedeco.javacpp.tools.Info;
					public define(): org.bytedeco.javacpp.tools.Info;
					public cast(param0: boolean): org.bytedeco.javacpp.tools.Info;
					public enumerate(param0: boolean): org.bytedeco.javacpp.tools.Info;
					public pointerTypes(param0: native.Array<string>): org.bytedeco.javacpp.tools.Info;
					public virtualize(): org.bytedeco.javacpp.tools.Info;
					public linePatterns(param0: native.Array<string>): org.bytedeco.javacpp.tools.Info;
					public translate(param0: boolean): org.bytedeco.javacpp.tools.Info;
					public enumerate(): org.bytedeco.javacpp.tools.Info;
					public javaText(param0: string): org.bytedeco.javacpp.tools.Info;
					public skipDefaults(param0: boolean): org.bytedeco.javacpp.tools.Info;
					public flatten(): org.bytedeco.javacpp.tools.Info;
					public annotations(param0: native.Array<string>): org.bytedeco.javacpp.tools.Info;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class InfoMap extends java.util.HashMap<string,java.util.List<org.bytedeco.javacpp.tools.Info>> {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.InfoMap>;
					public containsKey(param0: any): boolean;
					public put(param0: number, param1: org.bytedeco.javacpp.tools.Info): org.bytedeco.javacpp.tools.InfoMap;
					public constructor();
					public get(param0: number, param1: string, param2: boolean): org.bytedeco.javacpp.tools.Info;
					public getFirst(param0: string): org.bytedeco.javacpp.tools.Info;
					public get(param0: string): java.util.List<org.bytedeco.javacpp.tools.Info>;
					public put(param0: org.bytedeco.javacpp.tools.Info): org.bytedeco.javacpp.tools.InfoMap;
					public constructor(param0: org.bytedeco.javacpp.tools.InfoMap);
					public getFirst(param0: string, param1: boolean): org.bytedeco.javacpp.tools.Info;
					public putFirst(param0: org.bytedeco.javacpp.tools.Info): org.bytedeco.javacpp.tools.InfoMap;
					public get(param0: string, param1: boolean): java.util.List<org.bytedeco.javacpp.tools.Info>;
					public get(param0: number, param1: string): org.bytedeco.javacpp.tools.Info;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class InfoMapper {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.InfoMapper>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacpp.tools.InfoMapper interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
					});
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Logger {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Logger>;
					public info(param0: string): void;
					public warn(param0: string): void;
					public isDebugEnabled(): boolean;
					public static create(param0: java.lang.Class<any>): org.bytedeco.javacpp.tools.Logger;
					public constructor();
					public isInfoEnabled(): boolean;
					public isWarnEnabled(): boolean;
					public isErrorEnabled(): boolean;
					public debug(param0: string): void;
					public error(param0: string): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class MethodInformation {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.MethodInformation>;
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Parameters {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Parameters>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class ParseMojo extends org.bytedeco.javacpp.tools.BuildMojo {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.ParseMojo>;
					public constructor();
					public execute(): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Parser {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Parser>;
					public parse(param0: java.io.File, param1: native.Array<string>, param2: java.lang.Class<any>): java.io.File;
					public parse(param0: string, param1: native.Array<string>, param2: java.lang.Class<any>): java.io.File;
					public constructor(param0: org.bytedeco.javacpp.tools.Logger, param1: java.util.Properties, param2: string, param3: string);
					public constructor(param0: org.bytedeco.javacpp.tools.Logger, param1: java.util.Properties);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class ParserException {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.ParserException>;
					public constructor(param0: string, param1: java.lang.Throwable);
					public constructor(param0: string);
					public constructor(param0: java.lang.Throwable);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Slf4jLogger extends org.bytedeco.javacpp.tools.Logger {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Slf4jLogger>;
					public info(param0: string): void;
					public warn(param0: string): void;
					public isDebugEnabled(): boolean;
					public constructor();
					public isInfoEnabled(): boolean;
					public isWarnEnabled(): boolean;
					public isErrorEnabled(): boolean;
					public constructor(param0: java.lang.Class<any>);
					public debug(param0: string): void;
					public error(param0: string): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class TemplateMap extends java.util.LinkedHashMap<string,org.bytedeco.javacpp.tools.Type> {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.TemplateMap>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Token extends java.lang.Comparable<org.bytedeco.javacpp.tools.Token> {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Token>;
					public equals(param0: any): boolean;
					public toString(): string;
					public compareTo(param0: org.bytedeco.javacpp.tools.Token): number;
					public hashCode(): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class TokenIndexer {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.TokenIndexer>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Tokenizer {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Tokenizer>;
					public close(): void;
					public nextToken(): org.bytedeco.javacpp.tools.Token;
					public filterLines(param0: native.Array<string>, param1: boolean): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class Type {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.Type>;
					public equals(param0: any): boolean;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module tools {
				export class UserClassLoader {
					public static class: java.lang.Class<org.bytedeco.javacpp.tools.UserClassLoader>;
					public addPaths(param0: native.Array<string>): void;
					public constructor();
					public getPaths(): native.Array<string>;
					public findClass(param0: string): java.lang.Class<any>;
					public constructor(param0: java.lang.ClassLoader);
				}
			}
		}
	}
}

//Generics information:
//org.bytedeco.javacpp.PointerPointer<any>:1
//org.bytedeco.javacpp.tools.IndexedSet:1



declare module org {
	export module bytedeco {
		export module javacpp {
			export class cvkernels {
				public static class: java.lang.Class<org.bytedeco.javacpp.cvkernels>;
				public static multiWarpColorTransform8U(param0: org.bytedeco.javacpp.cvkernels.KernelData, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvRect, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public constructor();
				public static multiWarpColorTransform32F(param0: org.bytedeco.javacpp.cvkernels.KernelData, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvRect, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
			}
			export module cvkernels {
				export class KernelData {
					public static class: java.lang.Class<org.bytedeco.javacpp.cvkernels.KernelData>;
					public srcImg(): org.bytedeco.javacpp.opencv_core.IplImage;
					public srcDotImg(): org.bytedeco.javacpp.opencv_core.IplImage;
					public dstCountOutlier(param0: number): org.bytedeco.javacpp.cvkernels.KernelData;
					public H1(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.cvkernels.KernelData;
					public dstCount(): number;
					public srcDotImg(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.cvkernels.KernelData;
					public mask(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.cvkernels.KernelData;
					public zeroThreshold(): number;
					public transImg(): org.bytedeco.javacpp.opencv_core.IplImage;
					public srcImg(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.cvkernels.KernelData;
					public outlierThreshold(): number;
					public outlierThreshold(param0: number): org.bytedeco.javacpp.cvkernels.KernelData;
					public mask(): org.bytedeco.javacpp.opencv_core.IplImage;
					public dstCount(param0: number): org.bytedeco.javacpp.cvkernels.KernelData;
					public srcImg2(): org.bytedeco.javacpp.opencv_core.IplImage;
					public constructor();
					public srcDstDot(): number;
					public H2(): org.bytedeco.javacpp.opencv_core.CvMat;
					public transImg(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.cvkernels.KernelData;
					public constructor(param0: number);
					public H2(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.cvkernels.KernelData;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public dstImg(): org.bytedeco.javacpp.opencv_core.IplImage;
					public dstCountZero(): number;
					public subImg(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.cvkernels.KernelData;
					public X(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.cvkernels.KernelData;
					public dstCountOutlier(): number;
					public H1(): org.bytedeco.javacpp.opencv_core.CvMat;
					public dstCountZero(param0: number): org.bytedeco.javacpp.cvkernels.KernelData;
					public X(): org.bytedeco.javacpp.opencv_core.CvMat;
					public dstImg(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.cvkernels.KernelData;
					public subImg(): org.bytedeco.javacpp.opencv_core.IplImage;
					public position(param0: number): org.bytedeco.javacpp.cvkernels.KernelData;
					public dstDstDot(): java.nio.DoubleBuffer;
					public srcImg2(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.cvkernels.KernelData;
					public zeroThreshold(param0: number): org.bytedeco.javacpp.cvkernels.KernelData;
					public dstDstDot(param0: java.nio.DoubleBuffer): org.bytedeco.javacpp.cvkernels.KernelData;
					public srcDstDot(param0: number): org.bytedeco.javacpp.cvkernels.KernelData;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module helper {
				export class opencv_calib3d extends org.bytedeco.javacpp.presets.opencv_calib3d {
					public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_calib3d>;
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module helper {
				export class opencv_core extends org.bytedeco.javacpp.presets.opencv_core {
					public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core>;
					public static CV_RGB(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvScalar;
					public static cvNorm(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
					public static RGB(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.Scalar;
					public constructor();
					public static cvCalcCovarMatrix(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number): void;
					public static cvMixChannels(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param1: number, param2: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param3: number, param4: native.Array<number>, param5: number): void;
					public static cvInitNArrayIterator(param0: number, param1: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.CvMatND, param4: org.bytedeco.javacpp.opencv_core.CvNArrayIterator, param5: number): number;
				}
				export module opencv_core {
					export abstract class AbstractArray {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractArray>;
						public arrayHeight(): number;
						public arrayROI(): org.bytedeco.javacpp.opencv_core.IplROI;
						public arrayWidth(): number;
						public arrayOrigin(): number;
						public highValue(): number;
						public arrayChannels(): number;
						public cvSize(): org.bytedeco.javacpp.opencv_core.CvSize;
						public getShortBuffer(): java.nio.ShortBuffer;
						public getDoubleBuffer(param0: number): java.nio.DoubleBuffer;
						public createIndexer(): org.bytedeco.javacpp.indexer.Indexer;
						public getByteBuffer(): java.nio.ByteBuffer;
						public getIntBuffer(): java.nio.IntBuffer;
						public arrayOrigin(param0: number): void;
						public arrayDepth(): number;
						public arraySize(): number;
						public createBuffer(): java.nio.Buffer;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public createIndexer(param0: boolean): org.bytedeco.javacpp.indexer.Indexer;
						public arrayStep(): number;
						public getByteBuffer(param0: number): java.nio.ByteBuffer;
						public getFloatBuffer(): java.nio.FloatBuffer;
						public createBuffer(param0: number): java.nio.Buffer;
						public toString(): string;
						public getShortBuffer(param0: number): java.nio.ShortBuffer;
						public arrayData(): org.bytedeco.javacpp.BytePointer;
						public getIntBuffer(param0: number): java.nio.IntBuffer;
						public getFloatBuffer(param0: number): java.nio.FloatBuffer;
						public getDoubleBuffer(): java.nio.DoubleBuffer;
					}
					export abstract class AbstractCvBox2D {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvBox2D>;
						public size(): org.bytedeco.javacpp.opencv_core.CvSize2D32f;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public size(param0: org.bytedeco.javacpp.opencv_core.CvSize2D32f): org.bytedeco.javacpp.opencv_core.CvBox2D;
						public angle(param0: number): org.bytedeco.javacpp.opencv_core.CvBox2D;
						public center(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f): org.bytedeco.javacpp.opencv_core.CvBox2D;
						public angle(): number;
						public center(): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
						public toString(): string;
					}
					export abstract class AbstractCvFont {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvFont>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
					}
					export abstract class AbstractCvGraph extends org.bytedeco.javacpp.opencv_core.CvSet {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvGraph>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public constructor(param0: number);
						public static create(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSet;
						public static create(param0: number, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvGraph;
						public static create(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
					}
					export abstract class AbstractCvGraphScanner {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvGraphScanner>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public release(): void;
						public static create(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param2: number): org.bytedeco.javacpp.opencv_core.CvGraphScanner;
					}
					export module AbstractCvGraphScanner {
						export class ReleaseDeallocator extends org.bytedeco.javacpp.opencv_core.CvGraphScanner {
							public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvGraphScanner.ReleaseDeallocator>;
							public deallocate(): void;
						}
					}
					export abstract class AbstractCvMat extends org.bytedeco.javacpp.helper.opencv_core.CvArr {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvMat>;
						public pointer: org.bytedeco.javacpp.BytePointer;
						public empty(): boolean;
						public arrayHeight(): number;
						public static createThreadLocal(param0: number, param1: number): java.lang.ThreadLocal<org.bytedeco.javacpp.opencv_core.CvMat>;
						public depth(): number;
						public toString(param0: number): string;
						public arrayROI(): org.bytedeco.javacpp.opencv_core.IplROI;
						public static createThreadLocal(param0: number, param1: number, param2: number): java.lang.ThreadLocal<org.bytedeco.javacpp.opencv_core.CvMat>;
						public elemSize(): number;
						public arrayWidth(): number;
						public static create(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public static create(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public static createHeader(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public arrayChannels(): number;
						public getShortBuffer(): java.nio.ShortBuffer;
						public step(): number;
						public type(): number;
						public getIntBuffer(): java.nio.IntBuffer;
						public type(param0: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public put(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public size(): number;
						public static createHeaderThreadLocal(param0: number, param1: number, param2: number, param3: number): java.lang.ThreadLocal<org.bytedeco.javacpp.opencv_core.CvMat>;
						public length(): number;
						public get(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public nChannels(): number;
						public put(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvMat;
						public clone(): org.bytedeco.javacpp.opencv_core.CvMat;
						public getByteBuffer(param0: number): java.nio.ByteBuffer;
						public static create(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public toString(): string;
						public rows(): number;
						public getShortBuffer(param0: number): java.nio.ShortBuffer;
						public static createHeaderThreadLocal(param0: number, param1: number): java.lang.ThreadLocal<org.bytedeco.javacpp.opencv_core.CvMat>;
						public isContinuous(): boolean;
						public total(): number;
						public arrayData(): org.bytedeco.javacpp.BytePointer;
						public getIntBuffer(param0: number): java.nio.IntBuffer;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
						public get(param0: number, param1: number, param2: number): number;
						public getDoubleBuffer(): java.nio.DoubleBuffer;
						public reset(): void;
						public static create(param0: number, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.CvMat;
						public type(param0: number, param1: number): void;
						public arrayOrigin(): number;
						public data_fl(): org.bytedeco.javacpp.FloatPointer;
						public get(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvMat;
						public data_i(): org.bytedeco.javacpp.IntPointer;
						public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public data_db(): org.bytedeco.javacpp.DoublePointer;
						public getDoubleBuffer(param0: number): java.nio.DoubleBuffer;
						public getByteBuffer(): java.nio.ByteBuffer;
						public put(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public get(): native.Array<number>;
						public arrayOrigin(param0: number): void;
						public static createThreadLocal(param0: number, param1: number, param2: number, param3: number): java.lang.ThreadLocal<org.bytedeco.javacpp.opencv_core.CvMat>;
						public arrayDepth(): number;
						public arraySize(): number;
						public static createHeaderThreadLocal(param0: number, param1: number, param2: number): java.lang.ThreadLocal<org.bytedeco.javacpp.opencv_core.CvMat>;
						public static createHeader(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvMat;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public put(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: number, param5: number, param6: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public data_ptr(): org.bytedeco.javacpp.BytePointer;
						public arrayStep(): number;
						public asIplImage(): org.bytedeco.javacpp.opencv_core.IplImage;
						public data_s(): org.bytedeco.javacpp.ShortPointer;
						public static createHeader(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvMat;
						public release(): void;
						public getFloatBuffer(): java.nio.FloatBuffer;
						public channels(): number;
						public get(param0: number, param1: number): number;
						public matType(): number;
						public get(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvMat;
						public get(param0: number): number;
						public cols(): number;
						public getFloatBuffer(param0: number): java.nio.FloatBuffer;
					}
					export module AbstractCvMat {
						export class ReleaseDeallocator extends org.bytedeco.javacpp.opencv_core.CvMat {
							public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvMat.ReleaseDeallocator>;
							public deallocate(): void;
						}
					}
					export abstract class AbstractCvMatND extends org.bytedeco.javacpp.helper.opencv_core.CvArr {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvMatND>;
						public clone(): org.bytedeco.javacpp.opencv_core.CvMatND;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public static create(param0: number, param1: native.Array<number>, param2: number): org.bytedeco.javacpp.opencv_core.CvMatND;
						public release(): void;
					}
					export module AbstractCvMatND {
						export class ReleaseDeallocator extends org.bytedeco.javacpp.opencv_core.CvMatND {
							public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvMatND.ReleaseDeallocator>;
							public deallocate(): void;
						}
					}
					export abstract class AbstractCvMemStorage {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvMemStorage>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public static create(param0: number): org.bytedeco.javacpp.opencv_core.CvMemStorage;
						public release(): void;
						public static create(): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					}
					export module AbstractCvMemStorage {
						export class ReleaseDeallocator extends org.bytedeco.javacpp.opencv_core.CvMemStorage {
							public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvMemStorage.ReleaseDeallocator>;
							public deallocate(): void;
						}
					}
					export abstract class AbstractCvPoint {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvPoint>;
						public static ZERO: org.bytedeco.javacpp.opencv_core.CvPoint;
						public put(param0: number, param1: native.Array<number>, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvPoint;
						public get(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvPoint;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public put(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvPoint;
						public y(): number;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_core.CvPoint;
						public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.CvPoint2D32f): org.bytedeco.javacpp.opencv_core.CvPoint;
						public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.CvPoint2D64f): org.bytedeco.javacpp.opencv_core.CvPoint;
						public put(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint;
						public toString(): string;
						public get(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint;
						public x(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint;
						public x(): number;
						public y(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint;
						public put(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvPoint;
						public put(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvPoint;
					}
					export abstract class AbstractCvPoint2D32f {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvPoint2D32f>;
						public y(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
						public x(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public get(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
						public y(): number;
						public put(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
						public put(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
						public put(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D64f): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
						public toString(): string;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
						public x(): number;
						public get(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
					}
					export abstract class AbstractCvPoint2D64f {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvPoint2D64f>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public y(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
						public get(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
						public y(): number;
						public put(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
						public put(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
						public toString(): string;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D64f): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
						public put(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
						public x(): number;
						public get(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
						public x(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
					}
					export abstract class AbstractCvPoint3D32f {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvPoint3D32f>;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public put(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
						public put(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
						public y(): number;
						public x(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
						public z(): number;
						public get(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
						public toString(): string;
						public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
						public get(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
						public z(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
						public x(): number;
						public y(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D64f): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
					}
					export abstract class AbstractCvPoint3D64f {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvPoint3D64f>;
						public put(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
						public get(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public y(): number;
						public y(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
						public put(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
						public x(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
						public z(): number;
						public toString(): string;
						public get(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
						public x(): number;
						public z(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D64f): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
						public put(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
						public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
					}
					export abstract class AbstractCvRect {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvRect>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public height(): number;
						public y(): number;
						public x(): number;
						public width(): number;
						public toString(): string;
					}
					export abstract class AbstractCvScalar {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvScalar>;
						public static ZERO: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static ONE: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static ONEHALF: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static ALPHA1: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static ALPHA255: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static WHITE: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static GRAY: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static BLACK: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static RED: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static GREEN: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static BLUE: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static CYAN: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static MAGENTA: org.bytedeco.javacpp.opencv_core.CvScalar;
						public static YELLOW: org.bytedeco.javacpp.opencv_core.CvScalar;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public scale(param0: number): void;
						public val(param0: number): number;
						public val(): org.bytedeco.javacpp.DoublePointer;
						public getDoublePointerVal(): org.bytedeco.javacpp.DoublePointer;
						public red(): number;
						public val(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvScalar;
						public toString(): string;
						public getVal(param0: number): number;
						public magnitude(): number;
						public red(param0: number): org.bytedeco.javacpp.opencv_core.CvScalar;
						public blue(param0: number): org.bytedeco.javacpp.opencv_core.CvScalar;
						public green(param0: number): org.bytedeco.javacpp.opencv_core.CvScalar;
						public green(): number;
						public setVal(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvScalar;
						public blue(): number;
						public getLongPointerVal(): org.bytedeco.javacpp.LongPointer;
					}
					export abstract class AbstractCvSeq extends org.bytedeco.javacpp.helper.opencv_core.CvArr {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvSeq>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public static create(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
					}
					export abstract class AbstractCvSet extends org.bytedeco.javacpp.opencv_core.CvSeq {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvSet>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public constructor(param0: number);
						public static create(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSet;
						public static create(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
					}
					export abstract class AbstractCvSize {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvSize>;
						public static ZERO: org.bytedeco.javacpp.opencv_core.CvSize;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public height(): number;
						public width(): number;
						public width(param0: number): org.bytedeco.javacpp.opencv_core.CvSize;
						public height(param0: number): org.bytedeco.javacpp.opencv_core.CvSize;
						public toString(): string;
					}
					export abstract class AbstractCvSize2D32f {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvSize2D32f>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public height(): number;
						public height(param0: number): org.bytedeco.javacpp.opencv_core.CvSize2D32f;
						public width(param0: number): org.bytedeco.javacpp.opencv_core.CvSize2D32f;
						public width(): number;
						public toString(): string;
					}
					export abstract class AbstractCvSparseMat extends org.bytedeco.javacpp.helper.opencv_core.CvArr {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvSparseMat>;
						public static create(param0: number, param1: native.Array<number>, param2: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public clone(): org.bytedeco.javacpp.opencv_core.CvSparseMat;
						public release(): void;
					}
					export module AbstractCvSparseMat {
						export class ReleaseDeallocator extends org.bytedeco.javacpp.opencv_core.CvSparseMat {
							public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractCvSparseMat.ReleaseDeallocator>;
							public deallocate(): void;
						}
					}
					export abstract class AbstractIplImage extends org.bytedeco.javacpp.helper.opencv_core.CvArr {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractIplImage>;
						public pointer: org.bytedeco.javacpp.BytePointer;
						public origin(): number;
						public arrayHeight(): number;
						public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.IplImage;
						public height(): number;
						public depth(): number;
						public static createCompatible(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.opencv_core.IplImage;
						public arrayROI(): org.bytedeco.javacpp.opencv_core.IplROI;
						public static create(param0: org.bytedeco.javacpp.opencv_core.CvSize, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.IplImage;
						public widthStep(): number;
						public static create(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.IplImage;
						public arrayWidth(): number;
						public width(): number;
						public arrayOrigin(): number;
						public static create(param0: org.bytedeco.javacpp.opencv_core.CvSize, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.IplImage;
						public imageData(): org.bytedeco.javacpp.BytePointer;
						public arrayChannels(): number;
						public static createHeader(param0: org.bytedeco.javacpp.opencv_core.CvSize, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.IplImage;
						public static createHeader(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.IplImage;
						public clone(): org.bytedeco.javacpp.opencv_core.IplImage;
						public arrayOrigin(param0: number): void;
						public static createIfNotCompatible(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.opencv_core.IplImage;
						public arrayDepth(): number;
						public arraySize(): number;
						public origin(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
						public static create(param0: number, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.IplImage;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public roi(): org.bytedeco.javacpp.opencv_core.IplROI;
						public arrayStep(): number;
						public static createHeader(param0: org.bytedeco.javacpp.opencv_core.CvSize, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.IplImage;
						public nChannels(): number;
						public release(): void;
						public asCvMat(): org.bytedeco.javacpp.opencv_core.CvMat;
						public static createHeader(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.IplImage;
						public arrayData(): org.bytedeco.javacpp.BytePointer;
						public imageSize(): number;
					}
					export module AbstractIplImage {
						export class HeaderReleaseDeallocator extends org.bytedeco.javacpp.opencv_core.IplImage {
							public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractIplImage.HeaderReleaseDeallocator>;
							public deallocate(): void;
						}
						export class ReleaseDeallocator extends org.bytedeco.javacpp.opencv_core.IplImage {
							public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractIplImage.ReleaseDeallocator>;
							public deallocate(): void;
						}
					}
					export abstract class AbstractMat extends org.bytedeco.javacpp.helper.opencv_core.AbstractArray {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractMat>;
						public static EMPTY: org.bytedeco.javacpp.opencv_core.Mat;
						public step(param0: number): number;
						public arrayHeight(): number;
						public depth(): number;
						public arrayROI(): org.bytedeco.javacpp.opencv_core.IplROI;
						public arrayWidth(): number;
						public arrayOrigin(): number;
						public arrayChannels(): number;
						public createIndexer(): org.bytedeco.javacpp.indexer.Indexer;
						public type(): number;
						public create(param0: number, param1: number, param2: number): void;
						public arrayOrigin(param0: number): void;
						public arrayDepth(): number;
						public arraySize(): number;
						public elemSize1(): number;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public createIndexer(param0: boolean): org.bytedeco.javacpp.indexer.Indexer;
						public arrayStep(): number;
						public data(): org.bytedeco.javacpp.BytePointer;
						public size(param0: number): number;
						public dims(): number;
						public release(): void;
						public rows(): number;
						public channels(): number;
						public arrayData(): org.bytedeco.javacpp.BytePointer;
						public cols(): number;
					}
					export abstract class AbstractScalar {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.AbstractScalar>;
						public static ZERO: org.bytedeco.javacpp.opencv_core.Scalar;
						public static ONE: org.bytedeco.javacpp.opencv_core.Scalar;
						public static ONEHALF: org.bytedeco.javacpp.opencv_core.Scalar;
						public static ALPHA1: org.bytedeco.javacpp.opencv_core.Scalar;
						public static ALPHA255: org.bytedeco.javacpp.opencv_core.Scalar;
						public static WHITE: org.bytedeco.javacpp.opencv_core.Scalar;
						public static GRAY: org.bytedeco.javacpp.opencv_core.Scalar;
						public static BLACK: org.bytedeco.javacpp.opencv_core.Scalar;
						public static RED: org.bytedeco.javacpp.opencv_core.Scalar;
						public static GREEN: org.bytedeco.javacpp.opencv_core.Scalar;
						public static BLUE: org.bytedeco.javacpp.opencv_core.Scalar;
						public static CYAN: org.bytedeco.javacpp.opencv_core.Scalar;
						public static MAGENTA: org.bytedeco.javacpp.opencv_core.Scalar;
						public static YELLOW: org.bytedeco.javacpp.opencv_core.Scalar;
						public magnitude(): number;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public scale(param0: number): void;
						public green(): number;
						public green(param0: number): org.bytedeco.javacpp.opencv_core.Scalar;
						public blue(param0: number): org.bytedeco.javacpp.opencv_core.Scalar;
						public red(): number;
						public blue(): number;
						public toString(): string;
						public red(param0: number): org.bytedeco.javacpp.opencv_core.Scalar;
					}
					export class CvArr extends org.bytedeco.javacpp.helper.opencv_core.AbstractArray {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.CvArr>;
						public arrayHeight(): number;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public arrayData(): org.bytedeco.javacpp.BytePointer;
						public arrayROI(): org.bytedeco.javacpp.opencv_core.IplROI;
						public arrayStep(): number;
						public arrayOrigin(param0: number): void;
						public arrayDepth(): number;
						public arrayWidth(): number;
						public arraySize(): number;
						public arrayOrigin(): number;
						public arrayChannels(): number;
					}
					export class CvArrArray extends org.bytedeco.javacpp.PointerPointer<org.bytedeco.javacpp.helper.opencv_core.CvArr> {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.CvArrArray>;
						// public position(param0: number): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						// public put(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
						public constructor(param0: number);
						public constructor(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>);
						// public get(): org.bytedeco.javacpp.helper.opencv_core.CvArr;
						// public put(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
					}
					export class CvMatArray extends org.bytedeco.javacpp.helper.opencv_core.CvArrArray {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.CvMatArray>;
						// public position(param0: number): org.bytedeco.javacpp.helper.opencv_core.CvMatArray;
						// public position(param0: number): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
						// public get(): org.bytedeco.javacpp.opencv_core.CvMat;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						// public put(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
						public constructor(param0: number);
						public constructor(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>);
						// public put(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>): org.bytedeco.javacpp.helper.opencv_core.CvMatArray;
						// public get(): org.bytedeco.javacpp.helper.opencv_core.CvArr;
						public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.CvMat>);
						// public put(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.helper.opencv_core.CvMatArray;
						// public put(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
					}
					export class CvMatNDArray extends org.bytedeco.javacpp.helper.opencv_core.CvArrArray {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.CvMatNDArray>;
						// public position(param0: number): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						// public put(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
						public constructor(param0: number);
						public constructor(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>);
						// public position(param0: number): org.bytedeco.javacpp.helper.opencv_core.CvMatNDArray;
						// public get(): org.bytedeco.javacpp.helper.opencv_core.CvArr;
						public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.CvMatND>);
						// public get(): org.bytedeco.javacpp.opencv_core.CvMatND;
						// public put(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.helper.opencv_core.CvMatNDArray;
						// public put(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>): org.bytedeco.javacpp.helper.opencv_core.CvMatNDArray;
						// public put(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
					}
					export class IplImageArray extends org.bytedeco.javacpp.helper.opencv_core.CvArrArray {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_core.IplImageArray>;
						// public position(param0: number): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
						// public get(): org.bytedeco.javacpp.opencv_core.IplImage;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						// public position(param0: number): org.bytedeco.javacpp.helper.opencv_core.IplImageArray;
						// public put(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
						// public put(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>): org.bytedeco.javacpp.helper.opencv_core.IplImageArray;
						public constructor(param0: number);
						public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>);
						public constructor(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>);
						// public get(): org.bytedeco.javacpp.helper.opencv_core.CvArr;
						// public put(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.helper.opencv_core.IplImageArray;
						// public put(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>): org.bytedeco.javacpp.helper.opencv_core.CvArrArray;
					}
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module helper {
				export class opencv_imgcodecs extends org.bytedeco.javacpp.presets.opencv_imgcodecs {
					public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_imgcodecs>;
					public static cvLoadImageRGBA(param0: string): org.bytedeco.javacpp.opencv_core.IplImage;
					public static cvLoadImageBGRA(param0: string): org.bytedeco.javacpp.opencv_core.IplImage;
					public constructor();
					public static cvSaveImage(param0: string, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
					public static cvLoadImage(param0: string, param1: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public static cvSaveImage(param0: string, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: native.Array<number>): number;
					public static cvLoadImage(param0: string): org.bytedeco.javacpp.opencv_core.IplImage;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module helper {
				export class opencv_imgproc extends org.bytedeco.javacpp.presets.opencv_imgproc {
					public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_imgproc>;
					public static cvCalcBackProject(param0: org.bytedeco.javacpp.helper.opencv_core.IplImageArray, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
					public static cvMakeHistHeaderForArray(param0: number, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: org.bytedeco.javacpp.FloatPointer, param4: native.Array<native.Array<number>>, param5: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
					public static cvCalcHist(param0: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
					public static cvFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: org.bytedeco.javacpp.opencv_core.CvSeq, param3: number, param4: number, param5: number): number;
					public static cvStartFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_imgproc.CvContourScanner;
					public static cvCalcArrHist(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
					public static cvPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<org.bytedeco.javacpp.opencv_core.CvPoint>, param2: native.Array<number>, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
					public static cvCalcBackProject(param0: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
					public static cvCalcBackProjectPatch(param0: org.bytedeco.javacpp.helper.opencv_core.IplImageArray, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.opencv_core.CvHistogram, param4: number, param5: number): void;
					public static cvCreateHist(param0: number, param1: native.Array<number>, param2: number, param3: native.Array<native.Array<number>>, param4: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
					public static cvMakeHistHeaderForArray(param0: number, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: native.Array<number>, param4: native.Array<native.Array<number>>, param5: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
					public static cvCalcArrBackProject(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
					public static cvFillPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<org.bytedeco.javacpp.opencv_core.CvPoint>, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar, param5: number, param6: number): void;
					public static cvDrawContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvSeq, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
					public static cvCalcHist(param0: org.bytedeco.javacpp.helper.opencv_core.IplImageArray, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
					public constructor();
					public static cvCalcBackProjectPatch(param0: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.opencv_core.CvHistogram, param4: number, param5: number): void;
					public static cvDrawPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<org.bytedeco.javacpp.opencv_core.CvPoint>, param2: native.Array<number>, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
					public static cvCalcArrBackProjectPatch(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.opencv_core.CvHistogram, param4: number, param5: number): void;
					public static cvSetHistBinRanges(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: native.Array<native.Array<number>>, param2: number): void;
				}
				export module opencv_imgproc {
					export abstract class AbstractCvHistogram {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_imgproc.AbstractCvHistogram>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public static create(param0: number, param1: native.Array<number>, param2: number, param3: native.Array<native.Array<number>>, param4: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
						public release(): void;
					}
					export module AbstractCvHistogram {
						export class ReleaseDeallocator extends org.bytedeco.javacpp.opencv_core.CvHistogram {
							public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_imgproc.AbstractCvHistogram.ReleaseDeallocator>;
							public deallocate(): void;
						}
					}
					export abstract class AbstractCvMoments {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_imgproc.AbstractCvMoments>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public static createThreadLocal(): java.lang.ThreadLocal<org.bytedeco.javacpp.opencv_imgproc.CvMoments>;
					}
					export abstract class AbstractIplConvKernel {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_imgproc.AbstractIplConvKernel>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public release(): void;
						public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: native.Array<number>): org.bytedeco.javacpp.opencv_core.IplConvKernel;
					}
					export module AbstractIplConvKernel {
						export class ReleaseDeallocator extends org.bytedeco.javacpp.opencv_core.IplConvKernel {
							public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_imgproc.AbstractIplConvKernel.ReleaseDeallocator>;
							public deallocate(): void;
						}
					}
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module helper {
				export class opencv_ml extends org.bytedeco.javacpp.presets.opencv_ml {
					public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_ml>;
					public constructor();
				}
				export module opencv_ml {
					export abstract class AbstractStatModel extends org.bytedeco.javacpp.opencv_core.Algorithm {
						public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_ml.AbstractStatModel>;
						public static loadRTrees(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.RTrees;
						public constructor();
						public static loadKNearest(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.KNearest;
						public static loadBoost(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.Boost;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public static loadNormalBayesClassifier(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.NormalBayesClassifier;
						public static loadRTrees(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.RTrees;
						public static loadLogisticRegression(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.LogisticRegression;
						public static loadKNearest(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.KNearest;
						public static loadSVM(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.SVM;
						public static loadANN_MLP(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.ANN_MLP;
						public static loadBoost(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.Boost;
						public static loadSVM(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.SVM;
						public static loadANN_MLP(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.ANN_MLP;
						public constructor(param0: number);
						public static loadDTrees(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.DTrees;
						public static loadEM(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.EM;
						public static loadEM(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.EM;
						public static loadLogisticRegression(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.LogisticRegression;
						public static loadNormalBayesClassifier(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.NormalBayesClassifier;
						public static loadDTrees(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.DTrees;
					}
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module helper {
				export class opencv_objdetect extends org.bytedeco.javacpp.presets.opencv_objdetect {
					public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_objdetect>;
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module helper {
				export class opencv_video extends org.bytedeco.javacpp.presets.opencv_video {
					public static class: java.lang.Class<org.bytedeco.javacpp.helper.opencv_video>;
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_aruco extends org.bytedeco.javacpp.presets.opencv_aruco {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_aruco>;
				public static DICT_4X4_50: number;
				public static DICT_4X4_100: number;
				public static DICT_4X4_250: number;
				public static DICT_4X4_1000: number;
				public static DICT_5X5_50: number;
				public static DICT_5X5_100: number;
				public static DICT_5X5_250: number;
				public static DICT_5X5_1000: number;
				public static DICT_6X6_50: number;
				public static DICT_6X6_100: number;
				public static DICT_6X6_250: number;
				public static DICT_6X6_1000: number;
				public static DICT_7X7_50: number;
				public static DICT_7X7_100: number;
				public static DICT_7X7_250: number;
				public static DICT_7X7_1000: number;
				public static DICT_ARUCO_ORIGINAL: number;
				public static DICT_APRILTAG_16h5: number;
				public static DICT_APRILTAG_25h9: number;
				public static DICT_APRILTAG_36h10: number;
				public static DICT_APRILTAG_36h11: number;
				public static CORNER_REFINE_NONE: number;
				public static CORNER_REFINE_SUBPIX: number;
				public static CORNER_REFINE_CONTOUR: number;
				public static CORNER_REFINE_APRILTAG: number;
				public static getBoardObjectAndImagePoints(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: boolean): number;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMatVector, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: number, param9: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: number, param8: number, param9: boolean, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_aruco.DetectorParameters): void;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_aruco.DetectorParameters, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: boolean): number;
				public static drawDetectedCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.UMatVector, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: number, param13: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: number, param12: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: number, param9: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: number, param9: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: number, param8: number, param9: boolean, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_aruco.DetectorParameters): void;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: number, param12: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static estimatePoseCharucoBoard(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMatVector, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: number, param13: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.UMatVector, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static drawAxis(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number): void;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: number, param8: number, param9: boolean, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_aruco.DetectorParameters): void;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.MatVector, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: number, param13: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static estimatePoseCharucoBoard(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_aruco.DetectorParameters, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: boolean): number;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMatVector, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: number, param8: number, param9: boolean, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_aruco.DetectorParameters): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: number): number;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.UMatVector, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat, param12: number, param13: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static custom_dictionary_from(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_aruco.Dictionary, param3: number): org.bytedeco.javacpp.opencv_aruco.Dictionary;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: number, param9: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: number, param8: number, param9: boolean, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_aruco.DetectorParameters): void;
				public static drawCharucoDiamond(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static drawCharucoDiamond(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: boolean): number;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMatVector, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat, param12: number, param13: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static drawDetectedCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: number, param12: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawPlanarBoard(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_aruco.DetectorParameters, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: number, param8: number, param9: boolean, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_aruco.DetectorParameters): void;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static drawCharucoDiamond(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: number): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMatVector, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat, param12: number, param13: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static custom_dictionary(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_aruco.Dictionary;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.MatVector, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static custom_dictionary(param0: number, param1: number): org.bytedeco.javacpp.opencv_aruco.Dictionary;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: number): number;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static getBoardObjectAndImagePoints(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: number, param9: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static drawDetectedCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: number, param12: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: number, param12: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static getBoardObjectAndImagePoints(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): void;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.MatVector, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static drawPlanarBoard(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: number): number;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: boolean): number;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.MatVector, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat, param12: number, param13: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMatVector, param9: number, param10: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMatVector, param9: number, param10: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_aruco.DetectorParameters, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.MatVector, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static getBoardObjectAndImagePoints(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: number): number;
				public static drawCharucoDiamond(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: number): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.UMatVector, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: number, param9: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static getBoardObjectAndImagePoints(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static getBoardObjectAndImagePoints(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.UMatVector, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat, param12: number, param13: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: number): number;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: number, param12: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static custom_dictionary_from(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_aruco.Dictionary): org.bytedeco.javacpp.opencv_aruco.Dictionary;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMatVector, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.UMatVector, param9: number, param10: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static drawAxis(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: number): number;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static drawCharucoDiamond(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: number): number;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static getBoardObjectAndImagePoints(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: number, param12: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawDetectedCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static drawPlanarBoard(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.MatVector, param9: number, param10: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static getBoardObjectAndImagePoints(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_aruco.DetectorParameters, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_aruco.DetectorParameters, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: number, param8: number, param9: boolean, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_aruco.DetectorParameters): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.UMatVector, param9: number, param10: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static estimatePoseCharucoBoard(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: boolean): boolean;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public constructor();
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_aruco.DetectorParameters, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: number, param12: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: boolean): number;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: number): number;
				public static drawPlanarBoard(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.MatVector, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat, param12: number, param13: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: number, param9: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawCharucoDiamond(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: number): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.UMatVector, param9: number, param10: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawDetectedCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: number, param8: number, param9: boolean, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_aruco.DetectorParameters): void;
				public static drawDetectedCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static drawPlanarBoard(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static getBoardObjectAndImagePoints(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.MatVector, param9: number, param10: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static estimatePoseCharucoBoard(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: number): number;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_aruco.DetectorParameters, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: boolean): number;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: number, param12: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static drawPlanarBoard(param0: org.bytedeco.javacpp.opencv_aruco.Board, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.MatVector, param9: number, param10: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: number, param9: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static drawDetectedDiamonds(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static detectCharucoDiamond(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMatVector, param9: number, param10: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static calibrateCameraAruco(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: boolean): number;
				public static estimatePoseCharucoBoard(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: boolean): boolean;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: boolean): number;
				public static estimatePoseBoard(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_aruco.Board, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static estimatePoseCharucoBoard(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: boolean): boolean;
				public static calibrateCameraArucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_aruco.Board, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.UMatVector, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_aruco.DetectorParameters, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static refineDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_aruco.Board, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: number, param8: number, param9: boolean, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_aruco.DetectorParameters): void;
				public static drawAxis(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number): void;
				public static interpolateCornersCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static getPredefinedDictionary(param0: number): org.bytedeco.javacpp.opencv_aruco.Dictionary;
				public static calibrateCameraCharuco(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: number, param9: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static detectMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static drawDetectedMarkers(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static estimatePoseSingleMarkers(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calibrateCameraCharucoExtended(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_aruco.CharucoBoard, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat): number;
			}
			export module opencv_aruco {
				export class Board {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_aruco.Board>;
					public ids(): org.bytedeco.javacpp.IntPointer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public position(param0: number): org.bytedeco.javacpp.opencv_aruco.Board;
					public objPoints(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_aruco.Board;
					public dictionary(): org.bytedeco.javacpp.opencv_aruco.Dictionary;
					public dictionary(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public objPoints(): org.bytedeco.javacpp.opencv_core.Point3fVectorVector;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public constructor(param0: number);
					public ids(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_aruco.Board;
				}
				export class CharucoBoard extends org.bytedeco.javacpp.opencv_aruco.Board {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_aruco.CharucoBoard>;
					public chessboardCorners(param0: org.bytedeco.javacpp.opencv_core.Point3fVector): org.bytedeco.javacpp.opencv_aruco.CharucoBoard;
					public chessboardCorners(): org.bytedeco.javacpp.opencv_core.Point3fVector;
					public nearestMarkerIdx(param0: org.bytedeco.javacpp.opencv_core.IntVectorVector): org.bytedeco.javacpp.opencv_aruco.CharucoBoard;
					public static create(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public position(param0: number): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_aruco.Dictionary): org.bytedeco.javacpp.opencv_aruco.CharucoBoard;
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
					public getSquareLength(): number;
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
					public getChessboardSize(): org.bytedeco.javacpp.opencv_core.Size;
					public static create(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_aruco.Board;
					public getMarkerLength(): number;
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor();
					public nearestMarkerCorners(): org.bytedeco.javacpp.opencv_core.IntVectorVector;
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public constructor(param0: number);
					public nearestMarkerIdx(): org.bytedeco.javacpp.opencv_core.IntVectorVector;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public position(param0: number): org.bytedeco.javacpp.opencv_aruco.CharucoBoard;
					public nearestMarkerCorners(param0: org.bytedeco.javacpp.opencv_core.IntVectorVector): org.bytedeco.javacpp.opencv_aruco.CharucoBoard;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
				export class DetectorParameters {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_aruco.DetectorParameters>;
					public adaptiveThreshWinSizeMin(): number;
					public aprilTagCriticalRad(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public adaptiveThreshConstant(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public aprilTagMinClusterPixels(): number;
					public minCornerDistanceRate(): number;
					public cornerRefinementMaxIterations(): number;
					public adaptiveThreshWinSizeStep(): number;
					public adaptiveThreshConstant(): number;
					public perspectiveRemovePixelPerCell(): number;
					public aprilTagMaxNmaxima(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public markerBorderBits(): number;
					public constructor();
					public minOtsuStdDev(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public minOtsuStdDev(): number;
					public maxErroneousBitsInBorderRate(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public adaptiveThreshWinSizeStep(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public aprilTagQuadDecimate(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public aprilTagCriticalRad(): number;
					public minDistanceToBorder(): number;
					public minMarkerDistanceRate(): number;
					public cornerRefinementMethod(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public aprilTagMaxLineFitMse(): number;
					public maxMarkerPerimeterRate(): number;
					public minDistanceToBorder(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public polygonalApproxAccuracyRate(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public minCornerDistanceRate(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public errorCorrectionRate(): number;
					public aprilTagMaxLineFitMse(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public cornerRefinementWinSize(): number;
					public aprilTagQuadSigma(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public perspectiveRemoveIgnoredMarginPerCell(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public cornerRefinementWinSize(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public cornerRefinementMaxIterations(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public minMarkerPerimeterRate(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public adaptiveThreshWinSizeMax(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public cornerRefinementMinAccuracy(): number;
					public cornerRefinementMinAccuracy(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public cornerRefinementMethod(): number;
					public aprilTagDeglitch(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public position(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public minMarkerPerimeterRate(): number;
					public perspectiveRemovePixelPerCell(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public constructor(param0: number);
					public minMarkerDistanceRate(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public polygonalApproxAccuracyRate(): number;
					public aprilTagDeglitch(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public errorCorrectionRate(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public aprilTagQuadDecimate(): number;
					public adaptiveThreshWinSizeMin(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public aprilTagQuadSigma(): number;
					public adaptiveThreshWinSizeMax(): number;
					public aprilTagMinClusterPixels(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public markerBorderBits(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public maxMarkerPerimeterRate(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public perspectiveRemoveIgnoredMarginPerCell(): number;
					public aprilTagMaxNmaxima(): number;
					public aprilTagMinWhiteBlackDiff(): number;
					public static create(): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public aprilTagMinWhiteBlackDiff(param0: number): org.bytedeco.javacpp.opencv_aruco.DetectorParameters;
					public maxErroneousBitsInBorderRate(): number;
				}
				export class Dictionary {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_aruco.Dictionary>;
					public maxCorrectionBits(param0: number): org.bytedeco.javacpp.opencv_aruco.Dictionary;
					public static getByteListFromBits(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public bytesList(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_aruco.Dictionary;
					public static get(param0: number): org.bytedeco.javacpp.opencv_aruco.Dictionary;
					public getDistanceToId(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): number;
					public drawMarker(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public static getBitsFromByteList(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
					public static create_from(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_aruco.Dictionary): org.bytedeco.javacpp.opencv_aruco.Dictionary;
					public static create(param0: number, param1: number): org.bytedeco.javacpp.opencv_aruco.Dictionary;
					public getDistanceToId(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): number;
					public drawMarker(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
					public drawMarker(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public identify(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: number): boolean;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_aruco.Dictionary);
					public getDistanceToId(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): number;
					public static create_from(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_aruco.Dictionary, param3: number): org.bytedeco.javacpp.opencv_aruco.Dictionary;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_aruco.Dictionary;
					public bytesList(): org.bytedeco.javacpp.opencv_core.Mat;
					public getDistanceToId(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: boolean): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public markerSize(): number;
					public markerSize(param0: number): org.bytedeco.javacpp.opencv_aruco.Dictionary;
					public identify(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: native.Array<number>, param3: number): boolean;
					public maxCorrectionBits(): number;
					public drawMarker(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
					public getDistanceToId(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: boolean): number;
					public drawMarker(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public identify(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.IntPointer, param3: number): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number);
					public static create(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_aruco.Dictionary;
					public getDistanceToId(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: boolean): number;
					public drawMarker(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
				}
				export class GridBoard extends org.bytedeco.javacpp.opencv_aruco.Board {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_aruco.GridBoard>;
					public static create(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public position(param0: number): org.bytedeco.javacpp.opencv_aruco.Board;
					public getGridSize(): org.bytedeco.javacpp.opencv_core.Size;
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
					public getMarkerSeparation(): number;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_aruco.Dictionary, param5: number): org.bytedeco.javacpp.opencv_aruco.GridBoard;
					public static create(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_aruco.Board;
					public getMarkerLength(): number;
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor();
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_aruco.Dictionary): org.bytedeco.javacpp.opencv_aruco.GridBoard;
					public position(param0: number): org.bytedeco.javacpp.opencv_aruco.GridBoard;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_aruco.Board;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_aruco.Dictionary, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_aruco.Board;
					public draw(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_bgsegm extends org.bytedeco.javacpp.presets.opencv_bgsegm {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bgsegm>;
				public static LSBP_CAMERA_MOTION_COMPENSATION_NONE: number;
				public static LSBP_CAMERA_MOTION_COMPENSATION_LK: number;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number): org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorLSBP(): org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorLSBP;
				public static createSyntheticSequenceGenerator(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_bgsegm.SyntheticSequenceGenerator;
				public static createSyntheticSequenceGenerator(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_bgsegm.SyntheticSequenceGenerator;
				public static createBackgroundSubtractorGMG(param0: number, param1: number): org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorGMG;
				public static createBackgroundSubtractorCNT(param0: number, param1: boolean, param2: number, param3: boolean): org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorCNT;
				public static createBackgroundSubtractorGSOC(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number): org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorGSOC;
				public constructor();
				public static createBackgroundSubtractorGMG(): org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorGMG;
				public static createSyntheticSequenceGenerator(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_bgsegm.SyntheticSequenceGenerator;
				public static createSyntheticSequenceGenerator(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_bgsegm.SyntheticSequenceGenerator;
				public static createBackgroundSubtractorMOG(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorMOG;
				public static createBackgroundSubtractorCNT(): org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorCNT;
				public static createSyntheticSequenceGenerator(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_bgsegm.SyntheticSequenceGenerator;
				public static createBackgroundSubtractorMOG(): org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorMOG;
				public static createBackgroundSubtractorGSOC(): org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorGSOC;
				public static createSyntheticSequenceGenerator(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_bgsegm.SyntheticSequenceGenerator;
			}
			export module opencv_bgsegm {
				export class BackgroundSubtractorCNT extends org.bytedeco.javacpp.opencv_video.BackgroundSubtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorCNT>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getIsParallel(): boolean;
					public setMinPixelStability(param0: number): void;
					public setMaxPixelStability(param0: number): void;
					public getUseHistory(): boolean;
					public setUseHistory(param0: boolean): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setIsParallel(param0: boolean): void;
					public constructor();
					public getMaxPixelStability(): number;
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
					public getMinPixelStability(): number;
					public constructor(param0: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class BackgroundSubtractorGMG extends org.bytedeco.javacpp.opencv_video.BackgroundSubtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorGMG>;
					public setDefaultLearningRate(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getQuantizationLevels(): number;
					public setSmoothingRadius(param0: number): void;
					public setMinVal(param0: number): void;
					public setNumFrames(param0: number): void;
					public getUpdateBackgroundModel(): boolean;
					public getMaxVal(): number;
					public setMaxFeatures(param0: number): void;
					public getNumFrames(): number;
					public setDecisionThreshold(param0: number): void;
					public getMinVal(): number;
					public getMaxFeatures(): number;
					public setMaxVal(param0: number): void;
					public getBackgroundPrior(): number;
					public constructor();
					public setBackgroundPrior(param0: number): void;
					public getSmoothingRadius(): number;
					public setQuantizationLevels(param0: number): void;
					public setUpdateBackgroundModel(param0: boolean): void;
					public constructor(param0: number);
					public getDefaultLearningRate(): number;
					public getDecisionThreshold(): number;
				}
				export class BackgroundSubtractorGSOC extends org.bytedeco.javacpp.opencv_video.BackgroundSubtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorGSOC>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
					public constructor(param0: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class BackgroundSubtractorLSBP extends org.bytedeco.javacpp.opencv_video.BackgroundSubtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorLSBP>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
					public constructor(param0: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class BackgroundSubtractorLSBPDesc {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorLSBPDesc>;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static calcLocalSVDValues(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public static computeFromLocalSVDValues(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorLSBPDesc;
					public static calcLocalSVDValues(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public static computeFromLocalSVDValues(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public constructor();
					public constructor(param0: number);
					public static calcLocalSVDValues(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public static computeFromLocalSVDValues(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
				}
				export class BackgroundSubtractorMOG extends org.bytedeco.javacpp.opencv_video.BackgroundSubtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bgsegm.BackgroundSubtractorMOG>;
					public setHistory(param0: number): void;
					public getNMixtures(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setNoiseSigma(param0: number): void;
					public constructor();
					public setBackgroundRatio(param0: number): void;
					public getNoiseSigma(): number;
					public getHistory(): number;
					public setNMixtures(param0: number): void;
					public getBackgroundRatio(): number;
					public constructor(param0: number);
				}
				export class SyntheticSequenceGenerator extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bgsegm.SyntheticSequenceGenerator>;
					public getNextFrame(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number);
					public getNextFrame(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number);
					public constructor(param0: number);
					public getNextFrame(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_bioinspired extends org.bytedeco.javacpp.presets.opencv_bioinspired {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bioinspired>;
				public static RETINA_COLOR_RANDOM: number;
				public static RETINA_COLOR_DIAGONAL: number;
				public static RETINA_COLOR_BAYER: number;
				public constructor();
			}
			export module opencv_bioinspired {
				export class Retina extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bioinspired.Retina>;
					public printSetup(): org.bytedeco.javacpp.BytePointer;
					public setup(): void;
					public applyFastToneMapping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public getParvoRAW(): org.bytedeco.javacpp.opencv_core.Mat;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getParvo(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public applyFastToneMapping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public write(param0: string): void;
					public clearBuffers(): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor();
					public setupIPLMagnoChannel(): void;
					public getParvoRAW(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setup(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public getMagnoRAW(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getParvo(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public write(param0: org.bytedeco.javacpp.BytePointer): void;
					public activateMovingContoursProcessing(param0: boolean): void;
					public getMagnoRAW(): org.bytedeco.javacpp.opencv_core.Mat;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public activateContoursProcessing(param0: boolean): void;
					public getOutputSize(): org.bytedeco.javacpp.opencv_core.Size;
					public getMagno(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getParvoRAW(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setupOPLandIPLParvoChannel(): void;
					public setup(param0: org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters): void;
					public setColorSaturation(param0: boolean, param1: number): void;
					public setup(param0: org.bytedeco.javacpp.BytePointer, param1: boolean): void;
					public getInputSize(): org.bytedeco.javacpp.opencv_core.Size;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Size, param1: boolean): org.bytedeco.javacpp.opencv_bioinspired.Retina;
					public setup(param0: string, param1: boolean): void;
					public applyFastToneMapping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public getParvo(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getMagno(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getParameters(): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters;
					public getMagnoRAW(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getMagnoRAW(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Size, param1: boolean, param2: number, param3: boolean, param4: number, param5: number): org.bytedeco.javacpp.opencv_bioinspired.Retina;
					public setup(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: boolean): void;
					public getParvoRAW(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setColorSaturation(): void;
					public getMagno(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setupIPLMagnoChannel(param0: boolean, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
					public setupOPLandIPLParvoChannel(param0: boolean, param1: boolean, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_bioinspired.Retina;
				}
				export class RetinaFastToneMapping extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bioinspired.RetinaFastToneMapping>;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_bioinspired.RetinaFastToneMapping;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public applyFastToneMapping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public applyFastToneMapping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setup(): void;
					public constructor();
					public applyFastToneMapping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
					public setup(param0: number, param1: number, param2: number): void;
				}
				export class RetinaParameters {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters;
					public OPLandIplParvo(): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters;
					public IplMagno(): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters;
					public OPLandIplParvo(param0: org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters;
					public IplMagno(param0: org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters;
					public constructor(param0: number);
				}
				export module RetinaParameters {
					export class IplMagnoParameters {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters>;
						public constructor();
						public normaliseOutput(): boolean;
						public parasolCells_beta(): number;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public parasolCells_tau(): number;
						public amacrinCellsTemporalCutFrequency(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters;
						public localAdaptintegration_k(): number;
						public localAdaptintegration_k(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters;
						public amacrinCellsTemporalCutFrequency(): number;
						public position(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters;
						public parasolCells_beta(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters;
						public parasolCells_tau(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters;
						public V0CompressionParameter(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters;
						public localAdaptintegration_tau(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters;
						public localAdaptintegration_tau(): number;
						public constructor(param0: number);
						public V0CompressionParameter(): number;
						public parasolCells_k(): number;
						public parasolCells_k(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters;
						public normaliseOutput(param0: boolean): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.IplMagnoParameters;
					}
					export class OPLandIplParvoParameters {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters>;
						public photoreceptorsSpatialConstant(): number;
						public colorMode(): boolean;
						public colorMode(param0: boolean): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters;
						public constructor();
						public normaliseOutput(): boolean;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public position(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters;
						public horizontalCellsGain(): number;
						public horizontalCellsGain(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters;
						public hcellsSpatialConstant(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters;
						public photoreceptorsLocalAdaptationSensitivity(): number;
						public photoreceptorsLocalAdaptationSensitivity(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters;
						public ganglionCellsSensitivity(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters;
						public photoreceptorsTemporalConstant(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters;
						public hcellsSpatialConstant(): number;
						public hcellsTemporalConstant(): number;
						public normaliseOutput(param0: boolean): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters;
						public constructor(param0: number);
						public photoreceptorsSpatialConstant(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters;
						public hcellsTemporalConstant(param0: number): org.bytedeco.javacpp.opencv_bioinspired.RetinaParameters.OPLandIplParvoParameters;
						public ganglionCellsSensitivity(): number;
						public photoreceptorsTemporalConstant(): number;
					}
				}
				export class SegmentationParameters {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters>;
					public contextEnergy_spatialConstant(param0: number): org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public neighborhoodEnergy_temporalConstant(param0: number): org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters;
					public position(param0: number): org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters;
					public thresholdON(param0: number): org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters;
					public localEnergy_spatialConstant(): number;
					public localEnergy_temporalConstant(): number;
					public thresholdOFF(): number;
					public contextEnergy_temporalConstant(param0: number): org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters;
					public contextEnergy_spatialConstant(): number;
					public neighborhoodEnergy_spatialConstant(): number;
					public localEnergy_temporalConstant(param0: number): org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters;
					public contextEnergy_temporalConstant(): number;
					public constructor();
					public thresholdOFF(param0: number): org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters;
					public localEnergy_spatialConstant(param0: number): org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters;
					public neighborhoodEnergy_spatialConstant(param0: number): org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters;
					public thresholdON(): number;
					public constructor(param0: number);
					public neighborhoodEnergy_temporalConstant(): number;
				}
				export class TransientAreasSegmentationModule extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_bioinspired.TransientAreasSegmentationModule>;
					public printSetup(): org.bytedeco.javacpp.BytePointer;
					public setup(): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public setup(param0: org.bytedeco.javacpp.BytePointer, param1: boolean): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setup(param0: string, param1: boolean): void;
					public write(param0: string): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getSegmentationPicture(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public clearAllBuffers(): void;
					public getParameters(): org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters;
					public setup(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getSize(): org.bytedeco.javacpp.opencv_core.Size;
					public setup(param0: org.bytedeco.javacpp.opencv_bioinspired.SegmentationParameters): void;
					public write(param0: org.bytedeco.javacpp.BytePointer): void;
					public getSegmentationPicture(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setup(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: boolean): void;
					public getSegmentationPicture(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_bioinspired.TransientAreasSegmentationModule;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_calib3d extends org.bytedeco.javacpp.helper.opencv_calib3d {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_calib3d>;
				public static CV_FM_7POINT: number;
				public static CV_FM_8POINT: number;
				public static CV_LMEDS: number;
				public static CV_RANSAC: number;
				public static CV_FM_LMEDS_ONLY: number;
				public static CV_FM_RANSAC_ONLY: number;
				public static CV_FM_LMEDS: number;
				public static CV_FM_RANSAC: number;
				public static CV_ITERATIVE: number;
				public static CV_EPNP: number;
				public static CV_P3P: number;
				public static CV_DLS: number;
				public static CV_CALIB_CB_ADAPTIVE_THRESH: number;
				public static CV_CALIB_CB_NORMALIZE_IMAGE: number;
				public static CV_CALIB_CB_FILTER_QUADS: number;
				public static CV_CALIB_CB_FAST_CHECK: number;
				public static CV_CALIB_USE_INTRINSIC_GUESS: number;
				public static CV_CALIB_FIX_ASPECT_RATIO: number;
				public static CV_CALIB_FIX_PRINCIPAL_POINT: number;
				public static CV_CALIB_ZERO_TANGENT_DIST: number;
				public static CV_CALIB_FIX_FOCAL_LENGTH: number;
				public static CV_CALIB_FIX_K1: number;
				public static CV_CALIB_FIX_K2: number;
				public static CV_CALIB_FIX_K3: number;
				public static CV_CALIB_FIX_K4: number;
				public static CV_CALIB_FIX_K5: number;
				public static CV_CALIB_FIX_K6: number;
				public static CV_CALIB_RATIONAL_MODEL: number;
				public static CV_CALIB_THIN_PRISM_MODEL: number;
				public static CV_CALIB_FIX_S1_S2_S3_S4: number;
				public static CV_CALIB_TILTED_MODEL: number;
				public static CV_CALIB_FIX_TAUX_TAUY: number;
				public static CV_CALIB_FIX_TANGENT_DIST: number;
				public static CV_CALIB_NINTRINSIC: number;
				public static CV_CALIB_FIX_INTRINSIC: number;
				public static CV_CALIB_SAME_FOCAL_LENGTH: number;
				public static CV_CALIB_ZERO_DISPARITY: number;
				public static CV_STEREO_BM_NORMALIZED_RESPONSE: number;
				public static CV_STEREO_BM_XSOBEL: number;
				public static LMEDS: number;
				public static RANSAC: number;
				public static RHO: number;
				public static SOLVEPNP_ITERATIVE: number;
				public static SOLVEPNP_EPNP: number;
				public static SOLVEPNP_P3P: number;
				public static SOLVEPNP_DLS: number;
				public static SOLVEPNP_UPNP: number;
				public static SOLVEPNP_AP3P: number;
				public static SOLVEPNP_MAX_COUNT: number;
				public static CALIB_CB_ADAPTIVE_THRESH: number;
				public static CALIB_CB_NORMALIZE_IMAGE: number;
				public static CALIB_CB_FILTER_QUADS: number;
				public static CALIB_CB_FAST_CHECK: number;
				public static CALIB_CB_EXHAUSTIVE: number;
				public static CALIB_CB_ACCURACY: number;
				public static CALIB_CB_SYMMETRIC_GRID: number;
				public static CALIB_CB_ASYMMETRIC_GRID: number;
				public static CALIB_CB_CLUSTERING: number;
				public static CALIB_NINTRINSIC: number;
				public static CALIB_USE_INTRINSIC_GUESS: number;
				public static CALIB_FIX_ASPECT_RATIO: number;
				public static CALIB_FIX_PRINCIPAL_POINT: number;
				public static CALIB_ZERO_TANGENT_DIST: number;
				public static CALIB_FIX_FOCAL_LENGTH: number;
				public static CALIB_FIX_K1: number;
				public static CALIB_FIX_K2: number;
				public static CALIB_FIX_K3: number;
				public static CALIB_FIX_K4: number;
				public static CALIB_FIX_K5: number;
				public static CALIB_FIX_K6: number;
				public static CALIB_RATIONAL_MODEL: number;
				public static CALIB_THIN_PRISM_MODEL: number;
				public static CALIB_FIX_S1_S2_S3_S4: number;
				public static CALIB_TILTED_MODEL: number;
				public static CALIB_FIX_TAUX_TAUY: number;
				public static CALIB_USE_QR: number;
				public static CALIB_FIX_TANGENT_DIST: number;
				public static CALIB_FIX_INTRINSIC: number;
				public static CALIB_SAME_FOCAL_LENGTH: number;
				public static CALIB_ZERO_DISPARITY: number;
				public static CALIB_USE_LU: number;
				public static CALIB_USE_EXTRINSIC_GUESS: number;
				public static FM_7POINT: number;
				public static FM_8POINT: number;
				public static FM_LMEDS: number;
				public static FM_RANSAC: number;
				public static PROJ_SPHERICAL_ORTHO: number;
				public static PROJ_SPHERICAL_EQRECT: number;
				public static FISHEYE_CALIB_USE_INTRINSIC_GUESS: number;
				public static FISHEYE_CALIB_RECOMPUTE_EXTRINSIC: number;
				public static FISHEYE_CALIB_CHECK_COND: number;
				public static FISHEYE_CALIB_FIX_SKEW: number;
				public static FISHEYE_CALIB_FIX_K1: number;
				public static FISHEYE_CALIB_FIX_K2: number;
				public static FISHEYE_CALIB_FIX_K3: number;
				public static FISHEYE_CALIB_FIX_K4: number;
				public static FISHEYE_CALIB_FIX_INTRINSIC: number;
				public static FISHEYE_CALIB_FIX_PRINCIPAL_POINT: number;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static decomposeEssentialMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static estimateNewCameraMatrixForUndistortRectify(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: number): void;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: org.bytedeco.javacpp.opencv_core.Point2d, param7: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static estimateAffine2D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number, param6: number, param7: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static distortPoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static undistortPoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findChessboardCorners(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): boolean;
				public static composeRT(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat, param12: org.bytedeco.javacpp.opencv_core.UMat, param13: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findChessboardCorners(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static getOptimalNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Rect, param6: boolean): org.bytedeco.javacpp.opencv_core.Mat;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static findChessboardCornersSB(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: number): void;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: number): void;
				public static checkChessboard(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size): boolean;
				public static findCirclesGrid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_features2d.Feature2D): boolean;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static findChessboardCornersSB(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): boolean;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static solvePnPRansac(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: boolean, param7: number, param8: number, param9: number, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: number): boolean;
				public static computeCorrespondEpilines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static RQDecomp3x3(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point3d;
				public static findChessboardCornersSB(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): boolean;
				public static validateDisparity(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimateAffine2D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number, param6: number, param7: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static initWideAngleProjMap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: number, param8: number): number;
				public static estimateAffinePartial2D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static initWideAngleProjMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: number): number;
				public static findCirclesGrid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_features2d.Feature2D, param5: org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters): boolean;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: number, param7: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static Rodrigues(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static decomposeHomographyMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: org.bytedeco.javacpp.opencv_core.MatVector): number;
				public static getDefaultNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static findChessboardCorners(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static drawFrameAxes(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: number): void;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calibrationMatrixValues(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number, param3: number, param4: native.Array<number>, param5: native.Array<number>, param6: native.Array<number>, param7: org.bytedeco.javacpp.opencv_core.Point2d, param8: native.Array<number>): void;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat, param12: number): void;
				public static undistortImage(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat, param12: number, param13: org.bytedeco.javacpp.opencv_core.Size, param14: number, param15: number): void;
				public static Rodrigues(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: number, param13: number, param14: org.bytedeco.javacpp.opencv_core.Size, param15: org.bytedeco.javacpp.opencv_core.Rect, param16: org.bytedeco.javacpp.opencv_core.Rect): void;
				public static composeRT(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static getDefaultNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: boolean): org.bytedeco.javacpp.opencv_core.Mat;
				public static composeRT(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimateAffine2D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static undistortImage(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.Size): void;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static undistort(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: number): number;
				public static initWideAngleProjMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: org.bytedeco.javacpp.opencv_core.Point2d, param7: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static stereoCalibrate(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static solveP3P(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: number): number;
				public static reprojectImageTo3D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: boolean, param4: number): void;
				public static findCirclesGrid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_features2d.Feature2D): boolean;
				public static find4QuadCornerSubpix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size): boolean;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static convertPointsHomogeneous(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static undistortPoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static convertPointsFromHomogeneous(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static undistortPoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static stereoRectifyUncalibrated(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: number): boolean;
				public static getOptimalNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Rect, param6: boolean): org.bytedeco.javacpp.opencv_core.Mat;
				public static stereoRectifyUncalibrated(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: number): boolean;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static findChessboardCornersSB(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static filterSpeckles(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static correctMatches(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static drawFrameAxes(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number): void;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static initUndistortRectifyMap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static computeCorrespondEpilines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static initWideAngleProjMap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static calibrateCamera(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.MatVector): number;
				public static estimateAffine3D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static getDefaultNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: boolean): org.bytedeco.javacpp.opencv_core.Mat;
				public static decomposeProjectionMatrix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static convertPointsHomogeneous(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calibrateCameraExtended(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: number, param11: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static stereoCalibrate(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: number, param13: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static decomposeHomographyMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: org.bytedeco.javacpp.opencv_core.UMatVector): number;
				public static initWideAngleProjMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: number, param8: number): number;
				public static solvePnPRansac(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static calibrationMatrixValues(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: org.bytedeco.javacpp.DoublePointer, param6: org.bytedeco.javacpp.DoublePointer, param7: org.bytedeco.javacpp.opencv_core.Point2d, param8: org.bytedeco.javacpp.DoublePointer): void;
				public static calibrationMatrixValues(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number, param3: number, param4: java.nio.DoubleBuffer, param5: java.nio.DoubleBuffer, param6: java.nio.DoubleBuffer, param7: org.bytedeco.javacpp.opencv_core.Point2d, param8: java.nio.DoubleBuffer): void;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: number, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static undistortImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static triangulatePoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static findChessboardCornersSB(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): boolean;
				public static decomposeHomographyMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: org.bytedeco.javacpp.opencv_core.MatVector): number;
				public static decomposeProjectionMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static rectify3Collinear(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.Size, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat, param12: org.bytedeco.javacpp.opencv_core.UMat, param13: org.bytedeco.javacpp.opencv_core.UMat, param14: org.bytedeco.javacpp.opencv_core.UMat, param15: org.bytedeco.javacpp.opencv_core.UMat, param16: org.bytedeco.javacpp.opencv_core.UMat, param17: org.bytedeco.javacpp.opencv_core.UMat, param18: org.bytedeco.javacpp.opencv_core.UMat, param19: org.bytedeco.javacpp.opencv_core.UMat, param20: number, param21: org.bytedeco.javacpp.opencv_core.Size, param22: org.bytedeco.javacpp.opencv_core.Rect, param23: org.bytedeco.javacpp.opencv_core.Rect, param24: number): number;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static Rodrigues(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calibrateCameraRO(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static estimateAffine2D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: number): void;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: number, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static composeRT(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat, param12: org.bytedeco.javacpp.opencv_core.GpuMat, param13: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static undistort(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static validateDisparity(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static solvePnP(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static findChessboardCornersSB(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static undistortPointsIter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
				public static estimateAffine3D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number): number;
				public static find4QuadCornerSubpix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size): boolean;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.MatVector): number;
				public static Rodrigues(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static composeRT(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: org.bytedeco.javacpp.opencv_core.Mat, param13: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static RQDecomp3x3(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point3d;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static correctMatches(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static getDefaultNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static rectify3Collinear(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.Size, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: org.bytedeco.javacpp.opencv_core.Mat, param13: org.bytedeco.javacpp.opencv_core.Mat, param14: org.bytedeco.javacpp.opencv_core.Mat, param15: org.bytedeco.javacpp.opencv_core.Mat, param16: org.bytedeco.javacpp.opencv_core.Mat, param17: org.bytedeco.javacpp.opencv_core.Mat, param18: org.bytedeco.javacpp.opencv_core.Mat, param19: org.bytedeco.javacpp.opencv_core.Mat, param20: number, param21: org.bytedeco.javacpp.opencv_core.Size, param22: org.bytedeco.javacpp.opencv_core.Rect, param23: org.bytedeco.javacpp.opencv_core.Rect, param24: number): number;
				public static composeRT(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static undistortPoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimateNewCameraMatrixForUndistortRectify(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: number): void;
				public static calibrateCameraROExtended(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: org.bytedeco.javacpp.opencv_core.Mat, param13: number, param14: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static triangulatePoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static decomposeHomographyMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector): number;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static solvePnPRansac(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: boolean, param7: number, param8: number, param9: number, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: number): boolean;
				public static calibrateCameraRO(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: number, param10: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static solvePnP(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: boolean, param7: number): boolean;
				public static filterSpeckles(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number): void;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector): number;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector): number;
				public static estimateAffine3D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number): number;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static rectify3Collinear(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.Size, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat, param12: org.bytedeco.javacpp.opencv_core.GpuMat, param13: org.bytedeco.javacpp.opencv_core.GpuMat, param14: org.bytedeco.javacpp.opencv_core.GpuMat, param15: org.bytedeco.javacpp.opencv_core.GpuMat, param16: org.bytedeco.javacpp.opencv_core.GpuMat, param17: org.bytedeco.javacpp.opencv_core.GpuMat, param18: org.bytedeco.javacpp.opencv_core.GpuMat, param19: org.bytedeco.javacpp.opencv_core.GpuMat, param20: number, param21: org.bytedeco.javacpp.opencv_core.Size, param22: org.bytedeco.javacpp.opencv_core.Rect, param23: org.bytedeco.javacpp.opencv_core.Rect, param24: number): number;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static solvePnPRansac(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static sampsonDistance(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static stereoRectifyUncalibrated(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat, param12: number): void;
				public static estimateNewCameraMatrixForUndistortRectify(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: org.bytedeco.javacpp.opencv_core.UMatVector): number;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calibrationMatrixValues(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: org.bytedeco.javacpp.DoublePointer, param6: org.bytedeco.javacpp.DoublePointer, param7: org.bytedeco.javacpp.opencv_core.Point2d, param8: org.bytedeco.javacpp.DoublePointer): void;
				public static estimateAffine3D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawFrameAxes(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number): void;
				public static estimateAffinePartial2D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number, param6: number, param7: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static decomposeProjectionMatrix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static filterSpeckles(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static findCirclesGrid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_features2d.Feature2D, param5: org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters): boolean;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: org.bytedeco.javacpp.opencv_core.UMatVector): number;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat, param12: number, param13: org.bytedeco.javacpp.opencv_core.Size, param14: number, param15: number): void;
				public static findChessboardCorners(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static calibrateCameraROExtended(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static stereoRectifyUncalibrated(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static reprojectImageTo3D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static validateDisparity(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: number): void;
				public static distortPoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): void;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static solvePnPRansac(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: boolean, param7: number, param8: number, param9: number, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: number): boolean;
				public static validateDisparity(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static drawChessboardCorners(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: boolean): void;
				public static convertPointsToHomogeneous(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static solvePnP(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: boolean, param7: number): boolean;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static undistort(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static undistortPoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static solveP3P(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: number): number;
				public static decomposeProjectionMatrix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static Rodrigues(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimateAffinePartial2D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static findChessboardCorners(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): boolean;
				public static sampsonDistance(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static RQDecomp3x3(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point3d;
				public static convertPointsToHomogeneous(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static matMulDeriv(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static reprojectImageTo3D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: boolean, param4: number): void;
				public static computeCorrespondEpilines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static decomposeEssentialMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static getOptimalNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Rect, param6: boolean): org.bytedeco.javacpp.opencv_core.Mat;
				public static findCirclesGrid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static calibrationMatrixValues(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number, param3: number, param4: native.Array<number>, param5: native.Array<number>, param6: native.Array<number>, param7: org.bytedeco.javacpp.opencv_core.Point2d, param8: native.Array<number>): void;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: number, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static validateDisparity(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static getDefaultNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static find4QuadCornerSubpix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size): boolean;
				public static solveP3P(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: number): number;
				public static rectify3Collinear(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.Size, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat, param12: org.bytedeco.javacpp.opencv_core.UMat, param13: org.bytedeco.javacpp.opencv_core.UMat, param14: org.bytedeco.javacpp.opencv_core.UMat, param15: org.bytedeco.javacpp.opencv_core.UMat, param16: org.bytedeco.javacpp.opencv_core.UMat, param17: org.bytedeco.javacpp.opencv_core.UMat, param18: org.bytedeco.javacpp.opencv_core.UMat, param19: org.bytedeco.javacpp.opencv_core.UMat, param20: number, param21: org.bytedeco.javacpp.opencv_core.Size, param22: org.bytedeco.javacpp.opencv_core.Rect, param23: org.bytedeco.javacpp.opencv_core.Rect, param24: number): number;
				public static decomposeProjectionMatrix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Point2d, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static undistort(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static undistort(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calibrateCameraExtended(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static filterSpeckles(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number): void;
				public static correctMatches(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static validateDisparity(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector): number;
				public static calibrateCamera(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: org.bytedeco.javacpp.opencv_core.Point2d, param7: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static decomposeHomographyMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector): number;
				public static findCirclesGrid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static stereoRectifyUncalibrated(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static estimateNewCameraMatrixForUndistortRectify(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: number): void;
				public static stereoCalibrateExtended(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static stereoRectifyUncalibrated(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: number): boolean;
				public static decomposeHomographyMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: org.bytedeco.javacpp.opencv_core.UMatVector): number;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: org.bytedeco.javacpp.opencv_core.UMatVector): number;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static initWideAngleProjMap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: number): number;
				public static undistortPointsIter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
				public static getOptimalNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static undistortPoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static initCameraMatrix2D(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static reprojectImageTo3D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static findCirclesGrid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_features2d.Feature2D): boolean;
				public static matMulDeriv(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static solvePnP(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static triangulatePoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimateAffinePartial2D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static findCirclesGrid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static initUndistortRectifyMap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static undistort(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimateNewCameraMatrixForUndistortRectify(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static rectify3Collinear(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.Size, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: org.bytedeco.javacpp.opencv_core.Mat, param13: org.bytedeco.javacpp.opencv_core.Mat, param14: org.bytedeco.javacpp.opencv_core.Mat, param15: org.bytedeco.javacpp.opencv_core.Mat, param16: org.bytedeco.javacpp.opencv_core.Mat, param17: org.bytedeco.javacpp.opencv_core.Mat, param18: org.bytedeco.javacpp.opencv_core.Mat, param19: org.bytedeco.javacpp.opencv_core.Mat, param20: number, param21: org.bytedeco.javacpp.opencv_core.Size, param22: org.bytedeco.javacpp.opencv_core.Rect, param23: org.bytedeco.javacpp.opencv_core.Rect, param24: number): number;
				public static undistortImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static estimateAffinePartial2D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number, param6: number, param7: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static calibrationMatrixValues(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number, param3: number, param4: native.Array<number>, param5: native.Array<number>, param6: native.Array<number>, param7: org.bytedeco.javacpp.opencv_core.Point2d, param8: native.Array<number>): void;
				public static decomposeProjectionMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static solveP3P(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: number): number;
				public static initCameraMatrix2D(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_core.Mat;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Point2d, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static drawFrameAxes(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: number): void;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static decomposeEssentialMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static solveP3P(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: number): number;
				public static matMulDeriv(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static calibrationMatrixValues(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: org.bytedeco.javacpp.DoublePointer, param6: org.bytedeco.javacpp.DoublePointer, param7: org.bytedeco.javacpp.opencv_core.Point2d, param8: org.bytedeco.javacpp.DoublePointer): void;
				public static drawChessboardCorners(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: boolean): void;
				public constructor();
				public static decomposeHomographyMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: org.bytedeco.javacpp.opencv_core.UMatVector): number;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static reprojectImageTo3D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static estimateAffine3D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static drawFrameAxes(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: number): void;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static checkChessboard(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size): boolean;
				public static Rodrigues(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static undistortPointsIter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.MatVector): number;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: number, param7: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static distortPoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static rectify3Collinear(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: org.bytedeco.javacpp.opencv_core.MatVector, param8: org.bytedeco.javacpp.opencv_core.Size, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat, param12: org.bytedeco.javacpp.opencv_core.UMat, param13: org.bytedeco.javacpp.opencv_core.UMat, param14: org.bytedeco.javacpp.opencv_core.UMat, param15: org.bytedeco.javacpp.opencv_core.UMat, param16: org.bytedeco.javacpp.opencv_core.UMat, param17: org.bytedeco.javacpp.opencv_core.UMat, param18: org.bytedeco.javacpp.opencv_core.UMat, param19: org.bytedeco.javacpp.opencv_core.UMat, param20: number, param21: org.bytedeco.javacpp.opencv_core.Size, param22: org.bytedeco.javacpp.opencv_core.Rect, param23: org.bytedeco.javacpp.opencv_core.Rect, param24: number): number;
				public static solveP3P(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: number): number;
				public static rectify3Collinear(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: org.bytedeco.javacpp.opencv_core.UMatVector, param8: org.bytedeco.javacpp.opencv_core.Size, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat, param12: org.bytedeco.javacpp.opencv_core.GpuMat, param13: org.bytedeco.javacpp.opencv_core.GpuMat, param14: org.bytedeco.javacpp.opencv_core.GpuMat, param15: org.bytedeco.javacpp.opencv_core.GpuMat, param16: org.bytedeco.javacpp.opencv_core.GpuMat, param17: org.bytedeco.javacpp.opencv_core.GpuMat, param18: org.bytedeco.javacpp.opencv_core.GpuMat, param19: org.bytedeco.javacpp.opencv_core.GpuMat, param20: number, param21: org.bytedeco.javacpp.opencv_core.Size, param22: org.bytedeco.javacpp.opencv_core.Rect, param23: org.bytedeco.javacpp.opencv_core.Rect, param24: number): number;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.MatVector): number;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static convertPointsFromHomogeneous(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static filterSpeckles(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static getDefaultNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: boolean): org.bytedeco.javacpp.opencv_core.Mat;
				public static convertPointsFromHomogeneous(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static reprojectImageTo3D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: boolean, param4: number): void;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: number): number;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static undistortImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Size): void;
				public static filterHomographyDecompByVisibleRefpoints(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: number): number;
				public static solvePnPRansac(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static estimateAffinePartial2D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static calibrationMatrixValues(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number, param3: number, param4: java.nio.DoubleBuffer, param5: java.nio.DoubleBuffer, param6: java.nio.DoubleBuffer, param7: org.bytedeco.javacpp.opencv_core.Point2d, param8: java.nio.DoubleBuffer): void;
				public static distortPoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): void;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat, param12: number, param13: number, param14: org.bytedeco.javacpp.opencv_core.Size, param15: org.bytedeco.javacpp.opencv_core.Rect, param16: org.bytedeco.javacpp.opencv_core.Rect): void;
				public static rectify3Collinear(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.Size, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: org.bytedeco.javacpp.opencv_core.Mat, param13: org.bytedeco.javacpp.opencv_core.Mat, param14: org.bytedeco.javacpp.opencv_core.Mat, param15: org.bytedeco.javacpp.opencv_core.Mat, param16: org.bytedeco.javacpp.opencv_core.Mat, param17: org.bytedeco.javacpp.opencv_core.Mat, param18: org.bytedeco.javacpp.opencv_core.Mat, param19: org.bytedeco.javacpp.opencv_core.Mat, param20: number, param21: org.bytedeco.javacpp.opencv_core.Size, param22: org.bytedeco.javacpp.opencv_core.Rect, param23: org.bytedeco.javacpp.opencv_core.Rect, param24: number): number;
				public static RQDecomp3x3(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point3d;
				public static getValidDisparityROI(param0: org.bytedeco.javacpp.opencv_core.Rect, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.Rect;
				public static calibrationMatrixValues(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number, param3: number, param4: java.nio.DoubleBuffer, param5: java.nio.DoubleBuffer, param6: java.nio.DoubleBuffer, param7: org.bytedeco.javacpp.opencv_core.Point2d, param8: java.nio.DoubleBuffer): void;
				public static estimateAffine2D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static sampsonDistance(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Point2d, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static initWideAngleProjMap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: number, param8: number): number;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: number, param7: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static findCirclesGrid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_features2d.Feature2D, param5: org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters): boolean;
				public static initUndistortRectifyMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static initWideAngleProjMap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: number): number;
				public static solveP3P(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: number): number;
				public static convertPointsToHomogeneous(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static findChessboardCorners(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): boolean;
				public static decomposeHomographyMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: org.bytedeco.javacpp.opencv_core.GpuMatVector): number;
				public static solvePnP(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: boolean, param7: number): boolean;
				public static distortPoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static estimateAffine3D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number): number;
				public static findEssentialMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static filterSpeckles(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number): void;
				public static solveP3P(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMatVector, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: number): number;
				public static projectPoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static RQDecomp3x3(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point3d;
				public static recoverPose(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static RQDecomp3x3(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point3d;
				public static getOptimalNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateNewCameraMatrixForUndistortRectify(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static rectify3Collinear(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: org.bytedeco.javacpp.opencv_core.GpuMatVector, param8: org.bytedeco.javacpp.opencv_core.Size, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: org.bytedeco.javacpp.opencv_core.GpuMat, param11: org.bytedeco.javacpp.opencv_core.GpuMat, param12: org.bytedeco.javacpp.opencv_core.GpuMat, param13: org.bytedeco.javacpp.opencv_core.GpuMat, param14: org.bytedeco.javacpp.opencv_core.GpuMat, param15: org.bytedeco.javacpp.opencv_core.GpuMat, param16: org.bytedeco.javacpp.opencv_core.GpuMat, param17: org.bytedeco.javacpp.opencv_core.GpuMat, param18: org.bytedeco.javacpp.opencv_core.GpuMat, param19: org.bytedeco.javacpp.opencv_core.GpuMat, param20: number, param21: org.bytedeco.javacpp.opencv_core.Size, param22: org.bytedeco.javacpp.opencv_core.Rect, param23: org.bytedeco.javacpp.opencv_core.Rect, param24: number): number;
				public static initWideAngleProjMap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static drawChessboardCorners(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: boolean): void;
				public static convertPointsHomogeneous(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static findHomography(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static findFundamentalMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static solveP3P(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.MatVector, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: number): number;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMatVector, param6: org.bytedeco.javacpp.opencv_core.UMatVector, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static distortPoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static undistortImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.Size): void;
				public static decomposeHomographyMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: org.bytedeco.javacpp.opencv_core.MatVector): number;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.GpuMatVector, param6: org.bytedeco.javacpp.opencv_core.GpuMatVector, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static drawFrameAxes(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number): void;
				public static stereoCalibrateExtended(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: org.bytedeco.javacpp.opencv_core.Mat, param13: number, param14: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static getOptimalNewCameraMatrix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: org.bytedeco.javacpp.opencv_core.Mat, param11: org.bytedeco.javacpp.opencv_core.Mat, param12: number, param13: org.bytedeco.javacpp.opencv_core.Size, param14: number, param15: number): void;
				public static estimateAffine2D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static checkChessboard(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size): boolean;
				public static stereoRectify(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: org.bytedeco.javacpp.opencv_core.UMat, param11: org.bytedeco.javacpp.opencv_core.UMat, param12: number, param13: number, param14: org.bytedeco.javacpp.opencv_core.Size, param15: org.bytedeco.javacpp.opencv_core.Rect, param16: org.bytedeco.javacpp.opencv_core.Rect): void;
				public static calibrate(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.MatVector, param6: org.bytedeco.javacpp.opencv_core.MatVector, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static solvePnP(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): boolean;
			}
			export module opencv_calib3d {
				export class CirclesGridFinderParameters {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters>;
					public static SYMMETRIC_GRID: number;
					public static ASYMMETRIC_GRID: number;
					public densityNeighborhoodSize(): org.bytedeco.javacpp.opencv_core.Size2f;
					public minDensity(): number;
					public convexHullFactor(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public gridType(): number;
					public vertexPenalty(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public gridType(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public edgePenalty(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public minRNGEdgeSwitchDist(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public position(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public minGraphConfidence(): number;
					public constructor();
					public densityNeighborhoodSize(param0: org.bytedeco.javacpp.opencv_core.Size2f): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public kmeansAttempts(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public constructor(param0: number);
					public minDensity(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public existingVertexGain(): number;
					public edgeGain(): number;
					public vertexGain(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public vertexPenalty(): number;
					public squareSize(): number;
					public edgePenalty(): number;
					public existingVertexGain(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public edgeGain(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public squareSize(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public keypointScale(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public vertexGain(): number;
					public maxRectifiedDistance(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public convexHullFactor(): number;
					public minGraphConfidence(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
					public minRNGEdgeSwitchDist(): number;
					public maxRectifiedDistance(): number;
					public minDistanceToAddKeypoint(): number;
					public kmeansAttempts(): number;
					public keypointScale(): number;
					public minDistanceToAddKeypoint(param0: number): org.bytedeco.javacpp.opencv_calib3d.CirclesGridFinderParameters;
				}
				export class CvLevMarq {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_calib3d.CvLevMarq>;
					public static DONE: number;
					public static STARTED: number;
					public static CALC_J: number;
					public static CHECK_ERR: number;
					public init(param0: number, param1: number): void;
					public update(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat): boolean;
					public criteria(): org.bytedeco.javacpp.opencv_core.CvTermCriteria;
					public mask(): org.bytedeco.javacpp.opencv_core.CvMat;
					public prevParam(): org.bytedeco.javacpp.opencv_core.CvMat;
					public completeSymmFlag(): boolean;
					public completeSymmFlag(param0: boolean): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public J(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public constructor();
					public state(): number;
					public constructor(param0: number, param1: number);
					public criteria(param0: org.bytedeco.javacpp.opencv_core.CvTermCriteria): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public prevErrNorm(): number;
					public prevParam(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public position(param0: number): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public JtJ(): org.bytedeco.javacpp.opencv_core.CvMat;
					public JtJN(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public updateAlt(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.DoublePointer): boolean;
					public JtErr(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public prevErrNorm(param0: number): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public mask(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public lambdaLg10(param0: number): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public JtJW(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public solveMethod(): number;
					public JtJW(): org.bytedeco.javacpp.opencv_core.CvMat;
					public step(): void;
					public state(param0: number): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public lambdaLg10(): number;
					public iters(param0: number): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public param(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public err(): org.bytedeco.javacpp.opencv_core.CvMat;
					public init(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvTermCriteria, param3: boolean): void;
					public err(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public JtJN(): org.bytedeco.javacpp.opencv_core.CvMat;
					public clear(): void;
					public constructor(param0: number);
					public JtJV(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public errNorm(param0: number): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public constructor(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvTermCriteria, param3: boolean);
					public updateAlt(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: native.Array<number>): boolean;
					public JtJV(): org.bytedeco.javacpp.opencv_core.CvMat;
					public iters(): number;
					public solveMethod(param0: number): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public J(): org.bytedeco.javacpp.opencv_core.CvMat;
					public JtErr(): org.bytedeco.javacpp.opencv_core.CvMat;
					public JtJ(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_calib3d.CvLevMarq;
					public updateAlt(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: java.nio.DoubleBuffer): boolean;
					public param(): org.bytedeco.javacpp.opencv_core.CvMat;
					public errNorm(): number;
				}
				export class LMSolver extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_calib3d.LMSolver>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public getMaxIters(): number;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
					public constructor();
					public setMaxIters(param0: number): void;
					public static create(param0: org.bytedeco.javacpp.opencv_calib3d.LMSolver.Callback, param1: number): org.bytedeco.javacpp.opencv_calib3d.LMSolver;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public constructor(param0: number);
				}
				export module LMSolver {
					export class Callback {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_calib3d.LMSolver.Callback>;
						public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): boolean;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): boolean;
						public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					}
				}
				export class StereoBM extends org.bytedeco.javacpp.opencv_calib3d.StereoMatcher {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_calib3d.StereoBM>;
					public static PREFILTER_NORMALIZED_RESPONSE: number;
					public static PREFILTER_XSOBEL: number;
					public setSmallerBlockSize(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getROI2(): org.bytedeco.javacpp.opencv_core.Rect;
					public getROI1(): org.bytedeco.javacpp.opencv_core.Rect;
					public setTextureThreshold(param0: number): void;
					public getUniquenessRatio(): number;
					public static create(): org.bytedeco.javacpp.opencv_calib3d.StereoBM;
					public setPreFilterType(param0: number): void;
					public getPreFilterType(): number;
					public setPreFilterCap(param0: number): void;
					public getPreFilterSize(): number;
					public setROI1(param0: org.bytedeco.javacpp.opencv_core.Rect): void;
					public static create(param0: number, param1: number): org.bytedeco.javacpp.opencv_calib3d.StereoBM;
					public getPreFilterCap(): number;
					public constructor();
					public getTextureThreshold(): number;
					public setUniquenessRatio(param0: number): void;
					public getSmallerBlockSize(): number;
					public constructor(param0: number);
					public setPreFilterSize(param0: number): void;
					public setROI2(param0: org.bytedeco.javacpp.opencv_core.Rect): void;
				}
				export class StereoMatcher extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_calib3d.StereoMatcher>;
					public static DISP_SHIFT: number;
					public static DISP_SCALE: number;
					public setMinDisparity(param0: number): void;
					public setNumDisparities(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getMinDisparity(): number;
					public setDisp12MaxDiff(param0: number): void;
					public getSpeckleRange(): number;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getSpeckleWindowSize(): number;
					public setBlockSize(param0: number): void;
					public setSpeckleRange(param0: number): void;
					public constructor();
					public getBlockSize(): number;
					public setSpeckleWindowSize(param0: number): void;
					public getDisp12MaxDiff(): number;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getNumDisparities(): number;
					public constructor(param0: number);
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
				export class StereoSGBM extends org.bytedeco.javacpp.opencv_calib3d.StereoMatcher {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_calib3d.StereoSGBM>;
					public static MODE_SGBM: number;
					public static MODE_HH: number;
					public static MODE_SGBM_3WAY: number;
					public static MODE_HH4: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getUniquenessRatio(): number;
					public getP1(): number;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number): org.bytedeco.javacpp.opencv_calib3d.StereoSGBM;
					public setPreFilterCap(param0: number): void;
					public static create(): org.bytedeco.javacpp.opencv_calib3d.StereoSGBM;
					public getP2(): number;
					public getPreFilterCap(): number;
					public constructor();
					public setP1(param0: number): void;
					public setP2(param0: number): void;
					public getMode(): number;
					public setUniquenessRatio(param0: number): void;
					public constructor(param0: number);
					public setMode(param0: number): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_core extends org.bytedeco.javacpp.helper.opencv_core {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core>;
				public static CV_HAL_ERROR_OK: number;
				public static CV_HAL_ERROR_NOT_IMPLEMENTED: number;
				public static CV_HAL_ERROR_UNKNOWN: number;
				public static CV_CN_MAX: number;
				public static CV_CN_SHIFT: number;
				public static CV_DEPTH_MAX: number;
				public static CV_8U: number;
				public static CV_8S: number;
				public static CV_16U: number;
				public static CV_16S: number;
				public static CV_32S: number;
				public static CV_32F: number;
				public static CV_64F: number;
				public static CV_16F: number;
				public static CV_MAT_DEPTH_MASK: number;
				public static CV_8UC1: number;
				public static CV_8UC2: number;
				public static CV_8UC3: number;
				public static CV_8UC4: number;
				public static CV_8SC1: number;
				public static CV_8SC2: number;
				public static CV_8SC3: number;
				public static CV_8SC4: number;
				public static CV_16UC1: number;
				public static CV_16UC2: number;
				public static CV_16UC3: number;
				public static CV_16UC4: number;
				public static CV_16SC1: number;
				public static CV_16SC2: number;
				public static CV_16SC3: number;
				public static CV_16SC4: number;
				public static CV_32SC1: number;
				public static CV_32SC2: number;
				public static CV_32SC3: number;
				public static CV_32SC4: number;
				public static CV_32FC1: number;
				public static CV_32FC2: number;
				public static CV_32FC3: number;
				public static CV_32FC4: number;
				public static CV_64FC1: number;
				public static CV_64FC2: number;
				public static CV_64FC3: number;
				public static CV_64FC4: number;
				public static CV_HAL_CMP_EQ: number;
				public static CV_HAL_CMP_GT: number;
				public static CV_HAL_CMP_GE: number;
				public static CV_HAL_CMP_LT: number;
				public static CV_HAL_CMP_LE: number;
				public static CV_HAL_CMP_NE: number;
				public static CV_HAL_BORDER_CONSTANT: number;
				public static CV_HAL_BORDER_REPLICATE: number;
				public static CV_HAL_BORDER_REFLECT: number;
				public static CV_HAL_BORDER_WRAP: number;
				public static CV_HAL_BORDER_REFLECT_101: number;
				public static CV_HAL_BORDER_TRANSPARENT: number;
				public static CV_HAL_BORDER_ISOLATED: number;
				public static CV_HAL_DFT_INVERSE: number;
				public static CV_HAL_DFT_SCALE: number;
				public static CV_HAL_DFT_ROWS: number;
				public static CV_HAL_DFT_COMPLEX_OUTPUT: number;
				public static CV_HAL_DFT_REAL_OUTPUT: number;
				public static CV_HAL_DFT_TWO_STAGE: number;
				public static CV_HAL_DFT_STAGE_COLS: number;
				public static CV_HAL_DFT_IS_CONTINUOUS: number;
				public static CV_HAL_DFT_IS_INPLACE: number;
				public static CV_HAL_SVD_NO_UV: number;
				public static CV_HAL_SVD_SHORT_UV: number;
				public static CV_HAL_SVD_MODIFY_A: number;
				public static CV_HAL_SVD_FULL_UV: number;
				public static CV_HAL_GEMM_1_T: number;
				public static CV_HAL_GEMM_2_T: number;
				public static CV_HAL_GEMM_3_T: number;
				public static CV_CPU_NONE: number;
				public static CV_CPU_MMX: number;
				public static CV_CPU_SSE: number;
				public static CV_CPU_SSE2: number;
				public static CV_CPU_SSE3: number;
				public static CV_CPU_SSSE3: number;
				public static CV_CPU_SSE4_1: number;
				public static CV_CPU_SSE4_2: number;
				public static CV_CPU_POPCNT: number;
				public static CV_CPU_FP16: number;
				public static CV_CPU_AVX: number;
				public static CV_CPU_AVX2: number;
				public static CV_CPU_FMA3: number;
				public static CV_CPU_AVX_512F: number;
				public static CV_CPU_AVX_512BW: number;
				public static CV_CPU_AVX_512CD: number;
				public static CV_CPU_AVX_512DQ: number;
				public static CV_CPU_AVX_512ER: number;
				public static CV_CPU_AVX_512IFMA512: number;
				public static CV_CPU_AVX_512IFMA: number;
				public static CV_CPU_AVX_512PF: number;
				public static CV_CPU_AVX_512VBMI: number;
				public static CV_CPU_AVX_512VL: number;
				public static CV_CPU_NEON: number;
				public static CV_CPU_VSX: number;
				public static CV_CPU_VSX3: number;
				public static CV_CPU_AVX512_SKX: number;
				public static CV_HARDWARE_MAX_FEATURE: number;
				public static CPU_MMX: number;
				public static CPU_SSE: number;
				public static CPU_SSE2: number;
				public static CPU_SSE3: number;
				public static CPU_SSSE3: number;
				public static CPU_SSE4_1: number;
				public static CPU_SSE4_2: number;
				public static CPU_POPCNT: number;
				public static CPU_FP16: number;
				public static CPU_AVX: number;
				public static CPU_AVX2: number;
				public static CPU_FMA3: number;
				public static CPU_AVX_512F: number;
				public static CPU_AVX_512BW: number;
				public static CPU_AVX_512CD: number;
				public static CPU_AVX_512DQ: number;
				public static CPU_AVX_512ER: number;
				public static CPU_AVX_512IFMA512: number;
				public static CPU_AVX_512IFMA: number;
				public static CPU_AVX_512PF: number;
				public static CPU_AVX_512VBMI: number;
				public static CPU_AVX_512VL: number;
				public static CPU_NEON: number;
				public static CPU_VSX: number;
				public static CPU_VSX3: number;
				public static CPU_AVX512_SKX: number;
				public static CPU_MAX_FEATURE: number;
				public static CV_PI: number;
				public static CV_2PI: number;
				public static CV_LOG2: number;
				public static OPENCV_ABI_COMPATIBILITY: number;
				public static CV_MAT_CN_MASK: number;
				public static CV_MAT_TYPE_MASK: number;
				public static CV_MAT_CONT_FLAG_SHIFT: number;
				public static CV_MAT_CONT_FLAG: number;
				public static CV_SUBMAT_FLAG_SHIFT: number;
				public static CV_SUBMAT_FLAG: number;
				public static CV_STATIC_ANALYSIS: number;
				public static CV_CXX_MOVE_SEMANTICS: number;
				public static CV_CXX_STD_ARRAY: number;
				public static CV_VERSION_MAJOR: number;
				public static CV_VERSION_MINOR: number;
				public static CV_VERSION_REVISION: number;
				public static CV_VERSION_STATUS: string;
				public static CV_MAJOR_VERSION: number;
				public static CV_MINOR_VERSION: number;
				public static CV_SUBMINOR_VERSION: number;
				public static StsOk: number;
				public static StsBackTrace: number;
				public static StsError: number;
				public static StsInternal: number;
				public static StsNoMem: number;
				public static StsBadArg: number;
				public static StsBadFunc: number;
				public static StsNoConv: number;
				public static StsAutoTrace: number;
				public static HeaderIsNull: number;
				public static BadImageSize: number;
				public static BadOffset: number;
				public static BadDataPtr: number;
				public static BadStep: number;
				public static BadModelOrChSeq: number;
				public static BadNumChannels: number;
				public static BadNumChannel1U: number;
				public static BadDepth: number;
				public static BadAlphaChannel: number;
				public static BadOrder: number;
				public static BadOrigin: number;
				public static BadAlign: number;
				public static BadCallBack: number;
				public static BadTileSize: number;
				public static BadCOI: number;
				public static BadROISize: number;
				public static MaskIsTiled: number;
				public static StsNullPtr: number;
				public static StsVecLengthErr: number;
				public static StsFilterStructContentErr: number;
				public static StsKernelStructContentErr: number;
				public static StsFilterOffsetErr: number;
				public static StsBadSize: number;
				public static StsDivByZero: number;
				public static StsInplaceNotSupported: number;
				public static StsObjectNotFound: number;
				public static StsUnmatchedFormats: number;
				public static StsBadFlag: number;
				public static StsBadPoint: number;
				public static StsBadMask: number;
				public static StsUnmatchedSizes: number;
				public static StsUnsupportedFormat: number;
				public static StsOutOfRange: number;
				public static StsParseError: number;
				public static StsNotImplemented: number;
				public static StsBadMemBlock: number;
				public static StsAssert: number;
				public static GpuNotSupported: number;
				public static GpuApiCallError: number;
				public static OpenGlNotSupported: number;
				public static OpenGlApiCallError: number;
				public static OpenCLApiCallError: number;
				public static OpenCLDoubleNotSupported: number;
				public static OpenCLInitError: number;
				public static OpenCLNoAMDBlasFft: number;
				public static DECOMP_LU: number;
				public static DECOMP_SVD: number;
				public static DECOMP_EIG: number;
				public static DECOMP_CHOLESKY: number;
				public static DECOMP_QR: number;
				public static DECOMP_NORMAL: number;
				public static NORM_INF: number;
				public static NORM_L1: number;
				public static NORM_L2: number;
				public static NORM_L2SQR: number;
				public static NORM_HAMMING: number;
				public static NORM_HAMMING2: number;
				public static NORM_TYPE_MASK: number;
				public static NORM_RELATIVE: number;
				public static NORM_MINMAX: number;
				public static CMP_EQ: number;
				public static CMP_GT: number;
				public static CMP_GE: number;
				public static CMP_LT: number;
				public static CMP_LE: number;
				public static CMP_NE: number;
				public static GEMM_1_T: number;
				public static GEMM_2_T: number;
				public static GEMM_3_T: number;
				public static DFT_INVERSE: number;
				public static DFT_SCALE: number;
				public static DFT_ROWS: number;
				public static DFT_COMPLEX_OUTPUT: number;
				public static DFT_REAL_OUTPUT: number;
				public static DFT_COMPLEX_INPUT: number;
				public static DCT_INVERSE: number;
				public static DCT_ROWS: number;
				public static BORDER_CONSTANT: number;
				public static BORDER_REPLICATE: number;
				public static BORDER_REFLECT: number;
				public static BORDER_WRAP: number;
				public static BORDER_REFLECT_101: number;
				public static BORDER_TRANSPARENT: number;
				public static BORDER_REFLECT101: number;
				public static BORDER_DEFAULT: number;
				public static BORDER_ISOLATED: number;
				public static TYPE_GENERAL: number;
				public static TYPE_MARKER: number;
				public static TYPE_WRAPPER: number;
				public static TYPE_FUN: number;
				public static IMPL_PLAIN: number;
				public static IMPL_IPP: number;
				public static IMPL_OPENCL: number;
				public static FLAGS_NONE: number;
				public static FLAGS_MAPPING: number;
				public static FLAGS_EXPAND_SAME_NAMES: number;
				public static CV_StsOk: number;
				public static CV_StsBackTrace: number;
				public static CV_StsError: number;
				public static CV_StsInternal: number;
				public static CV_StsNoMem: number;
				public static CV_StsBadArg: number;
				public static CV_StsBadFunc: number;
				public static CV_StsNoConv: number;
				public static CV_StsAutoTrace: number;
				public static CV_HeaderIsNull: number;
				public static CV_BadImageSize: number;
				public static CV_BadOffset: number;
				public static CV_BadDataPtr: number;
				public static CV_BadStep: number;
				public static CV_BadModelOrChSeq: number;
				public static CV_BadNumChannels: number;
				public static CV_BadNumChannel1U: number;
				public static CV_BadDepth: number;
				public static CV_BadAlphaChannel: number;
				public static CV_BadOrder: number;
				public static CV_BadOrigin: number;
				public static CV_BadAlign: number;
				public static CV_BadCallBack: number;
				public static CV_BadTileSize: number;
				public static CV_BadCOI: number;
				public static CV_BadROISize: number;
				public static CV_MaskIsTiled: number;
				public static CV_StsNullPtr: number;
				public static CV_StsVecLengthErr: number;
				public static CV_StsFilterStructContentErr: number;
				public static CV_StsKernelStructContentErr: number;
				public static CV_StsFilterOffsetErr: number;
				public static CV_StsBadSize: number;
				public static CV_StsDivByZero: number;
				public static CV_StsInplaceNotSupported: number;
				public static CV_StsObjectNotFound: number;
				public static CV_StsUnmatchedFormats: number;
				public static CV_StsBadFlag: number;
				public static CV_StsBadPoint: number;
				public static CV_StsBadMask: number;
				public static CV_StsUnmatchedSizes: number;
				public static CV_StsUnsupportedFormat: number;
				public static CV_StsOutOfRange: number;
				public static CV_StsParseError: number;
				public static CV_StsNotImplemented: number;
				public static CV_StsBadMemBlock: number;
				public static CV_StsAssert: number;
				public static CV_GpuNotSupported: number;
				public static CV_GpuApiCallError: number;
				public static CV_OpenGlNotSupported: number;
				public static CV_OpenGlApiCallError: number;
				public static CV_OpenCLApiCallError: number;
				public static CV_OpenCLDoubleNotSupported: number;
				public static CV_OpenCLInitError: number;
				public static CV_OpenCLNoAMDBlasFft: number;
				public static CV_RNG_COEFF: number;
				public static IPL_DEPTH_SIGN: number;
				public static IPL_DEPTH_1U: number;
				public static IPL_DEPTH_8U: number;
				public static IPL_DEPTH_16U: number;
				public static IPL_DEPTH_32F: number;
				public static IPL_DEPTH_8S: number;
				public static IPL_DEPTH_16S: number;
				public static IPL_DEPTH_32S: number;
				public static IPL_DATA_ORDER_PIXEL: number;
				public static IPL_DATA_ORDER_PLANE: number;
				public static IPL_ORIGIN_TL: number;
				public static IPL_ORIGIN_BL: number;
				public static IPL_ALIGN_4BYTES: number;
				public static IPL_ALIGN_8BYTES: number;
				public static IPL_ALIGN_16BYTES: number;
				public static IPL_ALIGN_32BYTES: number;
				public static IPL_ALIGN_DWORD: number;
				public static IPL_ALIGN_QWORD: number;
				public static IPL_BORDER_CONSTANT: number;
				public static IPL_BORDER_REPLICATE: number;
				public static IPL_BORDER_REFLECT: number;
				public static IPL_BORDER_WRAP: number;
				public static IPL_IMAGE_HEADER: number;
				public static IPL_IMAGE_DATA: number;
				public static IPL_IMAGE_ROI: number;
				public static IPL_BORDER_REFLECT_101: number;
				public static IPL_BORDER_TRANSPARENT: number;
				public static CV_TYPE_NAME_IMAGE: string;
				public static IPL_DEPTH_64F: number;
				public static CV_AUTO_STEP: number;
				public static CV_WHOLE_ARR: org.bytedeco.javacpp.opencv_core.CvSlice;
				public static CV_MAGIC_MASK: number;
				public static CV_MAT_MAGIC_VAL: number;
				public static CV_TYPE_NAME_MAT: string;
				public static CV_MATND_MAGIC_VAL: number;
				public static CV_TYPE_NAME_MATND: string;
				public static CV_MAX_DIM: number;
				public static CV_SPARSE_MAT_MAGIC_VAL: number;
				public static CV_TYPE_NAME_SPARSE_MAT: string;
				public static CV_HIST_MAGIC_VAL: number;
				public static CV_HIST_UNIFORM_FLAG: number;
				public static CV_HIST_RANGES_FLAG: number;
				public static CV_HIST_ARRAY: number;
				public static CV_HIST_SPARSE: number;
				public static CV_HIST_TREE: number;
				public static CV_HIST_UNIFORM: number;
				public static CV_TERMCRIT_ITER: number;
				public static CV_TERMCRIT_NUMBER: number;
				public static CV_TERMCRIT_EPS: number;
				public static CV_WHOLE_SEQ_END_INDEX: number;
				public static CV_WHOLE_SEQ: org.bytedeco.javacpp.opencv_core.CvSlice;
				public static CV_STORAGE_MAGIC_VAL: number;
				public static CV_TYPE_NAME_SEQ: string;
				public static CV_TYPE_NAME_SEQ_TREE: string;
				public static CV_SET_ELEM_IDX_MASK: number;
				public static CV_TYPE_NAME_GRAPH: string;
				public static CV_SEQ_MAGIC_VAL: number;
				public static CV_SET_MAGIC_VAL: number;
				public static CV_SEQ_ELTYPE_BITS: number;
				public static CV_SEQ_ELTYPE_MASK: number;
				public static CV_SEQ_ELTYPE_POINT: number;
				public static CV_SEQ_ELTYPE_CODE: number;
				public static CV_SEQ_ELTYPE_GENERIC: number;
				public static CV_SEQ_ELTYPE_INDEX: number;
				public static CV_SEQ_ELTYPE_GRAPH_EDGE: number;
				public static CV_SEQ_ELTYPE_GRAPH_VERTEX: number;
				public static CV_SEQ_ELTYPE_TRIAN_ATR: number;
				public static CV_SEQ_ELTYPE_CONNECTED_COMP: number;
				public static CV_SEQ_ELTYPE_POINT3D: number;
				public static CV_SEQ_KIND_BITS: number;
				public static CV_SEQ_KIND_MASK: number;
				public static CV_SEQ_KIND_GENERIC: number;
				public static CV_SEQ_KIND_CURVE: number;
				public static CV_SEQ_KIND_BIN_TREE: number;
				public static CV_SEQ_KIND_GRAPH: number;
				public static CV_SEQ_KIND_SUBDIV2D: number;
				public static CV_SEQ_FLAG_SHIFT: number;
				public static CV_SEQ_FLAG_CLOSED: number;
				public static CV_SEQ_FLAG_SIMPLE: number;
				public static CV_SEQ_FLAG_CONVEX: number;
				public static CV_SEQ_FLAG_HOLE: number;
				public static CV_GRAPH_FLAG_ORIENTED: number;
				public static CV_GRAPH: number;
				public static CV_ORIENTED_GRAPH: number;
				public static CV_SEQ_POINT_SET: number;
				public static CV_SEQ_POINT3D_SET: number;
				public static CV_SEQ_POLYLINE: number;
				public static CV_SEQ_POLYGON: number;
				public static CV_SEQ_CONTOUR: number;
				public static CV_SEQ_SIMPLE_POLYGON: number;
				public static CV_SEQ_CHAIN: number;
				public static CV_SEQ_CHAIN_CONTOUR: number;
				public static CV_SEQ_POLYGON_TREE: number;
				public static CV_SEQ_CONNECTED_COMP: number;
				public static CV_SEQ_INDEX: number;
				public static CV_AUTOSTEP: number;
				public static CV_MAX_ARR: number;
				public static CV_NO_DEPTH_CHECK: number;
				public static CV_NO_CN_CHECK: number;
				public static CV_NO_SIZE_CHECK: number;
				public static CV_CMP_EQ: number;
				public static CV_CMP_GT: number;
				public static CV_CMP_GE: number;
				public static CV_CMP_LT: number;
				public static CV_CMP_LE: number;
				public static CV_CMP_NE: number;
				public static CV_CHECK_RANGE: number;
				public static CV_CHECK_QUIET: number;
				public static CV_RAND_UNI: number;
				public static CV_RAND_NORMAL: number;
				public static CV_SORT_EVERY_ROW: number;
				public static CV_SORT_EVERY_COLUMN: number;
				public static CV_SORT_ASCENDING: number;
				public static CV_SORT_DESCENDING: number;
				public static CV_GEMM_A_T: number;
				public static CV_GEMM_B_T: number;
				public static CV_GEMM_C_T: number;
				public static CV_SVD_MODIFY_A: number;
				public static CV_SVD_U_T: number;
				public static CV_SVD_V_T: number;
				public static CV_LU: number;
				public static CV_SVD: number;
				public static CV_SVD_SYM: number;
				public static CV_CHOLESKY: number;
				public static CV_QR: number;
				public static CV_NORMAL: number;
				public static CV_COVAR_SCRAMBLED: number;
				public static CV_COVAR_NORMAL: number;
				public static CV_COVAR_USE_AVG: number;
				public static CV_COVAR_SCALE: number;
				public static CV_COVAR_ROWS: number;
				public static CV_COVAR_COLS: number;
				public static CV_PCA_DATA_AS_ROW: number;
				public static CV_PCA_DATA_AS_COL: number;
				public static CV_PCA_USE_AVG: number;
				public static CV_C: number;
				public static CV_L1: number;
				public static CV_L2: number;
				public static CV_NORM_MASK: number;
				public static CV_RELATIVE: number;
				public static CV_DIFF: number;
				public static CV_MINMAX: number;
				public static CV_DIFF_C: number;
				public static CV_DIFF_L1: number;
				public static CV_DIFF_L2: number;
				public static CV_RELATIVE_C: number;
				public static CV_RELATIVE_L1: number;
				public static CV_RELATIVE_L2: number;
				public static CV_REDUCE_SUM: number;
				public static CV_REDUCE_AVG: number;
				public static CV_REDUCE_MAX: number;
				public static CV_REDUCE_MIN: number;
				public static CV_DXT_FORWARD: number;
				public static CV_DXT_INVERSE: number;
				public static CV_DXT_SCALE: number;
				public static CV_DXT_INV_SCALE: number;
				public static CV_DXT_INVERSE_SCALE: number;
				public static CV_DXT_ROWS: number;
				public static CV_DXT_MUL_CONJ: number;
				public static CV_FRONT: number;
				public static CV_BACK: number;
				public static CV_GRAPH_VERTEX: number;
				public static CV_GRAPH_TREE_EDGE: number;
				public static CV_GRAPH_BACK_EDGE: number;
				public static CV_GRAPH_FORWARD_EDGE: number;
				public static CV_GRAPH_CROSS_EDGE: number;
				public static CV_GRAPH_ANY_EDGE: number;
				public static CV_GRAPH_NEW_TREE: number;
				public static CV_GRAPH_BACKTRACKING: number;
				public static CV_GRAPH_OVER: number;
				public static CV_GRAPH_ALL_ITEMS: number;
				public static CV_GRAPH_ITEM_VISITED_FLAG: number;
				public static CV_GRAPH_SEARCH_TREE_NODE_FLAG: number;
				public static CV_GRAPH_FORWARD_EDGE_FLAG: number;
				public static CV_KMEANS_USE_INITIAL_LABELS: number;
				public static CV_ErrModeLeaf: number;
				public static CV_ErrModeParent: number;
				public static CV_ErrModeSilent: number;
				public static cvFuncName: string;
				public static SORT_EVERY_ROW: number;
				public static SORT_EVERY_COLUMN: number;
				public static SORT_ASCENDING: number;
				public static SORT_DESCENDING: number;
				public static COVAR_SCRAMBLED: number;
				public static COVAR_NORMAL: number;
				public static COVAR_USE_AVG: number;
				public static COVAR_SCALE: number;
				public static COVAR_ROWS: number;
				public static COVAR_COLS: number;
				public static KMEANS_RANDOM_CENTERS: number;
				public static KMEANS_PP_CENTERS: number;
				public static KMEANS_USE_INITIAL_LABELS: number;
				public static REDUCE_SUM: number;
				public static REDUCE_AVG: number;
				public static REDUCE_MAX: number;
				public static REDUCE_MIN: number;
				public static ROTATE_90_CLOCKWISE: number;
				public static ROTATE_180: number;
				public static ROTATE_90_COUNTERCLOCKWISE: number;
				public static INT: number;
				public static BOOLEAN: number;
				public static REAL: number;
				public static STRING: number;
				public static MAT: number;
				public static MAT_VECTOR: number;
				public static ALGORITHM: number;
				public static FLOAT: number;
				public static UNSIGNED_INT: number;
				public static UINT64: number;
				public static UCHAR: number;
				public static SCALAR: number;
				public static FEATURE_SET_COMPUTE_10: number;
				public static FEATURE_SET_COMPUTE_11: number;
				public static FEATURE_SET_COMPUTE_12: number;
				public static FEATURE_SET_COMPUTE_13: number;
				public static FEATURE_SET_COMPUTE_20: number;
				public static FEATURE_SET_COMPUTE_21: number;
				public static FEATURE_SET_COMPUTE_30: number;
				public static FEATURE_SET_COMPUTE_32: number;
				public static FEATURE_SET_COMPUTE_35: number;
				public static FEATURE_SET_COMPUTE_50: number;
				public static GLOBAL_ATOMICS: number;
				public static SHARED_ATOMICS: number;
				public static NATIVE_DOUBLE: number;
				public static WARP_SHUFFLE_FUNCTIONS: number;
				public static DYNAMIC_PARALLELISM: number;
				public static OCL_VECTOR_OWN: number;
				public static OCL_VECTOR_MAX: number;
				public static OCL_VECTOR_DEFAULT: number;
				public static ACCESS_READ: number;
				public static ACCESS_WRITE: number;
				public static ACCESS_RW: number;
				public static ACCESS_MASK: number;
				public static ACCESS_FAST: number;
				public static USAGE_DEFAULT: number;
				public static USAGE_ALLOCATE_HOST_MEMORY: number;
				public static USAGE_ALLOCATE_DEVICE_MEMORY: number;
				public static USAGE_ALLOCATE_SHARED_MEMORY: number;
				public static __UMAT_USAGE_FLAGS_32BIT: number;
				public static SOLVELP_UNBOUNDED: number;
				public static SOLVELP_UNFEASIBLE: number;
				public static SOLVELP_SINGLE: number;
				public static SOLVELP_MULTI: number;
				public static notEquals(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.opencv_core.Range): boolean;
				public static batchDistance(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: number, param9: boolean): void;
				public static cvSVD(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvKMeans2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.CvTermCriteria, param4: number, param5: java.nio.LongBuffer, param6: number, param7: org.bytedeco.javacpp.helper.opencv_core.CvArr, param8: java.nio.DoubleBuffer): number;
				public static orPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static max32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static min32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvSeqPopMulti(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: number, param3: number): void;
				public static randu(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvMaxS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvMatMul(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static trace(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static format(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.Formatted;
				public static divide(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvRect(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvRect;
				public static merge64s(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.LongPointer, param2: number, param3: number): void;
				public static recip8s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static sqrt32f(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static cvFlip(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvMixChannels(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number, param4: java.nio.IntBuffer, param5: number): void;
				public static mul8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static patchNaNs(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): void;
				public static QR32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.FloatPointer, param6: number, param7: org.bytedeco.javacpp.FloatPointer): number;
				public static cvNulDevReport(param0: number, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.BytePointer, param4: number, param5: org.bytedeco.javacpp.Pointer): number;
				public static intSaturate(param0: org.bytedeco.javacpp.opencv_core.float16_t): number;
				public static cvSeqPushFront(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.BytePointer;
				public static cvMat(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static fastAtan32f(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: java.nio.FloatBuffer, param3: number, param4: boolean): void;
				public static kernelToStr(param0: org.bytedeco.javacpp.opencv_core.UMat): string;
				public static or(param0: number, param1: number): number;
				public static merge32s(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): void;
				public static cvSeqRemove(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: number): void;
				public static checkOptimalVectorWidth(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string, param2: org.bytedeco.javacpp.opencv_core.SparseMat): void;
				public static inRange(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static solvePoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): number;
				public static getIppErrorLocation(): org.bytedeco.javacpp.BytePointer;
				public static exp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: boolean): void;
				public static cvCreateMatNDHeader(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static setBreakOnError(param0: boolean): boolean;
				public static min32s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static batchDistance(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static split8u(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number, param3: number): void;
				public static PCACompute2(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): void;
				public static cvSetIdentity(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: native.Array<number>, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>): void;
				public static log64f(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static cvAvgSdv(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static div8s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvSeqSlice(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvSlice): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static print(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static sub8s(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static extractImageCOI(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvSliceLength(param0: org.bytedeco.javacpp.opencv_core.CvSlice, param1: org.bytedeco.javacpp.opencv_core.CvSeq): number;
				public static log(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number): void;
				public static fastAtan64f(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: boolean): void;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static getOpenCLErrorString(param0: number): org.bytedeco.javacpp.BytePointer;
				public static normHamming(param0: native.Array<number>, param1: number, param2: number): number;
				public static multiplyPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static cvScalarToRawData(param0: org.bytedeco.javacpp.opencv_core.CvScalar, param1: org.bytedeco.javacpp.Pointer, param2: number): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cmp8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static mean(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static absdiff16s(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cmp32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): void;
				public static insertImageCOI(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static cvCreateSparseMat(param0: number, param1: native.Array<number>, param2: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
				public static buildOptionsAddMatrixDescription(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static solveCubic(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static cvGetNextSparseNode(param0: org.bytedeco.javacpp.opencv_core.CvSparseMatIterator): org.bytedeco.javacpp.opencv_core.CvSparseNode;
				public static not8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static max32s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static merge32s(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: number): void;
				public static min8s(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static transpose(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static PCABackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static setBufferPoolUsage(param0: boolean): void;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
				public static dct(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvSeqInsert(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: number, param2: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.BytePointer;
				public static char_tolower(param0: number): number;
				public static mul64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: java.nio.DoubleBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvPointTo32f(param0: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.DMatch): void;
				public static Cholesky32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: number, param3: org.bytedeco.javacpp.FloatPointer, param4: number, param5: number): boolean;
				public static absdiff64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: java.nio.DoubleBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static sort(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvGetCols(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static cvt32f16f(param0: java.nio.FloatBuffer, param1: org.bytedeco.javacpp.opencv_core.float16_t, param2: number): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static getNumThreads(): number;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static compare(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
				public static max16s(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvGetReal2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number): number;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static and8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvPtr2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number): org.bytedeco.javacpp.BytePointer;
				public static solveLP(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static buildOptionsAddMatrixDescription(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static log(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: number): void;
				public static SVDecomp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static addWeighted32s(param0: java.nio.IntBuffer, param1: number, param2: java.nio.IntBuffer, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvReshape(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static cvMinMaxLoc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>): void;
				public static cvConvert(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static redirectError(param0: org.bytedeco.javacpp.opencv_core.ErrorCallback, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.ErrorCallback;
				public static min(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvCreateMatNDHeader(param0: number, param1: java.nio.IntBuffer, param2: number): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static cvResetImageROI(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static recip16u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static gemm32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: number, param5: native.Array<number>, param6: number, param7: number, param8: native.Array<number>, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static add16s(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvGetRawData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.ByteBuffer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.CvSize): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static patchNaNs(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): void;
				public static findFile(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static cvGetRealND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>): number;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static getIppVersion(): org.bytedeco.javacpp.BytePointer;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static exp(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number): void;
				public static exp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calcCovarMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static cvGetND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static idct(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static merge16u(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): void;
				public static QR64f(param0: java.nio.DoubleBuffer, param1: number, param2: number, param3: number, param4: number, param5: java.nio.DoubleBuffer, param6: number, param7: java.nio.DoubleBuffer): number;
				public static min(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvRNG(): number;
				public static cvSetData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.Pointer, param2: number): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvSolvePoly(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: number, param3: number): void;
				public static cvarrToMatND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.Mat;
				public static mul16s(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static magnitude(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: java.nio.FloatBuffer, param3: number): void;
				public static cvCreateImageHeader(param0: org.bytedeco.javacpp.opencv_core.CvSize, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.IplImage;
				public static eigen(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static mixChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number): void;
				public static perspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvT(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static buildOptionsAddMatrixDescription(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static LU(param0: java.nio.DoubleBuffer, param1: number, param2: number, param3: java.nio.DoubleBuffer, param4: number, param5: number): number;
				public static addRNGBias64f(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: number): void;
				public static cvSubRS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static add32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static exp32f(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static seqPushFront(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.BytePointer;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvRedirectError(param0: org.bytedeco.javacpp.opencv_core.CvErrorCallback, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.CvErrorCallback;
				public static seqPushFront(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.BytePointer;
				public static scaleAdd(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvSetIPLAllocators(param0: org.bytedeco.javacpp.opencv_core.Cv_iplCreateImageHeader, param1: org.bytedeco.javacpp.opencv_core.Cv_iplAllocateImageData, param2: org.bytedeco.javacpp.opencv_core.Cv_iplDeallocate, param3: org.bytedeco.javacpp.opencv_core.Cv_iplCreateROI, param4: org.bytedeco.javacpp.opencv_core.Cv_iplCloneImage): void;
				public static solve(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static addWeighted16s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvCheckArr(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number): number;
				public static not(param0: number): boolean;
				public static QR64f(param0: native.Array<number>, param1: number, param2: number, param3: number, param4: number, param5: native.Array<number>, param6: number, param7: native.Array<number>): number;
				public static normL1_(param0: native.Array<number>, param1: native.Array<number>, param2: number): number;
				public static invert(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): number;
				public static or8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvGetRawData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.CvSize): void;
				public static shiftLeft(param0: string, param1: org.bytedeco.javacpp.opencv_core.Formatted): string;
				public static getTrace(): org.bytedeco.javacpp.opencv_core.InstrNode;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
				public static dct(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static cvScaleAdd(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: number): number;
				public static cvStartWriteSeq(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMemStorage, param4: org.bytedeco.javacpp.opencv_core.CvSeqWriter): void;
				public static cvGetRawData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.CvSize): void;
				public static cvGetImage(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.opencv_core.IplImage;
				public static solveCubic(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvMakeSeqHeaderForArray(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.Pointer, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvSeq, param6: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static cvRect(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_core.CvRect;
				public static cvCartToPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number): void;
				public static cvMinMaxLoc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.DoubleBuffer): void;
				public static cvCreateGraphScanner(param0: org.bytedeco.javacpp.opencv_core.CvGraph): org.bytedeco.javacpp.opencv_core.CvGraphScanner;
				public static mul64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvmGet(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number, param2: number): number;
				public static cvClearMemStorage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): void;
				public static log(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static min8s(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static equals(param0: org.bytedeco.javacpp.opencv_core.NodeData, param1: org.bytedeco.javacpp.opencv_core.NodeData): boolean;
				public static cvPtr1D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.BytePointer;
				public static split64s(param0: org.bytedeco.javacpp.LongPointer, param1: org.bytedeco.javacpp.LongPointer, param2: number, param3: number): void;
				public static cvRandArr(param0: native.Array<number>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static divide(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvScale(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static add16s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static magnitude(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>, param3: number): void;
				public static cvSeqElemIdx(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer): number;
				public static cvInitMatHeader(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static cvError(param0: number, param1: string, param2: string, param3: string, param4: number): void;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static merge16u(param0: java.nio.ShortBuffer, param1: java.nio.ShortBuffer, param2: number, param3: number): void;
				public static lessThan(param0: org.bytedeco.javacpp.opencv_core.FileNodeIterator, param1: org.bytedeco.javacpp.opencv_core.FileNodeIterator): boolean;
				public static flip(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static solvePoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static min(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cmp16s(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static mul32s(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static char_toupper(param0: number): number;
				public static Cholesky64f(param0: native.Array<number>, param1: number, param2: number, param3: native.Array<number>, param4: number, param5: number): boolean;
				public static CV_16FC1(): number;
				public static checkOptimalVectorWidth(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: number): number;
				public static cvLog(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static SVD32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: native.Array<number>, param4: number, param5: native.Array<number>, param6: number, param7: number, param8: number, param9: number): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvRandInt(param0: native.Array<number>): number;
				public static sqrt64f(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static checkRange(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number): boolean;
				public static sqrt64f(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: number): void;
				public static greaterThanEquals(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static LU(param0: java.nio.FloatBuffer, param1: number, param2: number, param3: java.nio.FloatBuffer, param4: number, param5: number): number;
				public static or(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static extractImageCOI(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static split64s(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): void;
				public static invSqrt(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: number): void;
				public static cvIsInf(param0: number): number;
				public static cvGraphFindEdgeByPtr(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param2: org.bytedeco.javacpp.opencv_core.CvGraphVtx): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static idft(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static idct(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvInRangeS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static normHamming(param0: org.bytedeco.javacpp.BytePointer, param1: number): number;
				public static recip64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvClearGraph(param0: org.bytedeco.javacpp.opencv_core.CvGraph): void;
				public static recip16u(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvPoint(param0: org.bytedeco.javacpp.opencv_core.Point): org.bytedeco.javacpp.opencv_core.CvPoint;
				public static repeat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static scaleAdd(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static mixChannels(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.IntPointer): void;
				public static cvSaveMemStoragePos(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage, param1: org.bytedeco.javacpp.opencv_core.CvMemStoragePos): void;
				public static cvMul(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static add8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static sub16u(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvLUT(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static PCACompute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static split16u(param0: org.bytedeco.javacpp.ShortPointer, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: number, param3: number): void;
				public static shiftLeft(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.opencv_core.TickMeter): org.bytedeco.javacpp.Pointer;
				public static unsignedSaturateCast(param0: org.bytedeco.javacpp.opencv_core.float16_t): number;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: java.nio.IntBuffer, param2: number): void;
				public static gemm32fc(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: number, param5: native.Array<number>, param6: number, param7: number, param8: native.Array<number>, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static cvCreateData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static convertFp16(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static findFileOrKeep(param0: string): string;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static andPut(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.Range;
				public static addWeighted32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static recip32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: boolean): void;
				public static mulTransposed(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number): void;
				public static mixChannels(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: java.nio.IntBuffer, param3: number): void;
				public static sumElems(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static calcCovarMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
				public static rotate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static mul16u(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static lessThanEquals(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static SVD32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer, param4: number, param5: java.nio.FloatBuffer, param6: number, param7: number, param8: number, param9: number): void;
				public static cvCrossProduct(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static PCACompute2(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): void;
				public static checkOptimalVectorWidth(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static SVD64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: java.nio.DoubleBuffer, param4: number, param5: java.nio.DoubleBuffer, param6: number, param7: number, param8: number, param9: number): void;
				public static and(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static QR32f(param0: java.nio.FloatBuffer, param1: number, param2: number, param3: number, param4: number, param5: java.nio.FloatBuffer, param6: number, param7: java.nio.FloatBuffer): number;
				public static div32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static randShuffle(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.RNG): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: native.Array<boolean>, param2: boolean): void;
				public static randu(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvSetZero(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvDFT(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static div32s(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvReleaseData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvXorS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvGetTickFrequency(): number;
				public static cvPtr2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: native.Array<number>): native.Array<number>;
				public static absdiff8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvRandArr(param0: java.nio.LongBuffer, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static absdiff16u(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static seqPopFront(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer): void;
				public static normL1_(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number): number;
				public static typeToStr(param0: number): org.bytedeco.javacpp.BytePointer;
				public static div8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static div32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvGet3D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static abs(param0: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static magnitude64f(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: number): void;
				public static shortSaturateCast(param0: number): number;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.SparseMat, param2: org.bytedeco.javacpp.opencv_core.SparseMat): void;
				public static normL1_(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer, param2: number): number;
				public static min16s(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvEigenVV(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number, param4: number, param5: number): void;
				public static split8u(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: number, param3: number): void;
				public static cvarrToMat(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: boolean, param2: boolean, param3: number, param4: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.Mat;
				public static convertScaleAbs(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static PCACompute2(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static inRange(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvPoint3D32f(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static completeSymm(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cmp8s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static shiftLeft(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.FileStorage;
				public static findFile(param0: string, param1: boolean, param2: boolean): string;
				public static cvTreeToNodeSeq(param0: org.bytedeco.javacpp.Pointer, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static cvCloneMatND(param0: org.bytedeco.javacpp.opencv_core.CvMatND): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static attachContext(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.Pointer, param3: org.bytedeco.javacpp.Pointer): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static extractChannel(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static transform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static xorPut(param0: java.nio.IntBuffer, param1: number): java.nio.IntBuffer;
				public static exp64f(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: number): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static insertImageCOI(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static fastAtan2(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>, param3: number, param4: boolean): void;
				public static cvConvertScale(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvOr(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): void;
				public static log32f(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static eigen(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static cvFloor(param0: number): number;
				public static setIdentity(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static add8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static haveAmdFft(): boolean;
				public static cvFree_(param0: org.bytedeco.javacpp.Pointer): void;
				public static greaterThanEquals(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvMinMaxLoc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.DMatch, param2: org.bytedeco.javacpp.opencv_core.DMatch): void;
				public static min32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static divUp(param0: number, param1: number): number;
				public static merge8u(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer, param2: number, param3: number): void;
				public static xorPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static recip8s(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static shiftRight(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.KeyPoint): void;
				public static cvConvertScaleAbs(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static mixChannels(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.IntPointer, param3: number): void;
				public static setIdentity(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvCreateSeqBlock(param0: org.bytedeco.javacpp.opencv_core.CvSeqWriter): void;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.DMatchVector, param2: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
				public static exp(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: number): void;
				public static invSqrt(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static cvSeqSearch(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.opencv_core.CvCmpFunc, param3: number, param4: java.nio.IntBuffer, param5: org.bytedeco.javacpp.Pointer): java.nio.ByteBuffer;
				public static getIppFeatures(): number;
				public static shiftRight(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
				public static getNumberOfCPUs(): number;
				public static checkOptimalVectorWidth(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: number): number;
				public static cvReleaseSparseMat(param0: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static or(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvCompleteSymm(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number): void;
				public static cmp16u(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static not(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvRealScalar(param0: number): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static cvSVBkSb(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: org.bytedeco.javacpp.helper.opencv_core.CvArr, param5: number): void;
				public static mean(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static split(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static mulTransposed(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: boolean): void;
				public static cmp16s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static findFileOrKeep(param0: string, param1: boolean): string;
				public static solvePoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cmp32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static useIPP_NE(): boolean;
				public static solvePoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): number;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static mean(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static cvGuiBoxReport(param0: number, param1: string, param2: string, param3: string, param4: number, param5: org.bytedeco.javacpp.Pointer): number;
				public static cvMatMulAddS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static cvIsNaN(param0: number): number;
				public static ensureSizeIsEnough(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvMulTransposed(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cmp32s(param0: java.nio.IntBuffer, param1: number, param2: java.nio.IntBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static predictOptimalVectorWidthMax(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static cvGetMat(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static cvRound(param0: number): number;
				public static idft(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static randShuffle(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static toUpperCase(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static merge16u(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.ShortPointer, param2: number, param3: number): void;
				public static lessThanEquals(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cv_abs(param0: number): number;
				public static findNonZero(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static mean(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static CV_MAT_DEPTH(param0: number): number;
				public static gemm64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: number, param5: native.Array<number>, param6: number, param7: number, param8: native.Array<number>, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static inRange(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static greaterThan(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>): void;
				public static print(param0: org.bytedeco.javacpp.opencv_core.Formatted, param1: org.bytedeco.javacpp.Pointer): number;
				public static CV_16FC3(): number;
				public static eigenNonSymmetric(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static or8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvBox2D(param0: java.nio.FloatBuffer, param1: org.bytedeco.javacpp.opencv_core.CvSize2D32f, param2: number): org.bytedeco.javacpp.opencv_core.CvBox2D;
				public static cvPtrND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: number, param4: java.nio.IntBuffer): java.nio.ByteBuffer;
				public static cvInitNArrayIterator(param0: number, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.CvMatND, param4: org.bytedeco.javacpp.opencv_core.CvNArrayIterator, param5: number): number;
				public static glob(param0: string, param1: org.bytedeco.javacpp.opencv_core.StringVector): void;
				public static cvCloneSeq(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static cvDiv(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static calcCovarMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number): void;
				public static parallel_for_(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.presets.opencv_core.Functor): void;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static solve(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static normL1_(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): number;
				public static cvNormalize(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvReduce(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static log32f(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static log(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvSeqSort(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvCmpFunc): void;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvSetReal1D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number): void;
				public static cvOrS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvTranspose(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvPrevTreeNode(param0: org.bytedeco.javacpp.opencv_core.CvTreeNodeIterator): org.bytedeco.javacpp.Pointer;
				public static cvSetSeqReaderPos(param0: org.bytedeco.javacpp.opencv_core.CvSeqReader, param1: number): void;
				public static cvSeqSearch(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.opencv_core.CvCmpFunc, param3: number, param4: java.nio.IntBuffer): java.nio.ByteBuffer;
				public static eigenNonSymmetric(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static div8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvPtrND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer): java.nio.ByteBuffer;
				public static xor(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvCvtScaleAbs(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static PSNR(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): number;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: boolean): void;
				public static cvInitSparseMatIterator(param0: org.bytedeco.javacpp.opencv_core.CvSparseMat, param1: org.bytedeco.javacpp.opencv_core.CvSparseMatIterator): org.bytedeco.javacpp.opencv_core.CvSparseNode;
				public static cvarrToMat(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.Mat;
				public static setUseIPP_NotExact(param0: boolean): void;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>): void;
				public static ucharSaturateCast(param0: org.bytedeco.javacpp.opencv_core.float16_t): number;
				public static cvSetImageROI(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.CvRect): void;
				public static cvStdErrReport(param0: number, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.BytePointer, param4: number, param5: org.bytedeco.javacpp.Pointer): number;
				public static min32s(param0: java.nio.IntBuffer, param1: number, param2: java.nio.IntBuffer, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static insertChannel(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static PCABackProject(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvAddS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvSize2D32f(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvSize2D32f;
				public static cvInitMatNDHeader(param0: org.bytedeco.javacpp.opencv_core.CvMatND, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static cvCvtScale(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static cvInitImageHeader(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.CvSize, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.IplImage;
				public static magnitude(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: number): void;
				public static CV_SEQ_ELTYPE_PPOINT(): number;
				public static SVDecomp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): void;
				public static LUT(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static randShuffle(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.RNG): void;
				public static cvSet(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static haveOpenCL(): boolean;
				public static cvCheckArr(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static printShortCudaDeviceInfo(param0: number): void;
				public static LU64f(param0: java.nio.DoubleBuffer, param1: number, param2: number, param3: java.nio.DoubleBuffer, param4: number, param5: number): number;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvSetRealND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: number): void;
				public static pow(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static dct(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static CV_MAKETYPE(param0: number, param1: number): number;
				public static split(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static predictOptimalVectorWidthMax(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static seqInsertSlice(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static SVDecomp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvGetImageCOI(param0: org.bytedeco.javacpp.opencv_core.IplImage): number;
				public static cvMatMulAddEx(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr, param6: number): void;
				public static dct(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static invert(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): number;
				public static addWeighted16u(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static log(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static cvKMeans2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.CvTermCriteria): number;
				public static getIppStatus(): number;
				public static format(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): org.bytedeco.javacpp.opencv_core.Formatted;
				public static SVD64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: native.Array<number>, param4: number, param5: native.Array<number>, param6: number, param7: number, param8: number, param9: number): void;
				public static PCAProject(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static LUT(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static extractImageCOI(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvPointFrom32f(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f): org.bytedeco.javacpp.opencv_core.CvPoint;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: boolean): void;
				public static max8s(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvReshapeMatND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number, param4: number, param5: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.helper.opencv_core.CvArr;
				public static divide(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static shiftRight(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvGetSeqReaderPos(param0: org.bytedeco.javacpp.opencv_core.CvSeqReader): number;
				public static setUseInstrumentation(param0: boolean): void;
				public static insertImageCOI(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static PCACompute2(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static tempfile(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static cvSeqInsert(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: number): org.bytedeco.javacpp.BytePointer;
				public static cvDecRefData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static resetDevice(): void;
				public static calcCovarMatrix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
				public static mul32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static min8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvMat(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static cvGetErrInfo(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>, param3: native.Array<number>): number;
				public static insertChannel(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static intSaturate(param0: number): number;
				public static mul8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvGetND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static min(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static glob(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.StringVector): void;
				public static convertScaleAbs(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static getBuildInformation(): org.bytedeco.javacpp.BytePointer;
				public static ushortSaturateCast(param0: org.bytedeco.javacpp.opencv_core.float16_t): number;
				public static split32s(param0: java.nio.IntBuffer, param1: java.nio.IntBuffer, param2: number, param3: number): void;
				public static determinant(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static cvOrS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvCreateSparseMat(param0: number, param1: java.nio.IntBuffer, param2: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
				public static cvFFT(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static merge32s(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: number): void;
				public static cvNextTreeNode(param0: org.bytedeco.javacpp.opencv_core.CvTreeNodeIterator): org.bytedeco.javacpp.Pointer;
				public static cvGetDims(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvSet(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static cvCreateChildMemStorage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvMemStorage;
				public static setIppStatus(param0: number, param1: string, param2: string, param3: number): void;
				public static max8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static checkOptimalVectorWidth(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static tempfile(param0: string): string;
				public static checkOptimalVectorWidth(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static min16u(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static sub64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: java.nio.DoubleBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static fastAtan32f(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: boolean): void;
				public static sqrt(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static equals(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static noArray(): org.bytedeco.javacpp.opencv_core.Mat;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string, param2: string): void;
				public static sub8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvMahalanobis(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static glob(param0: string, param1: org.bytedeco.javacpp.opencv_core.StringVector, param2: boolean): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvRectToROI(param0: org.bytedeco.javacpp.opencv_core.CvRect, param1: number): org.bytedeco.javacpp.opencv_core.IplROI;
				public static cvEigenVV(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvGetRows(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static xorPut(param0: org.bytedeco.javacpp.IntPointer, param1: number): org.bytedeco.javacpp.IntPointer;
				public static notEquals(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.DoublePointer): void;
				public static IPL_IMAGE_MAGIC_VAL(): number;
				public static abs(param0: number): number;
				public static transform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvIplImage(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.IplImage;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.opencv_core.KeyPoint): void;
				public static cvSVD(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number): void;
				public static cvPerspectiveTransform(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static int64SaturateCast(param0: number): number;
				public static toLowerCase(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static cvRandReal(param0: native.Array<number>): number;
				public static cvSort(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number): void;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: boolean): void;
				public static idct(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static cvSetAdd(param0: org.bytedeco.javacpp.opencv_core.CvSet, param1: org.bytedeco.javacpp.opencv_core.CvSetElem, param2: org.bytedeco.javacpp.PointerPointer<any>): number;
				public static cvSeqPartition(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: org.bytedeco.javacpp.PointerPointer<any>, param3: org.bytedeco.javacpp.opencv_core.CvCmpFunc, param4: org.bytedeco.javacpp.Pointer): number;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static max(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cmp8s(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static log(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: java.nio.FloatBuffer, param2: number): void;
				public static cvRemoveNodeFromTree(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.Pointer): void;
				public static writeScalar(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
				public static shiftRight(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.DMatch): void;
				public static andPut(param0: org.bytedeco.javacpp.IntPointer, param1: number): org.bytedeco.javacpp.IntPointer;
				public static roundUp(param0: number, param1: number): number;
				public static patchNaNs(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvGraphRemoveVtx(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: number): number;
				public static add64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: java.nio.DoubleBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static LU(param0: native.Array<number>, param1: number, param2: number, param3: native.Array<number>, param4: number, param5: number): number;
				public static cvRandArr(param0: org.bytedeco.javacpp.LongPointer, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static absdiff64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static writeScalar(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvNorm(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static cvSeqPopFront(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer): void;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: boolean): void;
				public static addPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.Mat;
				public static absdiff32s(param0: java.nio.IntBuffer, param1: number, param2: java.nio.IntBuffer, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static fastAtan64f(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: number, param4: boolean): void;
				public static add16u(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvGraphAddEdgeByPtr(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param2: org.bytedeco.javacpp.opencv_core.CvGraphVtx): number;
				public static split(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static div16s(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvIplImage(): org.bytedeco.javacpp.opencv_core.IplImage;
				public static findNonZero(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvCeil(param0: number): number;
				public static setRNGSeed(param0: number): void;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static memopTypeToStr(param0: number): org.bytedeco.javacpp.BytePointer;
				public static PSNR(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.Range, param2: org.bytedeco.javacpp.opencv_core.Range): void;
				public static cvCreateSeq(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static cvSeqPopMulti(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: number): void;
				public static cvScalar(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static add(param0: org.bytedeco.javacpp.opencv_core.Range, param1: number): org.bytedeco.javacpp.opencv_core.Range;
				public static cvSeqPush(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.BytePointer;
				public static andPut(param0: java.nio.IntBuffer, param1: number): java.nio.IntBuffer;
				public static addWeighted32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvMat(): org.bytedeco.javacpp.opencv_core.CvMat;
				public static getThreadID(): number;
				public static sub16u(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static Mahalanobis(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static cvMatMulAdd(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvPointFrom32f(param0: java.nio.FloatBuffer): java.nio.IntBuffer;
				public static add64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static multiply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvSetErrMode(param0: number): number;
				public static CV_64FC(param0: number): number;
				public static solve(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
				public static cvSet3D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static sub8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvMinS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static or(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvGetImageROI(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.opencv_core.CvRect;
				public static cvRedirectError(param0: org.bytedeco.javacpp.opencv_core.CvErrorCallback, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.PointerPointer<any>): org.bytedeco.javacpp.opencv_core.CvErrorCallback;
				public static cvCreateMemStorage(param0: number): org.bytedeco.javacpp.opencv_core.CvMemStorage;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.DoubleBuffer): void;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: org.bytedeco.javacpp.opencv_core.SparseMat, param2: number, param3: number): void;
				public static patchNaNs(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static mixChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: native.Array<number>, param3: number): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static checkRange(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number): boolean;
				public static cvGetSubRect(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvRect): org.bytedeco.javacpp.opencv_core.CvMat;
				public static checkOptimalVectorWidth(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: number): number;
				public static kernelToStr(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: string): string;
				public static sqrt32f(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number): void;
				public static parallel_for_(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.opencv_core.ParallelLoopBody, param2: number): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static max64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvMatND(): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static recip32s(param0: java.nio.IntBuffer, param1: number, param2: java.nio.IntBuffer, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvAddS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static add8s(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvGetRawData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>): void;
				public static cvGetSeqElem(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: number): org.bytedeco.javacpp.BytePointer;
				public static cvPoint2D64f(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
				public static exp(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: number): void;
				public static trace(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static cvCalcPCA(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number): void;
				public static setUseIPP_NE(param0: boolean): void;
				public static div64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static fastAtan2(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: java.nio.FloatBuffer, param3: number, param4: boolean): void;
				public static useOptimized(): boolean;
				public static insertImageCOI(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static recip64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: java.nio.DoubleBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static greaterThan(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static sub32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static greaterThanEquals(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static completeSymm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean): void;
				public static cvGetErrInfo(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.IntPointer): number;
				public static randShuffle(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static mul16s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static absdiff32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static unsignedSaturateCast(param0: number): number;
				public static setIppStatus(param0: number): void;
				public static cvDotProduct(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static registerPageLocked(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvGraphAddEdge(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: number, param2: number): number;
				public static transpose(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvCopy(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvAvg(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: boolean): void;
				public static cvGraphRemoveEdgeByPtr(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param2: org.bytedeco.javacpp.opencv_core.CvGraphVtx): void;
				public static convertFp16(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static predictOptimalVectorWidth(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static cvSub(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvNorm(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static print(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.Pointer): number;
				public static cvSlice(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvSlice;
				public static SVBackSubst(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvRandReal(param0: org.bytedeco.javacpp.LongPointer): number;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.KeyPoint, param2: org.bytedeco.javacpp.opencv_core.KeyPoint): void;
				public static cvSeqPush(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.BytePointer;
				public static cvAbsDiff(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static convertTypeStr(param0: number, param1: number, param2: number, param3: native.Array<number>): org.bytedeco.javacpp.BytePointer;
				public static getVersionRevision(): number;
				public static cvPtr3D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number, param4: native.Array<number>): native.Array<number>;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static recip32s(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvGetRow(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static cvSetND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static cvSeqPushMulti(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: number, param3: number): void;
				public static CV_16FC4(): number;
				public static mulTransposed(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: boolean): void;
				public static recip16s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvClearSet(param0: org.bytedeco.javacpp.opencv_core.CvSet): void;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static SVBackSubst(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static div16u(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static normHamming(param0: native.Array<number>, param1: native.Array<number>, param2: number): number;
				public static cvGetRealND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer): number;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static haveSVM(): boolean;
				public static cvSetNew(param0: org.bytedeco.javacpp.opencv_core.CvSet): org.bytedeco.javacpp.opencv_core.CvSetElem;
				public static cvGetErrMode(): number;
				public static exp64f(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static multiplyPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static dividePut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static recip64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static divide(param0: number, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static addWeighted8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static merge64s(param0: java.nio.LongBuffer, param1: java.nio.LongBuffer, param2: number, param3: number): void;
				public static addWeighted16u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvIncRefData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static cvCloneMat(param0: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static transform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvGraphVtxDegreeByPtr(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx): number;
				public static sqrt(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: number): void;
				public static cmp64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvGetDims(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer): number;
				public static absdiff32s(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static mul8s(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvMirror(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static divide(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
				public static alignSize(param0: number, param1: number): number;
				public static min8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static sub16u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvXor(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static calcCovarMatrix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static max32s(param0: java.nio.IntBuffer, param1: number, param2: java.nio.IntBuffer, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static gemm32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: number, param5: org.bytedeco.javacpp.FloatPointer, param6: number, param7: number, param8: org.bytedeco.javacpp.FloatPointer, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static div8s(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvInitMatNDHeader(param0: org.bytedeco.javacpp.opencv_core.CvMatND, param1: number, param2: java.nio.IntBuffer, param3: number): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvGetNumThreads(): number;
				public static mul64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvSet1D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static kernelToStr(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: string): string;
				public static min16u(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static extractImageCOI(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static setIdentity(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvSetSeqBlockSize(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: number): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
				public static cvMerge(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static split32s(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: number, param3: number): void;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
				public static cvRepeat(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static idft(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static cvScalarToRawData(param0: org.bytedeco.javacpp.opencv_core.CvScalar, param1: org.bytedeco.javacpp.Pointer, param2: number, param3: number): void;
				public static cvScalarAll(param0: number): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static cvGetRealND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.IntPointer): number;
				public static cvCreateMatNDHeader(param0: number, param1: native.Array<number>, param2: number): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static sub32s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static gemm32fc(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: number, param5: org.bytedeco.javacpp.FloatPointer, param6: number, param7: number, param8: org.bytedeco.javacpp.FloatPointer, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static cvAddWeighted(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number, param4: number, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvCloneGraph(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvGraph;
				public static CV_MAT_TYPE(param0: number): number;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.DoublePointer): void;
				public static xorPut(param0: native.Array<number>, param1: number): native.Array<number>;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static checkOptimalVectorWidth(param0: java.nio.IntBuffer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: number): number;
				public static min16s(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static shiftLeft(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: native.Array<number>): org.bytedeco.javacpp.opencv_core.FileStorage;
				public static normHamming(param0: java.nio.ByteBuffer, param1: number, param2: number): number;
				public static recip8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvGetErrInfo(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: org.bytedeco.javacpp.PointerPointer<any>, param3: org.bytedeco.javacpp.IntPointer): number;
				public static addWeighted32s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static lessThanEquals(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvCreateGraph(param0: number, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvGraph;
				public static addRNGBias64f(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static cvCreateMat(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static buildOptionsAddMatrixDescription(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cmp8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static CV_MAT_CN(param0: number): number;
				public static cvErrorStr(param0: number): org.bytedeco.javacpp.BytePointer;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>): void;
				public static checkOptimalVectorWidth(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: number): number;
				public static cvRawDataToScalar(param0: org.bytedeco.javacpp.Pointer, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static convertTypeStr(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer): string;
				public static cvAnd(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvSetReal2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number): void;
				public static div16s(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static seqRemove(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: number): void;
				public static cvSeqPop(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer): void;
				public static batchDistance(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: number, param9: boolean): void;
				public static intRand(): number;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string, param2: org.bytedeco.javacpp.opencv_core.DMatch): void;
				public static recip8s(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static PSNR(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): number;
				public static add(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvAndS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static fastMalloc(param0: number): org.bytedeco.javacpp.Pointer;
				public static cvAndS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
				public static setDevice(param0: number): void;
				public static randn(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvSeqPopFront(param0: org.bytedeco.javacpp.opencv_core.CvSeq): void;
				public static cvSeqSearch(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.opencv_core.CvCmpFunc, param3: number, param4: native.Array<number>, param5: org.bytedeco.javacpp.Pointer): native.Array<number>;
				public static cmp64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static predictOptimalVectorWidth(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static add16u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static absdiff16s(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>): void;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.opencv_core.Range): void;
				public static batchDistance(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static Mahalanobis(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static cvDet(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static convertTypeStr(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static convertScaleAbs(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static cvNextNArraySlice(param0: org.bytedeco.javacpp.opencv_core.CvNArrayIterator): number;
				public static Cholesky(param0: native.Array<number>, param1: number, param2: number, param3: native.Array<number>, param4: number, param5: number): boolean;
				public static cmp16u(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static add32s(param0: java.nio.IntBuffer, param1: number, param2: java.nio.IntBuffer, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvCheckTermCriteria(param0: org.bytedeco.javacpp.opencv_core.CvTermCriteria, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvTermCriteria;
				public static extractImageCOI(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static cvGetDims(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>): number;
				public static mul16s(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static addRNGBias64f(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: number): void;
				public static cvRestoreMemStoragePos(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage, param1: org.bytedeco.javacpp.opencv_core.CvMemStoragePos): void;
				public static CV_IS_CONT_MAT(param0: number): number;
				public static mixChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: java.nio.IntBuffer, param5: number): void;
				public static cvInitNArrayIterator(param0: number, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.CvMatND, param4: org.bytedeco.javacpp.opencv_core.CvNArrayIterator): number;
				public static solveLP(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static cvCopy(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvGraphFindEdge(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
				public static getOptimalDFTSize(param0: number): number;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static extractImageCOI(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static equals(param0: number, param1: number): boolean;
				public static mul8s(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static absdiff8s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvCreateImage(param0: org.bytedeco.javacpp.opencv_core.CvSize, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.IplImage;
				public static cvKMeans2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.CvTermCriteria, param4: number, param5: org.bytedeco.javacpp.LongPointer, param6: number, param7: org.bytedeco.javacpp.helper.opencv_core.CvArr, param8: org.bytedeco.javacpp.DoublePointer): number;
				public static cvScalar(param0: number): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: native.Array<number>, param2: native.Array<number>): void;
				public static add32s(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static seqRemoveSlice(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvSlice): void;
				public static insertChannel(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static cvGetRows(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static cvSolveCubic(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat): number;
				public static cvSeqInvert(param0: org.bytedeco.javacpp.opencv_core.CvSeq): void;
				public static getSeqElem(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: number): org.bytedeco.javacpp.BytePointer;
				public static split(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static mulTransposed(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number): void;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static magnitude64f(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: number): void;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): void;
				public static Cholesky32f(param0: native.Array<number>, param1: number, param2: number, param3: native.Array<number>, param4: number, param5: number): boolean;
				public static cvZero(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvSeqElemIdx(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.opencv_core.CvSeqBlock): number;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
				public static gemm64fc(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: number, param5: org.bytedeco.javacpp.DoublePointer, param6: number, param7: number, param8: org.bytedeco.javacpp.DoublePointer, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static checkHardwareSupport(param0: number): boolean;
				public static magnitude32f(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: java.nio.FloatBuffer, param3: number): void;
				public static cvClone(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
				public static setFlags(param0: number): void;
				public static cvClearND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer): void;
				public static cvSub(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static dct(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static solve(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): boolean;
				public static print(param0: org.bytedeco.javacpp.opencv_core.Formatted): number;
				public static shiftLeft(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: java.nio.ByteBuffer): org.bytedeco.javacpp.opencv_core.FileStorage;
				public static getHardwareFeatureName(param0: number): org.bytedeco.javacpp.BytePointer;
				public static cvCheckHardwareSupport(param0: number): number;
				public static cvGraphAddEdgeByPtr(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param2: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param3: org.bytedeco.javacpp.opencv_core.CvGraphEdge, param4: org.bytedeco.javacpp.PointerPointer<any>): number;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static CV_FP16_TYPE(): number;
				public static cvTermCriteria(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvTermCriteria;
				public static kmeans(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.TermCriteria, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static ucharSaturateCast(param0: number): number;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvAlloc(param0: number): org.bytedeco.javacpp.Pointer;
				public static gemm64fc(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: number, param5: java.nio.DoubleBuffer, param6: number, param7: number, param8: java.nio.DoubleBuffer, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static solvePoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): number;
				public static split32s(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: number): void;
				public static cmp32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static CV_16UC(param0: number): number;
				public static cvSort(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static CV_VERSION(): string;
				public static recip32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static compare(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
				public static cvGetErrStatus(): number;
				public static mixChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: native.Array<number>, param5: number): void;
				public static LU(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: number, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: number): number;
				public static cvReleaseImageHeader(param0: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static cvFlip(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static convertFp16(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvScalar(param0: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static trace(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static clearSeq(param0: org.bytedeco.javacpp.opencv_core.CvSeq): void;
				public static recip16s(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static div64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: java.nio.DoubleBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static invSqrt(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: number): void;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.DoublePointer): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static exp32f(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.DoublePointer): void;
				public static cvPoint(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvPoint;
				public static divide(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
				public static cvGEMM(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr, param6: number): void;
				public static cvMul(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number): void;
				public static checkOptimalVectorWidth(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: org.bytedeco.javacpp.opencv_core.Mat, param10: number): number;
				public static normHamming(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer, param2: number): number;
				public static min16u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvPtr3D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number): org.bytedeco.javacpp.BytePointer;
				public static copyTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static mean(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static invSqrt(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static seqPopFront(param0: org.bytedeco.javacpp.opencv_core.CvSeq): void;
				public static cvCreateMatND(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static equals(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.opencv_core.Range): boolean;
				public static cvMat(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static Cholesky(param0: java.nio.FloatBuffer, param1: number, param2: number, param3: java.nio.FloatBuffer, param4: number, param5: number): boolean;
				public static CV_STRUCT_INITIALIZER(): number;
				public static recip32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static sortIdx(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static max8s(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvSize(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_core.CvSize;
				public static div16s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvInvert(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): number;
				public static cvReleaseMemStorage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): void;
				public static cvSetNumThreads(): void;
				public static and(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static LU64f(param0: native.Array<number>, param1: number, param2: number, param3: native.Array<number>, param4: number, param5: number): number;
				public static cmp16s(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static findFile(param0: org.bytedeco.javacpp.BytePointer, param1: boolean, param2: boolean): org.bytedeco.javacpp.BytePointer;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static min32s(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static notEquals(param0: number, param1: number): boolean;
				public static getDevice(): number;
				public static subtractPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static not8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvCloneImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.opencv_core.IplImage;
				public static min64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: java.nio.DoubleBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvDFT(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static cvGetDiag(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static dct(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static kernelToStr(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static invSqrt32f(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number): void;
				public static fastAtan64f(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>, param3: number, param4: boolean): void;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.DoublePointer): void;
				public static addRNGBias32f(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static sort(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static SVDecomp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): void;
				public static xor(param0: number, param1: number): number;
				public static extractChannel(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static cvPtr2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.BytePointer;
				public static sqrt(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static transpose(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static haveAmdBlas(): boolean;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static predictOptimalVectorWidthMax(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static fastAtan2(param0: number, param1: number): number;
				public static cvGraphRemoveEdge(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: number, param2: number): void;
				public static cvSeqPop(param0: org.bytedeco.javacpp.opencv_core.CvSeq): void;
				public static format(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): org.bytedeco.javacpp.opencv_core.Formatted;
				public static not(param0: org.bytedeco.javacpp.opencv_core.Range): boolean;
				public static cvTrace(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static cvSize(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvSize;
				public static cvClearND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.IntPointer): void;
				public static cvSubS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static convertScaleAbs(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvSetImageCOI(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: number): void;
				public static cvReleaseMemStorage(param0: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static PCAProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static predictOptimalVectorWidth(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvCreateMemStorage(): org.bytedeco.javacpp.opencv_core.CvMemStorage;
				public static cvReleaseMatND(param0: org.bytedeco.javacpp.opencv_core.CvMatND): void;
				public static parallel_for_(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.presets.opencv_core.Functor, param2: number): void;
				public static cvSeqRemoveSlice(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvSlice): void;
				public static repeat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static normHamming(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): number;
				public static Cholesky64f(param0: java.nio.DoubleBuffer, param1: number, param2: number, param3: java.nio.DoubleBuffer, param4: number, param5: number): boolean;
				public static setBufferPoolConfig(param0: number, param1: number, param2: number): void;
				public static int64SaturateCast(param0: org.bytedeco.javacpp.opencv_core.float16_t): number;
				public static cvReleaseMat(param0: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static max32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: number): void;
				public static idct(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static equals(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
				public static sub32s(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static getVersionString(): org.bytedeco.javacpp.BytePointer;
				public static SVD32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer, param4: number, param5: org.bytedeco.javacpp.FloatPointer, param6: number, param7: number, param8: number, param9: number): void;
				public static cvSeqPartition(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: org.bytedeco.javacpp.opencv_core.CvSeq, param3: org.bytedeco.javacpp.opencv_core.CvCmpFunc, param4: org.bytedeco.javacpp.Pointer): number;
				public static min32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvCalcCovarMatrix(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number): void;
				public static magnitude32f(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>, param3: number): void;
				public static extractChannel(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static addSamplesDataSearchSubDirectory(param0: string): void;
				public static cvNorm(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvXorS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static repeat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static add32s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static sqrt(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number): void;
				public static div32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvCompleteSymm(param0: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static cvTransform(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static cvPoint3D64f(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
				public static cvScalar(): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static gemm64fc(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: number, param5: native.Array<number>, param6: number, param7: number, param8: native.Array<number>, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static absdiff8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvNot(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static shiftLeft(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Formatted): org.bytedeco.javacpp.BytePointer;
				public static normL2Sqr_(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number): number;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: boolean): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static absdiff16s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvExp(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static solvePoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static and8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static fastFree(param0: org.bytedeco.javacpp.Pointer): void;
				public static max(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static batchDistance(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static addSamplesDataSearchPath(param0: org.bytedeco.javacpp.BytePointer): void;
				public static addWeighted16u(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static sub8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static predictOptimalVectorWidth(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat, param8: org.bytedeco.javacpp.opencv_core.Mat, param9: number): number;
				public static repeat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static merge64s(param0: org.bytedeco.javacpp.LongPointer, param1: org.bytedeco.javacpp.LongPointer, param2: number, param3: number): void;
				public static cvNormalize(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvarrToMatND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: boolean, param2: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer): void;
				public static cmp32s(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static copyTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static absdiff(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvSetND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static getThreadNum(): number;
				public static merge16u(param0: org.bytedeco.javacpp.ShortPointer, param1: org.bytedeco.javacpp.ShortPointer, param2: number, param3: number): void;
				public static checkOptimalVectorWidth(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static log64f(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: number): void;
				public static cvSet2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static predictOptimalVectorWidth(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: number): number;
				public static attachContext(param0: string, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.Pointer, param3: org.bytedeco.javacpp.Pointer): void;
				public static print(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static eigen(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: java.nio.ByteBuffer, param2: number): void;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvGetDimSize(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number): number;
				public static recip8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static sqrt32f(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static cvRandShuffle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: number): void;
				public static xor8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static orPut(param0: java.nio.IntBuffer, param1: number): java.nio.IntBuffer;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.DoubleBuffer): void;
				public static add8s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public constructor();
				public static cvGet2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static cvPow(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static sumElems(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static cvBox2D(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param1: org.bytedeco.javacpp.opencv_core.CvSize2D32f, param2: number): org.bytedeco.javacpp.opencv_core.CvBox2D;
				public static cvSeqPushFront(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.BytePointer;
				public static addWeighted8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static deviceSupports(param0: number): boolean;
				public static lessThan(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static convertScaleAbs(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static rotate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static xor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static split64s(param0: org.bytedeco.javacpp.LongPointer, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: number, param3: number): void;
				public static and(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.Range;
				public static PSNR(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): number;
				public static cvReduce(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static cvAdd(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static add32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static sub32s(param0: java.nio.IntBuffer, param1: number, param2: java.nio.IntBuffer, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static seqPop(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer): void;
				public static cvRandInt(param0: java.nio.LongBuffer): number;
				public static cvKMeans2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.CvTermCriteria, param4: number, param5: native.Array<number>, param6: number, param7: org.bytedeco.javacpp.helper.opencv_core.CvArr, param8: native.Array<number>): number;
				public static setIdentity(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static uint64SaturateCast(param0: number): number;
				public static randShuffle(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvInitNArrayIterator(param0: number, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.CvMatND, param4: org.bytedeco.javacpp.opencv_core.CvNArrayIterator, param5: number): number;
				public static cvRandShuffle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>): void;
				public static sub16s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static resetTrace(): void;
				public static rotate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static kmeans(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.TermCriteria, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvInitMatNDHeader(param0: org.bytedeco.javacpp.opencv_core.CvMatND, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static gemm64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: number, param5: org.bytedeco.javacpp.DoublePointer, param6: number, param7: number, param8: org.bytedeco.javacpp.DoublePointer, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static cvReleaseImage(param0: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static normHamming(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): number;
				public static cvCountNonZero(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static invert(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvGetND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: number): void;
				public static split32s(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): void;
				public static convertFromBuffer(param0: org.bytedeco.javacpp.Pointer, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvt16f32f(param0: org.bytedeco.javacpp.opencv_core.float16_t, param1: native.Array<number>, param2: number): void;
				public static normHamming(param0: java.nio.ByteBuffer, param1: number): number;
				public static addWeighted32s(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static PCAProject(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.FileNodeIterator, param1: org.bytedeco.javacpp.opencv_core.FileNodeIterator): number;
				public static magnitude(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: number): void;
				public static completeSymm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean): void;
				public static merge8u(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.BytePointer, param2: number, param3: number): void;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: number): void;
				public static unregisterPageLocked(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static getTickFrequency(): number;
				public static andPut(param0: native.Array<number>, param1: number): native.Array<number>;
				public static borderInterpolate(param0: number, param1: number, param2: number): number;
				public static absdiff32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvChangeSeqBlock(param0: org.bytedeco.javacpp.Pointer, param1: number): void;
				public static kernelToStr(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.BytePointer;
				public static invSqrt32f(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static max16s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static createContinuous(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static setIdentity(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvSetRealND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.IntPointer, param2: number): void;
				public static swap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static normHamming(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number): number;
				public static cvReleaseMat(param0: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static and8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvDCT(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvCreateGraphScanner(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param2: number): org.bytedeco.javacpp.opencv_core.CvGraphScanner;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: java.nio.DoubleBuffer, param2: number): void;
				public static printCudaDeviceInfo(param0: number): void;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: boolean): void;
				public static cvGetTickCount(): number;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static redirectError(param0: org.bytedeco.javacpp.opencv_core.ErrorCallback): org.bytedeco.javacpp.opencv_core.ErrorCallback;
				public static cvRandReal(param0: java.nio.LongBuffer): number;
				public static cvReshape(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static mulTransposed(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: boolean): void;
				public static cvBox2D(param0: org.bytedeco.javacpp.opencv_core.RotatedRect): org.bytedeco.javacpp.opencv_core.CvBox2D;
				public static format(param0: string): string;
				public static log(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static getOpenCLAllocator(): org.bytedeco.javacpp.opencv_core.MatAllocator;
				public static absdiff64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvSolve(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number): number;
				public static PCACompute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
				public static cvMixChannels(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param1: number, param2: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param3: number, param4: native.Array<number>, param5: number): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvConvertScale(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static shiftLeft(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.BytePointer;
				public static print(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.Pointer): number;
				public static cvSeqSlice(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvSlice, param2: org.bytedeco.javacpp.opencv_core.CvMemStorage, param3: number): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static mixChannels(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: java.nio.IntBuffer): void;
				public static idft(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static theRNG(): org.bytedeco.javacpp.opencv_core.RNG;
				public static cvSolvePoly(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static checkOptimalVectorWidth(param0: java.nio.IntBuffer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: org.bytedeco.javacpp.opencv_core.UMat, param10: number): number;
				public static magnitude64f(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>, param3: number): void;
				public static Cholesky64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: number, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: number): boolean;
				public static min8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvPtr1D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: native.Array<number>): native.Array<number>;
				public static idft(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvReleaseSparseMat(param0: org.bytedeco.javacpp.opencv_core.CvSparseMat): void;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static cvRelease(param0: org.bytedeco.javacpp.Pointer): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cmp64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static sqrt(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static flip(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static and(param0: number, param1: number): number;
				public static cvSlice(param0: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.CvSlice;
				public static toLowerCase(param0: string): string;
				public static split16u(param0: java.nio.ShortBuffer, param1: java.nio.ShortBuffer, param2: number, param3: number): void;
				public static cvGetReal1D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number): number;
				public static perspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static notEquals(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static min8s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static error(param0: number, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.BytePointer, param4: number): void;
				public static cvCalcCovarMatrix(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number): void;
				public static add32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static LU64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: number, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: number): number;
				public static split(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static PCACompute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
				public static max8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static normL2Sqr_(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number): number;
				public static magnitude(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: org.bytedeco.javacpp.FloatPointer, param3: number): void;
				public static split64s(param0: java.nio.LongBuffer, param1: java.nio.LongBuffer, param2: number, param3: number): void;
				public static cvPointTo32f(param0: native.Array<number>): native.Array<number>;
				public static cvPtr3D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.BytePointer;
				public static cvSubRS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static mul8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvRandShuffle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.LongBuffer, param2: number): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: java.nio.ShortBuffer, param2: number): void;
				public static CV_SEQ_ELTYPE_PTR(): number;
				public static addWeighted32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static lessThan(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvCreateMatND(param0: number, param1: java.nio.IntBuffer, param2: number): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static addWeighted8s(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static absdiff(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvReleaseGraphScanner(param0: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static divide(param0: number, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
				public static min16s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string, param2: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static createContinuous(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static sort(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static cvPointFrom32f(param0: native.Array<number>): native.Array<number>;
				public static cvPtr1D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number): org.bytedeco.javacpp.BytePointer;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer): void;
				public static recip32s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvSeqSearch(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.opencv_core.CvCmpFunc, param3: number, param4: native.Array<number>): native.Array<number>;
				public static cvPoint2D32f(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
				public static cvGetReal3D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number): number;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static lessThan(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static completeSymm(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvSeqPushMulti(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: number): void;
				public static cvStartReadSeq(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvSeqReader): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
				public static exp(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static cvSeqSearch(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.opencv_core.CvCmpFunc, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.BytePointer;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static recip16u(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: number): void;
				public static randn(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findFileOrKeep(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static and(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvCalcCovarMatrix(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number): void;
				public static randu(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static log64f(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: number): void;
				public static parallel_for_(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.opencv_core.ParallelLoopBody): void;
				public static cvGetRawData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.BytePointer): void;
				public static vecopTypeToStr(param0: number): org.bytedeco.javacpp.BytePointer;
				public static ensureSizeIsEnough(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findFileOrKeep(param0: org.bytedeco.javacpp.BytePointer, param1: boolean): org.bytedeco.javacpp.BytePointer;
				public static addWeighted64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static solveCubic(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvGetMat(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: java.nio.IntBuffer, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static checkOptimalVectorWidth(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static getCPUFeaturesLine(): org.bytedeco.javacpp.BytePointer;
				public static div64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
				public static useIPP(): boolean;
				public static pow(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static seqPush(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.BytePointer;
				public static cvGetElemType(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static cvSetReal3D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number, param4: number): void;
				public static add(param0: number, param1: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.Range;
				public static shiftLeft(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): org.bytedeco.javacpp.opencv_core.FileStorage;
				public static QR64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.DoublePointer, param6: number, param7: org.bytedeco.javacpp.DoublePointer): number;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string, param2: org.bytedeco.javacpp.opencv_core.KeyPoint): void;
				public static cvCheckArray(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number): number;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: boolean): void;
				public static cvFlushSeqWriter(param0: org.bytedeco.javacpp.opencv_core.CvSeqWriter): void;
				public static cvTransform(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static cvCreateMatHeader(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static eigenNonSymmetric(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static normL1_(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number): number;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static orPut(param0: org.bytedeco.javacpp.IntPointer, param1: number): org.bytedeco.javacpp.IntPointer;
				public static xorPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.Mat;
				public static multiply(param0: number, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static addWeighted8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static max64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvInRange(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static Cholesky(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: number, param3: org.bytedeco.javacpp.FloatPointer, param4: number, param5: number): boolean;
				public static SVBackSubst(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvMinMaxLoc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static seqPush(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.BytePointer;
				public static createContinuous(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static getTickCount(): number;
				public static LUT(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static SVDecomp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static max64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: java.nio.DoubleBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvSeqInsertSlice(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static absdiff8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static CV_32FC(param0: number): number;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.opencv_core.DMatch): void;
				public static cvGetThreadNum(): number;
				public static CV_16SC(param0: number): number;
				public static sub8s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer): void;
				public static exp32f(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static recip16s(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static perspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvSplit(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static sqrt(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static split16u(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): void;
				public static CV_8UC(param0: number): number;
				public static cvGraphAddVtx(param0: org.bytedeco.javacpp.opencv_core.CvGraph): number;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static min(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static sortIdx(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static cvReshapeMatND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number, param4: number, param5: native.Array<number>): org.bytedeco.javacpp.helper.opencv_core.CvArr;
				public static cvGEMM(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvSetSeqReaderPos(param0: org.bytedeco.javacpp.opencv_core.CvSeqReader, param1: number, param2: number): void;
				public static or8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvt16f32f(param0: org.bytedeco.javacpp.opencv_core.float16_t, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static cvBackProjectPCA(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static shortSaturateCast(param0: org.bytedeco.javacpp.opencv_core.float16_t): number;
				public static cvSetNumThreads(param0: number): void;
				public static cvPtr3D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number, param4: java.nio.IntBuffer): java.nio.ByteBuffer;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>): void;
				public static exp(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static setIdentity(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static seqPop(param0: org.bytedeco.javacpp.opencv_core.CvSeq): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static calcCovarMatrix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
				public static checkOptimalVectorWidth(param0: java.nio.IntBuffer, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static merge8u(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number, param3: number): void;
				public static add64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvRNG(param0: number): number;
				public static recip8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvClearND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>): void;
				public static kmeans(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.TermCriteria, param4: number, param5: number): number;
				public static cmp16u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvMulTransposed(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number): void;
				public static cvROIToRect(param0: org.bytedeco.javacpp.opencv_core.IplROI): org.bytedeco.javacpp.opencv_core.CvRect;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
				public static float16SaturateCast(param0: number): org.bytedeco.javacpp.opencv_core.float16_t;
				public static cvRange(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number): org.bytedeco.javacpp.helper.opencv_core.CvArr;
				public static split16u(param0: org.bytedeco.javacpp.ShortPointer, param1: org.bytedeco.javacpp.ShortPointer, param2: number, param3: number): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.DoublePointer, param2: number): void;
				public static cvPtrND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>): native.Array<number>;
				public static cvSetRemove(param0: org.bytedeco.javacpp.opencv_core.CvSet, param1: number): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static solve(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): boolean;
				public static uint64SaturateCast(param0: org.bytedeco.javacpp.opencv_core.float16_t): number;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static cvInitMatHeader(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.Pointer, param5: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvt16f32f(param0: org.bytedeco.javacpp.opencv_core.float16_t, param1: java.nio.FloatBuffer, param2: number): void;
				public static cvInitMatNDHeader(param0: org.bytedeco.javacpp.opencv_core.CvMatND, param1: number, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.SparseMat): void;
				public static Cholesky32f(param0: java.nio.FloatBuffer, param1: number, param2: number, param3: java.nio.FloatBuffer, param4: number, param5: number): boolean;
				public static setNumThreads(param0: number): void;
				public static cvConvertScaleAbs(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cmp32s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static LU(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: number, param3: org.bytedeco.javacpp.FloatPointer, param4: number, param5: number): number;
				public static cvMax(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.DoublePointer): void;
				public static floatRand(): number;
				public static div8s(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static PSNR(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static writeScalar(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: number): void;
				public static cvGraphAddVtx(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param2: org.bytedeco.javacpp.PointerPointer<any>): number;
				public static addWeighted16s(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvGetRawData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.CvSize): void;
				public static cvSubS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvRandShuffle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.LongBuffer): void;
				public static divide(param0: number, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvStartReadSeq(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvSeqReader, param2: number): void;
				public static max(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static kernelToStr(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static getVersionMinor(): number;
				public static cvReleaseImageHeader(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
				public static cvGet1D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static sub64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvPolarToCart(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number): void;
				public static cvt32f16f(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.float16_t, param2: number): void;
				public static LU32f(param0: native.Array<number>, param1: number, param2: number, param3: native.Array<number>, param4: number, param5: number): number;
				public static CV_MAKE_TYPE(param0: number, param1: number): number;
				public static cvMatND(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvAdd(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvGraphAddVtx(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param2: org.bytedeco.javacpp.opencv_core.CvGraphVtx): number;
				public static sub16s(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.Range, param1: number): org.bytedeco.javacpp.opencv_core.Range;
				public static solve(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): boolean;
				public static exp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static copyTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static andPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.Mat;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Range): void;
				public static min64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.DoublePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static CV_SET_ELEM_FREE_FLAG(): number;
				public static cvBox2D(): org.bytedeco.javacpp.opencv_core.CvBox2D;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvPolarToCart(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static invSqrt(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number): void;
				public static scharSaturateCast(param0: number): number;
				public static getCPUTickCount(): number;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static addRNGBias32f(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number): void;
				public static setUseOpenCL(param0: boolean): void;
				public static ushortSaturateCast(param0: number): number;
				public static sub8s(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static normHamming(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer, param2: number, param3: number): number;
				public static kmeans(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.TermCriteria, param4: number, param5: number): number;
				public static cvBox2D(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.CvSize2D32f, param2: number): org.bytedeco.javacpp.opencv_core.CvBox2D;
				public static exp64f(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: number): void;
				public static checkOptimalVectorWidth(param0: java.nio.IntBuffer, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static sumElems(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static addWeighted64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: java.nio.DoubleBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvPointTo32f(param0: java.nio.IntBuffer): java.nio.FloatBuffer;
				public static Mahalanobis(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvRandShuffle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.LongPointer, param2: number): void;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvUseOptimized(param0: number): number;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string, param2: org.bytedeco.javacpp.opencv_core.Range): void;
				public static absdiff8s(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static checkRange(param0: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: number): void;
				public static Cholesky(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: number, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: number): boolean;
				public static max(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static mul32s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvSetIdentity(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static checkOptimalVectorWidth(param0: java.nio.IntBuffer, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvOr(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static float16SaturateCast(param0: org.bytedeco.javacpp.opencv_core.float16_t): org.bytedeco.javacpp.opencv_core.float16_t;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvStartAppendToSeq(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvSeqWriter): void;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: boolean): void;
				public static PCACompute2(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvSum(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static LU32f(param0: java.nio.FloatBuffer, param1: number, param2: number, param3: java.nio.FloatBuffer, param4: number, param5: number): number;
				public static invert(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): number;
				public static randn(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static mean(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer): void;
				public static split8u(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvCreateMatND(param0: number, param1: native.Array<number>, param2: number): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static absdiff32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvReleaseGraphScanner(param0: org.bytedeco.javacpp.opencv_core.CvGraphScanner): void;
				public static cvGetCol(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static QR32f(param0: native.Array<number>, param1: number, param2: number, param3: number, param4: number, param5: native.Array<number>, param6: number, param7: native.Array<number>): number;
				public static cvMinMaxLoc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer): void;
				public static notEquals(param0: org.bytedeco.javacpp.opencv_core.FileNodeIterator, param1: org.bytedeco.javacpp.opencv_core.FileNodeIterator): boolean;
				public static PCACompute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static kmeans(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.TermCriteria, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static eigen(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static mul32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static equals(param0: org.bytedeco.javacpp.opencv_core.FileNodeIterator, param1: org.bytedeco.javacpp.opencv_core.FileNodeIterator): boolean;
				public static invSqrt32f(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static fastAtan32f(param0: native.Array<number>, param1: native.Array<number>, param2: native.Array<number>, param3: number, param4: boolean): void;
				public static div16u(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static addWeighted64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvPtrND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.BytePointer;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.IntPointer): void;
				public static gemm32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: number, param5: java.nio.FloatBuffer, param6: number, param7: number, param8: java.nio.FloatBuffer, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static cvRandShuffle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.LongPointer): void;
				public static idct(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvInitMatNDHeader(param0: org.bytedeco.javacpp.opencv_core.CvMatND, param1: number, param2: native.Array<number>, param3: number): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static andPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static add8s(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static addRNGBias32f(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static orPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.Mat;
				public static normHamming(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number, param3: number): number;
				public static useInstrumentation(): boolean;
				public static cvInsertNodeIntoTree(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.Pointer): void;
				public static cvClearSeq(param0: org.bytedeco.javacpp.opencv_core.CvSeq): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvFastArctan(param0: number, param1: number): number;
				public static div8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static sub64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cubeRoot(param0: number): number;
				public static cvMinMaxLoc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.CvPoint, param4: org.bytedeco.javacpp.opencv_core.CvPoint, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static calcCovarMatrix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static abs(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvGetDiag(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static cvNulDevReport(param0: number, param1: string, param2: string, param3: string, param4: number, param5: org.bytedeco.javacpp.Pointer): number;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.DoubleBuffer): void;
				public static cvEndWriteSeq(param0: org.bytedeco.javacpp.opencv_core.CvSeqWriter): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static normHamming(param0: native.Array<number>, param1: number): number;
				public static sub32f(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static max16u(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static mul32f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static absdiff8s(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static mul8s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvInitTreeNodeIterator(param0: org.bytedeco.javacpp.opencv_core.CvTreeNodeIterator, param1: org.bytedeco.javacpp.Pointer, param2: number): void;
				public static useIPP_NotExact(): boolean;
				public static idct(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static checkRange(param0: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.BytePointer, param2: string): void;
				public static merge32s(param0: java.nio.IntBuffer, param1: java.nio.IntBuffer, param2: number, param3: number): void;
				public static absdiff16u(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvSeqElemIdx(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.PointerPointer<any>): number;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static invSqrt64f(param0: native.Array<number>, param1: native.Array<number>, param2: number): void;
				public static max32s(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static addWeighted8s(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static mulTransposed(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number): void;
				public static cvProjectPCA(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static log32f(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number): void;
				public static cvGetMat(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.IntPointer, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.DoubleBuffer): void;
				public static compare(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
				public static cvMemStorageAlloc(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage, param1: number): org.bytedeco.javacpp.Pointer;
				public static gemm32fc(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: number, param5: java.nio.FloatBuffer, param6: number, param7: number, param8: java.nio.FloatBuffer, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static cvSetND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static div32s(param0: java.nio.IntBuffer, param1: number, param2: java.nio.IntBuffer, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvFindGraphEdgeByPtr(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param2: org.bytedeco.javacpp.opencv_core.CvGraphVtx): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
				public static merge8u(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): void;
				public static merge64s(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number): void;
				public static cvmSet(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number, param2: number, param3: number): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.IntPointer, param2: number): void;
				public static toUpperCase(param0: string): string;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static doubleRand(): number;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
				public static CV_IS_MAT_CONT(param0: number): number;
				public static cvFindGraphEdge(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static checkOptimalVectorWidth(param0: java.nio.IntBuffer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: number): number;
				public static cvGetRawData(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.ByteBuffer): void;
				public static checkOptimalVectorWidth(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: org.bytedeco.javacpp.opencv_core.GpuMat, param9: org.bytedeco.javacpp.opencv_core.GpuMat, param10: number): number;
				public static eigen(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.BoolPointer, param2: boolean): void;
				public static cvMulSpectrums(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number): void;
				public static add16s(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static absdiff16u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static not8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cmp8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvGetSize(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.CvSize;
				public static getVersionMajor(): number;
				public static calcCovarMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
				public static cvDiv(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number): void;
				public static cvCreateSet(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSet;
				public static cvCreateSparseMat(param0: org.bytedeco.javacpp.opencv_core.SparseMat): org.bytedeco.javacpp.opencv_core.CvSparseMat;
				public static orPut(param0: native.Array<number>, param1: number): native.Array<number>;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
				public static cvSeqSearch(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.opencv_core.CvCmpFunc, param3: number, param4: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.BytePointer;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static getElemSize(param0: number): number;
				public static mul16u(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static finish(): void;
				public static cvGetSetElem(param0: org.bytedeco.javacpp.opencv_core.CvSet, param1: number): org.bytedeco.javacpp.opencv_core.CvSetElem;
				public static tempfile(): org.bytedeco.javacpp.BytePointer;
				public static completeSymm(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static error(param0: number, param1: string, param2: string, param3: string, param4: number): void;
				public static Cholesky(param0: java.nio.DoubleBuffer, param1: number, param2: number, param3: java.nio.DoubleBuffer, param4: number, param5: number): boolean;
				public static insertImageCOI(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static vconcat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvCmpS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number): void;
				public static cvGetErrInfo(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer, param2: java.nio.ByteBuffer, param3: java.nio.IntBuffer): number;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static eigen(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvSetRealND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: number): void;
				public static useOpenCL(): boolean;
				public static cvAbsDiffS(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static cvErrorFromIppStatus(param0: number): number;
				public static cvGetDims(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.IntPointer): number;
				public static ensureSizeIsEnough(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static invert(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static xor8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvRandInt(param0: org.bytedeco.javacpp.LongPointer): number;
				public static redirectError(param0: org.bytedeco.javacpp.opencv_core.ErrorCallback, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.PointerPointer<any>): org.bytedeco.javacpp.opencv_core.ErrorCallback;
				public static absdiff32s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static invSqrt64f(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: number): void;
				public static cvReshapeMatND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number, param4: number, param5: java.nio.IntBuffer): org.bytedeco.javacpp.helper.opencv_core.CvArr;
				public static batchDistance(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.GpuMat, param8: number, param9: boolean): void;
				public static xor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static notEquals(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static idft(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static cvCloneSeq(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static cvMixChannels(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number, param4: native.Array<number>, param5: number): void;
				public static cvSetErrStatus(param0: number): void;
				public static pow(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static PCABackProject(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvTermCriteria(param0: org.bytedeco.javacpp.opencv_core.TermCriteria): org.bytedeco.javacpp.opencv_core.CvTermCriteria;
				public static cvCreateSparseMat(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
				public static scaleAdd(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static solveLP(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static max8s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvCloneSparseMat(param0: org.bytedeco.javacpp.opencv_core.CvSparseMat): org.bytedeco.javacpp.opencv_core.CvSparseMat;
				public static max16u(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvGraphAddEdgeByPtr(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param2: org.bytedeco.javacpp.opencv_core.CvGraphVtx, param3: org.bytedeco.javacpp.opencv_core.CvGraphEdge, param4: org.bytedeco.javacpp.opencv_core.CvGraphEdge): number;
				public static addSamplesDataSearchSubDirectory(param0: org.bytedeco.javacpp.BytePointer): void;
				public static scharSaturateCast(param0: org.bytedeco.javacpp.opencv_core.float16_t): number;
				public static cvGetSubArr(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvRect): org.bytedeco.javacpp.opencv_core.CvMat;
				public static convertScaleAbs(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static CV_32SC(param0: number): number;
				public static fastAtan2(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: boolean): void;
				public static sqrt(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static findFile(param0: string): string;
				public static CV_16FC2(): number;
				public static PCACompute2(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: number): void;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
				public static cvt32f16f(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.opencv_core.float16_t, param2: number): void;
				public static cvPtr1D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: java.nio.IntBuffer): java.nio.ByteBuffer;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static format(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string, param2: number): void;
				public static kernelToStr(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static add16u(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: boolean): void;
				public static mul32s(param0: java.nio.IntBuffer, param1: number, param2: java.nio.IntBuffer, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static shiftLeft(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat): string;
				public static predictOptimalVectorWidth(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: org.bytedeco.javacpp.opencv_core.UMat, param9: number): number;
				public static getCudaEnabledDeviceCount(): number;
				public static subtractPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.Mat;
				public static invSqrt64f(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: number): void;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer): void;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static greaterThan(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvSeqSort(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvCmpFunc, param2: org.bytedeco.javacpp.Pointer): void;
				public static cvCvtSeqToArray(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.opencv_core.CvSlice): org.bytedeco.javacpp.Pointer;
				public static cvError(param0: number, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.BytePointer, param4: number): void;
				public static SVDecomp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static randShuffle(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.RNG): void;
				public static cvIplDepth(param0: number): number;
				public static PSNR(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static buildOptionsAddMatrixDescription(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvCartToPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static normL2Sqr_(param0: native.Array<number>, param1: native.Array<number>, param2: number): number;
				public static sqrt64f(param0: java.nio.DoubleBuffer, param1: java.nio.DoubleBuffer, param2: number): void;
				public static cvRelease(param0: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static cvCbrt(param0: number): number;
				public static max32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static split8u(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer, param2: number, param3: number): void;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static sub16s(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvReleaseMatND(param0: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static determinant(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static SVD64f(param0: org.bytedeco.javacpp.DoublePointer, param1: number, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: org.bytedeco.javacpp.DoublePointer, param6: number, param7: number, param8: number, param9: number): void;
				public static div32s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvXor(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvCvtSeqToArray(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.Pointer;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.opencv_core.SparseMat): void;
				public static cvMahalonobis(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static cvPtrND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: number, param4: native.Array<number>): native.Array<number>;
				public static cvAvg(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static setUseOptimized(param0: boolean): void;
				public static cvPtrND(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.BytePointer;
				public static predictOptimalVectorWidthMax(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.UMat, param8: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static kmeans(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.TermCriteria, param4: number, param5: number): number;
				public static log(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: number): void;
				public static getFlags(): number;
				public static addSamplesDataSearchPath(param0: string): void;
				public static cvInv(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static checkRange(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number): boolean;
				public static write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.KeyPoint): void;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static flip(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static cmp8s(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvAnd(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static cvNextGraphItem(param0: org.bytedeco.javacpp.opencv_core.CvGraphScanner): number;
				public static split(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static cvCmp(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number): void;
				public static checkRange(param0: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static invert(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: native.Array<number>, param2: number): void;
				public static sub32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static addWeighted16s(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: java.nio.ShortBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static sqrt(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer, param2: number): void;
				public static absdiff(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static LU32f(param0: org.bytedeco.javacpp.FloatPointer, param1: number, param2: number, param3: org.bytedeco.javacpp.FloatPointer, param4: number, param5: number): number;
				public static magnitude32f(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: org.bytedeco.javacpp.FloatPointer, param3: number): void;
				public static cvReleaseImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
				public static cvGetMat(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: native.Array<number>, param3: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static PCACompute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvStdErrReport(param0: number, param1: string, param2: string, param3: string, param4: number, param5: org.bytedeco.javacpp.Pointer): number;
				public static patchNaNs(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
				public static cvMin(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static predictOptimalVectorWidthMax(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static xor8u(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: java.nio.ByteBuffer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvSolve(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static cvPtr2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: java.nio.IntBuffer): java.nio.ByteBuffer;
				public static dividePut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static determinant(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static cvGraphAddEdge(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvGraphEdge, param4: org.bytedeco.javacpp.PointerPointer<any>): number;
				public static mul16u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static cvAvgSdv(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static buildOptionsAddMatrixDescription(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvGraphRemoveVtxByPtr(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx): number;
				public static cvRedirectError(param0: org.bytedeco.javacpp.opencv_core.CvErrorCallback): org.bytedeco.javacpp.opencv_core.CvErrorCallback;
				public static cvMixChannels(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: number, param2: org.bytedeco.javacpp.PointerPointer<any>, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number): void;
				public static gemm64f(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: number, param5: java.nio.DoubleBuffer, param6: number, param7: number, param8: java.nio.DoubleBuffer, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static cvSetAdd(param0: org.bytedeco.javacpp.opencv_core.CvSet): number;
				public static cvInitImageHeader(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.CvSize, param2: number, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_core.IplImage;
				public static cvInvert(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static insertImageCOI(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static max16s(param0: org.bytedeco.javacpp.ShortPointer, param1: number, param2: org.bytedeco.javacpp.ShortPointer, param3: number, param4: org.bytedeco.javacpp.ShortPointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static convertFromImage(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findNonZero(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static min64f(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static max(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvMat(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.CvMat;
				public static kernelToStr(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: string): string;
				public static cvMixChannels(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number): void;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.DoubleBuffer): void;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static predictOptimalVectorWidthMax(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static glob(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.StringVector, param2: boolean): void;
				public static cvInitMatNDHeader(param0: org.bytedeco.javacpp.opencv_core.CvMatND, param1: number, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.CvMatND;
				public static setUseIPP(param0: boolean): void;
				public static cvGetOptimalDFTSize(param0: number): number;
				public static cvGraphAddEdge(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvGraphEdge, param4: org.bytedeco.javacpp.opencv_core.CvGraphEdge): number;
				public static addPut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static cvGraphVtxDegree(param0: org.bytedeco.javacpp.opencv_core.CvGraph, param1: number): number;
				public static max8u(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static completeSymm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean): void;
				public static equals(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
				public static kernelToStr(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.BytePointer;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: org.bytedeco.javacpp.ShortPointer, param2: number): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>): void;
				public static max16u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static hconcat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvInitNArrayIterator(param0: number, param1: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.CvMatND, param4: org.bytedeco.javacpp.opencv_core.CvNArrayIterator, param5: number): number;
				public static mixChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: native.Array<number>): void;
				public static add8u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static PCACompute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
				public static cvSetAdd(param0: org.bytedeco.javacpp.opencv_core.CvSet, param1: org.bytedeco.javacpp.opencv_core.CvSetElem, param2: org.bytedeco.javacpp.opencv_core.CvSetElem): number;
				public static cvSetRemoveByPtr(param0: org.bytedeco.javacpp.opencv_core.CvSet, param1: org.bytedeco.javacpp.Pointer): void;
				public static setIppStatus(param0: number, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: number): void;
				public static div16u(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: number): void;
				public static cvGuiBoxReport(param0: number, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.BytePointer, param4: number, param5: org.bytedeco.javacpp.Pointer): number;
				public static CV_8SC(param0: number): number;
				public static addWeighted8s(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number, param8: org.bytedeco.javacpp.Pointer): void;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static getPlatfomsInfo(param0: org.bytedeco.javacpp.opencv_core.PlatformInfo): void;
				public static swap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static sortIdx(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static minMaxIdx(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static patchNaNs(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
			}
			export module opencv_core {
				export class Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Algorithm>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public empty(): boolean;
					public save(param0: string): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public getDefaultName(): org.bytedeco.javacpp.BytePointer;
					public constructor();
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public clear(): void;
					public constructor(param0: number);
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
					public save(param0: org.bytedeco.javacpp.BytePointer): void;
				}
				export class Arrays {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Arrays>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class Buffer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Buffer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class BufferPool {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.BufferPool>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getAllocator(): org.bytedeco.javacpp.opencv_core.GpuMat.Allocator;
					public getBuffer(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public getBuffer(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Stream);
				}
				export class BufferPoolController {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.BufferPoolController>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public freeAllReservedBuffers(): void;
					public getMaxReservedSize(): number;
					public setMaxReservedSize(param0: number): void;
					public getReservedSize(): number;
				}
				export class ByteVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.ByteVectorVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public resize(param0: number, param1: number): void;
					public empty(): boolean;
					public constructor(param0: native.Array<native.Array<number>>);
					public put(param0: native.Array<native.Array<number>>): org.bytedeco.javacpp.opencv_core.ByteVectorVector;
					public size(): number;
					public size(param0: number): number;
					public toString(): string;
					public constructor();
					public empty(param0: number): boolean;
					public clear(): void;
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.ByteVectorVector;
					public get(): native.Array<native.Array<number>>;
					public clear(param0: number): void;
					public resize(param0: number): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.ByteVectorVector): org.bytedeco.javacpp.opencv_core.ByteVectorVector;
					public constructor(param0: number);
					public get(param0: number, param1: number): number;
				}
				export class Complexd {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Complexd>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public re(param0: number): org.bytedeco.javacpp.opencv_core.Complexd;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Complexd;
					public conj(): org.bytedeco.javacpp.opencv_core.Complexd;
					public im(param0: number): org.bytedeco.javacpp.opencv_core.Complexd;
					public constructor();
					public re(): number;
					public im(): number;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
				}
				export class Complexf {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Complexf>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public im(param0: number): org.bytedeco.javacpp.opencv_core.Complexf;
					public re(param0: number): org.bytedeco.javacpp.opencv_core.Complexf;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Complexf;
					public conj(): org.bytedeco.javacpp.opencv_core.Complexf;
					public re(): number;
					public im(): number;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
				}
				export class ConjGradSolver extends org.bytedeco.javacpp.opencv_core.MinProblemSolver {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.ConjGradSolver>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_core.ConjGradSolver;
					public static create(param0: org.bytedeco.javacpp.opencv_core.MinProblemSolver.Function, param1: org.bytedeco.javacpp.opencv_core.TermCriteria): org.bytedeco.javacpp.opencv_core.ConjGradSolver;
					public constructor(param0: number);
				}
				export class Context {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Context>;
					public setUseSVM(param0: boolean): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static getDefault(param0: boolean): org.bytedeco.javacpp.opencv_core.Context;
					public getImpl(): org.bytedeco.javacpp.opencv_core.Context.Impl;
					public ndevices(): number;
					public create(): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Context;
					public p(): org.bytedeco.javacpp.opencv_core.Context.Impl;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Context);
					public getProg(param0: org.bytedeco.javacpp.opencv_core.ProgramSource, param1: string, param2: string): org.bytedeco.javacpp.opencv_core.Program;
					public ptr(): org.bytedeco.javacpp.Pointer;
					public p(param0: org.bytedeco.javacpp.opencv_core.Context.Impl): org.bytedeco.javacpp.opencv_core.Context;
					public static getDefault(): org.bytedeco.javacpp.opencv_core.Context;
					public constructor();
					public device(param0: number): org.bytedeco.javacpp.opencv_core.Device;
					public unloadProg(param0: org.bytedeco.javacpp.opencv_core.Program): void;
					public useSVM(): boolean;
					public getProg(param0: org.bytedeco.javacpp.opencv_core.ProgramSource, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.Program;
					public put(param0: org.bytedeco.javacpp.opencv_core.Context): org.bytedeco.javacpp.opencv_core.Context;
					public create(param0: number): boolean;
					public constructor(param0: number);
				}
				export module Context {
					export class Impl {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Context.Impl>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
					}
				}
				export class Cv16suf {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Cv16suf>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public i(): number;
					public u(): number;
					public i(param0: number): org.bytedeco.javacpp.opencv_core.Cv16suf;
					public constructor();
					public u(param0: number): org.bytedeco.javacpp.opencv_core.Cv16suf;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Cv16suf;
					public constructor(param0: number);
				}
				export class Cv32suf {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Cv32suf>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public i(): number;
					public u(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Cv32suf;
					public constructor();
					public f(param0: number): org.bytedeco.javacpp.opencv_core.Cv32suf;
					public u(param0: number): org.bytedeco.javacpp.opencv_core.Cv32suf;
					public constructor(param0: number);
					public f(): number;
					public i(param0: number): org.bytedeco.javacpp.opencv_core.Cv32suf;
				}
				export class Cv64suf {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Cv64suf>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public i(): number;
					public u(): number;
					public u(param0: number): org.bytedeco.javacpp.opencv_core.Cv64suf;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Cv64suf;
					public i(param0: number): org.bytedeco.javacpp.opencv_core.Cv64suf;
					public f(param0: number): org.bytedeco.javacpp.opencv_core.Cv64suf;
					public constructor(param0: number);
					public f(): number;
				}
				export class CvBox2D extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvBox2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvBox2D>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public center(): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
					public size(): org.bytedeco.javacpp.opencv_core.CvSize2D32f;
					public size(param0: org.bytedeco.javacpp.opencv_core.CvSize2D32f): org.bytedeco.javacpp.opencv_core.CvBox2D;
					public constructor(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.CvSize2D32f, param2: number);
					public asRotatedRect(): org.bytedeco.javacpp.opencv_core.RotatedRect;
					public constructor(param0: java.nio.FloatBuffer, param1: org.bytedeco.javacpp.opencv_core.CvSize2D32f, param2: number);
					public angle(param0: number): org.bytedeco.javacpp.opencv_core.CvBox2D;
					public center(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f): org.bytedeco.javacpp.opencv_core.CvBox2D;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param1: org.bytedeco.javacpp.opencv_core.CvSize2D32f, param2: number);
					public angle(): number;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvBox2D;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.RotatedRect);
				}
				export class CvChain extends org.bytedeco.javacpp.opencv_core.CvSeq {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvChain>;
					public h_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvChain;
					public storage(): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public elem_size(): number;
					public free_blocks(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public v_next(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public v_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvChain;
					public constructor();
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeq;
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvChain;
					public v_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public elem_size(param0: number): org.bytedeco.javacpp.opencv_core.CvChain;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvChain;
					public origin(): org.bytedeco.javacpp.opencv_core.CvPoint;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvChain;
					public total(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public header_size(): number;
					public flags(): number;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvChain;
					public h_next(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public origin(param0: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_core.CvChain;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public free_blocks(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_prev(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public storage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
					public first(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public v_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public elem_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public total(param0: number): org.bytedeco.javacpp.opencv_core.CvChain;
					public constructor(param0: number);
					public h_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvChain;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public first(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
					public storage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvChain;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvChain;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeq;
					public delta_elems(): number;
					public v_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvChain;
					public h_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public delta_elems(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public block_max(): org.bytedeco.javacpp.BytePointer;
					public total(): number;
					public free_blocks(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvChain;
					public delta_elems(param0: number): org.bytedeco.javacpp.opencv_core.CvChain;
					public first(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvChain;
					public v_prev(): org.bytedeco.javacpp.opencv_core.CvSeq;
				}
				export class CvCmpFunc {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvCmpFunc>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public call(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.Pointer, param2: org.bytedeco.javacpp.Pointer): number;
					public constructor();
				}
				export class CvContour extends org.bytedeco.javacpp.opencv_core.CvSeq {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvContour>;
					public storage(): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public rect(param0: org.bytedeco.javacpp.opencv_core.CvRect): org.bytedeco.javacpp.opencv_core.CvContour;
					public elem_size(): number;
					public free_blocks(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public v_next(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvContour;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public constructor();
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeq;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvContour;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvContour;
					public storage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvContour;
					public color(param0: number): org.bytedeco.javacpp.opencv_core.CvContour;
					public reserved(): org.bytedeco.javacpp.IntPointer;
					public v_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvContour;
					public rect(): org.bytedeco.javacpp.opencv_core.CvRect;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvContour;
					public delta_elems(param0: number): org.bytedeco.javacpp.opencv_core.CvContour;
					public reserved(param0: number): number;
					public h_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvContour;
					public first(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvContour;
					public total(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public header_size(): number;
					public flags(): number;
					public h_next(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public color(): number;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public free_blocks(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
					public free_blocks(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvContour;
					public v_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvContour;
					public reserved(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvContour;
					public h_prev(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public elem_size(param0: number): org.bytedeco.javacpp.opencv_core.CvContour;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvContour;
					public storage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
					public first(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public v_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public elem_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public v_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvContour;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public first(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeq;
					public delta_elems(): number;
					public h_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public delta_elems(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public block_max(): org.bytedeco.javacpp.BytePointer;
					public total(): number;
					public v_prev(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public total(param0: number): org.bytedeco.javacpp.opencv_core.CvContour;
				}
				export class CvErrorCallback {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvErrorCallback>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.BytePointer, param4: number, param5: org.bytedeco.javacpp.Pointer): number;
				}
				export class CvGraph extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvGraph {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvGraph>;
					public free_blocks(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvGraph;
					public first(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSet;
					public storage(): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public free_elems(): org.bytedeco.javacpp.opencv_core.CvSetElem;
					public elem_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public elem_size(): number;
					public free_blocks(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvGraph;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public v_next(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public first(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvGraph;
					public h_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSet;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public constructor();
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeq;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvGraph;
					public v_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public storage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvGraph;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvGraph;
					public free_blocks(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSet;
					public h_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvGraph;
					public active_count(): number;
					public elem_size(param0: number): org.bytedeco.javacpp.opencv_core.CvGraph;
					public edges(param0: org.bytedeco.javacpp.opencv_core.CvSet): org.bytedeco.javacpp.opencv_core.CvGraph;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public active_count(param0: number): org.bytedeco.javacpp.opencv_core.CvGraph;
					public total(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public storage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSet;
					public header_size(): number;
					public flags(): number;
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSet;
					public h_next(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public v_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSet;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public free_elems(param0: org.bytedeco.javacpp.opencv_core.CvSetElem): org.bytedeco.javacpp.opencv_core.CvSet;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public v_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvGraph;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSet;
					public free_blocks(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
					public free_elems(param0: org.bytedeco.javacpp.opencv_core.CvSetElem): org.bytedeco.javacpp.opencv_core.CvGraph;
					public h_prev(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSet;
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvGraph;
					public total(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public delta_elems(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public storage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
					public first(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public v_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public elem_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public constructor(param0: number);
					public delta_elems(param0: number): org.bytedeco.javacpp.opencv_core.CvGraph;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public first(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
					public v_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvGraph;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeq;
					public total(param0: number): org.bytedeco.javacpp.opencv_core.CvGraph;
					public edges(): org.bytedeco.javacpp.opencv_core.CvSet;
					public delta_elems(): number;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public active_count(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvGraph;
					public h_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public delta_elems(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public block_max(): org.bytedeco.javacpp.BytePointer;
					public total(): number;
					public h_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvGraph;
					public v_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSet;
					public v_prev(): org.bytedeco.javacpp.opencv_core.CvSeq;
				}
				export class CvGraphEdge {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvGraphEdge>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public next(): org.bytedeco.javacpp.PointerPointer<any>;
					public vtx(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphVtx;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
					public weight(): number;
					public next(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
					public constructor();
					public vtx(param0: number, param1: org.bytedeco.javacpp.opencv_core.CvGraphVtx): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
					public vtx(): org.bytedeco.javacpp.PointerPointer<any>;
					public next(param0: number, param1: org.bytedeco.javacpp.opencv_core.CvGraphEdge): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
					public flags(): number;
					public weight(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
					public constructor(param0: number);
				}
				export class CvGraphScanner extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvGraphScanner {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvGraphScanner>;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphScanner;
					public vtx(): org.bytedeco.javacpp.opencv_core.CvGraphVtx;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public index(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphScanner;
					public stack(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public index(): number;
					public graph(param0: org.bytedeco.javacpp.opencv_core.CvGraph): org.bytedeco.javacpp.opencv_core.CvGraphScanner;
					public mask(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphScanner;
					public stack(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvGraphScanner;
					public mask(): number;
					public edge(): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
					public vtx(param0: org.bytedeco.javacpp.opencv_core.CvGraphVtx): org.bytedeco.javacpp.opencv_core.CvGraphScanner;
					public dst(param0: org.bytedeco.javacpp.opencv_core.CvGraphVtx): org.bytedeco.javacpp.opencv_core.CvGraphScanner;
					public constructor();
					public edge(param0: org.bytedeco.javacpp.opencv_core.CvGraphEdge): org.bytedeco.javacpp.opencv_core.CvGraphScanner;
					public graph(): org.bytedeco.javacpp.opencv_core.CvGraph;
					public constructor(param0: number);
					public dst(): org.bytedeco.javacpp.opencv_core.CvGraphVtx;
				}
				export class CvGraphVtx {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvGraphVtx>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphVtx;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphVtx;
					public first(): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
					public constructor();
					public flags(): number;
					public constructor(param0: number);
					public first(param0: org.bytedeco.javacpp.opencv_core.CvGraphEdge): org.bytedeco.javacpp.opencv_core.CvGraphVtx;
				}
				export class CvGraphVtx2D extends org.bytedeco.javacpp.opencv_core.CvGraphVtx {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvGraphVtx2D>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphVtx;
					public first(param0: org.bytedeco.javacpp.opencv_core.CvGraphEdge): org.bytedeco.javacpp.opencv_core.CvGraphVtx;
					public ptr(): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
					public first(param0: org.bytedeco.javacpp.opencv_core.CvGraphEdge): org.bytedeco.javacpp.opencv_core.CvGraphVtx2D;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphVtx;
					public first(): org.bytedeco.javacpp.opencv_core.CvGraphEdge;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphVtx2D;
					public ptr(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f): org.bytedeco.javacpp.opencv_core.CvGraphVtx2D;
					public flags(): number;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvGraphVtx2D;
					public constructor(param0: number);
				}
				export class CvHistogram extends org.bytedeco.javacpp.helper.opencv_imgproc.AbstractCvHistogram {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvHistogram>;
					public thresh2(param0: number): org.bytedeco.javacpp.FloatPointer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public type(param0: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
					public thresh2(): org.bytedeco.javacpp.PointerPointer<any>;
					public thresh2(param0: org.bytedeco.javacpp.PointerPointer<any>): org.bytedeco.javacpp.opencv_core.CvHistogram;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
					public type(): number;
					public mat(param0: org.bytedeco.javacpp.opencv_core.CvMatND): org.bytedeco.javacpp.opencv_core.CvHistogram;
					public thresh2(param0: number, param1: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_core.CvHistogram;
					public mat(): org.bytedeco.javacpp.opencv_core.CvMatND;
					public constructor();
					public thresh(): org.bytedeco.javacpp.FloatPointer;
					public bins(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.CvHistogram;
					public bins(): org.bytedeco.javacpp.helper.opencv_core.CvArr;
					public constructor(param0: number);
					public thresh(param0: number, param1: number): number;
					public thresh(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				}
				export class CvLineIterator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvLineIterator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public err(param0: number): org.bytedeco.javacpp.opencv_core.CvLineIterator;
					public plus_delta(): number;
					public plus_delta(param0: number): org.bytedeco.javacpp.opencv_core.CvLineIterator;
					public minus_delta(): number;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public err(): number;
					public minus_step(param0: number): org.bytedeco.javacpp.opencv_core.CvLineIterator;
					public minus_step(): number;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvLineIterator;
					public minus_delta(param0: number): org.bytedeco.javacpp.opencv_core.CvLineIterator;
					public plus_step(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvLineIterator;
					public constructor();
					public plus_step(param0: number): org.bytedeco.javacpp.opencv_core.CvLineIterator;
					public constructor(param0: number);
				}
				export class CvMat extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvMat {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvMat>;
					public height(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public data_db(param0: org.bytedeco.javacpp.DoublePointer): org.bytedeco.javacpp.opencv_core.CvMat;
					public data_ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvMat;
					public data_db(): org.bytedeco.javacpp.DoublePointer;
					public step(param0: number): org.bytedeco.javacpp.opencv_core.CvMat;
					public type(param0: number, param1: number): void;
					public data_i(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.CvMat;
					public width(): number;
					public data_s(param0: org.bytedeco.javacpp.ShortPointer): org.bytedeco.javacpp.opencv_core.CvMat;
					public rows(param0: number): org.bytedeco.javacpp.opencv_core.CvMat;
					public constructor();
					public data_s(): org.bytedeco.javacpp.ShortPointer;
					public cols(param0: number): org.bytedeco.javacpp.opencv_core.CvMat;
					public constructor(param0: number);
					public data_fl(): org.bytedeco.javacpp.FloatPointer;
					public height(param0: number): org.bytedeco.javacpp.opencv_core.CvMat;
					public rows(): number;
					public data_fl(param0: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_core.CvMat;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public refcount(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.CvMat;
					public data_ptr(): org.bytedeco.javacpp.BytePointer;
					public hdr_refcount(param0: number): org.bytedeco.javacpp.opencv_core.CvMat;
					public width(param0: number): org.bytedeco.javacpp.opencv_core.CvMat;
					public type(param0: number): org.bytedeco.javacpp.opencv_core.CvMat;
					public data_i(): org.bytedeco.javacpp.IntPointer;
					public step(): number;
					public type(): number;
					public cols(): number;
					public refcount(): org.bytedeco.javacpp.IntPointer;
					public hdr_refcount(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvMat;
				}
				export class CvMatDefaultDeleter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvMatDefaultDeleter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvMatDefaultDeleter;
					public constructor();
					public apply(param0: org.bytedeco.javacpp.opencv_core.CvMat): void;
					public constructor(param0: number);
				}
				export class CvMatND extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvMatND {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvMatND>;
					public dims(param0: number): org.bytedeco.javacpp.opencv_core.CvMatND;
					public dim_size(param0: number): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvMatND;
					public refcount(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.CvMatND;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public data_db(): org.bytedeco.javacpp.DoublePointer;
					public constructor();
					public data_s(): org.bytedeco.javacpp.ShortPointer;
					public data_ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvMatND;
					public data_fl(param0: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_core.CvMatND;
					public constructor(param0: number);
					public data_fl(): org.bytedeco.javacpp.FloatPointer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public data_i(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.CvMatND;
					public data_ptr(): org.bytedeco.javacpp.BytePointer;
					public data_db(param0: org.bytedeco.javacpp.DoublePointer): org.bytedeco.javacpp.opencv_core.CvMatND;
					public hdr_refcount(param0: number): org.bytedeco.javacpp.opencv_core.CvMatND;
					public dim_step(param0: number): number;
					public data_i(): org.bytedeco.javacpp.IntPointer;
					public type(): number;
					public dim_size(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvMatND;
					public data_s(param0: org.bytedeco.javacpp.ShortPointer): org.bytedeco.javacpp.opencv_core.CvMatND;
					public dims(): number;
					public dim_step(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvMatND;
					public type(param0: number): org.bytedeco.javacpp.opencv_core.CvMatND;
					public refcount(): org.bytedeco.javacpp.IntPointer;
					public hdr_refcount(): number;
				}
				export class CvMemBlock {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvMemBlock>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public next(param0: org.bytedeco.javacpp.opencv_core.CvMemBlock): org.bytedeco.javacpp.opencv_core.CvMemBlock;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvMemBlock;
					public constructor();
					public next(): org.bytedeco.javacpp.opencv_core.CvMemBlock;
					public prev(): org.bytedeco.javacpp.opencv_core.CvMemBlock;
					public prev(param0: org.bytedeco.javacpp.opencv_core.CvMemBlock): org.bytedeco.javacpp.opencv_core.CvMemBlock;
					public constructor(param0: number);
				}
				export class CvMemStorage extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvMemStorage {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvMemStorage>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public block_size(): number;
					public signature(): number;
					public signature(param0: number): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public block_size(param0: number): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public parent(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public free_space(param0: number): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public constructor();
					public free_space(): number;
					public top(): org.bytedeco.javacpp.opencv_core.CvMemBlock;
					public top(param0: org.bytedeco.javacpp.opencv_core.CvMemBlock): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public bottom(param0: org.bytedeco.javacpp.opencv_core.CvMemBlock): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public bottom(): org.bytedeco.javacpp.opencv_core.CvMemBlock;
					public parent(): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public constructor(param0: number);
				}
				export class CvMemStoragePos {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvMemStoragePos>;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvMemStoragePos;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public free_space(param0: number): org.bytedeco.javacpp.opencv_core.CvMemStoragePos;
					public constructor();
					public free_space(): number;
					public top(): org.bytedeco.javacpp.opencv_core.CvMemBlock;
					public top(param0: org.bytedeco.javacpp.opencv_core.CvMemBlock): org.bytedeco.javacpp.opencv_core.CvMemStoragePos;
					public constructor(param0: number);
				}
				export class CvNArrayIterator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvNArrayIterator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public hdr(param0: number, param1: org.bytedeco.javacpp.opencv_core.CvMatND): org.bytedeco.javacpp.opencv_core.CvNArrayIterator;
					public count(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvNArrayIterator;
					public size(param0: org.bytedeco.javacpp.opencv_core.CvSize): org.bytedeco.javacpp.opencv_core.CvNArrayIterator;
					public stack(): org.bytedeco.javacpp.IntPointer;
					public hdr(): org.bytedeco.javacpp.PointerPointer<any>;
					public count(param0: number): org.bytedeco.javacpp.opencv_core.CvNArrayIterator;
					public dims(param0: number): org.bytedeco.javacpp.opencv_core.CvNArrayIterator;
					public ptr(param0: number): org.bytedeco.javacpp.BytePointer;
					public size(): org.bytedeco.javacpp.opencv_core.CvSize;
					public constructor();
					public stack(param0: number): number;
					public dims(): number;
					public hdr(param0: number): org.bytedeco.javacpp.opencv_core.CvMatND;
					public ptr(): org.bytedeco.javacpp.PointerPointer<any>;
					public constructor(param0: number);
					public ptr(param0: number, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvNArrayIterator;
					public stack(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvNArrayIterator;
				}
				export class CvPoint extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvPoint {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvPoint>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public x(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint;
					public constructor();
					public y(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint;
					public x(): number;
					public y(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
				}
				export class CvPoint2D32f extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvPoint2D32f {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvPoint2D32f>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
					public x(): number;
					public y(): number;
					public y(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
					public constructor(param0: number);
					public x(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint2D32f;
					public constructor(param0: number, param1: number);
				}
				export class CvPoint2D64f extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvPoint2D64f {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvPoint2D64f>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public x(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
					public y(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint2D64f;
					public x(): number;
					public y(): number;
					public constructor(param0: number);
				}
				export class CvPoint3D32f extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvPoint3D32f {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvPoint3D32f>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public z(): number;
					public z(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
					public x(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
					public y(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D32f;
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public x(): number;
					public y(): number;
					public constructor(param0: number);
				}
				export class CvPoint3D64f extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvPoint3D64f {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvPoint3D64f>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public z(): number;
					public z(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
					public y(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
					public constructor();
					public x(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
					public x(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvPoint3D64f;
					public y(): number;
					public constructor(param0: number);
				}
				export class CvRect extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvRect {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvRect>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public height(): number;
					public x(param0: number): org.bytedeco.javacpp.opencv_core.CvRect;
					public x(): number;
					public height(param0: number): org.bytedeco.javacpp.opencv_core.CvRect;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvRect;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public width(): number;
					public y(param0: number): org.bytedeco.javacpp.opencv_core.CvRect;
					public constructor();
					public y(): number;
					public constructor(param0: number);
					public width(param0: number): org.bytedeco.javacpp.opencv_core.CvRect;
				}
				export class CvScalar extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvScalar {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvScalar>;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvScalar;
					public constructor();
					public val(): org.bytedeco.javacpp.DoublePointer;
					public constructor(param0: number);
					public val(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvScalar;
					public val(param0: number): number;
				}
				export class CvSeq extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvSeq {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSeq>;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public storage(): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public free_blocks(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
					public elem_size(): number;
					public free_blocks(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public h_prev(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public v_next(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public constructor();
					public storage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
					public first(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeq;
					public v_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public elem_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public constructor(param0: number);
					public v_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public first(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeq;
					public delta_elems(): number;
					public total(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public delta_elems(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public block_max(): org.bytedeco.javacpp.BytePointer;
					public h_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public total(): number;
					public header_size(): number;
					public flags(): number;
					public v_prev(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_next(): org.bytedeco.javacpp.opencv_core.CvSeq;
				}
				export class CvSeqBlock {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSeqBlock>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public data(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public count(param0: number): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public prev(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public count(): number;
					public start_index(): number;
					public next(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public prev(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public next(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public constructor();
					public data(): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: number);
					public start_index(param0: number): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
				}
				export class CvSeqReader {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSeqReader>;
					public block(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public prev_elem(): org.bytedeco.javacpp.BytePointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public block_min(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public prev_elem(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public block(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public seq(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public block_max(): org.bytedeco.javacpp.BytePointer;
					public constructor();
					public header_size(): number;
					public block_min(): org.bytedeco.javacpp.BytePointer;
					public delta_index(): number;
					public delta_index(param0: number): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public seq(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public constructor(param0: number);
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqReader;
				}
				export class CvSeqWriter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSeqWriter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public seq(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeqWriter;
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqWriter;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeqWriter;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSeqWriter;
					public block(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeqWriter;
					public block_min(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqWriter;
					public block(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public seq(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public block_max(): org.bytedeco.javacpp.BytePointer;
					public constructor();
					public header_size(): number;
					public block_min(): org.bytedeco.javacpp.BytePointer;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqWriter;
					public constructor(param0: number);
				}
				export class CvSet extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvSet {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSet>;
					public first(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSet;
					public storage(): org.bytedeco.javacpp.opencv_core.CvMemStorage;
					public free_elems(): org.bytedeco.javacpp.opencv_core.CvSetElem;
					public elem_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public elem_size(): number;
					public free_blocks(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public v_next(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSet;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public constructor();
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeq;
					public v_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public free_blocks(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSet;
					public active_count(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public total(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public storage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSet;
					public header_size(): number;
					public flags(): number;
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSet;
					public h_next(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public v_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSet;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public free_elems(param0: org.bytedeco.javacpp.opencv_core.CvSetElem): org.bytedeco.javacpp.opencv_core.CvSet;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSet;
					public free_blocks(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_prev(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public h_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSet;
					public total(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public delta_elems(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public storage(param0: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
					public first(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public v_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public elem_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public first(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeq;
					public delta_elems(): number;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public active_count(param0: number): org.bytedeco.javacpp.opencv_core.CvSet;
					public h_prev(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeq;
					public delta_elems(param0: number): org.bytedeco.javacpp.opencv_core.CvSeq;
					public block_max(): org.bytedeco.javacpp.BytePointer;
					public total(): number;
					public v_next(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSet;
					public v_prev(): org.bytedeco.javacpp.opencv_core.CvSeq;
				}
				export class CvSetElem {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSetElem>;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSetElem;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public next_free(): org.bytedeco.javacpp.opencv_core.CvSetElem;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.CvSetElem;
					public flags(): number;
					public constructor(param0: number);
					public next_free(param0: org.bytedeco.javacpp.opencv_core.CvSetElem): org.bytedeco.javacpp.opencv_core.CvSetElem;
				}
				export class CvSize extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvSize {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSize>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSize;
					public height(): number;
					public height(param0: number): org.bytedeco.javacpp.opencv_core.CvSize;
					public width(): number;
					public constructor();
					public width(param0: number): org.bytedeco.javacpp.opencv_core.CvSize;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
				}
				export class CvSize2D32f extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvSize2D32f {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSize2D32f>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSize2D32f;
					public height(): number;
					public height(param0: number): org.bytedeco.javacpp.opencv_core.CvSize2D32f;
					public width(): number;
					public width(param0: number): org.bytedeco.javacpp.opencv_core.CvSize2D32f;
					public constructor();
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
				}
				export class CvSlice {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSlice>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public asRange(): org.bytedeco.javacpp.opencv_core.Range;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSlice;
					public constructor();
					public end_index(param0: number): org.bytedeco.javacpp.opencv_core.CvSlice;
					public end_index(): number;
					public start_index(): number;
					public start_index(param0: number): org.bytedeco.javacpp.opencv_core.CvSlice;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Range);
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
				}
				export class CvSparseMat extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvSparseMat {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSparseMat>;
					public idxoffset(param0: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public hdr_refcount(param0: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public hashtable(param0: number): org.bytedeco.javacpp.Pointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public size(param0: number): number;
					public size(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public constructor();
					public heap(param0: org.bytedeco.javacpp.opencv_core.CvSet): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public valoffset(param0: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public hashsize(): number;
					public valoffset(): number;
					public constructor(param0: number);
					public idxoffset(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public hashsize(param0: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public dims(param0: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public hashtable(param0: number, param1: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public hashtable(param0: org.bytedeco.javacpp.PointerPointer<any>): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public hashtable(): org.bytedeco.javacpp.PointerPointer<any>;
					public refcount(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public type(): number;
					public dims(): number;
					public heap(): org.bytedeco.javacpp.opencv_core.CvSet;
					public type(param0: number): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public refcount(): org.bytedeco.javacpp.IntPointer;
					public copyToSparseMat(param0: org.bytedeco.javacpp.opencv_core.SparseMat): void;
					public hdr_refcount(): number;
					public size(): org.bytedeco.javacpp.IntPointer;
				}
				export class CvSparseMatIterator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSparseMatIterator>;
					public curidx(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mat(): org.bytedeco.javacpp.opencv_core.CvSparseMat;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSparseMatIterator;
					public mat(param0: org.bytedeco.javacpp.opencv_core.CvSparseMat): org.bytedeco.javacpp.opencv_core.CvSparseMatIterator;
					public constructor();
					public node(): org.bytedeco.javacpp.opencv_core.CvSparseNode;
					public node(param0: org.bytedeco.javacpp.opencv_core.CvSparseNode): org.bytedeco.javacpp.opencv_core.CvSparseMatIterator;
					public curidx(param0: number): org.bytedeco.javacpp.opencv_core.CvSparseMatIterator;
					public constructor(param0: number);
				}
				export class CvSparseNode {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvSparseNode>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public hashval(param0: number): org.bytedeco.javacpp.opencv_core.CvSparseNode;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSparseNode;
					public hashval(): number;
					public next(param0: org.bytedeco.javacpp.opencv_core.CvSparseNode): org.bytedeco.javacpp.opencv_core.CvSparseNode;
					public constructor(param0: number);
					public next(): org.bytedeco.javacpp.opencv_core.CvSparseNode;
				}
				export class CvTermCriteria {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvTermCriteria>;
					public asTermCriteria(): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvTermCriteria;
					public type(param0: number): org.bytedeco.javacpp.opencv_core.CvTermCriteria;
					public max_iter(param0: number): org.bytedeco.javacpp.opencv_core.CvTermCriteria;
					public epsilon(param0: number): org.bytedeco.javacpp.opencv_core.CvTermCriteria;
					public type(): number;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.TermCriteria);
					public constructor(param0: number, param1: number, param2: number);
					public epsilon(): number;
					public max_iter(): number;
					public constructor(param0: number);
				}
				export class CvTreeNodeIterator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.CvTreeNodeIterator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public node(): org.bytedeco.javacpp.Pointer;
					public level(param0: number): org.bytedeco.javacpp.opencv_core.CvTreeNodeIterator;
					public level(): number;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvTreeNodeIterator;
					public max_level(param0: number): org.bytedeco.javacpp.opencv_core.CvTreeNodeIterator;
					public max_level(): number;
					public constructor(param0: number);
				}
				export class Cv_iplAllocateImageData {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Cv_iplAllocateImageData>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public call(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: number, param2: number): void;
					public constructor();
				}
				export class Cv_iplCloneImage {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Cv_iplCloneImage>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.opencv_core.IplImage;
				}
				export class Cv_iplCreateImageHeader {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Cv_iplCreateImageHeader>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public call(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.BytePointer, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number, param7: number, param8: number, param9: number, param10: org.bytedeco.javacpp.opencv_core.IplROI, param11: org.bytedeco.javacpp.opencv_core.IplImage, param12: org.bytedeco.javacpp.Pointer, param13: org.bytedeco.javacpp.opencv_core.IplTileInfo): org.bytedeco.javacpp.opencv_core.IplImage;
					public constructor();
				}
				export class Cv_iplCreateROI {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Cv_iplCreateROI>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.IplROI;
				}
				export class Cv_iplDeallocate {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Cv_iplDeallocate>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: number): void;
				}
				export class DCT2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.DCT2D>;
					public apply(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.DCT2D;
					public apply(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number): void;
					public apply(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number): void;
				}
				export class DFT1D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.DFT1D>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: number, param1: number, param2: number, param3: number, param4: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.DFT1D;
					public static create(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.DFT1D;
					public apply(param0: native.Array<number>, param1: native.Array<number>): void;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.DFT1D;
					public apply(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer): void;
					public apply(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
				}
				export class DFT2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.DFT2D>;
					public apply(param0: native.Array<number>, param1: number, param2: native.Array<number>, param3: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_core.DFT2D;
					public apply(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number): void;
					public apply(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number): void;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.bytedeco.javacpp.opencv_core.DFT2D;
				}
				export class DMatch {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.DMatch>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public trainIdx(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.DMatch;
					public distance(param0: number): org.bytedeco.javacpp.opencv_core.DMatch;
					public trainIdx(param0: number): org.bytedeco.javacpp.opencv_core.DMatch;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public constructor();
					public imgIdx(): number;
					public constructor(param0: number, param1: number, param2: number);
					public distance(): number;
					public lessThan(param0: org.bytedeco.javacpp.opencv_core.DMatch): boolean;
					public queryIdx(param0: number): org.bytedeco.javacpp.opencv_core.DMatch;
					public imgIdx(param0: number): org.bytedeco.javacpp.opencv_core.DMatch;
					public constructor(param0: number);
					public queryIdx(): number;
				}
				export class DMatchVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.DMatchVector>;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.DMatch>);
					public end(): org.bytedeco.javacpp.opencv_core.DMatchVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public get(param0: number): org.bytedeco.javacpp.opencv_core.DMatch;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.DMatch): org.bytedeco.javacpp.opencv_core.DMatchVector;
					public empty(): boolean;
					public size(): number;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.DMatch>): org.bytedeco.javacpp.opencv_core.DMatchVector;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.DMatch): org.bytedeco.javacpp.opencv_core.DMatchVector;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.DMatch);
					public insert(param0: org.bytedeco.javacpp.opencv_core.DMatchVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.DMatch): org.bytedeco.javacpp.opencv_core.DMatchVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_core.DMatch): org.bytedeco.javacpp.opencv_core.DMatchVector;
					public toString(): string;
					public pop_back(): org.bytedeco.javacpp.opencv_core.DMatch;
					public constructor();
					public begin(): org.bytedeco.javacpp.opencv_core.DMatchVector.Iterator;
					public clear(): void;
					public erase(param0: org.bytedeco.javacpp.opencv_core.DMatchVector.Iterator): org.bytedeco.javacpp.opencv_core.DMatchVector.Iterator;
					public resize(param0: number): void;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.DMatch>;
					public constructor(param0: number);
					public put(param0: org.bytedeco.javacpp.opencv_core.DMatchVector): org.bytedeco.javacpp.opencv_core.DMatchVector;
				}
				export module DMatchVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.DMatchVector.Iterator>;
						public constructor();
						public equals(param0: org.bytedeco.javacpp.opencv_core.DMatchVector.Iterator): boolean;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_core.DMatchVector.Iterator;
						public get(): org.bytedeco.javacpp.opencv_core.DMatch;
					}
				}
				export class DMatchVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.DMatchVectorVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public pop_back(): org.bytedeco.javacpp.opencv_core.DMatchVector;
					public put(param0: org.bytedeco.javacpp.opencv_core.DMatchVector): org.bytedeco.javacpp.opencv_core.DMatchVectorVector;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.DMatchVector;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.DMatchVector>);
					public put(param0: org.bytedeco.javacpp.opencv_core.DMatchVectorVector): org.bytedeco.javacpp.opencv_core.DMatchVectorVector;
					public end(): org.bytedeco.javacpp.opencv_core.DMatchVectorVector.Iterator;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.DMatchVector>): org.bytedeco.javacpp.opencv_core.DMatchVectorVector;
					public empty(): boolean;
					public size(): number;
					public begin(): org.bytedeco.javacpp.opencv_core.DMatchVectorVector.Iterator;
					public toString(): string;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.DMatchVector): org.bytedeco.javacpp.opencv_core.DMatchVectorVector;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.DMatchVector): org.bytedeco.javacpp.opencv_core.DMatchVectorVector;
					public constructor();
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.DMatchVector>;
					public clear(): void;
					public resize(param0: number): void;
					public insert(param0: org.bytedeco.javacpp.opencv_core.DMatchVectorVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.DMatchVector): org.bytedeco.javacpp.opencv_core.DMatchVectorVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.DMatchVector);
					public constructor(param0: number);
					public erase(param0: org.bytedeco.javacpp.opencv_core.DMatchVectorVector.Iterator): org.bytedeco.javacpp.opencv_core.DMatchVectorVector.Iterator;
				}
				export module DMatchVectorVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.DMatchVectorVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public get(): org.bytedeco.javacpp.opencv_core.DMatchVector;
						public increment(): org.bytedeco.javacpp.opencv_core.DMatchVectorVector.Iterator;
						public equals(param0: org.bytedeco.javacpp.opencv_core.DMatchVectorVector.Iterator): boolean;
					}
				}
				export class Device {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Device>;
					public static TYPE_DEFAULT: number;
					public static TYPE_CPU: number;
					public static TYPE_GPU: number;
					public static TYPE_ACCELERATOR: number;
					public static TYPE_DGPU: number;
					public static TYPE_IGPU: number;
					public static TYPE_ALL: number;
					public static FP_DENORM: number;
					public static FP_INF_NAN: number;
					public static FP_ROUND_TO_NEAREST: number;
					public static FP_ROUND_TO_ZERO: number;
					public static FP_ROUND_TO_INF: number;
					public static FP_FMA: number;
					public static FP_SOFT_FLOAT: number;
					public static FP_CORRECTLY_ROUNDED_DIVIDE_SQRT: number;
					public static EXEC_KERNEL: number;
					public static EXEC_NATIVE_KERNEL: number;
					public static NO_CACHE: number;
					public static READ_ONLY_CACHE: number;
					public static READ_WRITE_CACHE: number;
					public static NO_LOCAL_MEM: number;
					public static LOCAL_IS_LOCAL: number;
					public static LOCAL_IS_GLOBAL: number;
					public static UNKNOWN_VENDOR: number;
					public static VENDOR_AMD: number;
					public static VENDOR_INTEL: number;
					public static VENDOR_NVIDIA: number;
					public set(param0: org.bytedeco.javacpp.Pointer): void;
					public isAMD(): boolean;
					public version(): org.bytedeco.javacpp.BytePointer;
					public OpenCL_C_Version(): org.bytedeco.javacpp.BytePointer;
					public maxReadImageArgs(): number;
					public maxWorkGroupSize(): number;
					public executionCapabilities(): number;
					public isIntel(): boolean;
					public constructor();
					public linkerAvailable(): boolean;
					public image2DMaxHeight(): number;
					public compilerAvailable(): boolean;
					public image2DMaxWidth(): number;
					public maxWorkItemDims(): number;
					public preferredVectorWidthInt(): number;
					public memBaseAddrAlign(): number;
					public image3DMaxWidth(): number;
					public image3DMaxDepth(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Device);
					public extensions(): org.bytedeco.javacpp.BytePointer;
					public addressBits(): number;
					public maxConstantArgs(): number;
					public halfFPConfig(): number;
					public maxComputeUnits(): number;
					public isExtensionSupported(param0: org.bytedeco.javacpp.BytePointer): boolean;
					public available(): boolean;
					public endianLittle(): boolean;
					public maxParameterSize(): number;
					public preferredVectorWidthShort(): number;
					public profilingTimerResolution(): number;
					public deviceVersionMinor(): number;
					public nativeVectorWidthChar(): number;
					public preferredVectorWidthChar(): number;
					public preferredVectorWidthHalf(): number;
					public type(): number;
					public imagePitchAlignment(): number;
					public image3DMaxHeight(): number;
					public nativeVectorWidthDouble(): number;
					public nativeVectorWidthHalf(): number;
					public globalMemCacheLineSize(): number;
					public imageMaxBufferSize(): number;
					public isNVidia(): boolean;
					public preferredVectorWidthFloat(): number;
					public imageFromBufferSupport(): boolean;
					public name(): org.bytedeco.javacpp.BytePointer;
					public localMemType(): number;
					public imageSupport(): boolean;
					public maxWriteImageArgs(): number;
					public globalMemCacheSize(): number;
					public static getDefault(): org.bytedeco.javacpp.opencv_core.Device;
					public vendorName(): org.bytedeco.javacpp.BytePointer;
					public nativeVectorWidthLong(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Device;
					public maxWorkItemSizes(param0: org.bytedeco.javacpp.SizeTPointer): void;
					public nativeVectorWidthInt(): number;
					public vendorID(): number;
					public ptr(): org.bytedeco.javacpp.Pointer;
					public singleFPConfig(): number;
					public deviceVersionMajor(): number;
					public globalMemCacheType(): number;
					public isExtensionSupported(param0: string): boolean;
					public errorCorrectionSupport(): boolean;
					public intelSubgroupsSupport(): boolean;
					public printfBufferSize(): number;
					public constructor(param0: number);
					public nativeVectorWidthFloat(): number;
					public preferredVectorWidthLong(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public preferredVectorWidthDouble(): number;
					public put(param0: org.bytedeco.javacpp.opencv_core.Device): org.bytedeco.javacpp.opencv_core.Device;
					public maxSamplers(): number;
					public globalMemSize(): number;
					public imageBaseAddressAlignment(): number;
					public maxConstantBufferSize(): number;
					public OpenCLVersion(): org.bytedeco.javacpp.BytePointer;
					public nativeVectorWidthShort(): number;
					public maxClockFrequency(): number;
					public doubleFPConfig(): number;
					public imageMaxArraySize(): number;
					public maxMemAllocSize(): number;
					public hostUnifiedMemory(): boolean;
					public localMemSize(): number;
					public driverVersion(): org.bytedeco.javacpp.BytePointer;
				}
				export class DeviceInfo {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.DeviceInfo>;
					public static ComputeModeDefault: number;
					public static ComputeModeExclusive: number;
					public static ComputeModeProhibited: number;
					public static ComputeModeExclusiveProcess: number;
					public maxTexture1DMipmap(): number;
					public computeMode(): number;
					public maxTexture2D(): org.bytedeco.javacpp.opencv_core.Point;
					public memoryBusWidth(): number;
					public maxSurface2DLayered(): org.bytedeco.javacpp.opencv_core.Point3i;
					public maxGridSize(): org.bytedeco.javacpp.opencv_core.Point3i;
					public canMapHostMemory(): boolean;
					public minorVersion(): number;
					public maxTexture2DLinear(): org.bytedeco.javacpp.opencv_core.Point3i;
					public constructor();
					public pciDomainID(): number;
					public sharedMemPerBlock(): number;
					public totalGlobalMem(): number;
					public textureAlignment(): number;
					public ECCEnabled(): boolean;
					public maxTexture1DLayered(): org.bytedeco.javacpp.opencv_core.Point;
					public clockRate(): number;
					public maxSurface2D(): org.bytedeco.javacpp.opencv_core.Point;
					public maxTexture2DMipmap(): org.bytedeco.javacpp.opencv_core.Point;
					public l2CacheSize(): number;
					public texturePitchAlignment(): number;
					public pciDeviceID(): number;
					public maxTexture2DLayered(): org.bytedeco.javacpp.opencv_core.Point3i;
					public memPitch(): number;
					public maxTexture2DGather(): org.bytedeco.javacpp.opencv_core.Point;
					public maxTexture3D(): org.bytedeco.javacpp.opencv_core.Point3i;
					public concurrentKernels(): boolean;
					public deviceID(): number;
					public maxThreadsPerBlock(): number;
					public name(): org.bytedeco.javacpp.BytePointer;
					public asyncEngineCount(): number;
					public freeMemory(): number;
					public isCompatible(): boolean;
					public maxSurface1D(): number;
					public surfaceAlignment(): number;
					public supports(param0: number): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.DeviceInfo;
					public queryMemory(param0: org.bytedeco.javacpp.SizeTPointer, param1: org.bytedeco.javacpp.SizeTPointer): void;
					public maxSurface1DLayered(): org.bytedeco.javacpp.opencv_core.Point;
					public integrated(): boolean;
					public kernelExecTimeoutEnabled(): boolean;
					public multiProcessorCount(): number;
					public maxTexture1DLinear(): number;
					public maxThreadsDim(): org.bytedeco.javacpp.opencv_core.Point3i;
					public memoryClockRate(): number;
					public pciBusID(): number;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public regsPerBlock(): number;
					public maxTextureCubemap(): number;
					public majorVersion(): number;
					public maxThreadsPerMultiProcessor(): number;
					public maxTexture1D(): number;
					public maxSurface3D(): org.bytedeco.javacpp.opencv_core.Point3i;
					public maxSurfaceCubemapLayered(): org.bytedeco.javacpp.opencv_core.Point;
					public totalMemory(): number;
					public warpSize(): number;
					public maxSurfaceCubemap(): number;
					public unifiedAddressing(): boolean;
					public maxTextureCubemapLayered(): org.bytedeco.javacpp.opencv_core.Point;
					public totalConstMem(): number;
					public tccDriver(): boolean;
				}
				export class DownhillSolver extends org.bytedeco.javacpp.opencv_core.MinProblemSolver {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.DownhillSolver>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_core.MinProblemSolver.Function, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.TermCriteria): org.bytedeco.javacpp.opencv_core.DownhillSolver;
					public getInitStep(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setInitStep(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setInitStep(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getInitStep(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.MinProblemSolver.Function, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.TermCriteria): org.bytedeco.javacpp.opencv_core.DownhillSolver;
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_core.DownhillSolver;
					public static create(param0: org.bytedeco.javacpp.opencv_core.MinProblemSolver.Function, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.TermCriteria): org.bytedeco.javacpp.opencv_core.DownhillSolver;
					public getInitStep(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setInitStep(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class ErrorCallback {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.ErrorCallback>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.BytePointer, param4: number, param5: org.bytedeco.javacpp.Pointer): number;
				}
				export class Event {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Event>;
					public static DEFAULT: number;
					public static BLOCKING_SYNC: number;
					public static DISABLE_TIMING: number;
					public static INTERPROCESS: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static elapsedTime(param0: org.bytedeco.javacpp.opencv_core.Event, param1: org.bytedeco.javacpp.opencv_core.Event): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Event;
					public record(param0: org.bytedeco.javacpp.opencv_core.Stream): void;
					public queryIfComplete(): boolean;
					public constructor();
					public record(): void;
					public waitForCompletion(): void;
					public constructor(param0: number);
				}
				export module Event {
					export class Impl {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Event.Impl>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
					}
				}
				export class FileNode {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.FileNode>;
					public static NONE: number;
					public static INT: number;
					public static REAL: number;
					public static FLOAT: number;
					public static STR: number;
					public static STRING: number;
					public static SEQ: number;
					public static MAP: number;
					public static TYPE_MASK: number;
					public static FLOW: number;
					public static UNIFORM: number;
					public static EMPTY: number;
					public static NAMED: number;
					public getNode(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.FileNode;
					public keys(): org.bytedeco.javacpp.opencv_core.StringVector;
					public blockIdx(param0: number): org.bytedeco.javacpp.opencv_core.FileNode;
					public isString(): boolean;
					public static isSeq(param0: number): boolean;
					public empty(): boolean;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public end(): org.bytedeco.javacpp.opencv_core.FileNodeIterator;
					public size(): number;
					public real(): number;
					public mat(): org.bytedeco.javacpp.opencv_core.Mat;
					public string(): org.bytedeco.javacpp.BytePointer;
					public asDouble(): number;
					public get(param0: string): org.bytedeco.javacpp.opencv_core.FileNode;
					public rawSize(): number;
					public readRaw(param0: string, param1: org.bytedeco.javacpp.Pointer, param2: number): void;
					public constructor();
					public isNone(): boolean;
					public ofs(param0: number): org.bytedeco.javacpp.opencv_core.FileNode;
					public setValue(param0: number, param1: org.bytedeco.javacpp.Pointer, param2: number): void;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.FileNode);
					public isSeq(): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static isEmptyCollection(param0: number): boolean;
					public isNamed(): boolean;
					public readRaw(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.Pointer, param2: number): void;
					public at(param0: number): org.bytedeco.javacpp.opencv_core.FileNode;
					public ofs(): number;
					public getNode(param0: string): org.bytedeco.javacpp.opencv_core.FileNode;
					public isReal(): boolean;
					public setValue(param0: number, param1: org.bytedeco.javacpp.Pointer): void;
					public isInt(): boolean;
					public asInt(): number;
					public static isFlow(param0: number): boolean;
					public type(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.FileNode;
					public begin(): org.bytedeco.javacpp.opencv_core.FileNodeIterator;
					public asFloat(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: number, param2: number);
					public get(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.FileNode;
					public name(): org.bytedeco.javacpp.BytePointer;
					public static isMap(param0: number): boolean;
					public blockIdx(): number;
					public isMap(): boolean;
					public asBytePointer(): org.bytedeco.javacpp.BytePointer;
					public static isCollection(param0: number): boolean;
					public fs(): org.bytedeco.javacpp.opencv_core.FileStorage;
				}
				export class FileNodeIterator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.FileNodeIterator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public multiply(): org.bytedeco.javacpp.opencv_core.FileNode;
					public increment(): org.bytedeco.javacpp.opencv_core.FileNodeIterator;
					public increment(param0: number): org.bytedeco.javacpp.opencv_core.FileNodeIterator;
					public readRaw(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.FileNodeIterator;
					public readRaw(param0: string, param1: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.FileNodeIterator;
					public addPut(param0: number): org.bytedeco.javacpp.opencv_core.FileNodeIterator;
					public readRaw(param0: string, param1: org.bytedeco.javacpp.Pointer, param2: number): org.bytedeco.javacpp.opencv_core.FileNodeIterator;
					public equalTo(param0: org.bytedeco.javacpp.opencv_core.FileNodeIterator): boolean;
					public readRaw(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.Pointer, param2: number): org.bytedeco.javacpp.opencv_core.FileNodeIterator;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.FileNodeIterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.FileNodeIterator);
					public remaining(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.FileNode, param1: boolean);
					public constructor(param0: number);
				}
				export class FileStorage {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.FileStorage>;
					public static READ: number;
					public static WRITE: number;
					public static APPEND: number;
					public static MEMORY: number;
					public static FORMAT_MASK: number;
					public static FORMAT_AUTO: number;
					public static FORMAT_XML: number;
					public static FORMAT_YAML: number;
					public static FORMAT_JSON: number;
					public static BASE64: number;
					public static WRITE_BASE64: number;
					public static UNDEFINED: number;
					public static VALUE_EXPECTED: number;
					public static NAME_EXPECTED: number;
					public static INSIDE_MAP: number;
					public writeComment(param0: string, param1: boolean): void;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: number);
					public root(): org.bytedeco.javacpp.opencv_core.FileNode;
					public getNode(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.FileNode;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.FileStorage;
					public getFirstTopLevelNode(): org.bytedeco.javacpp.opencv_core.FileNode;
					public writeRaw(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.Pointer, param2: number): void;
					public endWriteStruct(): void;
					public startWriteStruct(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer): void;
					public write(param0: string, param1: org.bytedeco.javacpp.opencv_core.StringVector): void;
					public root(param0: number): org.bytedeco.javacpp.opencv_core.FileNode;
					public writeRaw(param0: string, param1: org.bytedeco.javacpp.Pointer, param2: number): void;
					public write(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public open(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer): boolean;
					public open(param0: string, param1: number): boolean;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer);
					public write(param0: string, param1: string): void;
					public get(param0: string): org.bytedeco.javacpp.opencv_core.FileNode;
					public write(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
					public writeComment(param0: string): void;
					public writeComment(param0: org.bytedeco.javacpp.BytePointer, param1: boolean): void;
					public constructor();
					public constructor(param0: string, param1: number);
					public state(): number;
					public elname(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.FileStorage;
					public static getDefaultObjectName(param0: string): string;
					public constructor(param0: number);
					public writeComment(param0: org.bytedeco.javacpp.BytePointer): void;
					public getFormat(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public elname(): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: string, param1: number, param2: string);
					public startWriteStruct(param0: string, param1: number, param2: string): void;
					public getNode(param0: string): org.bytedeco.javacpp.opencv_core.FileNode;
					public release(): void;
					public static getDefaultObjectName(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
					public write(param0: org.bytedeco.javacpp.BytePointer, param1: number): void;
					public releaseAndGetString(): org.bytedeco.javacpp.BytePointer;
					public write(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.StringVector): void;
					public isOpened(): boolean;
					public write(param0: string, param1: number): void;
					public write(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public get(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.FileNode;
					public open(param0: org.bytedeco.javacpp.BytePointer, param1: number): boolean;
					public state(param0: number): org.bytedeco.javacpp.opencv_core.FileStorage;
					public open(param0: string, param1: number, param2: string): boolean;
				}
				export class Formatted {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Formatted>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public next(): org.bytedeco.javacpp.BytePointer;
					public reset(): void;
				}
				export class Formatter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Formatter>;
					public static FMT_DEFAULT: number;
					public static FMT_MATLAB: number;
					public static FMT_CSV: number;
					public static FMT_PYTHON: number;
					public static FMT_NUMPY: number;
					public static FMT_C: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static get(): org.bytedeco.javacpp.opencv_core.Formatter;
					public set32fPrecision(): void;
					public setMultiline(): void;
					public set16fPrecision(param0: number): void;
					public static get(param0: number): org.bytedeco.javacpp.opencv_core.Formatter;
					public set16fPrecision(): void;
					public set64fPrecision(): void;
					public format(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Formatted;
					public set64fPrecision(param0: number): void;
					public setMultiline(param0: boolean): void;
					public set32fPrecision(param0: number): void;
				}
				export class GpuMat {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.GpuMat>;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: org.bytedeco.javacpp.Pointer);
					public empty(): boolean;
					public download(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Stream): void;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Stream): void;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
					public rowRange(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.GpuMat;
					public constructor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar);
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: org.bytedeco.javacpp.Pointer, param3: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat.Allocator);
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public upload(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): org.bytedeco.javacpp.opencv_core.GpuMat;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): void;
					public size(): org.bytedeco.javacpp.opencv_core.Size;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Stream): void;
					public data(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.GpuMat;
					public datastart(): org.bytedeco.javacpp.BytePointer;
					public updateContinuityFlag(): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat.Allocator);
					public assignTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public upload(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public reshape(param0: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.Stream): org.bytedeco.javacpp.opencv_core.GpuMat;
					public constructor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat.Allocator);
					public upload(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.GpuMat;
					public step(): number;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public download(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Stream): void;
					public cols(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat);
					public reshape(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.GpuMat;
					public step1(): number;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): void;
					public col(param0: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public static defaultAllocator(): org.bytedeco.javacpp.opencv_core.GpuMat.Allocator;
					public download(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public rowRange(param0: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.GpuMat;
					public clone(): org.bytedeco.javacpp.opencv_core.GpuMat;
					public isContinuous(): boolean;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number): void;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): org.bytedeco.javacpp.opencv_core.GpuMat;
					public depth(): number;
					public constructor(param0: number);
					public rows(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public upload(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public upload(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): org.bytedeco.javacpp.opencv_core.GpuMat;
					public step(param0: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
					public colRange(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public rows(param0: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.GpuMat;
					public refcount(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.GpuMat;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Stream): void;
					public download(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMat.Allocator);
					public upload(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Stream): void;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number): void;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.GpuMat;
					public allocator(): org.bytedeco.javacpp.opencv_core.GpuMat.Allocator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat);
					public release(): void;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public type(): number;
					public adjustROI(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public constructor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: org.bytedeco.javacpp.opencv_core.GpuMat.Allocator);
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): void;
					public flags(): number;
					public download(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public refcount(): org.bytedeco.javacpp.IntPointer;
					public create(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): void;
					public allocator(param0: org.bytedeco.javacpp.opencv_core.GpuMat.Allocator): org.bytedeco.javacpp.opencv_core.GpuMat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): void;
					public assignTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): void;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number): void;
					public colRange(param0: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.GpuMat;
					public constructor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.Pointer, param4: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat.Allocator);
					public dataend(): org.bytedeco.javacpp.BytePointer;
					public locateROI(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Point): void;
					public constructor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.Pointer);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_core.GpuMat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Rect);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: org.bytedeco.javacpp.opencv_core.Scalar);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number);
					public static setDefaultAllocator(param0: org.bytedeco.javacpp.opencv_core.GpuMat.Allocator): void;
					public create(param0: number, param1: number, param2: number): void;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number): void;
					public swap(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.GpuMat;
					public row(param0: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat.Allocator);
					public channels(): number;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public datastart(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.GpuMat;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public cols(param0: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: org.bytedeco.javacpp.opencv_core.GpuMat.Allocator);
					public download(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public ptr(param0: number): org.bytedeco.javacpp.BytePointer;
					public elemSize1(): number;
					public elemSize(): number;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public data(): org.bytedeco.javacpp.BytePointer;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Range, param2: org.bytedeco.javacpp.opencv_core.Range);
				}
				export module GpuMat {
					export class Allocator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.GpuMat.Allocator>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public free(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
						public _allocate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number): boolean;
					}
				}
				export class GpuMatVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.GpuMatVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.GpuMat>);
					public empty(): boolean;
					public begin(): org.bytedeco.javacpp.opencv_core.GpuMatVector.Iterator;
					public insert(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.GpuMatVector.Iterator;
					public size(): number;
					public erase(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector.Iterator): org.bytedeco.javacpp.opencv_core.GpuMatVector.Iterator;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.GpuMat>;
					public toString(): string;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.GpuMat>): org.bytedeco.javacpp.opencv_core.GpuMatVector;
					public constructor();
					public pop_back(): org.bytedeco.javacpp.opencv_core.GpuMat;
					public clear(): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.GpuMatVector;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.GpuMatVector;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.GpuMatVector;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat);
					public resize(param0: number): void;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.GpuMat;
					public end(): org.bytedeco.javacpp.opencv_core.GpuMatVector.Iterator;
					public constructor(param0: number);
					public put(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector): org.bytedeco.javacpp.opencv_core.GpuMatVector;
				}
				export module GpuMatVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.GpuMatVector.Iterator>;
						public equals(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector.Iterator): boolean;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public get(): org.bytedeco.javacpp.opencv_core.GpuMat;
						public increment(): org.bytedeco.javacpp.opencv_core.GpuMatVector.Iterator;
					}
				}
				export class Hamming {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Hamming>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public apply(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer, param2: number): number;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Hamming;
					public apply(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): number;
					public constructor(param0: number);
					public static normType(): number;
					public apply(param0: native.Array<number>, param1: native.Array<number>, param2: number): number;
				}
				export class HostMem {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.HostMem>;
					public static PAGE_LOCKED: number;
					public static SHARED: number;
					public static WRITE_COMBINED: number;
					public empty(): boolean;
					public cols(param0: number): org.bytedeco.javacpp.opencv_core.HostMem;
					public data(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.HostMem;
					public static getAllocator(param0: number): org.bytedeco.javacpp.opencv_core.MatAllocator;
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public refcount(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.HostMem;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: number);
					public size(): org.bytedeco.javacpp.opencv_core.Size;
					public reshape(param0: number): org.bytedeco.javacpp.opencv_core.HostMem;
					public datastart(): org.bytedeco.javacpp.BytePointer;
					public createMatHeader(): org.bytedeco.javacpp.opencv_core.Mat;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.HostMem;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat);
					public release(): void;
					public alloc_type(): number;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public step(): number;
					public type(): number;
					public cols(): number;
					public step(param0: number): org.bytedeco.javacpp.opencv_core.HostMem;
					public flags(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat);
					public refcount(): org.bytedeco.javacpp.IntPointer;
					public create(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number);
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.HostMem;
					public step1(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.HostMem);
					public dataend(): org.bytedeco.javacpp.BytePointer;
					public rows(param0: number): org.bytedeco.javacpp.opencv_core.HostMem;
					public isContinuous(): boolean;
					public depth(): number;
					public constructor(param0: number);
					public reshape(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.HostMem;
					public rows(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static getAllocator(): org.bytedeco.javacpp.opencv_core.MatAllocator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number);
					public create(param0: number, param1: number, param2: number): void;
					public channels(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number);
					public put(param0: org.bytedeco.javacpp.opencv_core.HostMem): org.bytedeco.javacpp.opencv_core.HostMem;
					public swap(param0: org.bytedeco.javacpp.opencv_core.HostMem): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number);
					public elemSize1(): number;
					public clone(): org.bytedeco.javacpp.opencv_core.HostMem;
					public datastart(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.HostMem;
					public elemSize(): number;
					public alloc_type(param0: number): org.bytedeco.javacpp.opencv_core.HostMem;
					public data(): org.bytedeco.javacpp.BytePointer;
					public createGpuMatHeader(): org.bytedeco.javacpp.opencv_core.GpuMat;
				}
				export class Image2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Image2D>;
					public static canCreateAlias(param0: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean, param2: boolean);
					public constructor();
					public static isFormatSupported(param0: number, param1: number, param2: boolean): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Image2D);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat);
					public put(param0: org.bytedeco.javacpp.opencv_core.Image2D): org.bytedeco.javacpp.opencv_core.Image2D;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Image2D;
					public ptr(): org.bytedeco.javacpp.Pointer;
				}
				export class InstrNode {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.InstrNode>;
					public m_pParent(param0: org.bytedeco.javacpp.opencv_core.InstrNode): org.bytedeco.javacpp.opencv_core.InstrNode;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.InstrNode;
					public removeChilds(): void;
					public m_pParent(): org.bytedeco.javacpp.opencv_core.InstrNode;
					public m_childs(): org.bytedeco.javacpp.PointerPointer<any>;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.NodeData);
					public m_childs(param0: org.bytedeco.javacpp.PointerPointer<any>): org.bytedeco.javacpp.opencv_core.InstrNode;
					public getDepth(): number;
					public findChild(param0: org.bytedeco.javacpp.opencv_core.InstrNode): number;
					public m_payload(): org.bytedeco.javacpp.opencv_core.NodeData;
					public addChild(param0: org.bytedeco.javacpp.opencv_core.InstrNode): void;
					public constructor(param0: number);
					public findChild(param0: org.bytedeco.javacpp.opencv_core.NodeData): org.bytedeco.javacpp.opencv_core.InstrNode;
					public m_payload(param0: org.bytedeco.javacpp.opencv_core.NodeData): org.bytedeco.javacpp.opencv_core.InstrNode;
				}
				export class IntDoubleMap {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.IntDoubleMap>;
					public end(): org.bytedeco.javacpp.opencv_core.IntDoubleMap.Iterator;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public get(param0: number): number;
					public constructor();
					public put(param0: org.bytedeco.javacpp.opencv_core.IntDoubleMap): org.bytedeco.javacpp.opencv_core.IntDoubleMap;
					public begin(): org.bytedeco.javacpp.opencv_core.IntDoubleMap.Iterator;
					public empty(): boolean;
					public size(): number;
					public put(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.IntDoubleMap;
				}
				export module IntDoubleMap {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.IntDoubleMap.Iterator>;
						public constructor();
						public equals(param0: org.bytedeco.javacpp.opencv_core.IntDoubleMap.Iterator): boolean;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public second(): number;
						public increment(): org.bytedeco.javacpp.opencv_core.IntDoubleMap.Iterator;
						public first(): number;
					}
				}
				export class IntDoublePairVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.IntDoublePairVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public first(param0: number): number;
					public second(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.IntDoublePairVector;
					public empty(): boolean;
					public first(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.IntDoublePairVector;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.opencv_core.IntDoublePairVector;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public size(): number;
					public second(param0: number): number;
					public constructor();
					public clear(): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.IntDoublePairVector): org.bytedeco.javacpp.opencv_core.IntDoublePairVector;
					public resize(param0: number): void;
					public constructor(param0: number);
				}
				export class IntIntPair {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.IntIntPair>;
					public first(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.IntIntPair;
					public constructor();
					public put(param0: org.bytedeco.javacpp.opencv_core.IntIntPair): org.bytedeco.javacpp.opencv_core.IntIntPair;
					public first(param0: number): org.bytedeco.javacpp.opencv_core.IntIntPair;
					public second(): number;
					public second(param0: number): org.bytedeco.javacpp.opencv_core.IntIntPair;
					public constructor(param0: number, param1: number);
				}
				export class IntIntPairVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.IntIntPairVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public first(param0: number): number;
					public second(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.IntIntPairVector;
					public empty(): boolean;
					public constructor(param0: native.Array<number>, param1: native.Array<number>);
					public size(): number;
					public second(param0: number): number;
					public first(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.IntIntPairVector;
					public put(param0: org.bytedeco.javacpp.opencv_core.IntIntPairVector): org.bytedeco.javacpp.opencv_core.IntIntPairVector;
					public constructor();
					public clear(): void;
					public put(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.opencv_core.IntIntPairVector;
					public resize(param0: number): void;
					public constructor(param0: number);
				}
				export class IntVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.IntVectorVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public resize(param0: number, param1: number): void;
					public empty(): boolean;
					public constructor(param0: native.Array<native.Array<number>>);
					public size(): number;
					public size(param0: number): number;
					public put(param0: native.Array<native.Array<number>>): org.bytedeco.javacpp.opencv_core.IntVectorVector;
					public put(param0: org.bytedeco.javacpp.opencv_core.IntVectorVector): org.bytedeco.javacpp.opencv_core.IntVectorVector;
					public toString(): string;
					public constructor();
					public empty(param0: number): boolean;
					public clear(): void;
					public get(): native.Array<native.Array<number>>;
					public clear(param0: number): void;
					public resize(param0: number): void;
					public constructor(param0: number);
					public put(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.IntVectorVector;
					public get(param0: number, param1: number): number;
				}
				export class IplConvKernel extends org.bytedeco.javacpp.helper.opencv_imgproc.AbstractIplConvKernel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.IplConvKernel>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public anchorY(): number;
					public values(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.IplConvKernel;
					public anchorX(param0: number): org.bytedeco.javacpp.opencv_core.IplConvKernel;
					public nShiftR(param0: number): org.bytedeco.javacpp.opencv_core.IplConvKernel;
					public anchorY(param0: number): org.bytedeco.javacpp.opencv_core.IplConvKernel;
					public nRows(): number;
					public nRows(param0: number): org.bytedeco.javacpp.opencv_core.IplConvKernel;
					public anchorX(): number;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.IplConvKernel;
					public nCols(param0: number): org.bytedeco.javacpp.opencv_core.IplConvKernel;
					public values(): org.bytedeco.javacpp.IntPointer;
					public constructor(param0: number);
					public nCols(): number;
					public nShiftR(): number;
				}
				export class IplConvKernelFP {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.IplConvKernelFP>;
					public anchorX(param0: number): org.bytedeco.javacpp.opencv_core.IplConvKernelFP;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public anchorY(): number;
					public values(): org.bytedeco.javacpp.FloatPointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.IplConvKernelFP;
					public nCols(param0: number): org.bytedeco.javacpp.opencv_core.IplConvKernelFP;
					public values(param0: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_core.IplConvKernelFP;
					public nRows(): number;
					public anchorY(param0: number): org.bytedeco.javacpp.opencv_core.IplConvKernelFP;
					public anchorX(): number;
					public constructor();
					public nRows(param0: number): org.bytedeco.javacpp.opencv_core.IplConvKernelFP;
					public constructor(param0: number);
					public nCols(): number;
				}
				export class IplImage extends org.bytedeco.javacpp.helper.opencv_core.AbstractIplImage {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.IplImage>;
					public channelSeq(): org.bytedeco.javacpp.BytePointer;
					public origin(): number;
					public tileInfo(): org.bytedeco.javacpp.opencv_core.IplTileInfo;
					public BorderConst(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public width(): number;
					public constructor();
					public imageData(): org.bytedeco.javacpp.BytePointer;
					public align(): number;
					public origin(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public height(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public BorderMode(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public BorderConst(param0: number): number;
					public channelSeq(param0: number): number;
					public align(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public roi(param0: org.bytedeco.javacpp.opencv_core.IplROI): org.bytedeco.javacpp.opencv_core.IplImage;
					public dataOrder(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public nSize(): number;
					public alphaChannel(): number;
					public colorModel(param0: number): number;
					public imageId(): org.bytedeco.javacpp.Pointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public ID(): number;
					public alphaChannel(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public imageId(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.IplImage;
					public height(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public widthStep(): number;
					public colorModel(): org.bytedeco.javacpp.BytePointer;
					public widthStep(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public depth(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public width(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public imageDataOrigin(): org.bytedeco.javacpp.BytePointer;
					public depth(): number;
					public BorderMode(param0: number): number;
					public constructor(param0: number);
					public imageDataOrigin(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.IplImage;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public imageSize(): number;
					public imageSize(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public BorderConst(): org.bytedeco.javacpp.IntPointer;
					public BorderMode(): org.bytedeco.javacpp.IntPointer;
					public maskROI(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.opencv_core.IplImage;
					public nSize(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public roi(): org.bytedeco.javacpp.opencv_core.IplROI;
					public channelSeq(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public nChannels(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public nChannels(): number;
					public imageData(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.IplImage;
					public ID(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public dataOrder(): number;
					public colorModel(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.IplImage;
					public maskROI(): org.bytedeco.javacpp.opencv_core.IplImage;
					public tileInfo(param0: org.bytedeco.javacpp.opencv_core.IplTileInfo): org.bytedeco.javacpp.opencv_core.IplImage;
				}
				export class IplROI {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.IplROI>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public height(): number;
					public height(param0: number): org.bytedeco.javacpp.opencv_core.IplROI;
					public coi(): number;
					public xOffset(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.IplROI;
					public xOffset(param0: number): org.bytedeco.javacpp.opencv_core.IplROI;
					public width(): number;
					public constructor();
					public yOffset(param0: number): org.bytedeco.javacpp.opencv_core.IplROI;
					public yOffset(): number;
					public width(param0: number): org.bytedeco.javacpp.opencv_core.IplROI;
					public constructor(param0: number);
					public coi(param0: number): org.bytedeco.javacpp.opencv_core.IplROI;
				}
				export class IplTileInfo {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.IplTileInfo>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class Kernel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Kernel>;
					public set(param0: number, param1: org.bytedeco.javacpp.Pointer, param2: number): number;
					public empty(): boolean;
					public runTask(param0: boolean, param1: org.bytedeco.javacpp.opencv_core.Queue): boolean;
					public runProfiling(param0: number, param1: org.bytedeco.javacpp.SizeTPointer, param2: org.bytedeco.javacpp.SizeTPointer): number;
					public run(param0: number, param1: org.bytedeco.javacpp.SizeTPointer, param2: org.bytedeco.javacpp.SizeTPointer, param3: boolean): boolean;
					public ptr(): org.bytedeco.javacpp.Pointer;
					public create(param0: string, param1: org.bytedeco.javacpp.opencv_core.ProgramSource, param2: string, param3: org.bytedeco.javacpp.BytePointer): boolean;
					public run(param0: number, param1: org.bytedeco.javacpp.SizeTPointer, param2: org.bytedeco.javacpp.SizeTPointer, param3: boolean, param4: org.bytedeco.javacpp.opencv_core.Queue): boolean;
					public constructor();
					public set(param0: number, param1: org.bytedeco.javacpp.opencv_core.Image2D): number;
					public workGroupSize(): number;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Kernel;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Program);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public create(param0: string, param1: org.bytedeco.javacpp.opencv_core.Program): boolean;
					public set(param0: number, param1: org.bytedeco.javacpp.opencv_core.KernelArg): number;
					public set(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
					public runProfiling(param0: number, param1: org.bytedeco.javacpp.SizeTPointer, param2: org.bytedeco.javacpp.SizeTPointer, param3: org.bytedeco.javacpp.opencv_core.Queue): number;
					public runTask(param0: boolean): boolean;
					public create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Program): boolean;
					public constructor(param0: string, param1: org.bytedeco.javacpp.opencv_core.ProgramSource, param2: string, param3: org.bytedeco.javacpp.BytePointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Kernel);
					public preferedWorkGroupSizeMultiple(): number;
					public localMemSize(): number;
					public constructor(param0: string, param1: org.bytedeco.javacpp.opencv_core.Program);
					public put(param0: org.bytedeco.javacpp.opencv_core.Kernel): org.bytedeco.javacpp.opencv_core.Kernel;
					public compileWorkGroupSize(param0: org.bytedeco.javacpp.SizeTPointer): boolean;
				}
				export module Kernel {
					export class Impl {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Kernel.Impl>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
					}
				}
				export class KernelArg {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.KernelArg>;
					public static LOCAL: number;
					public static READ_ONLY: number;
					public static WRITE_ONLY: number;
					public static READ_WRITE: number;
					public static CONSTANT: number;
					public static PTR_ONLY: number;
					public static NO_SIZE: number;
					public sz(): number;
					public static PtrReadOnly(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.KernelArg;
					public static Constant(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.KernelArg;
					public m(): org.bytedeco.javacpp.opencv_core.UMat;
					public static Local(param0: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public obj(): org.bytedeco.javacpp.Pointer;
					public static WriteOnlyNoSize(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.KernelArg;
					public iwscale(): number;
					public static WriteOnly(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.KernelArg;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public static WriteOnly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public constructor();
					public static ReadWrite(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.KernelArg;
					public static ReadOnly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public wscale(): number;
					public static ReadWriteNoSize(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.KernelArg;
					public constructor(param0: number);
					public sz(param0: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: org.bytedeco.javacpp.Pointer, param5: number);
					public iwscale(param0: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public static PtrWriteOnly(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.KernelArg;
					public static ReadWrite(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public static ReadOnlyNoSize(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public static ReadWriteNoSize(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public static ReadOnly(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.KernelArg;
					public constructor(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat);
					public flags(): number;
					public wscale(param0: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public static WriteOnlyNoSize(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.KernelArg;
					public m(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.KernelArg;
					public static PtrReadWrite(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.KernelArg;
					public static ReadOnlyNoSize(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.KernelArg;
				}
				export class KeyPoint {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.KeyPoint>;
					public angle(param0: number): org.bytedeco.javacpp.opencv_core.KeyPoint;
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number);
					public size(): number;
					public constructor();
					public hash(): number;
					public angle(): number;
					public constructor(param0: number, param1: number, param2: number);
					public octave(param0: number): org.bytedeco.javacpp.opencv_core.KeyPoint;
					public class_id(param0: number): org.bytedeco.javacpp.opencv_core.KeyPoint;
					public pt(): org.bytedeco.javacpp.opencv_core.Point2f;
					public static convert(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVector, param2: native.Array<number>): void;
					public constructor(param0: number);
					public response(param0: number): org.bytedeco.javacpp.opencv_core.KeyPoint;
					public static convert(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVector, param2: java.nio.IntBuffer): void;
					public size(param0: number): org.bytedeco.javacpp.opencv_core.KeyPoint;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: number);
					public static convert(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVector, param2: org.bytedeco.javacpp.IntPointer): void;
					public pt(param0: org.bytedeco.javacpp.opencv_core.Point2f): org.bytedeco.javacpp.opencv_core.KeyPoint;
					public static convert(param0: org.bytedeco.javacpp.opencv_core.Point2fVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: number, param2: number, param3: number, param4: number, param5: number);
					public octave(): number;
					public static convert(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVector): void;
					public static overlap(param0: org.bytedeco.javacpp.opencv_core.KeyPoint, param1: org.bytedeco.javacpp.opencv_core.KeyPoint): number;
					public class_id(): number;
					public static convert(param0: org.bytedeco.javacpp.opencv_core.Point2fVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: number, param4: number, param5: number): void;
					public response(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.KeyPoint;
				}
				export class KeyPointVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.KeyPointVector>;
					public begin(): org.bytedeco.javacpp.opencv_core.KeyPointVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public insert(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.KeyPoint): org.bytedeco.javacpp.opencv_core.KeyPointVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector): org.bytedeco.javacpp.opencv_core.KeyPointVector;
					public empty(): boolean;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.KeyPoint): org.bytedeco.javacpp.opencv_core.KeyPointVector;
					public size(): number;
					public end(): org.bytedeco.javacpp.opencv_core.KeyPointVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.KeyPoint);
					public erase(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector.Iterator): org.bytedeco.javacpp.opencv_core.KeyPointVector.Iterator;
					public toString(): string;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.KeyPoint): org.bytedeco.javacpp.opencv_core.KeyPointVector;
					public constructor();
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.KeyPoint>): org.bytedeco.javacpp.opencv_core.KeyPointVector;
					public clear(): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.KeyPoint): org.bytedeco.javacpp.opencv_core.KeyPointVector;
					public pop_back(): org.bytedeco.javacpp.opencv_core.KeyPoint;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.KeyPoint>;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.KeyPoint;
					public resize(param0: number): void;
					public constructor(param0: number);
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.KeyPoint>);
				}
				export module KeyPointVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.KeyPointVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public get(): org.bytedeco.javacpp.opencv_core.KeyPoint;
						public equals(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector.Iterator): boolean;
						public increment(): org.bytedeco.javacpp.opencv_core.KeyPointVector.Iterator;
					}
				}
				export class KeyPointVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.KeyPointVectorVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector): org.bytedeco.javacpp.opencv_core.KeyPointVectorVector;
					public empty(): boolean;
					public pop_back(): org.bytedeco.javacpp.opencv_core.KeyPointVector;
					public size(): number;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): org.bytedeco.javacpp.opencv_core.KeyPointVectorVector;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.KeyPointVector;
					public toString(): string;
					public put(param0: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector): org.bytedeco.javacpp.opencv_core.KeyPointVectorVector;
					public constructor();
					public erase(param0: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector.Iterator): org.bytedeco.javacpp.opencv_core.KeyPointVectorVector.Iterator;
					public begin(): org.bytedeco.javacpp.opencv_core.KeyPointVectorVector.Iterator;
					public clear(): void;
					public insert(param0: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): org.bytedeco.javacpp.opencv_core.KeyPointVectorVector.Iterator;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.KeyPointVector>): org.bytedeco.javacpp.opencv_core.KeyPointVectorVector;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.KeyPointVector>;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector);
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.KeyPointVector>);
					public resize(param0: number): void;
					public end(): org.bytedeco.javacpp.opencv_core.KeyPointVectorVector.Iterator;
					public constructor(param0: number);
					public push_back(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector): org.bytedeco.javacpp.opencv_core.KeyPointVectorVector;
				}
				export module KeyPointVectorVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.KeyPointVectorVector.Iterator>;
						public increment(): org.bytedeco.javacpp.opencv_core.KeyPointVectorVector.Iterator;
						public constructor();
						public equals(param0: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector.Iterator): boolean;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public get(): org.bytedeco.javacpp.opencv_core.KeyPointVector;
					}
				}
				export class LDA {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.LDA>;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number);
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat);
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public load(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat);
					public load(param0: org.bytedeco.javacpp.BytePointer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public reconstruct(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public load(param0: string): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number);
					public compute(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public static subspaceProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public compute(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public reconstruct(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number);
					public eigenvectors(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number);
					public save(param0: org.bytedeco.javacpp.BytePointer): void;
					public static subspaceReconstruct(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public project(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public project(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public static subspaceReconstruct(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public project(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat);
					public save(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public eigenvalues(): org.bytedeco.javacpp.opencv_core.Mat;
					public static subspaceReconstruct(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat);
					public save(param0: string): void;
					public reconstruct(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat);
					public static subspaceProject(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.LDA;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat);
					public compute(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public static subspaceProject(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				}
				export class Mat extends org.bytedeco.javacpp.helper.opencv_core.AbstractMat {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Mat>;
					public static MAGIC_VAL: number;
					public static AUTO_STEP: number;
					public static CONTINUOUS_FLAG: number;
					public static SUBMATRIX_FLAG: number;
					public static MAGIC_MASK: number;
					public static TYPE_MASK: number;
					public static DEPTH_MASK: number;
					public ptr(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: number, param1: native.Array<number>, param2: number);
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: org.bytedeco.javacpp.Pointer);
					public empty(): boolean;
					public mul(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
					public constructor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar);
					public constructor(param0: number, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: org.bytedeco.javacpp.Pointer, param3: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f);
					public constructor();
					public dot(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public reshape(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.opencv_core.Mat;
					public datastart(): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: org.bytedeco.javacpp.FloatPointer);
					public step(): number;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public reserveBuffer(param0: number): void;
					public dims(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public cols(): number;
					public inv(param0: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public row(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public reshape(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: java.nio.IntBuffer, param1: number, param2: org.bytedeco.javacpp.opencv_core.Scalar);
					public isContinuous(): boolean;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number): void;
					public depth(): number;
					public constructor(param0: org.bytedeco.javacpp.DoublePointer);
					public cross(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public rows(): number;
					public pop_back(): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.Mat;
					public cols(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public mul(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.MatExpr;
					public clone(): org.bytedeco.javacpp.opencv_core.Mat;
					public checkVector(param0: number): number;
					public pop_back(param0: number): void;
					public constructor(param0: number, param1: java.nio.IntBuffer, param2: number, param3: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point3i);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Range, param2: org.bytedeco.javacpp.opencv_core.Range);
					public total(): number;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public reshape(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.IntPointer, param1: number);
					public ptr(param0: number, param1: number, param2: number): org.bytedeco.javacpp.BytePointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public cross(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.opencv_core.Scalar);
					public constructor(param0: number, param1: java.nio.IntBuffer, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect);
					public constructor(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2d);
					public allocator(param0: org.bytedeco.javacpp.opencv_core.MatAllocator): org.bytedeco.javacpp.opencv_core.Mat;
					public col(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public mul(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.MatExpr;
					public static getStdAllocator(): org.bytedeco.javacpp.opencv_core.MatAllocator;
					public constructor(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.Mat;
					public static zeros(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public release(): void;
					public constructor(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.Pointer, param3: org.bytedeco.javacpp.SizeTPointer);
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public copySize(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public reserve(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point3f);
					public setTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public mul(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public adjustROI(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.Mat;
					public flags(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point);
					public constructor(param0: org.bytedeco.javacpp.ShortPointer);
					public size(param0: number): number;
					public constructor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.Pointer);
					public constructor(param0: native.Array<number>, param1: number, param2: org.bytedeco.javacpp.opencv_core.Scalar);
					public put(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public colRange(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: org.bytedeco.javacpp.opencv_core.Scalar);
					public constructor(param0: java.nio.IntBuffer, param1: number, param2: org.bytedeco.javacpp.Pointer);
					public constructor(param0: native.Array<number>, param1: number, param2: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.IntPointer);
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number): void;
					public channels(): number;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.Pointer);
					public ptr(param0: number): org.bytedeco.javacpp.BytePointer;
					public elemSize1(): number;
					public reshape(param0: number, param1: number, param2: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public data(): org.bytedeco.javacpp.BytePointer;
					public _deallocate(): void;
					public inv(): org.bytedeco.javacpp.opencv_core.MatExpr;
					public constructor(param0: java.nio.IntBuffer, param1: number);
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public static getDefaultAllocator(): org.bytedeco.javacpp.opencv_core.MatAllocator;
					public constructor(param0: number, param1: number, param2: number);
					public constructor(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number);
					public constructor(param0: java.nio.IntBuffer, param1: number, param2: org.bytedeco.javacpp.Pointer, param3: org.bytedeco.javacpp.SizeTPointer);
					public reshape(param0: number, param1: number, param2: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_core.Mat;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): void;
					public size(): org.bytedeco.javacpp.opencv_core.Size;
					public allocator(): org.bytedeco.javacpp.opencv_core.MatAllocator;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: boolean);
					public addref(): void;
					public updateContinuityFlag(): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point3d);
					public total(param0: number, param1: number): number;
					public constructor(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: org.bytedeco.javacpp.Pointer, param4: org.bytedeco.javacpp.SizeTPointer);
					public put(param0: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.Mat;
					public rowRange(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.ShortPointer, param1: boolean);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat);
					public static zeros(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public diag(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public step1(): number;
					public mul(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public static setDefaultAllocator(param0: org.bytedeco.javacpp.opencv_core.MatAllocator): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Scalar);
					public isSubmatrix(): boolean;
					public checkVector(param0: number, param1: number, param2: boolean): number;
					public ptr(param0: java.nio.IntBuffer): java.nio.ByteBuffer;
					public create(param0: java.nio.IntBuffer, param1: number): void;
					public reshape(param0: number, param1: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public step(param0: number): number;
					public constructor(param0: number, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.Pointer, param4: org.bytedeco.javacpp.SizeTPointer);
					public constructor(param0: number);
					public setTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public data(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.Mat;
					public t(): org.bytedeco.javacpp.opencv_core.MatExpr;
					public create(param0: native.Array<number>, param1: number): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Range);
					public constructor(param0: native.Array<number>, param1: number);
					public create(param0: number, param1: native.Array<number>, param2: number): void;
					public rowRange(param0: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.Mat;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
					public cross(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public static diag(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: native.Array<number>, param1: number, param2: org.bytedeco.javacpp.Pointer, param3: org.bytedeco.javacpp.SizeTPointer);
					public push_back_(param0: org.bytedeco.javacpp.Pointer): void;
					public reshape(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public u(param0: org.bytedeco.javacpp.opencv_core.UMatData): org.bytedeco.javacpp.opencv_core.Mat;
					public ptr(param0: native.Array<number>): native.Array<number>;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Scalar4i);
					public constructor(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: org.bytedeco.javacpp.Pointer);
					public step1(param0: number): number;
					public colRange(param0: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.Mat;
					public assignTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
					public create(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number): void;
					public static eye(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public reshape(param0: number, param1: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_core.Mat;
					public datalimit(): org.bytedeco.javacpp.BytePointer;
					public type(): number;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): void;
					public u(): org.bytedeco.javacpp.opencv_core.UMatData;
					public assignTo(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public create(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): void;
					public rows(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number, param1: java.nio.IntBuffer, param2: number, param3: org.bytedeco.javacpp.Pointer, param4: org.bytedeco.javacpp.SizeTPointer);
					public setTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public total(param0: number): number;
					public dot(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
					public ptr(param0: number, param1: number): org.bytedeco.javacpp.BytePointer;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number): void;
					public create(param0: number, param1: java.nio.IntBuffer, param2: number): void;
					public constructor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.Pointer, param4: number);
					public dataend(): org.bytedeco.javacpp.BytePointer;
					public mul(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public locateROI(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Point): void;
					public static eye(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public dot(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public constructor(param0: number, param1: java.nio.IntBuffer, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar);
					public create(param0: org.bytedeco.javacpp.IntPointer, param1: number): void;
					public resize(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static ones(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number);
					public static ones(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public create(param0: number, param1: number, param2: number): void;
					public getUMat(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.UMat;
					public constructor(param0: native.Array<number>);
					public getUMat(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public elemSize(): number;
					public constructor(param0: native.Array<number>, param1: boolean);
					public dims(): number;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public resize(param0: number, param1: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public diag(): org.bytedeco.javacpp.opencv_core.Mat;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class MatAllocator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MatAllocator>;
					public copy(param0: org.bytedeco.javacpp.opencv_core.UMatData, param1: org.bytedeco.javacpp.opencv_core.UMatData, param2: number, param3: org.bytedeco.javacpp.SizeTPointer, param4: org.bytedeco.javacpp.SizeTPointer, param5: org.bytedeco.javacpp.SizeTPointer, param6: org.bytedeco.javacpp.SizeTPointer, param7: org.bytedeco.javacpp.SizeTPointer, param8: boolean): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public map(param0: org.bytedeco.javacpp.opencv_core.UMatData, param1: number): void;
					public _allocate(param0: number, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.Pointer, param4: org.bytedeco.javacpp.SizeTPointer, param5: number, param6: number): org.bytedeco.javacpp.opencv_core.UMatData;
					public upload(param0: org.bytedeco.javacpp.opencv_core.UMatData, param1: org.bytedeco.javacpp.Pointer, param2: number, param3: org.bytedeco.javacpp.SizeTPointer, param4: org.bytedeco.javacpp.SizeTPointer, param5: org.bytedeco.javacpp.SizeTPointer, param6: org.bytedeco.javacpp.SizeTPointer): void;
					public _allocate(param0: number, param1: java.nio.IntBuffer, param2: number, param3: org.bytedeco.javacpp.Pointer, param4: org.bytedeco.javacpp.SizeTPointer, param5: number, param6: number): org.bytedeco.javacpp.opencv_core.UMatData;
					public download(param0: org.bytedeco.javacpp.opencv_core.UMatData, param1: org.bytedeco.javacpp.Pointer, param2: number, param3: org.bytedeco.javacpp.SizeTPointer, param4: org.bytedeco.javacpp.SizeTPointer, param5: org.bytedeco.javacpp.SizeTPointer, param6: org.bytedeco.javacpp.SizeTPointer): void;
					public _allocate(param0: org.bytedeco.javacpp.opencv_core.UMatData, param1: number, param2: number): boolean;
					public _deallocate(param0: org.bytedeco.javacpp.opencv_core.UMatData): void;
					public getBufferPoolController(): org.bytedeco.javacpp.opencv_core.BufferPoolController;
					public _allocate(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: org.bytedeco.javacpp.Pointer, param4: org.bytedeco.javacpp.SizeTPointer, param5: number, param6: number): org.bytedeco.javacpp.opencv_core.UMatData;
					public unmap(param0: org.bytedeco.javacpp.opencv_core.UMatData): void;
					public getBufferPoolController(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.BufferPoolController;
					public getBufferPoolController(param0: string): org.bytedeco.javacpp.opencv_core.BufferPoolController;
				}
				export class MatBytePairVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MatBytePairVector>;
					public first(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Mat>, param1: native.Array<number>): org.bytedeco.javacpp.opencv_core.MatBytePairVector;
					public empty(): boolean;
					public size(): number;
					public first(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatBytePairVector;
					public second(param0: number): number;
					public second(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.MatBytePairVector;
					public constructor();
					public clear(): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.MatBytePairVector): org.bytedeco.javacpp.opencv_core.MatBytePairVector;
					public resize(param0: number): void;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Mat>, param1: native.Array<number>);
					public constructor(param0: number);
				}
				export class MatConstIterator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MatConstIterator>;
					public increment(): org.bytedeco.javacpp.opencv_core.MatConstIterator;
					public seek(param0: native.Array<number>): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public m(): org.bytedeco.javacpp.opencv_core.Mat;
					public subtractPut(param0: number): org.bytedeco.javacpp.opencv_core.MatConstIterator;
					public seek(param0: number, param1: boolean): void;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.MatConstIterator;
					public put(param0: org.bytedeco.javacpp.opencv_core.MatConstIterator): org.bytedeco.javacpp.opencv_core.MatConstIterator;
					public seek(param0: org.bytedeco.javacpp.IntPointer, param1: boolean): void;
					public sliceStart(): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point);
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.MatConstIterator);
					public decrement(param0: number): org.bytedeco.javacpp.opencv_core.MatConstIterator;
					public addPut(param0: number): org.bytedeco.javacpp.opencv_core.MatConstIterator;
					public seek(param0: number): void;
					public pos(param0: java.nio.IntBuffer): void;
					public constructor(param0: number);
					public seek(param0: native.Array<number>, param1: boolean): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public decrement(): org.bytedeco.javacpp.opencv_core.MatConstIterator;
					public pos(param0: native.Array<number>): void;
					public multiply(): org.bytedeco.javacpp.BytePointer;
					public pos(): org.bytedeco.javacpp.opencv_core.Point;
					public seek(param0: java.nio.IntBuffer): void;
					public lpos(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number);
					public get(param0: number): org.bytedeco.javacpp.BytePointer;
					public increment(param0: number): org.bytedeco.javacpp.opencv_core.MatConstIterator;
					public pos(param0: org.bytedeco.javacpp.IntPointer): void;
					public seek(param0: java.nio.IntBuffer, param1: boolean): void;
					public elemSize(param0: number): org.bytedeco.javacpp.opencv_core.MatConstIterator;
					public sliceEnd(): org.bytedeco.javacpp.BytePointer;
					public seek(param0: org.bytedeco.javacpp.IntPointer): void;
					public elemSize(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number);
				}
				export class MatExpr {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MatExpr>;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public alpha(param0: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public inv(): org.bytedeco.javacpp.opencv_core.MatExpr;
					public beta(param0: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public cross(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.MatExpr;
					public mul(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
					public c(): org.bytedeco.javacpp.opencv_core.Mat;
					public b(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
					public alpha(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.MatOp, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Scalar);
					public diag(param0: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public mul(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public mul(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.MatOp, param1: number);
					public row(param0: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public s(): org.bytedeco.javacpp.opencv_core.Scalar;
					public constructor();
					public dot(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_core.MatExpr;
					public size(): org.bytedeco.javacpp.opencv_core.Size;
					public a(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
					public constructor(param0: number);
					public col(param0: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public diag(): org.bytedeco.javacpp.opencv_core.MatExpr;
					public t(): org.bytedeco.javacpp.opencv_core.MatExpr;
					public s(param0: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.MatExpr;
					public asMat(): org.bytedeco.javacpp.opencv_core.Mat;
					public op(): org.bytedeco.javacpp.opencv_core.MatOp;
					public type(): number;
					public a(): org.bytedeco.javacpp.opencv_core.Mat;
					public b(): org.bytedeco.javacpp.opencv_core.Mat;
					public inv(param0: number): org.bytedeco.javacpp.opencv_core.MatExpr;
					public flags(): number;
					public c(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatExpr;
					public beta(): number;
					public mul(param0: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.MatExpr;
				}
				export class MatOp {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MatOp>;
					public multiply(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: number, param2: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public invert(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: number, param2: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public type(param0: org.bytedeco.javacpp.opencv_core.MatExpr): number;
					public assign(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public elementWise(param0: org.bytedeco.javacpp.opencv_core.MatExpr): boolean;
					public roi(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Range, param2: org.bytedeco.javacpp.opencv_core.Range, param3: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public subtract(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: org.bytedeco.javacpp.opencv_core.MatExpr, param2: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public transpose(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public abs(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public matmul(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr, param2: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public multiply(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr, param2: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public augAssignAdd(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public add(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Scalar, param2: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public subtract(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr, param2: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public divide(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr, param2: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public divide(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr, param2: org.bytedeco.javacpp.opencv_core.MatExpr, param3: number): void;
					public size(param0: org.bytedeco.javacpp.opencv_core.MatExpr): org.bytedeco.javacpp.opencv_core.Size;
					public add(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr, param2: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public augAssignXor(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public multiply(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.MatExpr, param2: org.bytedeco.javacpp.opencv_core.MatExpr, param3: number): void;
					public augAssignSubtract(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public augAssignOr(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public diag(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: number, param2: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public augAssignMultiply(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public augAssignDivide(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public augAssignAnd(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public divide(param0: number, param1: org.bytedeco.javacpp.opencv_core.MatExpr, param2: org.bytedeco.javacpp.opencv_core.MatExpr): void;
					public assign(param0: org.bytedeco.javacpp.opencv_core.MatExpr, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				}
				export class MatSize {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MatSize>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: native.Array<number>);
					public notEquals(param0: org.bytedeco.javacpp.opencv_core.MatSize): boolean;
					public asIntPointer(): org.bytedeco.javacpp.IntPointer;
					public p(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.MatSize;
					public constructor(param0: org.bytedeco.javacpp.IntPointer);
					public p(): org.bytedeco.javacpp.IntPointer;
					public dims(): number;
					public get(param0: number): org.bytedeco.javacpp.IntPointer;
					public constructor(param0: java.nio.IntBuffer);
					public apply(): org.bytedeco.javacpp.opencv_core.Size;
					public equals(param0: org.bytedeco.javacpp.opencv_core.MatSize): boolean;
				}
				export class MatStep {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MatStep>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public asLong(): number;
					public constructor();
					public put(param0: number): org.bytedeco.javacpp.opencv_core.MatStep;
					public buf(): org.bytedeco.javacpp.SizeTPointer;
					public buf(param0: number): number;
					public p(param0: org.bytedeco.javacpp.SizeTPointer): org.bytedeco.javacpp.opencv_core.MatStep;
					public p(): org.bytedeco.javacpp.SizeTPointer;
					public constructor(param0: number);
					public buf(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.MatStep;
					public get(param0: number): org.bytedeco.javacpp.SizeTPointer;
				}
				export class MatVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MatVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Mat>): org.bytedeco.javacpp.opencv_core.MatVector;
					public empty(): boolean;
					public size(): number;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatVector;
					public erase(param0: org.bytedeco.javacpp.opencv_core.MatVector.Iterator): org.bytedeco.javacpp.opencv_core.MatVector.Iterator;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatVector;
					public end(): org.bytedeco.javacpp.opencv_core.MatVector.Iterator;
					public begin(): org.bytedeco.javacpp.opencv_core.MatVector.Iterator;
					public toString(): string;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Mat>;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Mat>);
					public constructor();
					public pop_back(): org.bytedeco.javacpp.opencv_core.Mat;
					public insert(param0: org.bytedeco.javacpp.opencv_core.MatVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_core.MatVector): org.bytedeco.javacpp.opencv_core.MatVector;
					public clear(): void;
					public resize(param0: number): void;
					public constructor(param0: number);
					public put(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.MatVector;
				}
				export module MatVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MatVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_core.MatVector.Iterator;
						public equals(param0: org.bytedeco.javacpp.opencv_core.MatVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.opencv_core.Mat;
					}
				}
				export class MatVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MatVectorVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public get(param0: number): org.bytedeco.javacpp.opencv_core.MatVector;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.MatVector>;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.MatVector);
					public end(): org.bytedeco.javacpp.opencv_core.MatVectorVector.Iterator;
					public empty(): boolean;
					public begin(): org.bytedeco.javacpp.opencv_core.MatVectorVector.Iterator;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.MatVector>);
					public size(): number;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.MatVector): org.bytedeco.javacpp.opencv_core.MatVectorVector;
					public insert(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.MatVector): org.bytedeco.javacpp.opencv_core.MatVectorVector.Iterator;
					public pop_back(): org.bytedeco.javacpp.opencv_core.MatVector;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.MatVector): org.bytedeco.javacpp.opencv_core.MatVectorVector;
					public put(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector): org.bytedeco.javacpp.opencv_core.MatVectorVector;
					public toString(): string;
					public constructor();
					public clear(): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.MatVector): org.bytedeco.javacpp.opencv_core.MatVectorVector;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.MatVector>): org.bytedeco.javacpp.opencv_core.MatVectorVector;
					public resize(param0: number): void;
					public erase(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector.Iterator): org.bytedeco.javacpp.opencv_core.MatVectorVector.Iterator;
					public constructor(param0: number);
				}
				export module MatVectorVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MatVectorVector.Iterator>;
						public get(): org.bytedeco.javacpp.opencv_core.MatVector;
						public constructor();
						public increment(): org.bytedeco.javacpp.opencv_core.MatVectorVector.Iterator;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public equals(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector.Iterator): boolean;
					}
				}
				export class MinProblemSolver extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MinProblemSolver>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public getFunction(): org.bytedeco.javacpp.opencv_core.MinProblemSolver.Function;
					public setFunction(param0: org.bytedeco.javacpp.opencv_core.MinProblemSolver.Function): void;
					public getTermCriteria(): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public minimize(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public minimize(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public setTermCriteria(param0: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
					public constructor(param0: number);
					public minimize(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
				}
				export module MinProblemSolver {
					export class Function {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.MinProblemSolver.Function>;
						public constructor();
						public getDims(): number;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public constructor(param0: number);
						public getGradientEps(): number;
						public getGradient(param0: org.bytedeco.javacpp.DoublePointer, param1: org.bytedeco.javacpp.DoublePointer): void;
						public calc(param0: org.bytedeco.javacpp.DoublePointer): number;
						public position(param0: number): org.bytedeco.javacpp.opencv_core.MinProblemSolver.Function;
					}
				}
				export class Moments {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Moments>;
					public mu21(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public nu12(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public nu02(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public m21(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public mu11(): number;
					public mu21(): number;
					public mu11(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public constructor();
					public m00(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number);
					public m11(): number;
					public m01(): number;
					public m21(): number;
					public nu12(): number;
					public m03(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public mu20(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public m30(): number;
					public m02(): number;
					public nu21(): number;
					public m12(): number;
					public nu11(): number;
					public mu03(): number;
					public nu03(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public nu02(): number;
					public mu02(): number;
					public mu12(): number;
					public mu02(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public m03(): number;
					public m30(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public nu20(): number;
					public nu30(): number;
					public mu30(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public m20(): number;
					public nu03(): number;
					public m02(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public m10(): number;
					public m00(): number;
					public constructor(param0: number);
					public m12(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public nu21(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mu20(): number;
					public mu30(): number;
					public m10(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public nu30(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public nu11(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public mu03(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public m20(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public mu12(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public m01(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public nu20(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
					public m11(param0: number): org.bytedeco.javacpp.opencv_core.Moments;
				}
				export class NAryMatIterator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.NAryMatIterator>;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>);
					public planes(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.NAryMatIterator;
					public init(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>, param3: number): void;
					public init(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>): void;
					public ptrs(param0: number, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.NAryMatIterator;
					public ptrs(param0: number): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: number);
					public ptrs(): org.bytedeco.javacpp.PointerPointer<any>;
					public size(): number;
					public nplanes(param0: number): org.bytedeco.javacpp.opencv_core.NAryMatIterator;
					public init(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.PointerPointer<any>, param3: number): void;
					public init(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: number): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: number);
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.ByteBuffer);
					public constructor(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: number);
					public constructor(param0: number);
					public size(param0: number): org.bytedeco.javacpp.opencv_core.NAryMatIterator;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public nplanes(): number;
					public init(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer): void;
					public planes(): org.bytedeco.javacpp.opencv_core.Mat;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.NAryMatIterator;
					public arrays(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public narrays(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number);
					public arrays(): org.bytedeco.javacpp.PointerPointer<any>;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.ByteBuffer, param2: number);
					public init(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.ByteBuffer, param3: number): void;
					public increment(param0: number): org.bytedeco.javacpp.opencv_core.NAryMatIterator;
					public constructor(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat);
					public narrays(param0: number): org.bytedeco.javacpp.opencv_core.NAryMatIterator;
					public ptrs(param0: org.bytedeco.javacpp.PointerPointer<any>): org.bytedeco.javacpp.opencv_core.NAryMatIterator;
					public init(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.ByteBuffer): void;
					public increment(): org.bytedeco.javacpp.opencv_core.NAryMatIterator;
				}
				export class NodeData {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.NodeData>;
					public getMeanMs(): number;
					public m_funName(): org.bytedeco.javacpp.BytePointer;
					public m_counter(param0: number): org.bytedeco.javacpp.opencv_core.NodeData;
					public m_alwaysExpand(param0: boolean): org.bytedeco.javacpp.opencv_core.NodeData;
					public m_funError(param0: boolean): org.bytedeco.javacpp.opencv_core.NodeData;
					public m_lineNum(): number;
					public m_ticksTotal(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.NodeData;
					public m_alwaysExpand(): boolean;
					public m_funError(): boolean;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number, param3: org.bytedeco.javacpp.Pointer, param4: boolean, param5: number, param6: number);
					public constructor();
					public m_threads(param0: number): org.bytedeco.javacpp.opencv_core.NodeData;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.NodeData);
					public m_instrType(): number;
					public m_counter(): number;
					public m_retAddress(): org.bytedeco.javacpp.Pointer;
					public constructor(param0: number);
					public m_implType(param0: number): org.bytedeco.javacpp.opencv_core.NodeData;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: org.bytedeco.javacpp.opencv_core.NodeData): org.bytedeco.javacpp.opencv_core.NodeData;
					public m_ticksTotal(param0: number): org.bytedeco.javacpp.opencv_core.NodeData;
					public m_retAddress(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.NodeData;
					public m_threads(): number;
					public m_implType(): number;
					public m_tls(): org.bytedeco.javacpp.opencv_core.NodeDataTlsData;
					public getTotalMs(): number;
					public constructor(param0: string, param1: string, param2: number, param3: org.bytedeco.javacpp.Pointer, param4: boolean, param5: number, param6: number);
					public m_fileName(): org.bytedeco.javacpp.BytePointer;
					public m_lineNum(param0: number): org.bytedeco.javacpp.opencv_core.NodeData;
					public m_funName(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.NodeData;
					public m_instrType(param0: number): org.bytedeco.javacpp.opencv_core.NodeData;
				}
				export class NodeDataTls {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.NodeDataTls>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public m_ticksTotal(): number;
					public m_ticksTotal(param0: number): org.bytedeco.javacpp.opencv_core.NodeDataTls;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.NodeDataTls;
				}
				export class NodeDataTlsData {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.NodeDataTlsData>;
					public getRef(): org.bytedeco.javacpp.opencv_core.NodeDataTls;
					public cleanup(): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public get(): org.bytedeco.javacpp.opencv_core.NodeDataTls;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.NodeDataTlsData;
					public gather(param0: org.bytedeco.javacpp.opencv_core.NodeDataTlsVector): void;
				}
				export class NodeDataTlsVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.NodeDataTlsVector>;
					public end(): org.bytedeco.javacpp.opencv_core.NodeDataTlsVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.NodeDataTls>): org.bytedeco.javacpp.opencv_core.NodeDataTlsVector;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.NodeDataTls>;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.NodeDataTls>);
					public empty(): boolean;
					public begin(): org.bytedeco.javacpp.opencv_core.NodeDataTlsVector.Iterator;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.NodeDataTls;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.NodeDataTls): org.bytedeco.javacpp.opencv_core.NodeDataTlsVector;
					public size(): number;
					public put(param0: org.bytedeco.javacpp.opencv_core.NodeDataTls): org.bytedeco.javacpp.opencv_core.NodeDataTlsVector;
					public toString(): string;
					public put(param0: org.bytedeco.javacpp.opencv_core.NodeDataTlsVector): org.bytedeco.javacpp.opencv_core.NodeDataTlsVector;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.NodeDataTls);
					public clear(): void;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.NodeDataTls): org.bytedeco.javacpp.opencv_core.NodeDataTlsVector;
					public insert(param0: org.bytedeco.javacpp.opencv_core.NodeDataTlsVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.NodeDataTls): org.bytedeco.javacpp.opencv_core.NodeDataTlsVector.Iterator;
					public resize(param0: number): void;
					public pop_back(): org.bytedeco.javacpp.opencv_core.NodeDataTls;
					public constructor(param0: number);
					public erase(param0: org.bytedeco.javacpp.opencv_core.NodeDataTlsVector.Iterator): org.bytedeco.javacpp.opencv_core.NodeDataTlsVector.Iterator;
				}
				export module NodeDataTlsVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.NodeDataTlsVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_core.NodeDataTlsVector.Iterator;
						public equals(param0: org.bytedeco.javacpp.opencv_core.NodeDataTlsVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.opencv_core.NodeDataTls;
					}
				}
				export class OclPlatform {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.OclPlatform>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.OclPlatform;
					public constructor();
					public static getDefault(): org.bytedeco.javacpp.opencv_core.OclPlatform;
					public put(param0: org.bytedeco.javacpp.opencv_core.OclPlatform): org.bytedeco.javacpp.opencv_core.OclPlatform;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.OclPlatform);
					public constructor(param0: number);
					public ptr(): org.bytedeco.javacpp.Pointer;
				}
				export class PCA {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.PCA>;
					public static DATA_AS_ROW: number;
					public static DATA_AS_COL: number;
					public static USE_AVG: number;
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): org.bytedeco.javacpp.opencv_core.PCA;
					public eigenvectors(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.PCA;
					public project(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public project(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public backProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public project(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public project(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public mean(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.PCA;
					public project(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public backProject(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public eigenvalues(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.PCA;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number);
					public eigenvalues(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): org.bytedeco.javacpp.opencv_core.PCA;
					public mean(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public backProject(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): org.bytedeco.javacpp.opencv_core.PCA;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.PCA;
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.PCA;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.PCA;
					public backProject(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public eigenvectors(): org.bytedeco.javacpp.opencv_core.Mat;
					public backProject(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.PCA;
					public backProject(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public project(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
				}
				export class ParallelLoopBody {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.ParallelLoopBody>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Range): void;
				}
				export class ParallelLoopBodyLambdaWrapper extends org.bytedeco.javacpp.opencv_core.ParallelLoopBody {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.ParallelLoopBodyLambdaWrapper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.presets.opencv_core.Functor);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Range): void;
				}
				export class PlatformInfo {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.PlatformInfo>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.PlatformInfo;
					public getDevice(param0: org.bytedeco.javacpp.opencv_core.Device, param1: number): void;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.PlatformInfo);
					public deviceNumber(): number;
					public version(): org.bytedeco.javacpp.BytePointer;
					public put(param0: org.bytedeco.javacpp.opencv_core.PlatformInfo): org.bytedeco.javacpp.opencv_core.PlatformInfo;
					public vendor(): org.bytedeco.javacpp.BytePointer;
					public name(): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: number);
				}
				export class Point {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point>;
					public dot(param0: org.bytedeco.javacpp.opencv_core.Point): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point);
					public ddot(param0: org.bytedeco.javacpp.opencv_core.Point): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Point;
					public x(): number;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point): org.bytedeco.javacpp.opencv_core.Point;
					public cross(param0: org.bytedeco.javacpp.opencv_core.Point): number;
					public x(param0: number): org.bytedeco.javacpp.opencv_core.Point;
					public inside(param0: org.bytedeco.javacpp.opencv_core.Rect): boolean;
					public y(param0: number): org.bytedeco.javacpp.opencv_core.Point;
					public constructor();
					public y(): number;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
				}
				export class Point2d {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point2d>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public y(param0: number): org.bytedeco.javacpp.opencv_core.Point2d;
					public inside(param0: org.bytedeco.javacpp.opencv_core.Rect2d): boolean;
					public cross(param0: org.bytedeco.javacpp.opencv_core.Point2d): number;
					public x(): number;
					public ddot(param0: org.bytedeco.javacpp.opencv_core.Point2d): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Point2d;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size2d);
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2d);
					public dot(param0: org.bytedeco.javacpp.opencv_core.Point2d): number;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point2d): org.bytedeco.javacpp.opencv_core.Point2d;
					public y(): number;
					public constructor(param0: number);
					public x(param0: number): org.bytedeco.javacpp.opencv_core.Point2d;
					public constructor(param0: number, param1: number);
				}
				export class Point2dVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point2dVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Point2d): org.bytedeco.javacpp.opencv_core.Point2dVector;
					public empty(): boolean;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Point2d;
					public size(): number;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point2d): org.bytedeco.javacpp.opencv_core.Point2dVector;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Point2d>;
					public begin(): org.bytedeco.javacpp.opencv_core.Point2dVector.Iterator;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point2d): org.bytedeco.javacpp.opencv_core.Point2dVector;
					public toString(): string;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point2d>);
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2d);
					public clear(): void;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Point2d;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point2d>): org.bytedeco.javacpp.opencv_core.Point2dVector;
					public resize(param0: number): void;
					public insert(param0: org.bytedeco.javacpp.opencv_core.Point2dVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Point2d): org.bytedeco.javacpp.opencv_core.Point2dVector.Iterator;
					public end(): org.bytedeco.javacpp.opencv_core.Point2dVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point2dVector): org.bytedeco.javacpp.opencv_core.Point2dVector;
					public constructor(param0: number);
					public erase(param0: org.bytedeco.javacpp.opencv_core.Point2dVector.Iterator): org.bytedeco.javacpp.opencv_core.Point2dVector.Iterator;
				}
				export module Point2dVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point2dVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public get(): org.bytedeco.javacpp.opencv_core.Point2d;
						public increment(): org.bytedeco.javacpp.opencv_core.Point2dVector.Iterator;
						public equals(param0: org.bytedeco.javacpp.opencv_core.Point2dVector.Iterator): boolean;
					}
				}
				export class Point2dVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point2dVectorVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: org.bytedeco.javacpp.opencv_core.Point2dVector): org.bytedeco.javacpp.opencv_core.Point2dVectorVector;
					public empty(): boolean;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Point2dVector;
					public size(): number;
					public erase(param0: org.bytedeco.javacpp.opencv_core.Point2dVectorVector.Iterator): org.bytedeco.javacpp.opencv_core.Point2dVectorVector.Iterator;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point2dVector>): org.bytedeco.javacpp.opencv_core.Point2dVectorVector;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2dVector);
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Point2dVector;
					public end(): org.bytedeco.javacpp.opencv_core.Point2dVectorVector.Iterator;
					public toString(): string;
					public begin(): org.bytedeco.javacpp.opencv_core.Point2dVectorVector.Iterator;
					public constructor();
					public put(param0: org.bytedeco.javacpp.opencv_core.Point2dVectorVector): org.bytedeco.javacpp.opencv_core.Point2dVectorVector;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Point2dVector): org.bytedeco.javacpp.opencv_core.Point2dVectorVector;
					public insert(param0: org.bytedeco.javacpp.opencv_core.Point2dVectorVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Point2dVector): org.bytedeco.javacpp.opencv_core.Point2dVectorVector.Iterator;
					public clear(): void;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Point2dVector>;
					public resize(param0: number): void;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point2dVector>);
					public constructor(param0: number);
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point2dVector): org.bytedeco.javacpp.opencv_core.Point2dVectorVector;
				}
				export module Point2dVectorVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point2dVectorVector.Iterator>;
						public constructor();
						public increment(): org.bytedeco.javacpp.opencv_core.Point2dVectorVector.Iterator;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public equals(param0: org.bytedeco.javacpp.opencv_core.Point2dVectorVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.opencv_core.Point2dVector;
					}
				}
				export class Point2f {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point2f>;
					public y(param0: number): org.bytedeco.javacpp.opencv_core.Point2f;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public x(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Point2f;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size2f);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f);
					public constructor();
					public put(param0: org.bytedeco.javacpp.opencv_core.Point2f): org.bytedeco.javacpp.opencv_core.Point2f;
					public dot(param0: org.bytedeco.javacpp.opencv_core.Point2f): number;
					public cross(param0: org.bytedeco.javacpp.opencv_core.Point2f): number;
					public inside(param0: org.bytedeco.javacpp.opencv_core.Rect2f): boolean;
					public x(param0: number): org.bytedeco.javacpp.opencv_core.Point2f;
					public y(): number;
					public ddot(param0: org.bytedeco.javacpp.opencv_core.Point2f): number;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
				}
				export class Point2fVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point2fVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point2f>): org.bytedeco.javacpp.opencv_core.Point2fVector;
					public empty(): boolean;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Point2f;
					public size(): number;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point2f): org.bytedeco.javacpp.opencv_core.Point2fVector;
					public erase(param0: org.bytedeco.javacpp.opencv_core.Point2fVector.Iterator): org.bytedeco.javacpp.opencv_core.Point2fVector.Iterator;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Point2f): org.bytedeco.javacpp.opencv_core.Point2fVector;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Point2f>;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point2f>);
					public toString(): string;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point2f): org.bytedeco.javacpp.opencv_core.Point2fVector;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f);
					public constructor();
					public end(): org.bytedeco.javacpp.opencv_core.Point2fVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point2fVector): org.bytedeco.javacpp.opencv_core.Point2fVector;
					public clear(): void;
					public resize(param0: number): void;
					public insert(param0: org.bytedeco.javacpp.opencv_core.Point2fVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Point2f): org.bytedeco.javacpp.opencv_core.Point2fVector.Iterator;
					public constructor(param0: number);
					public begin(): org.bytedeco.javacpp.opencv_core.Point2fVector.Iterator;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Point2f;
				}
				export module Point2fVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point2fVector.Iterator>;
						public constructor();
						public equals(param0: org.bytedeco.javacpp.opencv_core.Point2fVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.opencv_core.Point2f;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_core.Point2fVector.Iterator;
					}
				}
				export class Point2fVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point2fVectorVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Point2fVector>;
					public empty(): boolean;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point2fVector>): org.bytedeco.javacpp.opencv_core.Point2fVectorVector;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point2fVector>);
					public size(): number;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point2fVector): org.bytedeco.javacpp.opencv_core.Point2fVectorVector;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Point2fVector;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2fVector);
					public end(): org.bytedeco.javacpp.opencv_core.Point2fVectorVector.Iterator;
					public toString(): string;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point2fVectorVector): org.bytedeco.javacpp.opencv_core.Point2fVectorVector;
					public erase(param0: org.bytedeco.javacpp.opencv_core.Point2fVectorVector.Iterator): org.bytedeco.javacpp.opencv_core.Point2fVectorVector.Iterator;
					public constructor();
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Point2fVector;
					public begin(): org.bytedeco.javacpp.opencv_core.Point2fVectorVector.Iterator;
					public clear(): void;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Point2fVector): org.bytedeco.javacpp.opencv_core.Point2fVectorVector;
					public insert(param0: org.bytedeco.javacpp.opencv_core.Point2fVectorVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Point2fVector): org.bytedeco.javacpp.opencv_core.Point2fVectorVector.Iterator;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point2fVector): org.bytedeco.javacpp.opencv_core.Point2fVectorVector;
					public resize(param0: number): void;
					public constructor(param0: number);
				}
				export module Point2fVectorVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point2fVectorVector.Iterator>;
						public get(): org.bytedeco.javacpp.opencv_core.Point2fVector;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public equals(param0: org.bytedeco.javacpp.opencv_core.Point2fVectorVector.Iterator): boolean;
						public increment(): org.bytedeco.javacpp.opencv_core.Point2fVectorVector.Iterator;
					}
				}
				export class Point3d {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point3d>;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point3d): org.bytedeco.javacpp.opencv_core.Point3d;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public y(param0: number): org.bytedeco.javacpp.opencv_core.Point3d;
					public z(param0: number): org.bytedeco.javacpp.opencv_core.Point3d;
					public dot(param0: org.bytedeco.javacpp.opencv_core.Point3d): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point3d);
					public x(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Point3d;
					public ddot(param0: org.bytedeco.javacpp.opencv_core.Point3d): number;
					public z(): number;
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2d);
					public x(param0: number): org.bytedeco.javacpp.opencv_core.Point3d;
					public cross(param0: org.bytedeco.javacpp.opencv_core.Point3d): org.bytedeco.javacpp.opencv_core.Point3d;
					public y(): number;
					public constructor(param0: number);
				}
				export class Point3f {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point3f>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: org.bytedeco.javacpp.opencv_core.Point3f): org.bytedeco.javacpp.opencv_core.Point3f;
					public y(param0: number): org.bytedeco.javacpp.opencv_core.Point3f;
					public z(param0: number): org.bytedeco.javacpp.opencv_core.Point3f;
					public ddot(param0: org.bytedeco.javacpp.opencv_core.Point3f): number;
					public x(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Point3f;
					public dot(param0: org.bytedeco.javacpp.opencv_core.Point3f): number;
					public z(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f);
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point3f);
					public cross(param0: org.bytedeco.javacpp.opencv_core.Point3f): org.bytedeco.javacpp.opencv_core.Point3f;
					public y(): number;
					public constructor(param0: number);
					public x(param0: number): org.bytedeco.javacpp.opencv_core.Point3f;
				}
				export class Point3fVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point3fVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point3f>);
					public put(param0: org.bytedeco.javacpp.opencv_core.Point3fVector): org.bytedeco.javacpp.opencv_core.Point3fVector;
					public insert(param0: org.bytedeco.javacpp.opencv_core.Point3fVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Point3f): org.bytedeco.javacpp.opencv_core.Point3fVector.Iterator;
					public empty(): boolean;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point3f): org.bytedeco.javacpp.opencv_core.Point3fVector;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Point3f;
					public end(): org.bytedeco.javacpp.opencv_core.Point3fVector.Iterator;
					public size(): number;
					public begin(): org.bytedeco.javacpp.opencv_core.Point3fVector.Iterator;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point3f>): org.bytedeco.javacpp.opencv_core.Point3fVector;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Point3f>;
					public erase(param0: org.bytedeco.javacpp.opencv_core.Point3fVector.Iterator): org.bytedeco.javacpp.opencv_core.Point3fVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point3f): org.bytedeco.javacpp.opencv_core.Point3fVector;
					public toString(): string;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Point3f): org.bytedeco.javacpp.opencv_core.Point3fVector;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point3f);
					public clear(): void;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Point3f;
					public resize(param0: number): void;
					public constructor(param0: number);
				}
				export module Point3fVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point3fVector.Iterator>;
						public constructor();
						public get(): org.bytedeco.javacpp.opencv_core.Point3f;
						public equals(param0: org.bytedeco.javacpp.opencv_core.Point3fVector.Iterator): boolean;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_core.Point3fVector.Iterator;
					}
				}
				export class Point3fVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point3fVectorVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point3fVector>);
					public empty(): boolean;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point3fVector>): org.bytedeco.javacpp.opencv_core.Point3fVectorVector;
					public size(): number;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Point3fVector;
					public toString(): string;
					public constructor();
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Point3fVector>;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point3fVector): org.bytedeco.javacpp.opencv_core.Point3fVectorVector;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point3fVector): org.bytedeco.javacpp.opencv_core.Point3fVectorVector;
					public clear(): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector): org.bytedeco.javacpp.opencv_core.Point3fVectorVector;
					public begin(): org.bytedeco.javacpp.opencv_core.Point3fVectorVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point3fVector);
					public resize(param0: number): void;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Point3fVector;
					public end(): org.bytedeco.javacpp.opencv_core.Point3fVectorVector.Iterator;
					public insert(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Point3fVector): org.bytedeco.javacpp.opencv_core.Point3fVectorVector.Iterator;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Point3fVector): org.bytedeco.javacpp.opencv_core.Point3fVectorVector;
					public constructor(param0: number);
					public erase(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector.Iterator): org.bytedeco.javacpp.opencv_core.Point3fVectorVector.Iterator;
				}
				export module Point3fVectorVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point3fVectorVector.Iterator>;
						public constructor();
						public get(): org.bytedeco.javacpp.opencv_core.Point3fVector;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_core.Point3fVectorVector.Iterator;
						public equals(param0: org.bytedeco.javacpp.opencv_core.Point3fVectorVector.Iterator): boolean;
					}
				}
				export class Point3i {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point3i>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public x(param0: number): org.bytedeco.javacpp.opencv_core.Point3i;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point3i): org.bytedeco.javacpp.opencv_core.Point3i;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point);
					public x(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Point3i;
					public z(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point3i);
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public dot(param0: org.bytedeco.javacpp.opencv_core.Point3i): number;
					public z(param0: number): org.bytedeco.javacpp.opencv_core.Point3i;
					public y(): number;
					public constructor(param0: number);
					public y(param0: number): org.bytedeco.javacpp.opencv_core.Point3i;
					public ddot(param0: org.bytedeco.javacpp.opencv_core.Point3i): number;
					public cross(param0: org.bytedeco.javacpp.opencv_core.Point3i): org.bytedeco.javacpp.opencv_core.Point3i;
				}
				export class Point3iVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point3iVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: org.bytedeco.javacpp.opencv_core.Point3iVector): org.bytedeco.javacpp.opencv_core.Point3iVector;
					public end(): org.bytedeco.javacpp.opencv_core.Point3iVector.Iterator;
					public empty(): boolean;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Point3i): org.bytedeco.javacpp.opencv_core.Point3iVector;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Point3i>;
					public size(): number;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Point3i;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point3i): org.bytedeco.javacpp.opencv_core.Point3iVector;
					public begin(): org.bytedeco.javacpp.opencv_core.Point3iVector.Iterator;
					public toString(): string;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point3i>): org.bytedeco.javacpp.opencv_core.Point3iVector;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point3i);
					public constructor();
					public put(param0: org.bytedeco.javacpp.opencv_core.Point3i): org.bytedeco.javacpp.opencv_core.Point3iVector;
					public erase(param0: org.bytedeco.javacpp.opencv_core.Point3iVector.Iterator): org.bytedeco.javacpp.opencv_core.Point3iVector.Iterator;
					public clear(): void;
					public insert(param0: org.bytedeco.javacpp.opencv_core.Point3iVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Point3i): org.bytedeco.javacpp.opencv_core.Point3iVector.Iterator;
					public resize(param0: number): void;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point3i>);
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Point3i;
					public constructor(param0: number);
				}
				export module Point3iVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Point3iVector.Iterator>;
						public equals(param0: org.bytedeco.javacpp.opencv_core.Point3iVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.opencv_core.Point3i;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_core.Point3iVector.Iterator;
					}
				}
				export class PointVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.PointVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public insert(param0: org.bytedeco.javacpp.opencv_core.PointVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Point): org.bytedeco.javacpp.opencv_core.PointVector.Iterator;
					public begin(): org.bytedeco.javacpp.opencv_core.PointVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point);
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Point;
					public empty(): boolean;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Point;
					public end(): org.bytedeco.javacpp.opencv_core.PointVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_core.PointVector): org.bytedeco.javacpp.opencv_core.PointVector;
					public size(): number;
					public put(param0: org.bytedeco.javacpp.opencv_core.Point): org.bytedeco.javacpp.opencv_core.PointVector;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Point): org.bytedeco.javacpp.opencv_core.PointVector;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point>): org.bytedeco.javacpp.opencv_core.PointVector;
					public toString(): string;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Point>);
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point): org.bytedeco.javacpp.opencv_core.PointVector;
					public constructor();
					public clear(): void;
					public resize(param0: number): void;
					public erase(param0: org.bytedeco.javacpp.opencv_core.PointVector.Iterator): org.bytedeco.javacpp.opencv_core.PointVector.Iterator;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Point>;
					public constructor(param0: number);
				}
				export module PointVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.PointVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_core.PointVector.Iterator;
						public get(): org.bytedeco.javacpp.opencv_core.Point;
						public equals(param0: org.bytedeco.javacpp.opencv_core.PointVector.Iterator): boolean;
					}
				}
				export class PointVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.PointVectorVector>;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.PointVector): org.bytedeco.javacpp.opencv_core.PointVectorVector;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public push_back(param0: org.bytedeco.javacpp.opencv_core.PointVector): org.bytedeco.javacpp.opencv_core.PointVectorVector;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.PointVector;
					public put(param0: org.bytedeco.javacpp.opencv_core.PointVector): org.bytedeco.javacpp.opencv_core.PointVectorVector;
					public empty(): boolean;
					public put(param0: org.bytedeco.javacpp.opencv_core.PointVectorVector): org.bytedeco.javacpp.opencv_core.PointVectorVector;
					public size(): number;
					public insert(param0: org.bytedeco.javacpp.opencv_core.PointVectorVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.PointVector): org.bytedeco.javacpp.opencv_core.PointVectorVector.Iterator;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.PointVector>;
					public erase(param0: org.bytedeco.javacpp.opencv_core.PointVectorVector.Iterator): org.bytedeco.javacpp.opencv_core.PointVectorVector.Iterator;
					public begin(): org.bytedeco.javacpp.opencv_core.PointVectorVector.Iterator;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.PointVector>): org.bytedeco.javacpp.opencv_core.PointVectorVector;
					public end(): org.bytedeco.javacpp.opencv_core.PointVectorVector.Iterator;
					public pop_back(): org.bytedeco.javacpp.opencv_core.PointVector;
					public toString(): string;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.PointVector);
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.PointVector>);
					public clear(): void;
					public resize(param0: number): void;
					public constructor(param0: number);
				}
				export module PointVectorVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.PointVectorVector.Iterator>;
						public constructor();
						public equals(param0: org.bytedeco.javacpp.opencv_core.PointVectorVector.Iterator): boolean;
						public increment(): org.bytedeco.javacpp.opencv_core.PointVectorVector.Iterator;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public get(): org.bytedeco.javacpp.opencv_core.PointVector;
					}
				}
				export class Program {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Program>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public write(param0: org.bytedeco.javacpp.BytePointer): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.ProgramSource, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Program);
					public create(param0: org.bytedeco.javacpp.opencv_core.ProgramSource, param1: string, param2: string): boolean;
					public getImpl(): org.bytedeco.javacpp.Pointer;
					public getBinary(param0: java.nio.ByteBuffer): void;
					public source(): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public write(param0: string): boolean;
					public getBinary(param0: native.Array<number>): void;
					public static getPrefix(param0: string): string;
					public ptr(): org.bytedeco.javacpp.Pointer;
					public read(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Program;
					public getPrefix(): org.bytedeco.javacpp.BytePointer;
					public static getPrefix(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
					public constructor();
					public create(param0: org.bytedeco.javacpp.opencv_core.ProgramSource, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer): boolean;
					public getBinary(param0: org.bytedeco.javacpp.BytePointer): void;
					public read(param0: string, param1: string): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.ProgramSource, param1: string, param2: string);
					public constructor(param0: number);
					public put(param0: org.bytedeco.javacpp.opencv_core.Program): org.bytedeco.javacpp.opencv_core.Program;
				}
				export class ProgramSource {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.ProgramSource>;
					public static fromBinary(param0: string, param1: string, param2: java.nio.ByteBuffer, param3: number, param4: string): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromBinary(param0: string, param1: string, param2: org.bytedeco.javacpp.BytePointer, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public constructor(param0: string);
					public source(): org.bytedeco.javacpp.BytePointer;
					public static fromSPIR(param0: string, param1: string, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: string): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromBinary(param0: string, param1: string, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: string): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromBinary(param0: string, param1: string, param2: native.Array<number>, param3: number, param4: string): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromBinary(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromSPIR(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.ByteBuffer, param3: number, param4: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.BytePointer);
					public put(param0: org.bytedeco.javacpp.opencv_core.ProgramSource): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public static fromSPIR(param0: string, param1: string, param2: java.nio.ByteBuffer, param3: number, param4: string): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public constructor();
					public hash(): number;
					public static fromBinary(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromSPIR(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static fromSPIR(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromSPIR(param0: string, param1: string, param2: java.nio.ByteBuffer, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromSPIR(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromBinary(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.ByteBuffer, param3: number, param4: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public getImpl(): org.bytedeco.javacpp.Pointer;
					public static fromBinary(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromSPIR(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromSPIR(param0: string, param1: string, param2: native.Array<number>, param3: number, param4: string): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromSPIR(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.ByteBuffer, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromSPIR(param0: string, param1: string, param2: org.bytedeco.javacpp.BytePointer, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public constructor(param0: string, param1: string, param2: string, param3: string);
					public static fromBinary(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.ByteBuffer, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromBinary(param0: string, param1: string, param2: native.Array<number>, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromBinary(param0: string, param1: string, param2: java.nio.ByteBuffer, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromBinary(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public static fromSPIR(param0: string, param1: string, param2: native.Array<number>, param3: number): org.bytedeco.javacpp.opencv_core.ProgramSource;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.ProgramSource);
				}
				export class Queue {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Queue>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public create(): boolean;
					public finish(): void;
					public getImpl(): org.bytedeco.javacpp.Pointer;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Context);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Context, param1: org.bytedeco.javacpp.opencv_core.Device);
					public ptr(): org.bytedeco.javacpp.Pointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Queue;
					public create(param0: org.bytedeco.javacpp.opencv_core.Context, param1: org.bytedeco.javacpp.opencv_core.Device): boolean;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Queue);
					public put(param0: org.bytedeco.javacpp.opencv_core.Queue): org.bytedeco.javacpp.opencv_core.Queue;
					public static getDefault(): org.bytedeco.javacpp.opencv_core.Queue;
					public getProfilingQueue(): org.bytedeco.javacpp.opencv_core.Queue;
					public constructor(param0: number);
				}
				export class RNG {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.RNG>;
					public static UNIFORM: number;
					public static NORMAL: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public _fill(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: boolean): void;
					public _fill(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: boolean): void;
					public _fill(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public asShort(): number;
					public gaussian(param0: number): number;
					public _fill(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public asDouble(): number;
					public asByte(): number;
					public _fill(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: boolean): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.RNG;
					public asInt(): number;
					public next(): number;
					public apply(param0: number): number;
					public equals(param0: org.bytedeco.javacpp.opencv_core.RNG): boolean;
					public constructor();
					public uniform(param0: number, param1: number): number;
					public state(): number;
					public state(param0: number): org.bytedeco.javacpp.opencv_core.RNG;
					public asFloat(): number;
					public _fill(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public apply(): number;
					public constructor(param0: number);
				}
				export class RNG_MT19937 {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.RNG_MT19937>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public asInt(): number;
					public next(): number;
					public apply(param0: number): number;
					public constructor();
					public seed(param0: number): void;
					public uniform(param0: number, param1: number): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.RNG_MT19937;
					public asFloat(): number;
					public apply(): number;
					public constructor(param0: number);
					public asDouble(): number;
				}
				export class Range {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Range>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public start(param0: number): org.bytedeco.javacpp.opencv_core.Range;
					public end(): number;
					public constructor();
					public start(): number;
					public end(param0: number): org.bytedeco.javacpp.opencv_core.Range;
					public empty(): boolean;
					public size(): number;
					public static all(): org.bytedeco.javacpp.opencv_core.Range;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Range;
					public constructor(param0: number, param1: number);
				}
				export class Rect {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Rect>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public height(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point, param1: org.bytedeco.javacpp.opencv_core.Point);
					public br(): org.bytedeco.javacpp.opencv_core.Point;
					public y(param0: number): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Rect);
					public empty(): boolean;
					public tl(): org.bytedeco.javacpp.opencv_core.Point;
					public x(): number;
					public width(param0: number): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public width(): number;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point, param1: org.bytedeco.javacpp.opencv_core.Size);
					public height(param0: number): org.bytedeco.javacpp.opencv_core.Rect;
					public size(): org.bytedeco.javacpp.opencv_core.Size;
					public contains(param0: org.bytedeco.javacpp.opencv_core.Point): boolean;
					public x(param0: number): org.bytedeco.javacpp.opencv_core.Rect;
					public put(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_core.Rect;
					public y(): number;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Rect;
					public area(): number;
				}
				export class Rect2d {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Rect2d>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public height(): number;
					public y(param0: number): org.bytedeco.javacpp.opencv_core.Rect2d;
					public empty(): boolean;
					public x(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2d, param1: org.bytedeco.javacpp.opencv_core.Point2d);
					public size(): org.bytedeco.javacpp.opencv_core.Size2d;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2d, param1: org.bytedeco.javacpp.opencv_core.Size2d);
					public width(param0: number): org.bytedeco.javacpp.opencv_core.Rect2d;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public x(param0: number): org.bytedeco.javacpp.opencv_core.Rect2d;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Rect2d;
					public width(): number;
					public constructor();
					public put(param0: org.bytedeco.javacpp.opencv_core.Rect2d): org.bytedeco.javacpp.opencv_core.Rect2d;
					public tl(): org.bytedeco.javacpp.opencv_core.Point2d;
					public y(): number;
					public height(param0: number): org.bytedeco.javacpp.opencv_core.Rect2d;
					public br(): org.bytedeco.javacpp.opencv_core.Point2d;
					public contains(param0: org.bytedeco.javacpp.opencv_core.Point2d): boolean;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Rect2d);
					public area(): number;
				}
				export class Rect2dVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Rect2dVector>;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Rect2d): org.bytedeco.javacpp.opencv_core.Rect2dVector;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Rect2d): org.bytedeco.javacpp.opencv_core.Rect2dVector;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public insert(param0: org.bytedeco.javacpp.opencv_core.Rect2dVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Rect2d): org.bytedeco.javacpp.opencv_core.Rect2dVector.Iterator;
					public empty(): boolean;
					public size(): number;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Rect2d;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Rect2d>);
					public begin(): org.bytedeco.javacpp.opencv_core.Rect2dVector.Iterator;
					public erase(param0: org.bytedeco.javacpp.opencv_core.Rect2dVector.Iterator): org.bytedeco.javacpp.opencv_core.Rect2dVector.Iterator;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Rect2d>;
					public toString(): string;
					public put(param0: org.bytedeco.javacpp.opencv_core.Rect2d): org.bytedeco.javacpp.opencv_core.Rect2dVector;
					public constructor();
					public put(param0: org.bytedeco.javacpp.opencv_core.Rect2dVector): org.bytedeco.javacpp.opencv_core.Rect2dVector;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Rect2d;
					public clear(): void;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Rect2d>): org.bytedeco.javacpp.opencv_core.Rect2dVector;
					public resize(param0: number): void;
					public end(): org.bytedeco.javacpp.opencv_core.Rect2dVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Rect2d);
					public constructor(param0: number);
				}
				export module Rect2dVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Rect2dVector.Iterator>;
						public get(): org.bytedeco.javacpp.opencv_core.Rect2d;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public equals(param0: org.bytedeco.javacpp.opencv_core.Rect2dVector.Iterator): boolean;
						public increment(): org.bytedeco.javacpp.opencv_core.Rect2dVector.Iterator;
					}
				}
				export class Rect2f {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Rect2f>;
					public width(param0: number): org.bytedeco.javacpp.opencv_core.Rect2f;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public height(): number;
					public y(param0: number): org.bytedeco.javacpp.opencv_core.Rect2f;
					public empty(): boolean;
					public x(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Point2f);
					public size(): org.bytedeco.javacpp.opencv_core.Size2f;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public x(param0: number): org.bytedeco.javacpp.opencv_core.Rect2f;
					public width(): number;
					public constructor();
					public tl(): org.bytedeco.javacpp.opencv_core.Point2f;
					public br(): org.bytedeco.javacpp.opencv_core.Point2f;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Rect2f);
					public put(param0: org.bytedeco.javacpp.opencv_core.Rect2f): org.bytedeco.javacpp.opencv_core.Rect2f;
					public y(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Rect2f;
					public constructor(param0: number);
					public area(): number;
					public height(param0: number): org.bytedeco.javacpp.opencv_core.Rect2f;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Size2f);
					public contains(param0: org.bytedeco.javacpp.opencv_core.Point2f): boolean;
				}
				export class RectVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.RectVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public end(): org.bytedeco.javacpp.opencv_core.RectVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Rect);
					public empty(): boolean;
					public size(): number;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Rect;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Rect>): org.bytedeco.javacpp.opencv_core.RectVector;
					public erase(param0: org.bytedeco.javacpp.opencv_core.RectVector.Iterator): org.bytedeco.javacpp.opencv_core.RectVector.Iterator;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Rect>;
					public put(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_core.RectVector;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Rect;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_core.RectVector;
					public toString(): string;
					public constructor();
					public insert(param0: org.bytedeco.javacpp.opencv_core.RectVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_core.RectVector.Iterator;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_core.RectVector;
					public clear(): void;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Rect>);
					public resize(param0: number): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.RectVector): org.bytedeco.javacpp.opencv_core.RectVector;
					public constructor(param0: number);
					public begin(): org.bytedeco.javacpp.opencv_core.RectVector.Iterator;
				}
				export module RectVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.RectVector.Iterator>;
						public increment(): org.bytedeco.javacpp.opencv_core.RectVector.Iterator;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public equals(param0: org.bytedeco.javacpp.opencv_core.RectVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.opencv_core.Rect;
					}
				}
				export class RectVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.RectVectorVector>;
					public erase(param0: org.bytedeco.javacpp.opencv_core.RectVectorVector.Iterator): org.bytedeco.javacpp.opencv_core.RectVectorVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.RectVector);
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.RectVector>);
					public get(param0: number): org.bytedeco.javacpp.opencv_core.RectVector;
					public empty(): boolean;
					public insert(param0: org.bytedeco.javacpp.opencv_core.RectVectorVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.RectVector): org.bytedeco.javacpp.opencv_core.RectVectorVector.Iterator;
					public size(): number;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.RectVector): org.bytedeco.javacpp.opencv_core.RectVectorVector;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.RectVector>): org.bytedeco.javacpp.opencv_core.RectVectorVector;
					public put(param0: org.bytedeco.javacpp.opencv_core.RectVector): org.bytedeco.javacpp.opencv_core.RectVectorVector;
					public toString(): string;
					public put(param0: org.bytedeco.javacpp.opencv_core.RectVectorVector): org.bytedeco.javacpp.opencv_core.RectVectorVector;
					public constructor();
					public push_back(param0: org.bytedeco.javacpp.opencv_core.RectVector): org.bytedeco.javacpp.opencv_core.RectVectorVector;
					public clear(): void;
					public begin(): org.bytedeco.javacpp.opencv_core.RectVectorVector.Iterator;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.RectVector>;
					public resize(param0: number): void;
					public end(): org.bytedeco.javacpp.opencv_core.RectVectorVector.Iterator;
					public pop_back(): org.bytedeco.javacpp.opencv_core.RectVector;
					public constructor(param0: number);
				}
				export module RectVectorVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.RectVectorVector.Iterator>;
						public constructor();
						public get(): org.bytedeco.javacpp.opencv_core.RectVector;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public equals(param0: org.bytedeco.javacpp.opencv_core.RectVectorVector.Iterator): boolean;
						public increment(): org.bytedeco.javacpp.opencv_core.RectVectorVector.Iterator;
					}
				}
				export class RotatedRect {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.RotatedRect>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.RotatedRect;
					public angle(param0: number): org.bytedeco.javacpp.opencv_core.RotatedRect;
					public size(): org.bytedeco.javacpp.opencv_core.Size2f;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Size2f, param2: number);
					public points(param0: org.bytedeco.javacpp.opencv_core.Point2f): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: org.bytedeco.javacpp.opencv_core.Point2f);
					public constructor();
					public center(param0: org.bytedeco.javacpp.opencv_core.Point2f): org.bytedeco.javacpp.opencv_core.RotatedRect;
					public angle(): number;
					public boundingRect2f(): org.bytedeco.javacpp.opencv_core.Rect2f;
					public size(param0: org.bytedeco.javacpp.opencv_core.Size2f): org.bytedeco.javacpp.opencv_core.RotatedRect;
					public center(): org.bytedeco.javacpp.opencv_core.Point2f;
					public constructor(param0: number);
					public boundingRect(): org.bytedeco.javacpp.opencv_core.Rect;
				}
				export class SVD {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.SVD>;
					public static MODIFY_A: number;
					public static NO_UV: number;
					public static FULL_UV: number;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public static compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
					public backSubst(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public u(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.SVD;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
					public backSubst(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public w(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.SVD;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): org.bytedeco.javacpp.opencv_core.SVD;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.SVD;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public u(): org.bytedeco.javacpp.opencv_core.Mat;
					public w(): org.bytedeco.javacpp.opencv_core.Mat;
					public vt(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.SVD;
					public static backSubst(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): org.bytedeco.javacpp.opencv_core.SVD;
					public constructor(param0: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.SVD;
					public static solveZ(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public vt(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static backSubst(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.SVD;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): void;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.SVD;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number);
					public static compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): void;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
					public static backSubst(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public static compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public static solveZ(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.SVD;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat);
					public static solveZ(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number);
					public backSubst(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export class Scalar extends org.bytedeco.javacpp.helper.opencv_core.AbstractScalar {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Scalar>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Scalar);
					public mul(param0: org.bytedeco.javacpp.opencv_core.Scalar, param1: number): org.bytedeco.javacpp.opencv_core.Scalar;
					public isReal(): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Scalar;
					public put(param0: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.Scalar;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public mul(param0: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.Scalar;
					public constructor();
					public conj(): org.bytedeco.javacpp.opencv_core.Scalar;
					public static all(param0: number): org.bytedeco.javacpp.opencv_core.Scalar;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
				}
				export class Scalar4i {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Scalar4i>;
					public mul(param0: org.bytedeco.javacpp.opencv_core.Scalar4i, param1: number): org.bytedeco.javacpp.opencv_core.Scalar4i;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mul(param0: org.bytedeco.javacpp.opencv_core.Scalar4i): org.bytedeco.javacpp.opencv_core.Scalar4i;
					public isReal(): boolean;
					public static all(param0: number): org.bytedeco.javacpp.opencv_core.Scalar4i;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public put(param0: org.bytedeco.javacpp.opencv_core.Scalar4i): org.bytedeco.javacpp.opencv_core.Scalar4i;
					public constructor();
					public conj(): org.bytedeco.javacpp.opencv_core.Scalar4i;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Scalar4i);
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Scalar4i;
					public constructor(param0: number, param1: number);
				}
				export class ScalarVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.ScalarVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Scalar);
					public put(param0: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.ScalarVector;
					public put(param0: org.bytedeco.javacpp.opencv_core.ScalarVector): org.bytedeco.javacpp.opencv_core.ScalarVector;
					public empty(): boolean;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Scalar>);
					public size(): number;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.ScalarVector;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Scalar>): org.bytedeco.javacpp.opencv_core.ScalarVector;
					public insert(param0: org.bytedeco.javacpp.opencv_core.ScalarVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.ScalarVector.Iterator;
					public toString(): string;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Scalar;
					public constructor();
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.ScalarVector;
					public begin(): org.bytedeco.javacpp.opencv_core.ScalarVector.Iterator;
					public clear(): void;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Scalar>;
					public erase(param0: org.bytedeco.javacpp.opencv_core.ScalarVector.Iterator): org.bytedeco.javacpp.opencv_core.ScalarVector.Iterator;
					public resize(param0: number): void;
					public end(): org.bytedeco.javacpp.opencv_core.ScalarVector.Iterator;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Scalar;
					public constructor(param0: number);
				}
				export module ScalarVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.ScalarVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_core.ScalarVector.Iterator;
						public equals(param0: org.bytedeco.javacpp.opencv_core.ScalarVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.opencv_core.Scalar;
					}
				}
				export class Size {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Size>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public height(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point);
					public height(param0: number): org.bytedeco.javacpp.opencv_core.Size;
					public empty(): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Size;
					public aspectRatio(): number;
					public width(): number;
					public constructor();
					public put(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_core.Size;
					public width(param0: number): org.bytedeco.javacpp.opencv_core.Size;
					public constructor(param0: number);
					public area(): number;
					public constructor(param0: number, param1: number);
				}
				export class Size2d {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Size2d>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public height(): number;
					public empty(): boolean;
					public put(param0: org.bytedeco.javacpp.opencv_core.Size2d): org.bytedeco.javacpp.opencv_core.Size2d;
					public aspectRatio(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size2d);
					public width(param0: number): org.bytedeco.javacpp.opencv_core.Size2d;
					public width(): number;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2d);
					public height(param0: number): org.bytedeco.javacpp.opencv_core.Size2d;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Size2d;
					public constructor(param0: number);
					public area(): number;
					public constructor(param0: number, param1: number);
				}
				export class Size2f {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Size2f>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public height(): number;
					public empty(): boolean;
					public aspectRatio(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size2f);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f);
					public width(): number;
					public width(param0: number): org.bytedeco.javacpp.opencv_core.Size2f;
					public constructor();
					public height(param0: number): org.bytedeco.javacpp.opencv_core.Size2f;
					public put(param0: org.bytedeco.javacpp.opencv_core.Size2f): org.bytedeco.javacpp.opencv_core.Size2f;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Size2f;
					public constructor(param0: number);
					public area(): number;
					public constructor(param0: number, param1: number);
				}
				export class SizeVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.SizeVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size);
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Size>);
					public erase(param0: org.bytedeco.javacpp.opencv_core.SizeVector.Iterator): org.bytedeco.javacpp.opencv_core.SizeVector.Iterator;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_core.SizeVector;
					public empty(): boolean;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Size;
					public end(): org.bytedeco.javacpp.opencv_core.SizeVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_core.SizeVector): org.bytedeco.javacpp.opencv_core.SizeVector;
					public size(): number;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_core.SizeVector;
					public begin(): org.bytedeco.javacpp.opencv_core.SizeVector.Iterator;
					public toString(): string;
					public constructor();
					public clear(): void;
					public insert(param0: org.bytedeco.javacpp.opencv_core.SizeVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_core.SizeVector.Iterator;
					public pop_back(): org.bytedeco.javacpp.opencv_core.Size;
					public put(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_core.SizeVector;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Size>): org.bytedeco.javacpp.opencv_core.SizeVector;
					public resize(param0: number): void;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Size>;
					public constructor(param0: number);
				}
				export module SizeVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.SizeVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public equals(param0: org.bytedeco.javacpp.opencv_core.SizeVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.opencv_core.Size;
						public increment(): org.bytedeco.javacpp.opencv_core.SizeVector.Iterator;
					}
				}
				export class SparseMat {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.SparseMat>;
					public static MAGIC_VAL: number;
					public static MAX_DIM: number;
					public static HASH_SCALE: number;
					public static HASH_BIT: number;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: number, param2: number): void;
					public assignTo(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: number): void;
					public erase(param0: java.nio.IntBuffer): void;
					public constructor(param0: number, param1: native.Array<number>, param2: number);
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
					public erase(param0: org.bytedeco.javacpp.IntPointer): void;
					public erase(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.SizeTPointer): void;
					public constructor(param0: number, param1: java.nio.IntBuffer, param2: number);
					public newNode(param0: native.Array<number>, param1: number): native.Array<number>;
					public node(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat.Node;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.SparseMat): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat;
					public ptr(param0: number, param1: number, param2: boolean, param3: org.bytedeco.javacpp.SizeTPointer): org.bytedeco.javacpp.BytePointer;
					public ptr(param0: native.Array<number>, param1: boolean, param2: org.bytedeco.javacpp.SizeTPointer): native.Array<number>;
					public ptr(param0: number, param1: boolean): org.bytedeco.javacpp.BytePointer;
					public erase(param0: number, param1: number, param2: number): void;
					public constructor();
					public constructor(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number);
					public addref(): void;
					public end(): org.bytedeco.javacpp.opencv_core.SparseMatIterator;
					public erase(param0: java.nio.IntBuffer, param1: org.bytedeco.javacpp.SizeTPointer): void;
					public create(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number): void;
					public newNode(param0: org.bytedeco.javacpp.IntPointer, param1: number): org.bytedeco.javacpp.BytePointer;
					public release(): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.SparseMat): org.bytedeco.javacpp.opencv_core.SparseMat;
					public hash(param0: org.bytedeco.javacpp.IntPointer): number;
					public assignTo(param0: org.bytedeco.javacpp.opencv_core.SparseMat): void;
					public hash(param0: number, param1: number): number;
					public type(): number;
					public erase(param0: number, param1: number): void;
					public ptr(param0: number, param1: number, param2: boolean): org.bytedeco.javacpp.BytePointer;
					public ptr(param0: org.bytedeco.javacpp.IntPointer, param1: boolean, param2: org.bytedeco.javacpp.SizeTPointer): org.bytedeco.javacpp.BytePointer;
					public hash(param0: native.Array<number>): number;
					public removeNode(param0: number, param1: number, param2: number): void;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat;
					public flags(): number;
					public put(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.SparseMat;
					public erase(param0: number, param1: number, param2: org.bytedeco.javacpp.SizeTPointer): void;
					public newNode(param0: java.nio.IntBuffer, param1: number): java.nio.ByteBuffer;
					public size(): org.bytedeco.javacpp.IntPointer;
					public nzcount(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public create(param0: number, param1: java.nio.IntBuffer, param2: number): void;
					public size(param0: number): number;
					public erase(param0: native.Array<number>): void;
					public clear(): void;
					public hash(param0: java.nio.IntBuffer): number;
					public hdr(): org.bytedeco.javacpp.opencv_core.SparseMat.Hdr;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number): void;
					public erase(param0: native.Array<number>, param1: org.bytedeco.javacpp.SizeTPointer): void;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: number): void;
					public ptr(param0: number, param1: number, param2: number, param3: boolean): org.bytedeco.javacpp.BytePointer;
					public depth(): number;
					public constructor(param0: number);
					public hash(param0: number, param1: number, param2: number): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public begin(): org.bytedeco.javacpp.opencv_core.SparseMatIterator;
					public clone(): org.bytedeco.javacpp.opencv_core.SparseMat;
					public ptr(param0: java.nio.IntBuffer, param1: boolean): java.nio.ByteBuffer;
					public ptr(param0: number, param1: number, param2: number, param3: boolean, param4: org.bytedeco.javacpp.SizeTPointer): org.bytedeco.javacpp.BytePointer;
					public channels(): number;
					public hdr(param0: org.bytedeco.javacpp.opencv_core.SparseMat.Hdr): org.bytedeco.javacpp.opencv_core.SparseMat;
					public ptr(param0: org.bytedeco.javacpp.IntPointer, param1: boolean): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.SparseMat);
					public resizeHashTab(param0: number): void;
					public ptr(param0: java.nio.IntBuffer, param1: boolean, param2: org.bytedeco.javacpp.SizeTPointer): java.nio.ByteBuffer;
					public ptr(param0: native.Array<number>, param1: boolean): native.Array<number>;
					public elemSize1(): number;
					public erase(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.SizeTPointer): void;
					public elemSize(): number;
					public dims(): number;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public ptr(param0: number, param1: boolean, param2: org.bytedeco.javacpp.SizeTPointer): org.bytedeco.javacpp.BytePointer;
					public create(param0: number, param1: native.Array<number>, param2: number): void;
					public hash(param0: number): number;
				}
				export module SparseMat {
					export class Hdr {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.SparseMat.Hdr>;
						public nodeCount(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat.Hdr;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public valueOffset(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat.Hdr;
						public dims(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat.Hdr;
						public hashtab(): org.bytedeco.javacpp.SizeTPointer;
						public hashtab(param0: org.bytedeco.javacpp.SizeTPointer): org.bytedeco.javacpp.opencv_core.SparseMat.Hdr;
						public constructor(param0: number, param1: native.Array<number>, param2: number);
						public dims(): number;
						public size(param0: number): number;
						public constructor(param0: number, param1: java.nio.IntBuffer, param2: number);
						public freeList(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat.Hdr;
						public size(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.SparseMat.Hdr;
						public freeList(): number;
						public valueOffset(): number;
						public refcount(): number;
						public nodeCount(): number;
						public nodeSize(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat.Hdr;
						public pool(): org.bytedeco.javacpp.BytePointer;
						public constructor(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number);
						public refcount(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat.Hdr;
						public nodeSize(): number;
						public clear(): void;
						public pool(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.SparseMat.Hdr;
						public size(): org.bytedeco.javacpp.IntPointer;
					}
					export class Node {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.SparseMat.Node>;
						public next(): number;
						public constructor();
						public next(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat.Node;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public position(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat.Node;
						public hashval(): number;
						public constructor(param0: number);
						public hashval(param0: number): org.bytedeco.javacpp.opencv_core.SparseMat.Node;
						public idx(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.SparseMat.Node;
						public idx(): org.bytedeco.javacpp.IntPointer;
						public idx(param0: number): number;
					}
				}
				export class SparseMatConstIterator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.SparseMatConstIterator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public hashidx(param0: number): org.bytedeco.javacpp.opencv_core.SparseMatConstIterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.SparseMatConstIterator);
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public put(param0: org.bytedeco.javacpp.opencv_core.SparseMatConstIterator): org.bytedeco.javacpp.opencv_core.SparseMatConstIterator;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.SparseMatConstIterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.SparseMat);
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.SparseMatConstIterator;
					public m(): org.bytedeco.javacpp.opencv_core.SparseMat;
					public constructor();
					public increment(): org.bytedeco.javacpp.opencv_core.SparseMatConstIterator;
					public node(): org.bytedeco.javacpp.opencv_core.SparseMat.Node;
					public increment(param0: number): org.bytedeco.javacpp.opencv_core.SparseMatConstIterator;
					public seekEnd(): void;
					public constructor(param0: number);
					public hashidx(): number;
				}
				export class SparseMatIterator extends org.bytedeco.javacpp.opencv_core.SparseMatConstIterator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.SparseMatIterator>;
					public increment(): org.bytedeco.javacpp.opencv_core.SparseMatIterator;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: org.bytedeco.javacpp.opencv_core.SparseMatIterator): org.bytedeco.javacpp.opencv_core.SparseMatIterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.SparseMatConstIterator);
					public put(param0: org.bytedeco.javacpp.opencv_core.SparseMatConstIterator): org.bytedeco.javacpp.opencv_core.SparseMatConstIterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.SparseMatIterator);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.SparseMatConstIterator;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.SparseMatIterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.SparseMat);
					public constructor();
					public increment(): org.bytedeco.javacpp.opencv_core.SparseMatConstIterator;
					public increment(param0: number): org.bytedeco.javacpp.opencv_core.SparseMatIterator;
					public node(): org.bytedeco.javacpp.opencv_core.SparseMat.Node;
					public increment(param0: number): org.bytedeco.javacpp.opencv_core.SparseMatConstIterator;
					public constructor(param0: number);
				}
				export class Stream {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Stream>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public waitEvent(param0: org.bytedeco.javacpp.opencv_core.Event): void;
					public static Null(): org.bytedeco.javacpp.opencv_core.Stream;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat.Allocator);
					public queryIfComplete(): boolean;
					public constructor();
					public enqueueHostCallback(param0: org.bytedeco.javacpp.opencv_core.Stream.StreamCallback, param1: org.bytedeco.javacpp.Pointer): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Stream;
					public waitForCompletion(): void;
					public constructor(param0: number);
				}
				export module Stream {
					export class Impl {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Stream.Impl>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
					}
					export class StreamCallback {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Stream.StreamCallback>;
						public call(param0: number, param1: org.bytedeco.javacpp.Pointer): void;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
					}
				}
				export class StringVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.StringVector>;
					public constructor(param0: string);
					public put(param0: native.Array<org.bytedeco.javacpp.BytePointer>): org.bytedeco.javacpp.opencv_core.StringVector;
					public empty(): boolean;
					public size(): number;
					public constructor(param0: native.Array<string>);
					public push_back(param0: string): org.bytedeco.javacpp.opencv_core.StringVector;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public begin(): org.bytedeco.javacpp.opencv_core.StringVector.Iterator;
					public toString(): string;
					public constructor();
					public put(param0: native.Array<string>): org.bytedeco.javacpp.opencv_core.StringVector;
					public constructor(param0: native.Array<org.bytedeco.javacpp.BytePointer>);
					public put(param0: string): org.bytedeco.javacpp.opencv_core.StringVector;
					public clear(): void;
					public resize(param0: number): void;
					public get(): native.Array<org.bytedeco.javacpp.BytePointer>;
					public put(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.StringVector;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: number, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.StringVector;
					public erase(param0: org.bytedeco.javacpp.opencv_core.StringVector.Iterator): org.bytedeco.javacpp.opencv_core.StringVector.Iterator;
					public push_back(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.StringVector;
					public put(param0: number, param1: string): org.bytedeco.javacpp.opencv_core.StringVector;
					public end(): org.bytedeco.javacpp.opencv_core.StringVector.Iterator;
					public get(param0: number): org.bytedeco.javacpp.BytePointer;
					public insert(param0: org.bytedeco.javacpp.opencv_core.StringVector.Iterator, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.StringVector.Iterator;
					public pop_back(): org.bytedeco.javacpp.BytePointer;
					public put(param0: org.bytedeco.javacpp.opencv_core.StringVector): org.bytedeco.javacpp.opencv_core.StringVector;
				}
				export module StringVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.StringVector.Iterator>;
						public equals(param0: org.bytedeco.javacpp.opencv_core.StringVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.BytePointer;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_core.StringVector.Iterator;
					}
				}
				export class TLSDataContainer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.TLSDataContainer>;
					public cleanup(): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
				}
				export class TargetArchs {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.TargetArchs>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static hasBin(param0: number, param1: number): boolean;
					public constructor();
					public static hasPtx(param0: number, param1: number): boolean;
					public static has(param0: number, param1: number): boolean;
					public static hasEqualOrGreater(param0: number, param1: number): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.TargetArchs;
					public static builtWith(param0: number): boolean;
					public static hasEqualOrLessPtx(param0: number, param1: number): boolean;
					public constructor(param0: number);
					public static hasEqualOrGreaterBin(param0: number, param1: number): boolean;
					public static hasEqualOrGreaterPtx(param0: number, param1: number): boolean;
				}
				export class TermCriteria {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.TermCriteria>;
					public static COUNT: number;
					public static MAX_ITER: number;
					public static EPS: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public type(): number;
					public constructor();
					public epsilon(param0: number): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public constructor(param0: number, param1: number, param2: number);
					public isValid(): boolean;
					public epsilon(): number;
					public type(param0: number): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public maxCount(): number;
					public maxCount(param0: number): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.TermCriteria;
				}
				export class Texture2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Texture2D>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class TickMeter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.TickMeter>;
					public getTimeMicro(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getTimeTicks(): number;
					public reset(): void;
					public constructor();
					public stop(): void;
					public getTimeSec(): number;
					public start(): void;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.TickMeter;
					public getTimeMilli(): number;
					public getCounter(): number;
				}
				export class Timer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.Timer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Queue);
					public stop(): void;
					public start(): void;
					public durationNS(): number;
				}
				export class UMat {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.UMat>;
					public static MAGIC_VAL: number;
					public static AUTO_STEP: number;
					public static CONTINUOUS_FLAG: number;
					public static SUBMATRIX_FLAG: number;
					public static MAGIC_MASK: number;
					public static TYPE_MASK: number;
					public static DEPTH_MASK: number;
					public create(param0: number, param1: native.Array<number>, param2: number, param3: number): void;
					public constructor(param0: number, param1: native.Array<number>, param2: number);
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public _deallocate(): void;
					public empty(): boolean;
					public create(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: number): void;
					public usageFlags(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public t(): org.bytedeco.javacpp.opencv_core.UMat;
					public constructor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar);
					public constructor(param0: number, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar);
					public constructor();
					public dot(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public constructor(param0: number, param1: number, param2: number);
					public constructor(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number);
					public create(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: number): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: number);
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): void;
					public size(): org.bytedeco.javacpp.opencv_core.Size;
					public diag(): org.bytedeco.javacpp.opencv_core.UMat;
					public reshape(param0: number, param1: number, param2: native.Array<number>): org.bytedeco.javacpp.opencv_core.UMat;
					public allocator(): org.bytedeco.javacpp.opencv_core.MatAllocator;
					public rows(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Range);
					public static zeros(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.UMat;
					public addref(): void;
					public updateContinuityFlag(): void;
					public constructor(param0: number, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public step(): number;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number, param1: native.Array<number>, param2: number, param3: number);
					public cols(): number;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.UMat;
					public put(param0: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_core.UMat;
					public static diag(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.UMat;
					public step1(): number;
					public copySize(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public isSubmatrix(): boolean;
					public checkVector(param0: number, param1: number, param2: boolean): number;
					public usageFlags(): number;
					public constructor(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number);
					public create(param0: java.nio.IntBuffer, param1: number): void;
					public rowRange(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.UMat;
					public step(param0: number): number;
					public mul(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): org.bytedeco.javacpp.opencv_core.UMat;
					public mul(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.UMat;
					public constructor(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: number);
					public setTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.UMat;
					public isContinuous(): boolean;
					public reshape(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public mul(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.UMat;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number): void;
					public create(param0: number, param1: java.nio.IntBuffer, param2: number, param3: number): void;
					public depth(): number;
					public constructor(param0: number);
					public rows(): number;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.UMat;
					public create(param0: native.Array<number>, param1: number): void;
					public create(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: number): void;
					public reshape(param0: number, param1: number, param2: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.UMat;
					public allocator(param0: org.bytedeco.javacpp.opencv_core.MatAllocator): org.bytedeco.javacpp.opencv_core.UMat;
					public checkVector(param0: number): number;
					public getMat(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public col(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public create(param0: java.nio.IntBuffer, param1: number, param2: number): void;
					public ndoffset(param0: org.bytedeco.javacpp.SizeTPointer): void;
					public offset(): number;
					public static ones(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): org.bytedeco.javacpp.opencv_core.UMat;
					public total(): number;
					public rowRange(param0: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.UMat;
					public create(param0: number, param1: native.Array<number>, param2: number): void;
					public colRange(param0: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.UMat;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
					public constructor(param0: number, param1: java.nio.IntBuffer, param2: number, param3: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Rect);
					public create(param0: native.Array<number>, param1: number, param2: number): void;
					public reshape(param0: number, param1: number, param2: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_core.UMat;
					public constructor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number);
					public constructor(param0: number, param1: java.nio.IntBuffer, param2: number);
					public create(param0: number, param1: number, param2: number, param3: number): void;
					public diag(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public u(param0: org.bytedeco.javacpp.opencv_core.UMatData): org.bytedeco.javacpp.opencv_core.UMat;
					public constructor(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar);
					public assignTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_core.UMat;
					public mul(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.UMat;
					public static eye(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.UMat;
					public reshape(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.UMat;
					public clone(): org.bytedeco.javacpp.opencv_core.UMat;
					public static getStdAllocator(): org.bytedeco.javacpp.opencv_core.MatAllocator;
					public put(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.UMat;
					public step1(param0: number): number;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.UMat;
					public cols(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public create(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number): void;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.UMat;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat);
					public release(): void;
					public static eye(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): org.bytedeco.javacpp.opencv_core.UMat;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public offset(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public type(): number;
					public inv(): org.bytedeco.javacpp.opencv_core.UMat;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): void;
					public flags(): number;
					public u(): org.bytedeco.javacpp.opencv_core.UMatData;
					public create(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): void;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.UMat;
					public mul(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.UMat;
					public dot(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number): void;
					public create(param0: number, param1: java.nio.IntBuffer, param2: number): void;
					public size(param0: number): number;
					public row(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public adjustROI(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.UMat;
					public static ones(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.UMat;
					public locateROI(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Point): void;
					public constructor(param0: number, param1: java.nio.IntBuffer, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number);
					public static zeros(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): org.bytedeco.javacpp.opencv_core.UMat;
					public dot(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public colRange(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.UMat;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public constructor(param0: number, param1: java.nio.IntBuffer, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar);
					public create(param0: org.bytedeco.javacpp.IntPointer, param1: number): void;
					public assignTo(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: org.bytedeco.javacpp.opencv_core.Scalar);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Range, param1: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_core.UMat;
					public convertTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number): void;
					public create(param0: number, param1: number, param2: number): void;
					public channels(): number;
					public handle(param0: number): org.bytedeco.javacpp.Pointer;
					public setTo(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.UMat;
					public dims(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public elemSize1(): number;
					public elemSize(): number;
					public dims(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Range, param2: org.bytedeco.javacpp.opencv_core.Range);
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public mul(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): org.bytedeco.javacpp.opencv_core.UMat;
					public copyTo(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public inv(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
				}
				export class UMatBytePairVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.UMatBytePairVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.UMat>, param1: native.Array<number>);
					public put(param0: org.bytedeco.javacpp.opencv_core.UMatBytePairVector): org.bytedeco.javacpp.opencv_core.UMatBytePairVector;
					public first(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public empty(): boolean;
					public size(): number;
					public first(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.UMatBytePairVector;
					public second(param0: number): number;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.UMat>, param1: native.Array<number>): org.bytedeco.javacpp.opencv_core.UMatBytePairVector;
					public second(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.UMatBytePairVector;
					public constructor();
					public clear(): void;
					public resize(param0: number): void;
					public constructor(param0: number);
				}
				export class UMatData {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.UMatData>;
					public static COPY_ON_MAP: number;
					public static HOST_COPY_OBSOLETE: number;
					public static DEVICE_COPY_OBSOLETE: number;
					public static TEMP_UMAT: number;
					public static TEMP_COPIED_UMAT: number;
					public static USER_ALLOCATED: number;
					public static DEVICE_MEM_MAPPED: number;
					public static ASYNC_CLEANUP: number;
					public originalUMatData(): org.bytedeco.javacpp.opencv_core.UMatData;
					public deviceMemMapped(): boolean;
					public refcount(param0: number): org.bytedeco.javacpp.opencv_core.UMatData;
					public deviceCopyObsolete(): boolean;
					public origdata(): org.bytedeco.javacpp.BytePointer;
					public copyOnMap(): boolean;
					public size(): number;
					public handle(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.UMatData;
					public data(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.UMatData;
					public unlock(): void;
					public originalUMatData(param0: org.bytedeco.javacpp.opencv_core.UMatData): org.bytedeco.javacpp.opencv_core.UMatData;
					public urefcount(param0: number): org.bytedeco.javacpp.opencv_core.UMatData;
					public origdata(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.UMatData;
					public markHostCopyObsolete(param0: boolean): void;
					public allocatorFlags_(): number;
					public tempCopiedUMat(): boolean;
					public markDeviceCopyObsolete(param0: boolean): void;
					public userdata(): org.bytedeco.javacpp.Pointer;
					public size(param0: number): org.bytedeco.javacpp.opencv_core.UMatData;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public urefcount(): number;
					public mapcount(): number;
					public hostCopyObsolete(): boolean;
					public refcount(): number;
					public prevAllocator(): org.bytedeco.javacpp.opencv_core.MatAllocator;
					public userdata(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_core.UMatData;
					public currAllocator(): org.bytedeco.javacpp.opencv_core.MatAllocator;
					public lock(): void;
					public tempUMat(): boolean;
					public handle(): org.bytedeco.javacpp.Pointer;
					public flags(): number;
					public data(): org.bytedeco.javacpp.BytePointer;
					public mapcount(param0: number): org.bytedeco.javacpp.opencv_core.UMatData;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.MatAllocator);
					public markDeviceMemMapped(param0: boolean): void;
					public flags(param0: number): org.bytedeco.javacpp.opencv_core.UMatData;
					public allocatorFlags_(param0: number): org.bytedeco.javacpp.opencv_core.UMatData;
				}
				export class UMatVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.UMatVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public pop_back(): org.bytedeco.javacpp.opencv_core.UMat;
					public end(): org.bytedeco.javacpp.opencv_core.UMatVector.Iterator;
					public empty(): boolean;
					public put(param0: org.bytedeco.javacpp.opencv_core.UMatVector): org.bytedeco.javacpp.opencv_core.UMatVector;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat);
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.UMatVector;
					public size(): number;
					public erase(param0: org.bytedeco.javacpp.opencv_core.UMatVector.Iterator): org.bytedeco.javacpp.opencv_core.UMatVector.Iterator;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.UMatVector;
					public begin(): org.bytedeco.javacpp.opencv_core.UMatVector.Iterator;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.UMat>);
					public toString(): string;
					public constructor();
					public clear(): void;
					public put(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.UMatVector;
					public resize(param0: number): void;
					public insert(param0: org.bytedeco.javacpp.opencv_core.UMatVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.UMatVector.Iterator;
					public get(param0: number): org.bytedeco.javacpp.opencv_core.UMat;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.UMat>;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.UMat>): org.bytedeco.javacpp.opencv_core.UMatVector;
					public constructor(param0: number);
				}
				export module UMatVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.UMatVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public get(): org.bytedeco.javacpp.opencv_core.UMat;
						public equals(param0: org.bytedeco.javacpp.opencv_core.UMatVector.Iterator): boolean;
						public increment(): org.bytedeco.javacpp.opencv_core.UMatVector.Iterator;
					}
				}
				export class WriteStructContext {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.WriteStructContext>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string, param2: number, param3: string);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer, param2: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer, param2: number, param3: org.bytedeco.javacpp.BytePointer);
				}
				export class float16_t {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_core.float16_t>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static _zero(): org.bytedeco.javacpp.opencv_core.float16_t;
					public constructor();
					public asFloat(): number;
					public static fromBits(param0: number): org.bytedeco.javacpp.opencv_core.float16_t;
					public constructor(param0: number);
					public bits(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.float16_t;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_cudaarithm extends org.bytedeco.javacpp.presets.opencv_cudaarithm {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaarithm>;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static flip(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static pow(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>, param2: native.Array<number>): void;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcNormDiff(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: number, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static calcNorm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcAbsSum(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static mulAndScaleSpectrums(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static calcSum(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static sum(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static transpose(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static sum(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static calcNorm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static exp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static sum(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static split(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static rectStdDev(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Rect, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcSqrSum(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: number, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static sqrSum(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static rectStdDev(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Rect, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static lshift(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findMinMax(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static log(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static compare(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static threshold(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): number;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static exp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static sqrt(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static transpose(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static max(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer): void;
				public static mulAndScaleSpectrums(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: boolean, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static lshift(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static sqrIntegral(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static pow(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcSqrSum(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static transpose(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calcSum(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static createConvolution(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_cudaarithm.Convolution;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): number;
				public static calcNormDiff(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static max(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static max(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static lshift(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer): void;
				public static createDFT(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number): org.bytedeco.javacpp.opencv_cudaarithm.DFT;
				public static abs(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static threshold(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): number;
				public static compare(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static threshold(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): number;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static max(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static absSum(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static sum(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): number;
				public static abs(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static sum(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static findMinMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createConvolution(): org.bytedeco.javacpp.opencv_cudaarithm.Convolution;
				public static max(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static sqrSum(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calcNorm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static scaleAdd(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findMinMax(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static mulAndScaleSpectrums(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: boolean, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static sqrt(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static exp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static log(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcAbsSum(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number): void;
				public static findMinMax(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static absSum(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static min(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static findMinMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static findMinMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static absdiff(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static sqr(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static createLookUpTable(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_cudaarithm.LookUpTable;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static min(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static findMinMax(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static sum(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static scaleAdd(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static sqr(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static rectStdDev(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Rect): void;
				public static calcNormDiff(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcAbsSum(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public constructor();
				public static absdiff(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: native.Array<number>): void;
				public static transpose(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcNorm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static log(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static exp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static sqrSum(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static sqrIntegral(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static findMinMax(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: number, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static scaleAdd(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static findMinMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static rshift(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static mulAndScaleSpectrums(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static sqrSum(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static lshift(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static threshold(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): number;
				public static sqrIntegral(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static min(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcNormDiff(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcAbsSum(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static abs(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static absSum(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static sqr(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static exp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static flip(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer): void;
				public static createLookUpTable(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_cudaarithm.LookUpTable;
				public static sqrSum(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static flip(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static compare(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static findMinMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static transpose(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static absSum(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: boolean, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static lshift(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static absdiff(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: number, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static rectStdDev(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Rect, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static absdiff(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static rshift(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findMinMax(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static compare(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcSqrSum(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Scalar, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer): void;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static mulAndScaleSpectrums(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: boolean, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static scaleAdd(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calcSum(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcAbsSum(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calcNormDiff(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calcSum(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static abs(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static log(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static rshift(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static sqrSum(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static log(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: number, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static transpose(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static pow(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static rshift(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static scaleAdd(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: boolean, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static sqrt(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static flip(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static calcNorm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static sqrt(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static compare(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static rectStdDev(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Rect): void;
				public static threshold(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): number;
				public static calcSqrSum(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static findMinMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static createLookUpTable(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_cudaarithm.LookUpTable;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): number;
				public static calcNorm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static calcSqrSum(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static sqrIntegral(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static scaleAdd(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcAbsSum(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): number;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static absdiff(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static absSum(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static abs(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static min(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static copyMakeBorder(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Scalar, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bitwise_xor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static divide(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static add(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static sqr(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static pow(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static abs(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static dft(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static flip(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): number;
				public static rectStdDev(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Rect): void;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static bitwise_not(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static mulSpectrums(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
				public static magnitudeSqr(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static sqr(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static phase(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: boolean, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static sqrt(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static absdiff(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static magnitude(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static pow(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static sqrIntegral(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static threshold(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): number;
				public static sqrIntegral(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static mulAndScaleSpectrums(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static sqr(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcSqrSum(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static multiply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static meanStdDev(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static rshift(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static normalize(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static exp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static sqrt(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static merge(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static addWeighted(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calcSum(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static flip(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static cartToPolar(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static split(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static log(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static rshift(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static subtract(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bitwise_and(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcSum(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static countNonZero(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static lshift(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Scalar4i, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bitwise_or(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static min(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): number;
				public static minMax(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>, param2: native.Array<number>): void;
				public static reduce(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static absSum(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Scalar;
				public static max(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static compare(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
				public static calcNormDiff(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static min(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static pow(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static polarToCart(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static minMaxLoc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static gemm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: number, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
			}
			export module opencv_cudaarithm {
				export class Convolution extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaarithm.Convolution>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public convolve(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public convolve(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: boolean, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
					public convolve(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: boolean, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor();
					public convolve(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public convolve(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: boolean, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
					public convolve(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: number);
				}
				export class DFT extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaarithm.DFT>;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: number);
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class LookUpTable extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaarithm.LookUpTable>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public transform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public transform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public transform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public transform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public transform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public transform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_cudafilters extends org.bytedeco.javacpp.presets.opencv_cudafilters {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudafilters>;
				public static createSeparableLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Point, param5: number, param6: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createMorphologyFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createSobelFilter(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createMorphologyFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createRowSumFilter(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createMorphologyFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createDerivFilter(param0: number, param1: number, param2: number, param3: number, param4: number, param5: boolean, param6: number, param7: number, param8: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createColumnSumFilter(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public constructor();
				public static createScharrFilter(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createScharrFilter(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createGaussianFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createLaplacianFilter(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createMedianFilter(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createSobelFilter(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createSeparableLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createSeparableLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createBoxFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createSeparableLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createSeparableLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Point, param5: number, param6: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createSeparableLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Point, param5: number, param6: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createMorphologyFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createDerivFilter(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createMorphologyFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createBoxMaxFilter(param0: number, param1: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createGaussianFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createBoxMinFilter(param0: number, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createBoxFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createRowSumFilter(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createMedianFilter(param0: number, param1: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createColumnSumFilter(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createLinearFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createLaplacianFilter(param0: number, param1: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createMorphologyFilter(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createBoxMaxFilter(param0: number, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_cudafilters.Filter;
				public static createBoxMinFilter(param0: number, param1: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_cudafilters.Filter;
			}
			export module opencv_cudafilters {
				export class Filter extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudafilters.Filter>;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_cudaimgproc extends org.bytedeco.javacpp.presets.opencv_cudaimgproc {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaimgproc>;
				public static COLOR_BayerBG2BGR_MHT: number;
				public static COLOR_BayerGB2BGR_MHT: number;
				public static COLOR_BayerRG2BGR_MHT: number;
				public static COLOR_BayerGR2BGR_MHT: number;
				public static COLOR_BayerBG2RGB_MHT: number;
				public static COLOR_BayerGB2RGB_MHT: number;
				public static COLOR_BayerRG2RGB_MHT: number;
				public static COLOR_BayerGR2RGB_MHT: number;
				public static COLOR_BayerBG2GRAY_MHT: number;
				public static COLOR_BayerGB2GRAY_MHT: number;
				public static COLOR_BayerRG2GRAY_MHT: number;
				public static COLOR_BayerGR2GRAY_MHT: number;
				public static ALPHA_OVER: number;
				public static ALPHA_IN: number;
				public static ALPHA_OUT: number;
				public static ALPHA_ATOP: number;
				public static ALPHA_XOR: number;
				public static ALPHA_PLUS: number;
				public static ALPHA_OVER_PREMUL: number;
				public static ALPHA_IN_PREMUL: number;
				public static ALPHA_OUT_PREMUL: number;
				public static ALPHA_ATOP_PREMUL: number;
				public static ALPHA_XOR_PREMUL: number;
				public static ALPHA_PLUS_PREMUL: number;
				public static ALPHA_PREMUL: number;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createHarrisCorner(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_cudaimgproc.CornernessCriteria;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.IntBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static equalizeHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.IntBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer): void;
				public static meanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.TermCriteria, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createCannyEdgeDetector(param0: number, param1: number, param2: number, param3: boolean): org.bytedeco.javacpp.opencv_cudaimgproc.CannyEdgeDetector;
				public static histRange(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createGoodFeaturesToTrackDetector(param0: number): org.bytedeco.javacpp.opencv_cudaimgproc.CornersDetector;
				public static createMinEigenValCorner(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_cudaimgproc.CornernessCriteria;
				public static evenLevels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number): void;
				public static meanShiftProc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static histRange(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static meanShiftSegmentation(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.IntPointer): void;
				public static histRange(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static meanShiftSegmentation(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.TermCriteria, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static evenLevels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.IntPointer): void;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static meanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static blendLinear(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.IntBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static equalizeHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createTemplateMatching(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_cudaimgproc.TemplateMatching;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createHoughSegmentDetector(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_cudaimgproc.HoughSegmentDetector;
				public static blendLinear(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.IntBuffer): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static createHoughLinesDetector(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_cudaimgproc.HoughLinesDetector;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.IntBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer): void;
				public static createGeneralizedHoughBallard(): org.bytedeco.javacpp.opencv_imgproc.GeneralizedHoughBallard;
				public static createHoughLinesDetector(param0: number, param1: number, param2: number, param3: boolean, param4: number): org.bytedeco.javacpp.opencv_cudaimgproc.HoughLinesDetector;
				public static meanShiftSegmentation(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.TermCriteria, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.IntPointer): void;
				public static evenLevels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createGeneralizedHoughGuil(): org.bytedeco.javacpp.opencv_imgproc.GeneralizedHoughGuil;
				public static meanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static meanShiftSegmentation(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.TermCriteria, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static gammaCorrection(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createHarrisCorner(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_cudaimgproc.CornernessCriteria;
				public static meanShiftProc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.TermCriteria, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static equalizeHist(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.IntPointer): void;
				public static equalizeHist(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createMinEigenValCorner(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_cudaimgproc.CornernessCriteria;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.IntBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer): void;
				public static meanShiftSegmentation(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static alphaComp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>): void;
				public static alphaComp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static blendLinear(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.IntBuffer): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>): void;
				public static evenLevels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.IntBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histRange(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histRange(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public constructor();
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static equalizeHist(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static createHoughCirclesDetector(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.bytedeco.javacpp.opencv_cudaimgproc.HoughCirclesDetector;
				public static alphaComp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static evenLevels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static alphaComp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static evenLevels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static meanShiftProc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static blendLinear(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static histRange(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static alphaComp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
				public static meanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static gammaCorrection(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.IntPointer): void;
				public static alphaComp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static meanShiftProc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static blendLinear(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static equalizeHist(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static meanShiftProc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.TermCriteria, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static meanShiftProc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.TermCriteria, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static gammaCorrection(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static histRange(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static meanShiftSegmentation(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static gammaCorrection(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static createHoughSegmentDetector(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_cudaimgproc.HoughSegmentDetector;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createHoughCirclesDetector(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_cudaimgproc.HoughCirclesDetector;
				public static createTemplateMatching(param0: number, param1: number): org.bytedeco.javacpp.opencv_cudaimgproc.TemplateMatching;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.IntBuffer): void;
				public static gammaCorrection(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>): void;
				public static blendLinear(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createCannyEdgeDetector(param0: number, param1: number): org.bytedeco.javacpp.opencv_cudaimgproc.CannyEdgeDetector;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static meanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.TermCriteria, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static histRange(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static meanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.TermCriteria, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>): void;
				public static histEven(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.IntPointer): void;
				public static createCLAHE(): org.bytedeco.javacpp.opencv_cudaimgproc.CudaCLAHE;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static swapChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static createGoodFeaturesToTrackDetector(param0: number, param1: number, param2: number, param3: number, param4: number, param5: boolean, param6: number): org.bytedeco.javacpp.opencv_cudaimgproc.CornersDetector;
				public static gammaCorrection(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static histRange(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static createCLAHE(param0: number, param1: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_cudaimgproc.CudaCLAHE;
				public static histRange(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
			}
			export module opencv_cudaimgproc {
				export class CannyEdgeDetector extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaimgproc.CannyEdgeDetector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setAppertureSize(param0: number): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public getAppertureSize(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setHighThreshold(param0: number): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setLowThreshold(param0: number): void;
					public getHighThreshold(): number;
					public getL2Gradient(): boolean;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setL2Gradient(param0: boolean): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public getLowThreshold(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: number);
				}
				export class CornernessCriteria extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaimgproc.CornernessCriteria>;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: number);
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class CornersDetector extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaimgproc.CornersDetector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class CudaCLAHE extends org.bytedeco.javacpp.opencv_imgproc.CLAHE {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaimgproc.CudaCLAHE>;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class HoughCirclesDetector extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaimgproc.HoughCirclesDetector>;
					public getVotesThreshold(): number;
					public setMinRadius(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setVotesThreshold(param0: number): void;
					public getDp(): number;
					public setMinDist(param0: number): void;
					public setCannyThreshold(param0: number): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getCannyThreshold(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public getMaxRadius(): number;
					public setMaxRadius(param0: number): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setDp(param0: number): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public getMinDist(): number;
					public getMaxCircles(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public setMaxCircles(param0: number): void;
					public getMinRadius(): number;
					public constructor(param0: number);
				}
				export class HoughLinesDetector extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaimgproc.HoughLinesDetector>;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public getRho(): number;
					public downloadResults(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public downloadResults(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setTheta(param0: number): void;
					public downloadResults(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public downloadResults(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getDoSort(): boolean;
					public getTheta(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public downloadResults(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setThreshold(param0: number): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public getThreshold(): number;
					public getMaxLines(): number;
					public setMaxLines(param0: number): void;
					public setDoSort(param0: boolean): void;
					public downloadResults(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setRho(param0: number): void;
				}
				export class HoughSegmentDetector extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaimgproc.HoughSegmentDetector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getTheta(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public getRho(): number;
					public setMaxLineGap(param0: number): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setMinLineLength(param0: number): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public getMinLineLength(): number;
					public getMaxLineGap(): number;
					public getMaxLines(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setMaxLines(param0: number): void;
					public constructor();
					public setTheta(param0: number): void;
					public setRho(param0: number): void;
					public constructor(param0: number);
				}
				export class TemplateMatching extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaimgproc.TemplateMatching>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public match(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor();
					public match(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
					public match(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_cudaobjdetect extends org.bytedeco.javacpp.presets.opencv_cudaobjdetect {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaobjdetect>;
				public constructor();
			}
			export module opencv_cudaobjdetect {
				export class CudaCascadeClassifier extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaobjdetect.CudaCascadeClassifier>;
					public static create(param0: org.bytedeco.javacpp.opencv_core.FileStorage): org.bytedeco.javacpp.opencv_cudaobjdetect.CudaCascadeClassifier;
					public getMaxObjectSize(): org.bytedeco.javacpp.opencv_core.Size;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setScaleFactor(param0: number): void;
					public getMinNeighbors(): number;
					public getScaleFactor(): number;
					public setMinNeighbors(param0: number): void;
					public constructor();
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setMinObjectSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
					public convert(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getMinObjectSize(): org.bytedeco.javacpp.opencv_core.Size;
					public convert(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public convert(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public setMaxNumObjects(param0: number): void;
					public getFindLargestObject(): boolean;
					public getClassifierSize(): org.bytedeco.javacpp.opencv_core.Size;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setMaxObjectSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setFindLargestObject(param0: boolean): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public getMaxNumObjects(): number;
					public static create(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_cudaobjdetect.CudaCascadeClassifier;
					public static create(param0: string): org.bytedeco.javacpp.opencv_cudaobjdetect.CudaCascadeClassifier;
				}
				export class HOG extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaobjdetect.HOG>;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public getHitThreshold(): number;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: java.nio.DoubleBuffer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public setScaleFactor(param0: number): void;
					public getWinSigma(): number;
					public setWinSigma(param0: number): void;
					public getScaleFactor(): number;
					public getBlockHistogramSize(): number;
					public constructor();
					public getDescriptorSize(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: native.Array<number>): void;
					public setSVMDetector(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public setGammaCorrection(param0: boolean): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: java.nio.DoubleBuffer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: native.Array<number>): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setDescriptorFormat(param0: number): void;
					public getDescriptorFormat(): number;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.DoubleBuffer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: native.Array<number>): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: java.nio.DoubleBuffer): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public getNumLevels(): number;
					public setL2HysThreshold(param0: number): void;
					public setHitThreshold(param0: number): void;
					public setWinStride(param0: org.bytedeco.javacpp.opencv_core.Size): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number): org.bytedeco.javacpp.opencv_cudaobjdetect.HOG;
					public getWinStride(): org.bytedeco.javacpp.opencv_core.Size;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public setGroupThreshold(param0: number): void;
					public setSVMDetector(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public static create(): org.bytedeco.javacpp.opencv_cudaobjdetect.HOG;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public getGroupThreshold(): number;
					public constructor(param0: number);
					public getL2HysThreshold(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.DoubleBuffer): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.DoubleBuffer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
					public setSVMDetector(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public getGammaCorrection(): boolean;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public setNumLevels(param0: number): void;
					public getDefaultPeopleDetector(): org.bytedeco.javacpp.opencv_core.Mat;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_cudaoptflow extends org.bytedeco.javacpp.presets.opencv_cudaoptflow {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaoptflow>;
				public constructor();
			}
			export module opencv_cudaoptflow {
				export class BroxOpticalFlow extends org.bytedeco.javacpp.opencv_cudaoptflow.DenseOpticalFlow {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaoptflow.BroxOpticalFlow>;
					public getOuterIterations(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getFlowSmoothness(): number;
					public getInnerIterations(): number;
					public getSolverIterations(): number;
					public setPyramidScaleFactor(param0: number): void;
					public setInnerIterations(param0: number): void;
					public setOuterIterations(param0: number): void;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_cudaoptflow.BroxOpticalFlow;
					public getPyramidScaleFactor(): number;
					public constructor();
					public setFlowSmoothness(param0: number): void;
					public getGradientConstancyImportance(): number;
					public setGradientConstancyImportance(param0: number): void;
					public static create(): org.bytedeco.javacpp.opencv_cudaoptflow.BroxOpticalFlow;
					public constructor(param0: number);
					public setSolverIterations(param0: number): void;
				}
				export class DenseOpticalFlow extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaoptflow.DenseOpticalFlow>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public calc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public calc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: number);
					public calc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class DensePyrLKOpticalFlow extends org.bytedeco.javacpp.opencv_cudaoptflow.DenseOpticalFlow {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaoptflow.DensePyrLKOpticalFlow>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setWinSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
					public getUseInitialFlow(): boolean;
					public setMaxLevel(param0: number): void;
					public setNumIters(param0: number): void;
					public constructor();
					public setUseInitialFlow(param0: boolean): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: number, param3: boolean): org.bytedeco.javacpp.opencv_cudaoptflow.DensePyrLKOpticalFlow;
					public getWinSize(): org.bytedeco.javacpp.opencv_core.Size;
					public getMaxLevel(): number;
					public static create(): org.bytedeco.javacpp.opencv_cudaoptflow.DensePyrLKOpticalFlow;
					public constructor(param0: number);
					public getNumIters(): number;
				}
				export class FarnebackOpticalFlow extends org.bytedeco.javacpp.opencv_cudaoptflow.DenseOpticalFlow {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaoptflow.FarnebackOpticalFlow>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: number, param1: number, param2: boolean, param3: number, param4: number, param5: number, param6: number, param7: number): org.bytedeco.javacpp.opencv_cudaoptflow.FarnebackOpticalFlow;
					public setFastPyramids(param0: boolean): void;
					public getFlags(): number;
					public getPolySigma(): number;
					public static create(): org.bytedeco.javacpp.opencv_cudaoptflow.FarnebackOpticalFlow;
					public setPolyN(param0: number): void;
					public setWinSize(param0: number): void;
					public getPolyN(): number;
					public setNumIters(param0: number): void;
					public getWinSize(): number;
					public constructor();
					public getNumLevels(): number;
					public setFlags(param0: number): void;
					public setPyrScale(param0: number): void;
					public getFastPyramids(): boolean;
					public getPyrScale(): number;
					public setPolySigma(param0: number): void;
					public constructor(param0: number);
					public setNumLevels(param0: number): void;
					public getNumIters(): number;
				}
				export class OpticalFlowDual_TVL1 extends org.bytedeco.javacpp.opencv_cudaoptflow.DenseOpticalFlow {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaoptflow.OpticalFlowDual_TVL1>;
					public getNumScales(): number;
					public getNumWarps(): number;
					public setLambda(param0: number): void;
					public getUseInitialFlow(): boolean;
					public getLambda(): number;
					public getGamma(): number;
					public getScaleStep(): number;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: boolean): org.bytedeco.javacpp.opencv_cudaoptflow.OpticalFlowDual_TVL1;
					public setNumIterations(param0: number): void;
					public constructor();
					public setUseInitialFlow(param0: boolean): void;
					public setTheta(param0: number): void;
					public constructor(param0: number);
					public setEpsilon(param0: number): void;
					public setNumWarps(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setNumScales(param0: number): void;
					public getTheta(): number;
					public setTau(param0: number): void;
					public setScaleStep(param0: number): void;
					public getTau(): number;
					public setGamma(param0: number): void;
					public static create(): org.bytedeco.javacpp.opencv_cudaoptflow.OpticalFlowDual_TVL1;
					public getEpsilon(): number;
					public getNumIterations(): number;
				}
				export class SparseOpticalFlow extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaoptflow.SparseOpticalFlow>;
					public calc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public calc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public calc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
					public constructor(param0: number);
				}
				export class SparsePyrLKOpticalFlow extends org.bytedeco.javacpp.opencv_cudaoptflow.SparseOpticalFlow {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudaoptflow.SparsePyrLKOpticalFlow>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setWinSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
					public getUseInitialFlow(): boolean;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: number, param3: boolean): org.bytedeco.javacpp.opencv_cudaoptflow.SparsePyrLKOpticalFlow;
					public setMaxLevel(param0: number): void;
					public static create(): org.bytedeco.javacpp.opencv_cudaoptflow.SparsePyrLKOpticalFlow;
					public setNumIters(param0: number): void;
					public constructor();
					public setUseInitialFlow(param0: boolean): void;
					public getWinSize(): org.bytedeco.javacpp.opencv_core.Size;
					public getMaxLevel(): number;
					public constructor(param0: number);
					public getNumIters(): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_cudawarping extends org.bytedeco.javacpp.presets.opencv_cudawarping {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_cudawarping>;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static buildWarpPerspectiveMaps(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static buildWarpPerspectiveMaps(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static buildWarpAffineMaps(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public constructor();
				public static rotate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static buildWarpAffineMaps(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static rotate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static rotate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): void;
				public static buildWarpAffineMaps(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static buildWarpAffineMaps(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static buildWarpPerspectiveMaps(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static buildWarpAffineMaps(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static rotate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static rotate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static buildWarpAffineMaps(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static buildWarpPerspectiveMaps(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static buildWarpPerspectiveMaps(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static rotate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static buildWarpPerspectiveMaps(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Stream): void;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_dnn extends org.bytedeco.javacpp.presets.opencv_dnn {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn>;
				public static OPENCV_DNN_API_VERSION: number;
				public static DNN_BACKEND_DEFAULT: number;
				public static DNN_BACKEND_HALIDE: number;
				public static DNN_BACKEND_INFERENCE_ENGINE: number;
				public static DNN_BACKEND_OPENCV: number;
				public static DNN_BACKEND_VKCOM: number;
				public static DNN_TARGET_CPU: number;
				public static DNN_TARGET_OPENCL: number;
				public static DNN_TARGET_OPENCL_FP16: number;
				public static DNN_TARGET_MYRIAD: number;
				public static DNN_TARGET_VULKAN: number;
				public static DNN_TARGET_FPGA: number;
				public static readNetFromModelOptimizer(param0: string, param1: string): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNet(param0: string, param1: string, param2: string): org.bytedeco.javacpp.opencv_dnn.Net;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: native.Array<number>, param2: number, param3: number, param4: native.Array<number>, param5: number, param6: number): void;
				public static total(param0: org.bytedeco.javacpp.IntPointer): number;
				public static shiftLeft(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.Pointer;
				public static readTorchBlob(param0: string): org.bytedeco.javacpp.opencv_core.Mat;
				public static slice(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_dnn._Range, param2: org.bytedeco.javacpp.opencv_dnn._Range, param3: org.bytedeco.javacpp.opencv_dnn._Range): org.bytedeco.javacpp.opencv_core.Mat;
				public static concat(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.IntPointer;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static readNetFromTensorflow(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static readNetFromCaffe(param0: string, param1: number, param2: string, param3: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromTensorflow(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromCaffe(param0: string, param1: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static print(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.BytePointer): void;
				public static readNet(param0: string): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromTensorflow(param0: string, param1: string): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static readTorchBlob(param0: string, param1: boolean): org.bytedeco.javacpp.opencv_core.Mat;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: org.bytedeco.javacpp.FloatPointer, param2: number, param3: number, param4: org.bytedeco.javacpp.IntPointer): void;
				public static readNetFromCaffe(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNet(param0: string, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromCaffe(param0: org.bytedeco.javacpp.BytePointer, param1: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static readNetFromDarknet(param0: java.nio.ByteBuffer, param1: java.nio.ByteBuffer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.Rect2dVector, param1: org.bytedeco.javacpp.FloatPointer, param2: number, param3: number, param4: org.bytedeco.javacpp.IntPointer): void;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: boolean, param5: boolean, param6: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static shape(param0: number): org.bytedeco.javacpp.IntPointer;
				public static imagesFromBlob(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static toString(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
				public static readNetFromTorch(param0: org.bytedeco.javacpp.BytePointer, param1: boolean, param2: boolean): org.bytedeco.javacpp.opencv_dnn.Net;
				public static writeTextGraph(param0: string, param1: string): void;
				public static NMSBoxesRotated(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: org.bytedeco.javacpp.FloatPointer, param2: number, param3: number, param4: org.bytedeco.javacpp.IntPointer): void;
				public static readNetFromDarknet(param0: java.nio.ByteBuffer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromTensorflow(param0: java.nio.ByteBuffer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNet(param0: org.bytedeco.javacpp.BytePointer, param1: native.Array<number>): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: boolean, param5: boolean, param6: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static readNet(param0: string, param1: java.nio.ByteBuffer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromCaffe(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static readNetFromONNX(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromCaffe(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static shape(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.IntPointer;
				public static getAvailableBackends(): org.bytedeco.javacpp.opencv_core.IntIntPairVector;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: org.bytedeco.javacpp.FloatPointer, param2: number, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number): void;
				public static NMSBoxesRotated(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: native.Array<number>, param2: number, param3: number, param4: native.Array<number>, param5: number, param6: number): void;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: native.Array<number>, param2: number, param3: number, param4: native.Array<number>): void;
				public static NMSBoxesRotated(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: org.bytedeco.javacpp.FloatPointer, param2: number, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number): void;
				public static resetMyriadDevice(): void;
				public static getAvailableTargets(param0: number): org.bytedeco.javacpp.IntPointer;
				public static readNet(param0: string, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static writeTextGraph(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
				public static readNetFromCaffe(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static total(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: number): number;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static shape(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.IntPointer;
				public static clamp(param0: number, param1: number): number;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: boolean, param5: boolean, param6: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static imagesFromBlob(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static readNet(param0: string, param1: native.Array<number>): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: boolean, param5: boolean, param6: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static readNetFromCaffe(param0: string, param1: string): org.bytedeco.javacpp.opencv_dnn.Net;
				public static print(param0: org.bytedeco.javacpp.IntPointer): void;
				public static readNet(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromDarknet(param0: native.Array<number>): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNet(param0: string, param1: java.nio.ByteBuffer, param2: java.nio.ByteBuffer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.UMatVector): org.bytedeco.javacpp.opencv_core.Mat;
				public static shape(param0: org.bytedeco.javacpp.IntPointer, param1: number): org.bytedeco.javacpp.IntPointer;
				public constructor();
				public static readNetFromDarknet(param0: org.bytedeco.javacpp.BytePointer, param1: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: boolean, param5: boolean, param6: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static readNet(param0: string, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromCaffe(param0: native.Array<number>): org.bytedeco.javacpp.opencv_dnn.Net;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.Rect2dVector, param1: java.nio.FloatBuffer, param2: number, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number): void;
				public static readNetFromTensorflow(param0: string): org.bytedeco.javacpp.opencv_dnn.Net;
				public static clamp(param0: number, param1: org.bytedeco.javacpp.IntPointer): number;
				public static readNet(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static NMSBoxesRotated(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: java.nio.FloatBuffer, param2: number, param3: number, param4: java.nio.IntBuffer): void;
				public static readNetFromTensorflow(param0: string, param1: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromTensorflow(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNet(param0: org.bytedeco.javacpp.BytePointer, param1: java.nio.ByteBuffer, param2: java.nio.ByteBuffer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static readNetFromDarknet(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromCaffe(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromDarknet(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: java.nio.FloatBuffer, param2: number, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number): void;
				public static shrinkCaffeModel(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
				public static shape(param0: java.nio.IntBuffer, param1: number): org.bytedeco.javacpp.IntPointer;
				public static readNetFromTensorflow(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromDarknet(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: boolean, param5: boolean, param6: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.MatVector): org.bytedeco.javacpp.opencv_core.Mat;
				public static readNetFromDarknet(param0: string, param1: number, param2: string, param3: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromModelOptimizer(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromTorch(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static readNetFromDarknet(param0: string, param1: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromTensorflow(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer, param3: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector): org.bytedeco.javacpp.opencv_core.Mat;
				public static readNetFromTorch(param0: string, param1: boolean, param2: boolean): org.bytedeco.javacpp.opencv_dnn.Net;
				public static slice(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_dnn._Range): org.bytedeco.javacpp.opencv_core.Mat;
				public static readTorchBlob(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.Mat;
				public static readTorchBlob(param0: org.bytedeco.javacpp.BytePointer, param1: boolean): org.bytedeco.javacpp.opencv_core.Mat;
				public static getPlane(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static shape(param0: native.Array<number>, param1: number): org.bytedeco.javacpp.IntPointer;
				public static readTensorFromONNX(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.Mat;
				public static shrinkCaffeModel(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.StringVector): void;
				public static shrinkCaffeModel(param0: string, param1: string): void;
				public static imagesFromBlob(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static readNet(param0: org.bytedeco.javacpp.BytePointer, param1: native.Array<number>, param2: native.Array<number>): org.bytedeco.javacpp.opencv_dnn.Net;
				public static print(param0: org.bytedeco.javacpp.IntPointer, param1: string): void;
				public static shape(param0: org.bytedeco.javacpp.opencv_core.MatSize): org.bytedeco.javacpp.IntPointer;
				public static NMSBoxesRotated(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: java.nio.FloatBuffer, param2: number, param3: number, param4: java.nio.IntBuffer, param5: number, param6: number): void;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.Rect2dVector, param1: org.bytedeco.javacpp.FloatPointer, param2: number, param3: number, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number): void;
				public static readNetFromTensorflow(param0: org.bytedeco.javacpp.BytePointer, param1: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromDarknet(param0: string, param1: string): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static readNetFromCaffe(param0: java.nio.ByteBuffer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static shrinkCaffeModel(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.StringVector): void;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.Rect2dVector, param1: native.Array<number>, param2: number, param3: number, param4: native.Array<number>, param5: number, param6: number): void;
				public static readNet(param0: org.bytedeco.javacpp.BytePointer, param1: java.nio.ByteBuffer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static readNetFromONNX(param0: string): org.bytedeco.javacpp.opencv_dnn.Net;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.Rect2dVector, param1: native.Array<number>, param2: number, param3: number, param4: native.Array<number>): void;
				public static readNetFromCaffe(param0: string): org.bytedeco.javacpp.opencv_dnn.Net;
				public static slice(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_dnn._Range, param2: org.bytedeco.javacpp.opencv_dnn._Range): org.bytedeco.javacpp.opencv_core.Mat;
				public static toString(param0: org.bytedeco.javacpp.IntPointer, param1: string): string;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static is_neg(param0: number): boolean;
				public static readNetFromTensorflow(param0: string, param1: number, param2: string, param3: number): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static readNetFromDarknet(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.opencv_dnn.Net;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: java.nio.FloatBuffer, param2: number, param3: number, param4: java.nio.IntBuffer): void;
				public static clamp(param0: org.bytedeco.javacpp.opencv_core.Range, param1: number): org.bytedeco.javacpp.opencv_core.Range;
				public static readNetFromDarknet(param0: string): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImage(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static readTensorFromONNX(param0: string): org.bytedeco.javacpp.opencv_core.Mat;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static readNetFromTensorflow(param0: native.Array<number>): org.bytedeco.javacpp.opencv_dnn.Net;
				public static blobFromImages(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: boolean, param6: boolean, param7: number): void;
				public static NMSBoxesRotated(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: native.Array<number>, param2: number, param3: number, param4: native.Array<number>): void;
				public static readNet(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
				public static toString(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.BytePointer;
				public static shape(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.IntPointer;
				public static readNetFromTorch(param0: string): org.bytedeco.javacpp.opencv_dnn.Net;
				public static NMSBoxes(param0: org.bytedeco.javacpp.opencv_core.Rect2dVector, param1: java.nio.FloatBuffer, param2: number, param3: number, param4: java.nio.IntBuffer): void;
				public static slice(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_dnn._Range, param2: org.bytedeco.javacpp.opencv_dnn._Range, param3: org.bytedeco.javacpp.opencv_dnn._Range, param4: org.bytedeco.javacpp.opencv_dnn._Range): org.bytedeco.javacpp.opencv_core.Mat;
			}
			export module opencv_dnn {
				export class AbsLayer extends org.bytedeco.javacpp.opencv_dnn.ActivationLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.AbsLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.AbsLayer;
					public constructor(param0: number);
				}
				export class ActivationLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ActivationLayer>;
					public forwardSlice(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: number, param3: number, param4: number, param5: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public forwardSlice(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: number, param3: number, param4: number, param5: number): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public forwardSlice(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number, param4: number, param5: number): void;
					public constructor(param0: number);
				}
				export class BNLLLayer extends org.bytedeco.javacpp.opencv_dnn.ActivationLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.BNLLLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.BNLLLayer;
				}
				export class BackendNode {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.BackendNode>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public backendId(): number;
					public backendId(param0: number): org.bytedeco.javacpp.opencv_dnn.BackendNode;
					public constructor(param0: number);
				}
				export class BackendWrapper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.BackendWrapper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public copyToHost(): void;
					public targetId(): number;
					public setHostDirty(): void;
					public targetId(param0: number): org.bytedeco.javacpp.opencv_dnn.BackendWrapper;
					public backendId(param0: number): org.bytedeco.javacpp.opencv_dnn.BackendWrapper;
					public backendId(): number;
				}
				export class BaseConvolutionLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer>;
					public numOutput(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public kernel(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public kernel(): org.bytedeco.javacpp.opencv_core.Size;
					public padMode(): org.bytedeco.javacpp.BytePointer;
					public dilation(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer;
					public numOutput(param0: number): org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer;
					public adjustPad(): org.bytedeco.javacpp.opencv_core.Size;
					public adjustPad(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer;
					public dilation(): org.bytedeco.javacpp.opencv_core.Size;
					public constructor();
					public stride(): org.bytedeco.javacpp.opencv_core.Size;
					public pad(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer;
					public constructor(param0: number);
					public stride(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer;
					public pad(): org.bytedeco.javacpp.opencv_core.Size;
					public padMode(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer;
				}
				export class BatchNormLayer extends org.bytedeco.javacpp.opencv_dnn.ActivationLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.BatchNormLayer>;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.BatchNormLayer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public hasBias(): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public hasWeights(): boolean;
					public hasWeights(param0: boolean): org.bytedeco.javacpp.opencv_dnn.BatchNormLayer;
					public hasBias(param0: boolean): org.bytedeco.javacpp.opencv_dnn.BatchNormLayer;
					public constructor();
					public epsilon(): number;
					public constructor(param0: number);
					public epsilon(param0: number): org.bytedeco.javacpp.opencv_dnn.BatchNormLayer;
				}
				export class BlankLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.BlankLayer>;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.Layer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
				}
				export class ChannelsPReLULayer extends org.bytedeco.javacpp.opencv_dnn.ActivationLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ChannelsPReLULayer>;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.Layer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
				}
				export class ConcatLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ConcatLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public padding(param0: boolean): org.bytedeco.javacpp.opencv_dnn.ConcatLayer;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public axis(): number;
					public padding(): boolean;
					public axis(param0: number): org.bytedeco.javacpp.opencv_dnn.ConcatLayer;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.ConcatLayer;
					public constructor(param0: number);
				}
				export class ConstLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ConstLayer>;
					public position(param0: number): org.bytedeco.javacpp.opencv_dnn.ConstLayer;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.Layer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public position(param0: number): org.bytedeco.javacpp.opencv_dnn.Layer;
					public constructor(param0: number);
				}
				export class ConvolutionLayer extends org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ConvolutionLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
				}
				export class CropAndResizeLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.CropAndResizeLayer>;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.Layer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
				}
				export class CropLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.CropLayer>;
					public offset(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_dnn.CropLayer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.CropLayer;
					public startAxis(): number;
					public startAxis(param0: number): org.bytedeco.javacpp.opencv_dnn.CropLayer;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public offset(): org.bytedeco.javacpp.IntPointer;
					public constructor(param0: number);
				}
				export class DeconvolutionLayer extends org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.DeconvolutionLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.BaseConvolutionLayer;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
				}
				export class DetectionOutputLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.DetectionOutputLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.DetectionOutputLayer;
					public constructor(param0: number);
				}
				export class Dict {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.Dict>;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.DictValue;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public ptr(param0: string): org.bytedeco.javacpp.opencv_dnn.DictValue;
					public erase(param0: org.bytedeco.javacpp.BytePointer): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_dnn.Dict;
					public constructor();
					public get(param0: string): org.bytedeco.javacpp.opencv_dnn.DictValue;
					public get(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.DictValue;
					public has(param0: string): boolean;
					public constructor(param0: number);
					public has(param0: org.bytedeco.javacpp.BytePointer): boolean;
					public erase(param0: string): void;
				}
				export class DictValue {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.DictValue>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: string);
					public isString(): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.DictValue);
					public getIntValue(): number;
					public getStringValue(param0: number): org.bytedeco.javacpp.BytePointer;
					public getStringValue(): org.bytedeco.javacpp.BytePointer;
					public size(): number;
					public isReal(): boolean;
					public isInt(): boolean;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public getIntValue(param0: number): number;
					public constructor(param0: boolean);
					public constructor();
					public getRealValue(param0: number): number;
					public put(param0: org.bytedeco.javacpp.opencv_dnn.DictValue): org.bytedeco.javacpp.opencv_dnn.DictValue;
					public getRealValue(): number;
					public constructor(param0: number);
				}
				export class ELULayer extends org.bytedeco.javacpp.opencv_dnn.ActivationLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ELULayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.ELULayer;
					public constructor(param0: number);
				}
				export class EltwiseLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.EltwiseLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.EltwiseLayer;
					public constructor(param0: number);
				}
				export class FlattenLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.FlattenLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.FlattenLayer;
					public constructor();
					public constructor(param0: number);
				}
				export class InnerProductLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.InnerProductLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public axis(): number;
					public axis(param0: number): org.bytedeco.javacpp.opencv_dnn.InnerProductLayer;
					public constructor(param0: number);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.InnerProductLayer;
				}
				export class InterpLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.InterpLayer>;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.Layer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
				}
				export class LRNLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.LRNLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.LRNLayer;
					public size(): number;
					public normBySize(): boolean;
					public bias(): number;
					public alpha(): number;
					public lrnType(): number;
					public normBySize(param0: boolean): org.bytedeco.javacpp.opencv_dnn.LRNLayer;
					public constructor();
					public bias(param0: number): org.bytedeco.javacpp.opencv_dnn.LRNLayer;
					public lrnType(param0: number): org.bytedeco.javacpp.opencv_dnn.LRNLayer;
					public beta(): number;
					public size(param0: number): org.bytedeco.javacpp.opencv_dnn.LRNLayer;
					public alpha(param0: number): org.bytedeco.javacpp.opencv_dnn.LRNLayer;
					public constructor(param0: number);
					public beta(param0: number): org.bytedeco.javacpp.opencv_dnn.LRNLayer;
				}
				export class LSTMLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.LSTMLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setOutShape(param0: org.bytedeco.javacpp.IntPointer): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.LSTMLayer;
					public outputNameToIndex(param0: string): number;
					public setWeights(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public outputNameToIndex(param0: org.bytedeco.javacpp.BytePointer): number;
					public inputNameToIndex(param0: org.bytedeco.javacpp.BytePointer): number;
					public setOutShape(): void;
					public inputNameToIndex(param0: string): number;
					public constructor();
					public setUseTimstampsDim(): void;
					public setProduceCellOutput(): void;
					public setUseTimstampsDim(param0: boolean): void;
					public constructor(param0: number);
					public setProduceCellOutput(param0: boolean): void;
				}
				export class Layer extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.Layer>;
					public blobs(): org.bytedeco.javacpp.opencv_core.MatVector;
					public tryFuse(param0: org.bytedeco.javacpp.opencv_dnn.Layer): boolean;
					public preferableTarget(): number;
					public forward(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public finalize(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public setActivation(param0: org.bytedeco.javacpp.opencv_dnn.ActivationLayer): boolean;
					public getScaleShift(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public inputNameToIndex(param0: string): number;
					public finalize(param0: org.bytedeco.javacpp.opencv_core.MatVector): org.bytedeco.javacpp.opencv_core.MatVector;
					public constructor();
					public tryAttach(param0: org.bytedeco.javacpp.opencv_dnn.BackendNode): org.bytedeco.javacpp.opencv_dnn.BackendNode;
					public getFLOPS(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param1: org.bytedeco.javacpp.opencv_dnn.MatShapeVector): number;
					public preferableTarget(param0: number): org.bytedeco.javacpp.opencv_dnn.Layer;
					public forward(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_dnn.Layer;
					public constructor(param0: number);
					public finalize(param0: org.bytedeco.javacpp.opencv_dnn.MatPointerVector, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public setParamsFrom(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public blobs(param0: org.bytedeco.javacpp.opencv_core.MatVector): org.bytedeco.javacpp.opencv_dnn.Layer;
					public type(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Layer;
					public forward(param0: org.bytedeco.javacpp.opencv_dnn.MatPointerVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public type(): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public applyHalideScheduler(param0: org.bytedeco.javacpp.opencv_dnn.BackendNode, param1: org.bytedeco.javacpp.opencv_dnn.MatPointerVector, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: number): void;
					public forward(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public outputNameToIndex(param0: string): number;
					public outputNameToIndex(param0: org.bytedeco.javacpp.BytePointer): number;
					public finalize(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public forward_fallback(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public inputNameToIndex(param0: org.bytedeco.javacpp.BytePointer): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public supportBackend(param0: number): boolean;
					public name(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Layer;
					public forward_fallback(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public finalize(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public getMemoryShapes(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param1: number, param2: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param3: org.bytedeco.javacpp.opencv_dnn.MatShapeVector): boolean;
					public run(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public name(): org.bytedeco.javacpp.BytePointer;
					public forward_fallback(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public unsetAttached(): void;
				}
				export class LayerFactory {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.LayerFactory>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static createLayerInstance(param0: string, param1: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.Layer;
					public static registerLayer(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_dnn.LayerFactory.Constructor): void;
					public static unregisterLayer(param0: org.bytedeco.javacpp.BytePointer): void;
					public static registerLayer(param0: string, param1: org.bytedeco.javacpp.opencv_dnn.LayerFactory.Constructor): void;
					public static unregisterLayer(param0: string): void;
					public static createLayerInstance(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.Layer;
				}
				export module LayerFactory {
					export class Constructor {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.LayerFactory.Constructor>;
						public call(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.Layer;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
					}
				}
				export class LayerParams extends org.bytedeco.javacpp.opencv_dnn.Dict {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.LayerParams>;
					public blobs(): org.bytedeco.javacpp.opencv_core.MatVector;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public name(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.LayerParams;
					public type(): org.bytedeco.javacpp.BytePointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_dnn.Dict;
					public position(param0: number): org.bytedeco.javacpp.opencv_dnn.LayerParams;
					public constructor();
					public type(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.LayerParams;
					public blobs(param0: org.bytedeco.javacpp.opencv_core.MatVector): org.bytedeco.javacpp.opencv_dnn.LayerParams;
					public name(): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: number);
				}
				export class MVNLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.MVNLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public eps(param0: number): org.bytedeco.javacpp.opencv_dnn.MVNLayer;
					public constructor();
					public acrossChannels(param0: boolean): org.bytedeco.javacpp.opencv_dnn.MVNLayer;
					public acrossChannels(): boolean;
					public eps(): number;
					public normVariance(): boolean;
					public normVariance(param0: boolean): org.bytedeco.javacpp.opencv_dnn.MVNLayer;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.MVNLayer;
					public constructor(param0: number);
				}
				export class MatPointerVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.MatPointerVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public insert(param0: org.bytedeco.javacpp.opencv_dnn.MatPointerVector.Iterator, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_dnn.MatPointerVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public get(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public begin(): org.bytedeco.javacpp.opencv_dnn.MatPointerVector.Iterator;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_dnn.MatPointerVector;
					public empty(): boolean;
					public size(): number;
					public push_back(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_dnn.MatPointerVector;
					public put(param0: org.bytedeco.javacpp.opencv_dnn.MatPointerVector): org.bytedeco.javacpp.opencv_dnn.MatPointerVector;
					public toString(): string;
					public get(): native.Array<org.bytedeco.javacpp.opencv_core.Mat>;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_core.Mat>);
					public constructor();
					public pop_back(): org.bytedeco.javacpp.opencv_core.Mat;
					public erase(param0: org.bytedeco.javacpp.opencv_dnn.MatPointerVector.Iterator): org.bytedeco.javacpp.opencv_dnn.MatPointerVector.Iterator;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_core.Mat>): org.bytedeco.javacpp.opencv_dnn.MatPointerVector;
					public clear(): void;
					public end(): org.bytedeco.javacpp.opencv_dnn.MatPointerVector.Iterator;
					public resize(param0: number): void;
					public constructor(param0: number);
					public put(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_dnn.MatPointerVector;
				}
				export module MatPointerVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.MatPointerVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public equals(param0: org.bytedeco.javacpp.opencv_dnn.MatPointerVector.Iterator): boolean;
						public increment(): org.bytedeco.javacpp.opencv_dnn.MatPointerVector.Iterator;
						public get(): org.bytedeco.javacpp.opencv_core.Mat;
					}
				}
				export class MatShapeVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.MatShapeVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.IntPointer);
					public empty(): boolean;
					public end(): org.bytedeco.javacpp.opencv_dnn.MatShapeVector.Iterator;
					public push_back(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_dnn.MatShapeVector;
					public put(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_dnn.MatShapeVector;
					public put(param0: native.Array<org.bytedeco.javacpp.IntPointer>): org.bytedeco.javacpp.opencv_dnn.MatShapeVector;
					public size(): number;
					public get(param0: number): org.bytedeco.javacpp.IntPointer;
					public insert(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector.Iterator, param1: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_dnn.MatShapeVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector): org.bytedeco.javacpp.opencv_dnn.MatShapeVector;
					public pop_back(): org.bytedeco.javacpp.IntPointer;
					public constructor(param0: native.Array<org.bytedeco.javacpp.IntPointer>);
					public toString(): string;
					public put(param0: number, param1: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_dnn.MatShapeVector;
					public constructor();
					public clear(): void;
					public erase(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector.Iterator): org.bytedeco.javacpp.opencv_dnn.MatShapeVector.Iterator;
					public resize(param0: number): void;
					public begin(): org.bytedeco.javacpp.opencv_dnn.MatShapeVector.Iterator;
					public constructor(param0: number);
					public get(): native.Array<org.bytedeco.javacpp.IntPointer>;
				}
				export module MatShapeVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.MatShapeVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_dnn.MatShapeVector.Iterator;
						public equals(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.IntPointer;
					}
				}
				export class MatShapeVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public get(param0: number): org.bytedeco.javacpp.opencv_dnn.MatShapeVector;
					public put(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector): org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector;
					public erase(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector.Iterator): org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector.Iterator;
					public empty(): boolean;
					public begin(): org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector.Iterator;
					public size(): number;
					public end(): org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector): org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector);
					public pop_back(): org.bytedeco.javacpp.opencv_dnn.MatShapeVector;
					public toString(): string;
					public get(): native.Array<org.bytedeco.javacpp.opencv_dnn.MatShapeVector>;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_dnn.MatShapeVector>): org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector;
					public constructor();
					public insert(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector.Iterator, param1: org.bytedeco.javacpp.opencv_dnn.MatShapeVector): org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector.Iterator;
					public clear(): void;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_dnn.MatShapeVector>);
					public resize(param0: number): void;
					public push_back(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector): org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_dnn.MatShapeVector): org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector;
					public constructor(param0: number);
				}
				export module MatShapeVectorVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector.Iterator;
						public equals(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.opencv_dnn.MatShapeVector;
					}
				}
				export class MaxUnpoolLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.MaxUnpoolLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public poolPad(): org.bytedeco.javacpp.opencv_core.Size;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.MaxUnpoolLayer;
					public poolPad(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.MaxUnpoolLayer;
					public poolKernel(): org.bytedeco.javacpp.opencv_core.Size;
					public poolKernel(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.MaxUnpoolLayer;
					public poolStride(): org.bytedeco.javacpp.opencv_core.Size;
					public constructor(param0: number);
					public poolStride(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.MaxUnpoolLayer;
				}
				export class Net {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.Net>;
					public static readFromModelOptimizer(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.Net;
					public getLayersShapes(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector, param3: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector): void;
					public connect(param0: string, param1: string): void;
					public forward(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: string): void;
					public setInput(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public forward(): org.bytedeco.javacpp.opencv_core.Mat;
					public getLayersShapes(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector, param3: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector): void;
					public getMemoryConsumption(param0: org.bytedeco.javacpp.IntPointer, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.SizeTPointer, param3: org.bytedeco.javacpp.SizeTPointer): void;
					public empty(): boolean;
					public forward(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.StringVector): void;
					public getFLOPS(param0: org.bytedeco.javacpp.IntPointer): number;
					public getMemoryConsumption(param0: number, param1: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param2: org.bytedeco.javacpp.SizeTPointer, param3: org.bytedeco.javacpp.SizeTPointer): void;
					public forward(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.BytePointer): void;
					public enableFusion(param0: boolean): void;
					public constructor();
					public static readFromModelOptimizer(param0: string, param1: string): org.bytedeco.javacpp.opencv_dnn.Net;
					public addLayer(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_dnn.LayerParams): number;
					public getFLOPS(param0: number, param1: org.bytedeco.javacpp.IntPointer): number;
					public getMemoryConsumption(param0: org.bytedeco.javacpp.IntPointer, param1: native.Array<number>, param2: org.bytedeco.javacpp.SizeTPointer, param3: org.bytedeco.javacpp.SizeTPointer): void;
					public getLayerNames(): org.bytedeco.javacpp.opencv_core.StringVector;
					public getMemoryConsumption(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.SizeTPointer, param2: org.bytedeco.javacpp.SizeTPointer): void;
					public getFLOPS(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector): number;
					public getMemoryConsumption(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.SizeTPointer, param3: org.bytedeco.javacpp.SizeTPointer): void;
					public forward(param0: string): org.bytedeco.javacpp.opencv_core.Mat;
					public getLayerShapes(param0: org.bytedeco.javacpp.IntPointer, param1: number, param2: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param3: org.bytedeco.javacpp.opencv_dnn.MatShapeVector): void;
					public getPerfProfile(param0: java.nio.DoubleBuffer): number;
					public getLayersCount(param0: org.bytedeco.javacpp.BytePointer): number;
					public forward(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public getLayerTypes(param0: org.bytedeco.javacpp.opencv_core.StringVector): void;
					public getLayer(param0: org.bytedeco.javacpp.opencv_dnn.DictValue): org.bytedeco.javacpp.opencv_dnn.Layer;
					public getParam(param0: org.bytedeco.javacpp.opencv_dnn.DictValue): org.bytedeco.javacpp.opencv_core.Mat;
					public addLayerToPrev(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_dnn.LayerParams): number;
					public getMemoryConsumption(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.SizeTPointer, param3: org.bytedeco.javacpp.SizeTPointer): void;
					public setParam(param0: org.bytedeco.javacpp.opencv_dnn.DictValue, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setInput(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setPreferableBackend(param0: number): void;
					public setInput(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: string, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public setInputsNames(param0: org.bytedeco.javacpp.opencv_core.StringVector): void;
					public connect(param0: number, param1: number, param2: number, param3: number): void;
					public setInput(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: string, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public setInput(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.BytePointer, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public getLayersShapes(param0: org.bytedeco.javacpp.IntPointer, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector, param3: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector): void;
					public setHalideScheduler(param0: org.bytedeco.javacpp.BytePointer): void;
					public getParam(param0: org.bytedeco.javacpp.opencv_dnn.DictValue, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
					public setPreferableTarget(param0: number): void;
					public forward(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.BytePointer): void;
					public forward(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.BytePointer): void;
					public getMemoryConsumption(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.SizeTPointer, param3: org.bytedeco.javacpp.SizeTPointer): void;
					public getLayersShapes(param0: org.bytedeco.javacpp.IntPointer, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector, param3: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector): void;
					public getMemoryConsumption(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.SizeTPointer, param3: org.bytedeco.javacpp.SizeTPointer): void;
					public addLayer(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_dnn.LayerParams): number;
					public forward(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.StringVector): void;
					public getLayerId(param0: org.bytedeco.javacpp.BytePointer): number;
					public getMemoryConsumption(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param1: org.bytedeco.javacpp.SizeTPointer, param2: org.bytedeco.javacpp.SizeTPointer): void;
					public addLayerToPrev(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_dnn.LayerParams): number;
					public getLayersCount(param0: string): number;
					public setInput(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.BytePointer, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public constructor(param0: number);
					public getUnconnectedOutLayersNames(): org.bytedeco.javacpp.opencv_core.StringVector;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public forward(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public forwardAndRetrieve(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.StringVector): void;
					public setInput(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public setInput(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setHalideScheduler(param0: string): void;
					public forward(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.Mat;
					public getLayersShapes(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector, param3: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector): void;
					public getLayerId(param0: string): number;
					public connect(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
					public forward(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: string): void;
					public getLayersShapes(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector, param3: org.bytedeco.javacpp.opencv_dnn.MatShapeVectorVector): void;
					public forward(param0: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public getFLOPS(param0: number, param1: org.bytedeco.javacpp.opencv_dnn.MatShapeVector): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_dnn.Net;
					public forward(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.StringVector): void;
					public getLayerShapes(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param1: number, param2: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param3: org.bytedeco.javacpp.opencv_dnn.MatShapeVector): void;
					public getPerfProfile(param0: native.Array<number>): number;
					public forward(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: string): void;
					public getUnconnectedOutLayers(): org.bytedeco.javacpp.IntPointer;
					public getPerfProfile(param0: org.bytedeco.javacpp.DoublePointer): number;
					public setInput(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: string, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public getMemoryConsumption(param0: org.bytedeco.javacpp.opencv_dnn.MatShapeVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.SizeTPointer, param3: org.bytedeco.javacpp.SizeTPointer): void;
				}
				export class NormalizeBBoxLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.NormalizeBBoxLayer>;
					public pnorm(): number;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.NormalizeBBoxLayer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public epsilon(param0: number): org.bytedeco.javacpp.opencv_dnn.NormalizeBBoxLayer;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public pnorm(param0: number): org.bytedeco.javacpp.opencv_dnn.NormalizeBBoxLayer;
					public acrossSpatial(param0: boolean): org.bytedeco.javacpp.opencv_dnn.NormalizeBBoxLayer;
					public constructor();
					public epsilon(): number;
					public acrossSpatial(): boolean;
					public constructor(param0: number);
				}
				export class PaddingLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.PaddingLayer>;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.PaddingLayer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
				}
				export class PermuteLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.PermuteLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.PermuteLayer;
					public constructor(param0: number);
				}
				export class PoolingLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.PoolingLayer>;
					public kernel(): org.bytedeco.javacpp.opencv_core.Size;
					public avePoolPaddedArea(param0: boolean): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public computeMaxIdx(): boolean;
					public pad_t(): number;
					public constructor();
					public pad(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public ceilMode(param0: boolean): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public poolingType(): number;
					public psRoiOutChannels(param0: number): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public spatialScale(param0: number): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public constructor(param0: number);
					public stride(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public spatialScale(): number;
					public avePoolPaddedArea(): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public pooledSize(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public pad_b(): number;
					public padMode(): org.bytedeco.javacpp.BytePointer;
					public pooledSize(): org.bytedeco.javacpp.opencv_core.Size;
					public globalPooling(param0: boolean): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public pad_l(): number;
					public globalPooling(): boolean;
					public computeMaxIdx(param0: boolean): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public pad_r(): number;
					public kernel(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public ceilMode(): boolean;
					public stride(): org.bytedeco.javacpp.opencv_core.Size;
					public psRoiOutChannels(): number;
					public poolingType(param0: number): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public pad_l(param0: number): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public pad_t(param0: number): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public pad_r(param0: number): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public pad_b(param0: number): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public padMode(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_dnn.PoolingLayer;
					public pad(): org.bytedeco.javacpp.opencv_core.Size;
				}
				export class PowerLayer extends org.bytedeco.javacpp.opencv_dnn.ActivationLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.PowerLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public power(param0: number): org.bytedeco.javacpp.opencv_dnn.PowerLayer;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.PowerLayer;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public power(): number;
					public shift(param0: number): org.bytedeco.javacpp.opencv_dnn.PowerLayer;
					public constructor();
					public shift(): number;
					public scale(): number;
					public constructor(param0: number);
					public scale(param0: number): org.bytedeco.javacpp.opencv_dnn.PowerLayer;
				}
				export class PriorBoxLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.PriorBoxLayer>;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.PriorBoxLayer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
				}
				export class ProposalLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ProposalLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.ProposalLayer;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
				}
				export class RNNLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.RNNLayer>;
					public setProduceHiddenOutput(param0: boolean): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.RNNLayer;
					public setProduceHiddenOutput(): void;
					public constructor(param0: number);
					public setWeights(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export class RangeVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.RangeVectorVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public get(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.Range;
					public resize(param0: number, param1: number): void;
					public empty(): boolean;
					public size(): number;
					public get(): native.Array<native.Array<org.bytedeco.javacpp.opencv_core.Range>>;
					public put(param0: native.Array<native.Array<org.bytedeco.javacpp.opencv_core.Range>>): org.bytedeco.javacpp.opencv_dnn.RangeVectorVector;
					public size(param0: number): number;
					public put(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_dnn.RangeVectorVector;
					public toString(): string;
					public put(param0: org.bytedeco.javacpp.opencv_dnn.RangeVectorVector): org.bytedeco.javacpp.opencv_dnn.RangeVectorVector;
					public constructor();
					public constructor(param0: native.Array<native.Array<org.bytedeco.javacpp.opencv_core.Range>>);
					public empty(param0: number): boolean;
					public clear(): void;
					public clear(param0: number): void;
					public resize(param0: number): void;
					public constructor(param0: number);
				}
				export class ReLU6Layer extends org.bytedeco.javacpp.opencv_dnn.ActivationLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ReLU6Layer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public minValue(): number;
					public maxValue(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.ReLU6Layer;
					public constructor();
					public maxValue(param0: number): org.bytedeco.javacpp.opencv_dnn.ReLU6Layer;
					public minValue(param0: number): org.bytedeco.javacpp.opencv_dnn.ReLU6Layer;
					public constructor(param0: number);
				}
				export class ReLULayer extends org.bytedeco.javacpp.opencv_dnn.ActivationLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ReLULayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public negativeSlope(): number;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.ReLULayer;
					public negativeSlope(param0: number): org.bytedeco.javacpp.opencv_dnn.ReLULayer;
					public constructor(param0: number);
				}
				export class RegionLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.RegionLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.RegionLayer;
				}
				export class ReorgLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ReorgLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.ReorgLayer;
					public constructor(param0: number);
				}
				export class ReshapeLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ReshapeLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.ReshapeLayer;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public newShapeRange(param0: org.bytedeco.javacpp.opencv_core.Range): org.bytedeco.javacpp.opencv_dnn.ReshapeLayer;
					public newShapeRange(): org.bytedeco.javacpp.opencv_core.Range;
					public newShapeDesc(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_dnn.ReshapeLayer;
					public newShapeDesc(): org.bytedeco.javacpp.IntPointer;
					public constructor(param0: number);
				}
				export class ResizeLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ResizeLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.ResizeLayer;
					public constructor(param0: number);
				}
				export class ScaleLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ScaleLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public hasBias(): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public axis(): number;
					public axis(param0: number): org.bytedeco.javacpp.opencv_dnn.ScaleLayer;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.ScaleLayer;
					public constructor(param0: number);
					public hasBias(param0: boolean): org.bytedeco.javacpp.opencv_dnn.ScaleLayer;
				}
				export class ShiftLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ShiftLayer>;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.Layer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
				}
				export class ShuffleChannelLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.ShuffleChannelLayer>;
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.Layer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public group(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public group(param0: number): org.bytedeco.javacpp.opencv_dnn.ShuffleChannelLayer;
					public constructor(param0: number);
				}
				export class SigmoidLayer extends org.bytedeco.javacpp.opencv_dnn.ActivationLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.SigmoidLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.SigmoidLayer;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public constructor(param0: number);
				}
				export class SliceLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.SliceLayer>;
					public axis(param0: number): org.bytedeco.javacpp.opencv_dnn.SliceLayer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.SliceLayer;
					public axis(): number;
					public sliceRanges(): org.bytedeco.javacpp.opencv_dnn.RangeVectorVector;
					public sliceRanges(param0: org.bytedeco.javacpp.opencv_dnn.RangeVectorVector): org.bytedeco.javacpp.opencv_dnn.SliceLayer;
					public constructor(param0: number);
				}
				export class SoftmaxLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.SoftmaxLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.SoftmaxLayer;
					public constructor();
					public logSoftMax(param0: boolean): org.bytedeco.javacpp.opencv_dnn.SoftmaxLayer;
					public constructor(param0: number);
					public logSoftMax(): boolean;
				}
				export class SplitLayer extends org.bytedeco.javacpp.opencv_dnn.Layer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.SplitLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public outputsCount(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.SplitLayer;
					public outputsCount(param0: number): org.bytedeco.javacpp.opencv_dnn.SplitLayer;
					public constructor(param0: number);
				}
				export class TanHLayer extends org.bytedeco.javacpp.opencv_dnn.ActivationLayer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn.TanHLayer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_dnn.LayerParams): org.bytedeco.javacpp.opencv_dnn.TanHLayer;
					public constructor(param0: number);
				}
				export class _Range extends org.bytedeco.javacpp.opencv_core.Range {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_dnn._Range>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Range);
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_face extends org.bytedeco.javacpp.presets.opencv_face {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face>;
				public static loadTrainingData(param0: string, param1: org.bytedeco.javacpp.opencv_core.StringVector, param2: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param3: number, param4: number): boolean;
				public static createFacemarkLBF(): org.bytedeco.javacpp.opencv_face.Facemark;
				public static createFacemarkKazemi(): org.bytedeco.javacpp.opencv_face.Facemark;
				public static drawFacemarks(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point2fVector, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public constructor();
				public static loadFacePoints(param0: string, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: number): boolean;
				public static loadDatasetList(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.StringVector, param3: org.bytedeco.javacpp.opencv_core.StringVector): boolean;
				public static loadTrainingData(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.StringVector, param3: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param4: number): boolean;
				public static getFaces(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.opencv_face.CParams): boolean;
				public static getFacesHAAR(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: string): boolean;
				public static loadTrainingData(param0: org.bytedeco.javacpp.opencv_core.StringVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.StringVector): boolean;
				public static createFacemarkAAM(): org.bytedeco.javacpp.opencv_face.Facemark;
				public static loadDatasetList(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.StringVector, param3: org.bytedeco.javacpp.opencv_core.StringVector): boolean;
			}
			export module opencv_face {
				export class BasicFaceRecognizer extends org.bytedeco.javacpp.opencv_face.FaceRecognizer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.BasicFaceRecognizer>;
					public read(param0: org.bytedeco.javacpp.BytePointer): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setNumComponents(param0: number): void;
					public getProjections(): org.bytedeco.javacpp.opencv_core.MatVector;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public empty(): boolean;
					public getNumComponents(): number;
					public write(param0: org.bytedeco.javacpp.BytePointer): void;
					public setThreshold(param0: number): void;
					public getThreshold(): number;
					public getLabels(): org.bytedeco.javacpp.opencv_core.Mat;
					public getEigenVectors(): org.bytedeco.javacpp.opencv_core.Mat;
					public write(param0: string): void;
					public read(param0: string): void;
					public constructor();
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public getMean(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number);
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
					public getEigenValues(): org.bytedeco.javacpp.opencv_core.Mat;
				}
				export class CParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.CParams>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: string, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Size);
					public constructor(param0: string);
					public cascade(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_face.CParams;
					public minNeighbors(param0: number): org.bytedeco.javacpp.opencv_face.CParams;
					public maxSize(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_face.CParams;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Size);
					public face_cascade(param0: org.bytedeco.javacpp.opencv_objdetect.CascadeClassifier): org.bytedeco.javacpp.opencv_face.CParams;
					public minSize(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_face.CParams;
					public maxSize(): org.bytedeco.javacpp.opencv_core.Size;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public minNeighbors(): number;
					public minSize(): org.bytedeco.javacpp.opencv_core.Size;
					public scaleFactor(param0: number): org.bytedeco.javacpp.opencv_face.CParams;
					public scaleFactor(): number;
					public face_cascade(): org.bytedeco.javacpp.opencv_objdetect.CascadeClassifier;
					public cascade(): org.bytedeco.javacpp.BytePointer;
				}
				export class EigenFaceRecognizer extends org.bytedeco.javacpp.opencv_face.BasicFaceRecognizer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.EigenFaceRecognizer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: number, param1: number): org.bytedeco.javacpp.opencv_face.EigenFaceRecognizer;
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_face.EigenFaceRecognizer;
					public constructor(param0: number);
				}
				export class FaceRecognizer extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FaceRecognizer>;
					public train(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public empty(): boolean;
					public update(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public predict_collect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_face.PredictCollector): void;
					public getLabelsByString(param0: string): java.nio.IntBuffer;
					public update(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public write(param0: string): void;
					public constructor();
					public update(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public read(param0: org.bytedeco.javacpp.BytePointer): void;
					public train(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public train(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getLabelsByString(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.IntPointer;
					public write(param0: org.bytedeco.javacpp.BytePointer): void;
					public getLabelInfo(param0: number): org.bytedeco.javacpp.BytePointer;
					public setThreshold(param0: number): void;
					public train(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public predict(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.IntBuffer, param2: java.nio.DoubleBuffer): void;
					public predict(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: native.Array<number>): void;
					public predict_label(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public setLabelInfo(param0: number, param1: string): void;
					public train(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public update(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public update(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public update(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
					public update(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public predict_label(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
					public predict(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.DoublePointer): void;
					public train(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public predict(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.IntBuffer, param2: java.nio.DoubleBuffer): void;
					public predict(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.DoublePointer): void;
					public train(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public predict_label(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public read(param0: string): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public predict_collect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_face.PredictCollector): void;
					public update(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setLabelInfo(param0: number, param1: org.bytedeco.javacpp.BytePointer): void;
					public constructor(param0: number);
					public train(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public train(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public predict(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>, param2: native.Array<number>): void;
					public predict_collect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_face.PredictCollector): void;
					public predict(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>, param2: native.Array<number>): void;
					public getThreshold(): number;
					public predict(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.DoublePointer): void;
					public predict(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.IntBuffer, param2: java.nio.DoubleBuffer): void;
					public update(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class Facemark extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.Facemark>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public loadModel(param0: org.bytedeco.javacpp.BytePointer): void;
					public loadModel(param0: string): void;
					public constructor();
					public fit(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.opencv_core.Point2fVectorVector): boolean;
					public constructor(param0: number);
				}
				export class FacemarkAAM extends org.bytedeco.javacpp.opencv_face.FacemarkTrain {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkAAM>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_face.FacemarkAAM;
					public static create(param0: org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params): org.bytedeco.javacpp.opencv_face.FacemarkAAM;
					public fitConfig(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param3: org.bytedeco.javacpp.opencv_face.FacemarkAAM.Config): boolean;
					public constructor(param0: number);
				}
				export module FacemarkAAM {
					export class Config {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkAAM.Config>;
						public R(): org.bytedeco.javacpp.opencv_core.Mat;
						public constructor();
						public t(): org.bytedeco.javacpp.opencv_core.Point2f;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public R(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Config;
						public scale(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Config;
						public model_scale_idx(): number;
						public model_scale_idx(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Config;
						public t(param0: org.bytedeco.javacpp.opencv_core.Point2f): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Config;
						public constructor(param0: number);
						public scale(): number;
						public position(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Config;
						public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: number, param3: number);
					}
					export class Data {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkAAM.Data>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public constructor(param0: number);
						public s0(param0: org.bytedeco.javacpp.opencv_core.Point2fVector): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Data;
						public s0(): org.bytedeco.javacpp.opencv_core.Point2fVector;
						public position(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Data;
					}
					export class Model {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model>;
						public S(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public s0(param0: org.bytedeco.javacpp.opencv_core.Point2fVector): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model;
						public S(): org.bytedeco.javacpp.opencv_core.Mat;
						public position(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model;
						public textures(param0: org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model;
						public triangles(): org.bytedeco.javacpp.opencv_core.Point3iVector;
						public Q(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model;
						public scales(): org.bytedeco.javacpp.FloatPointer;
						public scales(param0: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model;
						public constructor(param0: number);
						public textures(): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
						public s0(): org.bytedeco.javacpp.opencv_core.Point2fVector;
						public triangles(param0: org.bytedeco.javacpp.opencv_core.Point3iVector): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model;
						public Q(): org.bytedeco.javacpp.opencv_core.Mat;
					}
					export module Model {
						export class Texture {
							public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture>;
							public constructor();
							public max_m(): number;
							public resolution(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
							public A0(): org.bytedeco.javacpp.opencv_core.Mat;
							public AA0(): org.bytedeco.javacpp.opencv_core.Mat;
							public ind2(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
							public ind2(): org.bytedeco.javacpp.IntPointer;
							public A0(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
							public AA(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
							public textureIdx(param0: org.bytedeco.javacpp.opencv_core.PointVectorVector): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
							public constructor(param0: number);
							public ind1(): org.bytedeco.javacpp.IntPointer;
							public resolution(): org.bytedeco.javacpp.opencv_core.Rect;
							public constructor(param0: org.bytedeco.javacpp.Pointer);
							public position(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
							public A(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
							public AA(): org.bytedeco.javacpp.opencv_core.Mat;
							public A(): org.bytedeco.javacpp.opencv_core.Mat;
							public base_shape(param0: org.bytedeco.javacpp.opencv_core.Point2fVector): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
							public AA0(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
							public base_shape(): org.bytedeco.javacpp.opencv_core.Point2fVector;
							public textureIdx(): org.bytedeco.javacpp.opencv_core.PointVectorVector;
							public max_m(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
							public ind1(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Model.Texture;
						}
					}
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params>;
						public max_m(): number;
						public texture_max_m(): number;
						public m(): number;
						public verbose(param0: boolean): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params;
						public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
						public save_model(): boolean;
						public texture_max_m(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params;
						public n_iter(): number;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public save_model(param0: boolean): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params;
						public verbose(): boolean;
						public max_n(): number;
						public n(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params;
						public n_iter(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params;
						public model_filename(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params;
						public scales(): org.bytedeco.javacpp.FloatPointer;
						public scales(param0: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params;
						public max_m(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params;
						public constructor(param0: number);
						public model_filename(): org.bytedeco.javacpp.BytePointer;
						public n(): number;
						public max_n(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params;
						public position(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params;
						public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
						public m(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkAAM.Params;
					}
				}
				export class FacemarkKazemi extends org.bytedeco.javacpp.opencv_face.Facemark {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkKazemi>;
					public training(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: string, param3: org.bytedeco.javacpp.opencv_core.Size): boolean;
					public setFaceDetector(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.Pointer): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public training(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.BytePointer): boolean;
					public static create(param0: org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params): org.bytedeco.javacpp.opencv_face.FacemarkKazemi;
					public static create(): org.bytedeco.javacpp.opencv_face.FacemarkKazemi;
					public constructor();
					public getFaces(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector): boolean;
					public training(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.Size): boolean;
					public constructor(param0: number);
					public training(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: string, param3: org.bytedeco.javacpp.opencv_core.Size, param4: string): boolean;
				}
				export module FacemarkKazemi {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params>;
						public oversampling_amount(): number;
						public constructor();
						public cascade_depth(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params;
						public tree_depth(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public num_trees_per_cascade_level(): number;
						public configfile(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params;
						public lambda(): number;
						public num_test_coordinates(): number;
						public learning_rate(): number;
						public learning_rate(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params;
						public num_test_splits(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params;
						public constructor(param0: number);
						public cascade_depth(): number;
						public oversampling_amount(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params;
						public lambda(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params;
						public configfile(): org.bytedeco.javacpp.BytePointer;
						public num_test_splits(): number;
						public position(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params;
						public tree_depth(): number;
						public num_trees_per_cascade_level(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params;
						public num_test_coordinates(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkKazemi.Params;
					}
				}
				export class FacemarkLBF extends org.bytedeco.javacpp.opencv_face.FacemarkTrain {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkLBF>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_face.FacemarkLBF;
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params): org.bytedeco.javacpp.opencv_face.FacemarkLBF;
					public constructor(param0: number);
				}
				export module FacemarkLBF {
					export class BBox {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkLBF.BBox>;
						public x_center(): number;
						public x_scale(): number;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public height(): number;
						public height(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.BBox;
						public y(): number;
						public x_scale(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.BBox;
						public width(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.BBox;
						public width(): number;
						public reproject(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
						public y(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.BBox;
						public position(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.BBox;
						public y_center(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.BBox;
						public constructor(param0: number, param1: number, param2: number, param3: number);
						public y_scale(): number;
						public x_center(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.BBox;
						public y_scale(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.BBox;
						public constructor(param0: number);
						public x(): number;
						public project(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
						public y_center(): number;
						public x(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.BBox;
					}
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params>;
						public initShape_n(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public detectROI(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public feats_m(): org.bytedeco.javacpp.IntPointer;
						public pupils(param0: number, param1: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public seed(): number;
						public model_filename(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public initShape_n(): number;
						public stages_n(): number;
						public position(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public save_model(): boolean;
						public seed(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
						public stages_n(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public save_model(param0: boolean): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public cascade_face(): org.bytedeco.javacpp.BytePointer;
						public detectROI(): org.bytedeco.javacpp.opencv_core.Rect;
						public tree_depth(): number;
						public tree_n(): number;
						public radius_m(): org.bytedeco.javacpp.DoublePointer;
						public constructor();
						public n_landmarks(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public bagging_overlap(): number;
						public cascade_face(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public verbose(): boolean;
						public pupils(): org.bytedeco.javacpp.IntPointer;
						public tree_n(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public tree_depth(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public verbose(param0: boolean): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public shape_offset(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public pupils(param0: number): org.bytedeco.javacpp.IntPointer;
						public n_landmarks(): number;
						public bagging_overlap(param0: number): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public constructor(param0: number);
						public model_filename(): org.bytedeco.javacpp.BytePointer;
						public feats_m(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public radius_m(param0: org.bytedeco.javacpp.DoublePointer): org.bytedeco.javacpp.opencv_face.FacemarkLBF.Params;
						public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
						public shape_offset(): number;
					}
				}
				export class FacemarkTrain extends org.bytedeco.javacpp.opencv_face.Facemark {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FacemarkTrain>;
					public training(): void;
					public setFaceDetector(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.Pointer): boolean;
					public getData(): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public training(param0: org.bytedeco.javacpp.Pointer): void;
					public getFaces(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector): boolean;
					public getData(param0: org.bytedeco.javacpp.Pointer): boolean;
					public addTrainingSample(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point2fVector): boolean;
					public setFaceDetector(param0: org.bytedeco.javacpp.Pointer): boolean;
					public constructor(param0: number);
				}
				export class FisherFaceRecognizer extends org.bytedeco.javacpp.opencv_face.BasicFaceRecognizer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.FisherFaceRecognizer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: number, param1: number): org.bytedeco.javacpp.opencv_face.FisherFaceRecognizer;
					public constructor();
					public constructor(param0: number);
					public static create(): org.bytedeco.javacpp.opencv_face.FisherFaceRecognizer;
				}
				export class LBPHFaceRecognizer extends org.bytedeco.javacpp.opencv_face.FaceRecognizer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.LBPHFaceRecognizer>;
					public getNeighbors(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setGridY(param0: number): void;
					public getGridX(): number;
					public setThreshold(param0: number): void;
					public getRadius(): number;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_face.LBPHFaceRecognizer;
					public static create(): org.bytedeco.javacpp.opencv_face.LBPHFaceRecognizer;
					public getThreshold(): number;
					public getLabels(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public setRadius(param0: number): void;
					public getGridY(): number;
					public getHistograms(): org.bytedeco.javacpp.opencv_core.MatVector;
					public setGridX(param0: number): void;
					public constructor(param0: number);
					public setNeighbors(param0: number): void;
				}
				export class PredictCollector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.PredictCollector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public collect(param0: number, param1: number): boolean;
					public init(param0: number): void;
				}
				export class StandardCollector extends org.bytedeco.javacpp.opencv_face.PredictCollector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.StandardCollector>;
					public static create(param0: number): org.bytedeco.javacpp.opencv_face.StandardCollector;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getResults(): org.bytedeco.javacpp.opencv_core.IntDoublePairVector;
					public getResults(param0: boolean): org.bytedeco.javacpp.opencv_core.IntDoublePairVector;
					public getMinLabel(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_face.StandardCollector;
					public init(param0: number): void;
					public collect(param0: number, param1: number): boolean;
					public getMinDist(): number;
					public getResultsMap(): org.bytedeco.javacpp.opencv_core.IntDoubleMap;
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_face.StandardCollector;
					public constructor(param0: number);
				}
				export module StandardCollector {
					export class PredictResult {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_face.StandardCollector.PredictResult>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public constructor(param0: number);
						public position(param0: number): org.bytedeco.javacpp.opencv_face.StandardCollector.PredictResult;
						public distance(param0: number): org.bytedeco.javacpp.opencv_face.StandardCollector.PredictResult;
						public label(): number;
						public distance(): number;
						public constructor(param0: number, param1: number);
						public label(param0: number): org.bytedeco.javacpp.opencv_face.StandardCollector.PredictResult;
					}
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_features2d extends org.bytedeco.javacpp.presets.opencv_features2d {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d>;
				public static DEFAULT: number;
				public static DRAW_OVER_OUTIMG: number;
				public static NOT_DRAW_SINGLE_POINTS: number;
				public static DRAW_RICH_KEYPOINTS: number;
				public static drawMatchesKnn(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: native.Array<number>, param9: number): void;
				public static FAST(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean, param4: number): void;
				public static not(param0: number): boolean;
				public static xor(param0: number, param1: number): number;
				public static orPut(param0: java.nio.IntBuffer, param1: number): java.nio.IntBuffer;
				public static xorPut(param0: org.bytedeco.javacpp.IntPointer, param1: number): org.bytedeco.javacpp.IntPointer;
				public static FAST(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean): void;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: java.nio.ByteBuffer, param9: number): void;
				public static orPut(param0: org.bytedeco.javacpp.IntPointer, param1: number): org.bytedeco.javacpp.IntPointer;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: org.bytedeco.javacpp.BytePointer, param9: number): void;
				public static andPut(param0: native.Array<number>, param1: number): native.Array<number>;
				public constructor();
				public static FAST(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean): void;
				public static AGAST(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean): void;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: org.bytedeco.javacpp.BytePointer, param9: number): void;
				public static drawKeypoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static andPut(param0: java.nio.IntBuffer, param1: number): java.nio.IntBuffer;
				public static drawMatchesKnn(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: org.bytedeco.javacpp.opencv_core.ByteVectorVector, param9: number): void;
				public static AGAST(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean, param4: number): void;
				public static AGAST(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean): void;
				public static evaluateFeatureDetector(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.KeyPointVector, param5: java.nio.FloatBuffer, param6: java.nio.IntBuffer): void;
				public static evaluateFeatureDetector(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.KeyPointVector, param5: java.nio.FloatBuffer, param6: java.nio.IntBuffer, param7: org.bytedeco.javacpp.opencv_features2d.Feature2D): void;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: native.Array<number>, param9: number): void;
				public static evaluateFeatureDetector(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.KeyPointVector, param5: native.Array<number>, param6: native.Array<number>, param7: org.bytedeco.javacpp.opencv_features2d.Feature2D): void;
				public static AGAST(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean): void;
				public static drawMatchesKnn(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: org.bytedeco.javacpp.opencv_core.ByteVectorVector, param9: number): void;
				public static FAST(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean, param4: number): void;
				public static getRecall(param0: org.bytedeco.javacpp.opencv_core.Point2fVector, param1: number): number;
				public static drawKeypoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static computeRecallPrecisionCurve(param0: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param1: org.bytedeco.javacpp.opencv_core.ByteVectorVector, param2: org.bytedeco.javacpp.opencv_core.Point2fVector): void;
				public static drawMatchesKnn(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static and(param0: number, param1: number): number;
				public static FAST(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number): void;
				public static FAST(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean): void;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static AGAST(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean, param4: number): void;
				public static evaluateFeatureDetector(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.KeyPointVector, param5: org.bytedeco.javacpp.FloatPointer, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.opencv_features2d.Feature2D): void;
				public static AGAST(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number): void;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: org.bytedeco.javacpp.BytePointer, param9: number): void;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: native.Array<number>, param9: number): void;
				public static drawMatchesKnn(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static AGAST(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean, param4: number): void;
				public static andPut(param0: org.bytedeco.javacpp.IntPointer, param1: number): org.bytedeco.javacpp.IntPointer;
				public static orPut(param0: native.Array<number>, param1: number): native.Array<number>;
				public static xorPut(param0: native.Array<number>, param1: number): native.Array<number>;
				public static FAST(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number): void;
				public static or(param0: number, param1: number): number;
				public static drawKeypoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number): void;
				public static drawKeypoints(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number): void;
				public static getNearestPoint(param0: org.bytedeco.javacpp.opencv_core.Point2fVector, param1: number): number;
				public static FAST(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number): void;
				public static drawKeypoints(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number): void;
				public static xorPut(param0: java.nio.IntBuffer, param1: number): java.nio.IntBuffer;
				public static AGAST(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number): void;
				public static notEquals(param0: number, param1: number): boolean;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: java.nio.ByteBuffer, param9: number): void;
				public static equals(param0: number, param1: number): boolean;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: java.nio.ByteBuffer, param9: number): void;
				public static evaluateFeatureDetector(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.KeyPointVector, param5: org.bytedeco.javacpp.FloatPointer, param6: org.bytedeco.javacpp.IntPointer): void;
				public static drawKeypoints(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static evaluateFeatureDetector(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.KeyPointVector, param5: native.Array<number>, param6: native.Array<number>): void;
				public static drawMatches(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static FAST(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean, param4: number): void;
				public static AGAST(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number): void;
				public static drawMatchesKnn(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: org.bytedeco.javacpp.opencv_core.Scalar, param8: org.bytedeco.javacpp.opencv_core.ByteVectorVector, param9: number): void;
			}
			export module opencv_features2d {
				export class AKAZE extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.AKAZE>;
					public static DESCRIPTOR_KAZE_UPRIGHT: number;
					public static DESCRIPTOR_KAZE: number;
					public static DESCRIPTOR_MLDB_UPRIGHT: number;
					public static DESCRIPTOR_MLDB: number;
					public setDescriptorType(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setDescriptorChannels(param0: number): void;
					public setThreshold(param0: number): void;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.bytedeco.javacpp.opencv_features2d.AKAZE;
					public getThreshold(): number;
					public setNOctaves(param0: number): void;
					public getDefaultName(): org.bytedeco.javacpp.BytePointer;
					public setNOctaveLayers(param0: number): void;
					public setDiffusivity(param0: number): void;
					public getNOctaveLayers(): number;
					public constructor();
					public getDiffusivity(): number;
					public getDescriptorChannels(): number;
					public setDescriptorSize(param0: number): void;
					public getDescriptorType(): number;
					public getDescriptorSize(): number;
					public constructor(param0: number);
					public static create(): org.bytedeco.javacpp.opencv_features2d.AKAZE;
					public getNOctaves(): number;
				}
				export class Accumulator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.Accumulator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Accumulator;
					public constructor(param0: number);
				}
				export class AgastFeatureDetector extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.AgastFeatureDetector>;
					public static AGAST_5_8: number;
					public static AGAST_7_12d: number;
					public static AGAST_7_12s: number;
					public static OAST_9_16: number;
					public static THRESHOLD: number;
					public static NONMAX_SUPPRESSION: number;
					public getThreshold(): number;
					public getType(): number;
					public getDefaultName(): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setNonmaxSuppression(param0: boolean): void;
					public static create(): org.bytedeco.javacpp.opencv_features2d.AgastFeatureDetector;
					public constructor();
					public static create(param0: number, param1: boolean, param2: number): org.bytedeco.javacpp.opencv_features2d.AgastFeatureDetector;
					public setType(param0: number): void;
					public setThreshold(param0: number): void;
					public getNonmaxSuppression(): boolean;
					public constructor(param0: number);
				}
				export class BFMatcher extends org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.BFMatcher>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public isMaskSupported(): boolean;
					public clone(): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.BFMatcher;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public static create(param0: number, param1: boolean): org.bytedeco.javacpp.opencv_features2d.BFMatcher;
					public constructor(param0: number, param1: boolean);
					public clone(param0: boolean): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public static create(param0: number): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public static create(param0: string): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_features2d.BFMatcher;
					public static create(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public constructor(param0: number);
				}
				export class BOWImgDescriptorExtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.BOWImgDescriptorExtractor>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.IntVectorVector, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.IntVectorVector): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.IntVectorVector): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public descriptorType(): number;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.IntVectorVector, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setVocabulary(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getVocabulary(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher);
					public descriptorSize(): number;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.IntVectorVector): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.IntVectorVector, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher);
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class BOWKMeansTrainer extends org.bytedeco.javacpp.opencv_features2d.BOWTrainer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.BOWKMeansTrainer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public cluster(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number, param1: org.bytedeco.javacpp.opencv_core.TermCriteria, param2: number, param3: number);
					public cluster(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number);
				}
				export class BOWTrainer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.BOWTrainer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public cluster(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public clear(): void;
					public add(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getDescriptors(): org.bytedeco.javacpp.opencv_core.MatVector;
					public descriptorsCount(): number;
					public cluster(): org.bytedeco.javacpp.opencv_core.Mat;
				}
				export class BRISK extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.BRISK>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public static create(param0: native.Array<number>, param1: native.Array<number>, param2: number, param3: number, param4: native.Array<number>): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public static create(param0: java.nio.FloatBuffer, param1: java.nio.IntBuffer, param2: number, param3: number, param4: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public getDefaultName(): org.bytedeco.javacpp.BytePointer;
					public static create(): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public constructor();
					public static create(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.IntBuffer, param4: number, param5: number, param6: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public static create(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: java.nio.FloatBuffer, param1: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public static create(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>, param4: number, param5: number, param6: native.Array<number>): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public static create(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public static create(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: number, param4: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public setThreshold(param0: number): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public static create(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.IntPointer, param4: number, param5: number, param6: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public getOctaves(): number;
					public getThreshold(): number;
					public static create(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public static create(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public static create(param0: native.Array<number>, param1: native.Array<number>): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public static create(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_features2d.BRISK;
					public setOctaves(param0: number): void;
				}
				export class DescriptorMatcher extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher>;
					public static FLANNBASED: number;
					public static BRUTEFORCE: number;
					public static BRUTEFORCE_L1: number;
					public static BRUTEFORCE_HAMMING: number;
					public static BRUTEFORCE_HAMMINGLUT: number;
					public static BRUTEFORCE_SL2: number;
					public match(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: boolean): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number): void;
					public add(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public empty(): boolean;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: boolean): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: boolean): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: boolean): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public write(param0: string): void;
					public static create(param0: string): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public constructor();
					public getTrainDescriptors(): org.bytedeco.javacpp.opencv_core.MatVector;
					public match(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.DMatchVector, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: boolean): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: boolean): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number): void;
					public read(param0: org.bytedeco.javacpp.BytePointer): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: boolean): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: boolean): void;
					public write(param0: org.bytedeco.javacpp.BytePointer): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: boolean): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: boolean): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: boolean): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: boolean): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number): void;
					public train(): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: boolean): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
					public isMaskSupported(): boolean;
					public match(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: boolean): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: boolean): void;
					public clone(param0: boolean): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public match(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVector, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public static create(param0: number): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public match(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public read(param0: string): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public clear(): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: boolean): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: boolean): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: boolean): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: boolean): void;
					public static create(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public clone(): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public match(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: boolean): void;
					public knnMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: boolean): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: boolean): void;
					public add(param0: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: boolean): void;
					public add(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public radiusMatch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVectorVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: boolean): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public match(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.DMatchVector, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
				}
				export class FastFeatureDetector extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.FastFeatureDetector>;
					public static TYPE_5_8: number;
					public static TYPE_7_12: number;
					public static TYPE_9_16: number;
					public static THRESHOLD: number;
					public static NONMAX_SUPPRESSION: number;
					public static FAST_N: number;
					public getThreshold(): number;
					public getType(): number;
					public getDefaultName(): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setNonmaxSuppression(param0: boolean): void;
					public constructor();
					public setType(param0: number): void;
					public setThreshold(param0: number): void;
					public getNonmaxSuppression(): boolean;
					public constructor(param0: number);
					public static create(param0: number, param1: boolean, param2: number): org.bytedeco.javacpp.opencv_features2d.FastFeatureDetector;
					public static create(): org.bytedeco.javacpp.opencv_features2d.FastFeatureDetector;
				}
				export class Feature2D extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.Feature2D>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public empty(): boolean;
					public detect(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public descriptorSize(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector): void;
					public getDefaultName(): org.bytedeco.javacpp.BytePointer;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public defaultNorm(): number;
					public write(param0: string): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public read(param0: string): void;
					public constructor();
					public compute(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: boolean): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector): void;
					public constructor(param0: number);
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
					public read(param0: org.bytedeco.javacpp.BytePointer): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public descriptorType(): number;
					public write(param0: org.bytedeco.javacpp.BytePointer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: boolean): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: boolean): void;
				}
				export class FlannBasedMatcher extends org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.FlannBasedMatcher>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.FlannBasedMatcher;
					public isMaskSupported(): boolean;
					public add(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public clone(param0: boolean): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public static create(param0: number): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public write(param0: string): void;
					public read(param0: string): void;
					public static create(param0: string): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public constructor();
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public clear(): void;
					public static create(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public constructor(param0: number);
					public read(param0: org.bytedeco.javacpp.BytePointer): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public clone(): org.bytedeco.javacpp.opencv_features2d.DescriptorMatcher;
					public write(param0: org.bytedeco.javacpp.BytePointer): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public constructor(param0: org.bytedeco.javacpp.opencv_flann.IndexParams, param1: org.bytedeco.javacpp.opencv_flann.SearchParams);
					public static create(): org.bytedeco.javacpp.opencv_features2d.FlannBasedMatcher;
					public add(param0: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public add(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public train(): void;
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
				}
				export class GFTTDetector extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.GFTTDetector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setHarrisDetector(param0: boolean): void;
					public setMaxFeatures(param0: number): void;
					public setK(param0: number): void;
					public setMinDistance(param0: number): void;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: boolean, param5: number): org.bytedeco.javacpp.opencv_features2d.GFTTDetector;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_features2d.GFTTDetector;
					public static create(): org.bytedeco.javacpp.opencv_features2d.GFTTDetector;
					public getMaxFeatures(): number;
					public getDefaultName(): org.bytedeco.javacpp.BytePointer;
					public getQualityLevel(): number;
					public getMinDistance(): number;
					public setBlockSize(param0: number): void;
					public getK(): number;
					public constructor();
					public getHarrisDetector(): boolean;
					public getBlockSize(): number;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: boolean, param6: number): org.bytedeco.javacpp.opencv_features2d.GFTTDetector;
					public setQualityLevel(param0: number): void;
					public constructor(param0: number);
				}
				export class KAZE extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.KAZE>;
					public static DIFF_PM_G1: number;
					public static DIFF_PM_G2: number;
					public static DIFF_WEICKERT: number;
					public static DIFF_CHARBONNIER: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_features2d.KAZE;
					public getUpright(): boolean;
					public setThreshold(param0: number): void;
					public getExtended(): boolean;
					public getThreshold(): number;
					public setNOctaves(param0: number): void;
					public getDefaultName(): org.bytedeco.javacpp.BytePointer;
					public setNOctaveLayers(param0: number): void;
					public setDiffusivity(param0: number): void;
					public getNOctaveLayers(): number;
					public static create(param0: boolean, param1: boolean, param2: number, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_features2d.KAZE;
					public constructor();
					public getDiffusivity(): number;
					public setExtended(param0: boolean): void;
					public constructor(param0: number);
					public setUpright(param0: boolean): void;
					public getNOctaves(): number;
				}
				export class KeyPointsFilter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.KeyPointsFilter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public static runByKeypointSize(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector, param1: number, param2: number): void;
					public static removeDuplicated(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
					public static retainBest(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector, param1: number): void;
					public static runByImageBorder(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number): void;
					public static runByKeypointSize(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector, param1: number): void;
					public static removeDuplicatedSorted(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.KeyPointsFilter;
					public static runByPixelsMask(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export class MSER extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.MSER>;
					public detectRegions(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVectorVector, param2: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public setPass2Only(param0: boolean): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): org.bytedeco.javacpp.opencv_features2d.MSER;
					public getDelta(): number;
					public getPass2Only(): boolean;
					public getMaxArea(): number;
					public detectRegions(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVectorVector, param2: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public getDefaultName(): org.bytedeco.javacpp.BytePointer;
					public static create(): org.bytedeco.javacpp.opencv_features2d.MSER;
					public setMaxArea(param0: number): void;
					public setDelta(param0: number): void;
					public constructor();
					public getMinArea(): number;
					public constructor(param0: number);
					public detectRegions(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVectorVector, param2: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public setMinArea(param0: number): void;
				}
				export class ORB extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.ORB>;
					public static HARRIS_SCORE: number;
					public static FAST_SCORE: number;
					public setScoreType(param0: number): void;
					public getFastThreshold(): number;
					public setFirstLevel(param0: number): void;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): org.bytedeco.javacpp.opencv_features2d.ORB;
					public setScaleFactor(param0: number): void;
					public getWTA_K(): number;
					public getDefaultName(): org.bytedeco.javacpp.BytePointer;
					public getScoreType(): number;
					public getFirstLevel(): number;
					public getScaleFactor(): number;
					public constructor();
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_features2d.ORB;
					public setEdgeThreshold(param0: number): void;
					public setNLevels(param0: number): void;
					public setPatchSize(param0: number): void;
					public setMaxFeatures(param0: number): void;
					public getMaxFeatures(): number;
					public getNLevels(): number;
					public setWTA_K(param0: number): void;
					public getPatchSize(): number;
					public setFastThreshold(param0: number): void;
					public getEdgeThreshold(): number;
					public static kBytes(): number;
				}
				export class SimpleBlobDetector extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public getDefaultName(): org.bytedeco.javacpp.BytePointer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector;
					public static create(): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector;
				}
				export module SimpleBlobDetector {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params>;
						public filterByCircularity(): boolean;
						public maxCircularity(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public minArea(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public minRepeatability(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public filterByInertia(param0: boolean): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public minThreshold(): number;
						public minThreshold(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public filterByConvexity(param0: boolean): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public maxThreshold(): number;
						public thresholdStep(): number;
						public maxConvexity(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public minDistBetweenBlobs(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public blobColor(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
						public filterByInertia(): boolean;
						public maxArea(): number;
						public minRepeatability(): number;
						public filterByCircularity(param0: boolean): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public filterByArea(): boolean;
						public filterByArea(param0: boolean): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public maxInertiaRatio(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public minDistBetweenBlobs(): number;
						public minInertiaRatio(): number;
						public position(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public blobColor(): number;
						public filterByColor(): boolean;
						public maxInertiaRatio(): number;
						public constructor();
						public minCircularity(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public filterByConvexity(): boolean;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public filterByColor(param0: boolean): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public minConvexity(): number;
						public minInertiaRatio(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public maxThreshold(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public maxArea(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public minConvexity(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
						public maxCircularity(): number;
						public minCircularity(): number;
						public constructor(param0: number);
						public maxConvexity(): number;
						public minArea(): number;
						public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
						public thresholdStep(param0: number): org.bytedeco.javacpp.opencv_features2d.SimpleBlobDetector.Params;
					}
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_flann extends org.bytedeco.javacpp.presets.opencv_flann {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann>;
				public static FLANN_INDEX_LINEAR: number;
				public static FLANN_INDEX_KDTREE: number;
				public static FLANN_INDEX_KMEANS: number;
				public static FLANN_INDEX_COMPOSITE: number;
				public static FLANN_INDEX_KDTREE_SINGLE: number;
				public static FLANN_INDEX_HIERARCHICAL: number;
				public static FLANN_INDEX_LSH: number;
				public static FLANN_INDEX_SAVED: number;
				public static FLANN_INDEX_AUTOTUNED: number;
				public static LINEAR: number;
				public static KDTREE: number;
				public static KMEANS: number;
				public static COMPOSITE: number;
				public static KDTREE_SINGLE: number;
				public static SAVED: number;
				public static AUTOTUNED: number;
				public static FLANN_CENTERS_RANDOM: number;
				public static FLANN_CENTERS_GONZALES: number;
				public static FLANN_CENTERS_KMEANSPP: number;
				public static FLANN_CENTERS_GROUPWISE: number;
				public static CENTERS_RANDOM: number;
				public static CENTERS_GONZALES: number;
				public static CENTERS_KMEANSPP: number;
				public static FLANN_LOG_NONE: number;
				public static FLANN_LOG_FATAL: number;
				public static FLANN_LOG_ERROR: number;
				public static FLANN_LOG_WARN: number;
				public static FLANN_LOG_INFO: number;
				public static FLANN_DIST_EUCLIDEAN: number;
				public static FLANN_DIST_L2: number;
				public static FLANN_DIST_MANHATTAN: number;
				public static FLANN_DIST_L1: number;
				public static FLANN_DIST_MINKOWSKI: number;
				public static FLANN_DIST_MAX: number;
				public static FLANN_DIST_HIST_INTERSECT: number;
				public static FLANN_DIST_HELLINGER: number;
				public static FLANN_DIST_CHI_SQUARE: number;
				public static FLANN_DIST_CS: number;
				public static FLANN_DIST_KULLBACK_LEIBLER: number;
				public static FLANN_DIST_KL: number;
				public static FLANN_DIST_HAMMING: number;
				public static EUCLIDEAN: number;
				public static MANHATTAN: number;
				public static MINKOWSKI: number;
				public static MAX_DIST: number;
				public static HIST_INTERSECT: number;
				public static HELLINGER: number;
				public static CS: number;
				public static KL: number;
				public static KULLBACK_LEIBLER: number;
				public static FLANN_INT8: number;
				public static FLANN_INT16: number;
				public static FLANN_INT32: number;
				public static FLANN_INT64: number;
				public static FLANN_UINT8: number;
				public static FLANN_UINT16: number;
				public static FLANN_UINT32: number;
				public static FLANN_UINT64: number;
				public static FLANN_FLOAT32: number;
				public static FLANN_FLOAT64: number;
				public static FLANN_CHECKS_UNLIMITED: number;
				public static FLANN_CHECKS_AUTOTUNED: number;
				public static FLANN_INDEX_TYPE_8U: number;
				public static FLANN_INDEX_TYPE_8S: number;
				public static FLANN_INDEX_TYPE_16U: number;
				public static FLANN_INDEX_TYPE_16S: number;
				public static FLANN_INDEX_TYPE_32S: number;
				public static FLANN_INDEX_TYPE_32F: number;
				public static FLANN_INDEX_TYPE_64F: number;
				public static FLANN_INDEX_TYPE_STRING: number;
				public static FLANN_INDEX_TYPE_BOOL: number;
				public static FLANN_INDEX_TYPE_ALGORITHM: number;
				public static LAST_VALUE_FLANN_INDEX_TYPE: number;
				public constructor();
			}
			export module opencv_flann {
				export class AutotunedIndexParams extends org.bytedeco.javacpp.opencv_flann.IndexParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann.AutotunedIndexParams>;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.IndexParams;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.AutotunedIndexParams;
					public constructor(param0: number);
				}
				export class CompositeIndexParams extends org.bytedeco.javacpp.opencv_flann.IndexParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann.CompositeIndexParams>;
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.IndexParams;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.CompositeIndexParams;
					public constructor(param0: number);
				}
				export class HierarchicalClusteringIndexParams extends org.bytedeco.javacpp.opencv_flann.IndexParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann.HierarchicalClusteringIndexParams>;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.IndexParams;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.HierarchicalClusteringIndexParams;
					public constructor(param0: number);
				}
				export class Index {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann.Index>;
					public build(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams): void;
					public build(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams, param2: number): void;
					public knnSearch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams, param2: number);
					public knnSearch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_flann.SearchParams): void;
					public getAlgorithm(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.Index;
					public load(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.BytePointer): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams, param2: number);
					public load(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer): boolean;
					public radiusSearch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_flann.SearchParams): number;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams);
					public build(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams): void;
					public knnSearch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_flann.SearchParams): void;
					public load(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: string): boolean;
					public constructor(param0: number);
					public radiusSearch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): number;
					public radiusSearch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_flann.SearchParams): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public knnSearch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_flann.SearchParams): void;
					public load(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: string): boolean;
					public getDistance(): number;
					public load(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: string): boolean;
					public radiusSearch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): number;
					public save(param0: string): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams, param2: number);
					public build(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams, param2: number): void;
					public release(): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams);
					public knnSearch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
					public radiusSearch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_flann.SearchParams): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams);
					public build(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams): void;
					public load(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.BytePointer): boolean;
					public radiusSearch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): number;
					public build(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_flann.IndexParams, param2: number): void;
					public knnSearch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
					public save(param0: org.bytedeco.javacpp.BytePointer): void;
				}
				export class IndexParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann.IndexParams>;
					public getDouble(param0: string, param1: number): number;
					public setBool(param0: string, param1: boolean): void;
					public getAll(param0: org.bytedeco.javacpp.opencv_core.StringVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.StringVector, param3: java.nio.DoubleBuffer): void;
					public getString(param0: string, param1: string): string;
					public setString(param0: string, param1: string): void;
					public constructor();
					public getAll(param0: org.bytedeco.javacpp.opencv_core.StringVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.StringVector, param3: native.Array<number>): void;
					public getInt(param0: org.bytedeco.javacpp.BytePointer): number;
					public params(): org.bytedeco.javacpp.Pointer;
					public setBool(param0: org.bytedeco.javacpp.BytePointer, param1: boolean): void;
					public constructor(param0: number);
					public setDouble(param0: org.bytedeco.javacpp.BytePointer, param1: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.IndexParams;
					public setDouble(param0: string, param1: number): void;
					public getInt(param0: string): number;
					public setAlgorithm(param0: number): void;
					public setString(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
					public getAll(param0: org.bytedeco.javacpp.opencv_core.StringVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.StringVector, param3: org.bytedeco.javacpp.DoublePointer): void;
					public getString(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
					public getString(param0: string): string;
					public getDouble(param0: org.bytedeco.javacpp.BytePointer, param1: number): number;
					public getDouble(param0: org.bytedeco.javacpp.BytePointer): number;
					public getString(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.BytePointer;
					public setInt(param0: org.bytedeco.javacpp.BytePointer, param1: number): void;
					public setFloat(param0: string, param1: number): void;
					public getDouble(param0: string): number;
					public setFloat(param0: org.bytedeco.javacpp.BytePointer, param1: number): void;
					public getInt(param0: org.bytedeco.javacpp.BytePointer, param1: number): number;
					public params(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.opencv_flann.IndexParams;
					public getInt(param0: string, param1: number): number;
					public setInt(param0: string, param1: number): void;
				}
				export class KDTreeIndexParams extends org.bytedeco.javacpp.opencv_flann.IndexParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann.KDTreeIndexParams>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.IndexParams;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.KDTreeIndexParams;
					public constructor(param0: number);
				}
				export class KMeansIndexParams extends org.bytedeco.javacpp.opencv_flann.IndexParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann.KMeansIndexParams>;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.IndexParams;
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.KMeansIndexParams;
					public constructor();
					public constructor(param0: number);
				}
				export class LinearIndexParams extends org.bytedeco.javacpp.opencv_flann.IndexParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann.LinearIndexParams>;
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.LinearIndexParams;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.IndexParams;
					public constructor();
					public constructor(param0: number);
				}
				export class LshIndexParams extends org.bytedeco.javacpp.opencv_flann.IndexParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann.LshIndexParams>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public constructor(param0: number);
				}
				export class SavedIndexParams extends org.bytedeco.javacpp.opencv_flann.IndexParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann.SavedIndexParams>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public constructor(param0: string);
					public constructor();
					public constructor(param0: number);
				}
				export class SearchParams extends org.bytedeco.javacpp.opencv_flann.IndexParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_flann.SearchParams>;
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.SearchParams;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_flann.IndexParams;
					public constructor(param0: number, param1: number, param2: boolean);
					public constructor();
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_highgui extends org.bytedeco.javacpp.presets.opencv_highgui {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui>;
				public static CV_FONT_LIGHT: number;
				public static CV_FONT_NORMAL: number;
				public static CV_FONT_DEMIBOLD: number;
				public static CV_FONT_BOLD: number;
				public static CV_FONT_BLACK: number;
				public static CV_STYLE_NORMAL: number;
				public static CV_STYLE_ITALIC: number;
				public static CV_STYLE_OBLIQUE: number;
				public static CV_PUSH_BUTTON: number;
				public static CV_CHECKBOX: number;
				public static CV_RADIOBOX: number;
				public static CV_WND_PROP_FULLSCREEN: number;
				public static CV_WND_PROP_AUTOSIZE: number;
				public static CV_WND_PROP_ASPECTRATIO: number;
				public static CV_WND_PROP_OPENGL: number;
				public static CV_WND_PROP_VISIBLE: number;
				public static CV_WINDOW_NORMAL: number;
				public static CV_WINDOW_AUTOSIZE: number;
				public static CV_WINDOW_OPENGL: number;
				public static CV_GUI_EXPANDED: number;
				public static CV_GUI_NORMAL: number;
				public static CV_WINDOW_FULLSCREEN: number;
				public static CV_WINDOW_FREERATIO: number;
				public static CV_WINDOW_KEEPRATIO: number;
				public static CV_EVENT_MOUSEMOVE: number;
				public static CV_EVENT_LBUTTONDOWN: number;
				public static CV_EVENT_RBUTTONDOWN: number;
				public static CV_EVENT_MBUTTONDOWN: number;
				public static CV_EVENT_LBUTTONUP: number;
				public static CV_EVENT_RBUTTONUP: number;
				public static CV_EVENT_MBUTTONUP: number;
				public static CV_EVENT_LBUTTONDBLCLK: number;
				public static CV_EVENT_RBUTTONDBLCLK: number;
				public static CV_EVENT_MBUTTONDBLCLK: number;
				public static CV_EVENT_MOUSEWHEEL: number;
				public static CV_EVENT_MOUSEHWHEEL: number;
				public static CV_EVENT_FLAG_LBUTTON: number;
				public static CV_EVENT_FLAG_RBUTTON: number;
				public static CV_EVENT_FLAG_MBUTTON: number;
				public static CV_EVENT_FLAG_CTRLKEY: number;
				public static CV_EVENT_FLAG_SHIFTKEY: number;
				public static CV_EVENT_FLAG_ALTKEY: number;
				public static HG_AUTOSIZE: number;
				public static WINDOW_NORMAL: number;
				public static WINDOW_AUTOSIZE: number;
				public static WINDOW_OPENGL: number;
				public static WINDOW_FULLSCREEN: number;
				public static WINDOW_FREERATIO: number;
				public static WINDOW_KEEPRATIO: number;
				public static WINDOW_GUI_EXPANDED: number;
				public static WINDOW_GUI_NORMAL: number;
				public static WND_PROP_FULLSCREEN: number;
				public static WND_PROP_AUTOSIZE: number;
				public static WND_PROP_ASPECT_RATIO: number;
				public static WND_PROP_OPENGL: number;
				public static WND_PROP_VISIBLE: number;
				public static EVENT_MOUSEMOVE: number;
				public static EVENT_LBUTTONDOWN: number;
				public static EVENT_RBUTTONDOWN: number;
				public static EVENT_MBUTTONDOWN: number;
				public static EVENT_LBUTTONUP: number;
				public static EVENT_RBUTTONUP: number;
				public static EVENT_MBUTTONUP: number;
				public static EVENT_LBUTTONDBLCLK: number;
				public static EVENT_RBUTTONDBLCLK: number;
				public static EVENT_MBUTTONDBLCLK: number;
				public static EVENT_MOUSEWHEEL: number;
				public static EVENT_MOUSEHWHEEL: number;
				public static EVENT_FLAG_LBUTTON: number;
				public static EVENT_FLAG_RBUTTON: number;
				public static EVENT_FLAG_MBUTTON: number;
				public static EVENT_FLAG_CTRLKEY: number;
				public static EVENT_FLAG_SHIFTKEY: number;
				public static EVENT_FLAG_ALTKEY: number;
				public static QT_FONT_LIGHT: number;
				public static QT_FONT_NORMAL: number;
				public static QT_FONT_DEMIBOLD: number;
				public static QT_FONT_BOLD: number;
				public static QT_FONT_BLACK: number;
				public static QT_STYLE_NORMAL: number;
				public static QT_STYLE_ITALIC: number;
				public static QT_STYLE_OBLIQUE: number;
				public static QT_PUSH_BUTTON: number;
				public static QT_CHECKBOX: number;
				public static QT_RADIOBOX: number;
				public static QT_NEW_BUTTONBAR: number;
				public static cvCreateButton(param0: string, param1: org.bytedeco.javacpp.opencv_highgui.CvButtonCallback, param2: org.bytedeco.javacpp.Pointer, param3: number, param4: number): number;
				public static cvCreateTrackbar(param0: string, param1: string, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static cvvWaitKeyEx(param0: org.bytedeco.javacpp.BytePointer, param1: number): number;
				public static cvCreateTrackbar2(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2, param5: org.bytedeco.javacpp.Pointer): number;
				public static cvAddText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: string, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont): void;
				public static cvSetOpenGlDrawCallback(param0: string, param1: org.bytedeco.javacpp.opencv_highgui.CvOpenGlDrawCallback, param2: org.bytedeco.javacpp.Pointer): void;
				public static cvFontQt(param0: string): org.bytedeco.javacpp.opencv_imgproc.CvFont;
				public static displayOverlay(param0: string, param1: string): void;
				public static cvInitSystem(param0: number, param1: org.bytedeco.javacpp.BytePointer): number;
				public static cvResizeWindow(param0: string, param1: number, param2: number): void;
				public static selectROI(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvSetOpenGlContext(param0: org.bytedeco.javacpp.BytePointer): void;
				public static cvvAddSearchPath(param0: org.bytedeco.javacpp.BytePointer): void;
				public static selectROIs(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: boolean, param4: boolean): void;
				public static cvAddText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: string, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont): void;
				public static setOpenGlDrawCallback(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_highgui.OpenGlDrawCallback, param2: org.bytedeco.javacpp.Pointer): void;
				public static cvSetOpenGlDrawCallback(param0: string, param1: org.bytedeco.javacpp.opencv_highgui.CvOpenGlDrawCallback): void;
				public static cvFontQt(param0: string, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
				public static cvShowImage(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static setTrackbarMin(param0: string, param1: string, param2: number): void;
				public static selectROI(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean, param2: boolean): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvCreateTrackbar(param0: string, param1: string, param2: org.bytedeco.javacpp.IntPointer, param3: number): number;
				public static getTrackbarPos(param0: string, param1: string): number;
				public static imshow(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static setOpenGlContext(param0: org.bytedeco.javacpp.BytePointer): void;
				public static startLoop(param0: org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer): number;
				public static cvGetWindowImageRect(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.Rect;
				public static addText(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.BytePointer, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static selectROIs(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: boolean, param4: boolean): void;
				public static loadWindowParameters(param0: string): void;
				public static cvvNamedWindow(param0: org.bytedeco.javacpp.BytePointer, param1: number): void;
				public static cvCreateTrackbar(param0: string, param1: string, param2: native.Array<number>, param3: number): number;
				public static cvWaitKey(): number;
				public static cvAddText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: string, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont): void;
				public static cvStopLoop(): void;
				public static cvSetTrackbarPos(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static cvCreateTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.IntPointer, param3: number): number;
				public static fontQt(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_highgui.QtFont;
				public static selectROI(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
				public static saveWindowParameters(param0: string): void;
				public static selectROI(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: boolean, param3: boolean): org.bytedeco.javacpp.opencv_core.Rect;
				public static selectROI(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvvCreateTrackbar(param0: string, param1: string, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static imshow(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvvShowImage(param0: string, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvUpdateWindow(param0: string): void;
				public static selectROIs(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static cvCreateTrackbar2(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2, param5: org.bytedeco.javacpp.Pointer): number;
				public static cvMoveWindow(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number): void;
				public static selectROI(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
				public static namedWindow(param0: string): void;
				public static createTrackbar(param0: string, param1: string, param2: org.bytedeco.javacpp.IntPointer, param3: number): number;
				public static selectROI(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: boolean, param3: boolean): org.bytedeco.javacpp.opencv_core.Rect;
				public static selectROIs(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static cvStartLoop(param0: org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_PointerPointer, param1: number, param2: org.bytedeco.javacpp.PointerPointer<any>): number;
				public static cvvShowImage(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvvCreateTrackbar(param0: string, param1: string, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static createButton(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_highgui.ButtonCallback, param2: org.bytedeco.javacpp.Pointer, param3: number, param4: boolean): number;
				public static updateWindow(param0: org.bytedeco.javacpp.BytePointer): void;
				public static waitKeyEx(param0: number): number;
				public static cvNamedWindow(param0: org.bytedeco.javacpp.BytePointer, param1: number): number;
				public static cvDestroyWindow(param0: org.bytedeco.javacpp.BytePointer): void;
				public static setWindowProperty(param0: string, param1: number, param2: number): void;
				public static cvvResizeWindow(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number): void;
				public static loadWindowParameters(param0: org.bytedeco.javacpp.BytePointer): void;
				public static cvSetTrackbarMin(param0: string, param1: string, param2: number): void;
				public static selectROI(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvAddSearchPath(param0: string): void;
				public static cvvAddSearchPath(param0: string): void;
				public static cvShowImage(param0: string, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static displayStatusBar(param0: string, param1: string, param2: number): void;
				public static selectROI(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean, param2: boolean): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvCreateTrackbar2(param0: string, param1: string, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2, param5: org.bytedeco.javacpp.Pointer): number;
				public static selectROI(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvCreateTrackbar(param0: string, param1: string, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static cvResizeWindow(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number): void;
				public static cvLoadWindowParameters(param0: org.bytedeco.javacpp.BytePointer): void;
				public static cvCreateTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.IntBuffer, param3: number): number;
				public static addText(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: string, param2: org.bytedeco.javacpp.opencv_core.Point, param3: string): void;
				public static cvSaveWindowParameters(param0: org.bytedeco.javacpp.BytePointer): void;
				public static imshow(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static setWindowTitle(param0: string, param1: string): void;
				public static setTrackbarPos(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static cvInitSystem(param0: number, param1: native.Array<number>): number;
				public static cvCreateTrackbar2(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2): number;
				public static createTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: number): number;
				public static cvGetWindowImageRect(param0: string): org.bytedeco.javacpp.opencv_core.Rect;
				public static selectROI(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvCreateTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static cvvInitSystem(param0: number, param1: java.nio.ByteBuffer): number;
				public static cvSetOpenGlDrawCallback(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_highgui.CvOpenGlDrawCallback, param2: org.bytedeco.javacpp.Pointer): void;
				public static addText(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: string, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_highgui.QtFont): void;
				public static cvAddSearchPath(param0: org.bytedeco.javacpp.BytePointer): void;
				public static setMouseCallback(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_highgui.MouseCallback): void;
				public static cvvInitSystem(param0: number, param1: org.bytedeco.javacpp.PointerPointer<any>): number;
				public static setOpenGlDrawCallback(param0: string, param1: org.bytedeco.javacpp.opencv_highgui.OpenGlDrawCallback, param2: org.bytedeco.javacpp.Pointer): void;
				public static imshow(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvSetWindowProperty(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number): void;
				public static moveWindow(param0: string, param1: number, param2: number): void;
				public static cvNamedWindow(param0: org.bytedeco.javacpp.BytePointer): number;
				public static cvNamedWindow(param0: string, param1: number): number;
				public static imshow(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvCreateTrackbar2(param0: string, param1: string, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2): number;
				public static destroyAllWindows(): void;
				public static selectROI(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: boolean, param3: boolean): org.bytedeco.javacpp.opencv_core.Rect;
				public static getWindowImageRect(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.Rect;
				public static selectROI(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvvCreateTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static selectROI(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: boolean, param3: boolean): org.bytedeco.javacpp.opencv_core.Rect;
				public static waitKey(): number;
				public static namedWindow(param0: org.bytedeco.javacpp.BytePointer, param1: number): void;
				public static cvStartLoop(param0: org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_ByteBuffer, param1: number, param2: java.nio.ByteBuffer): number;
				public static setMouseCallback(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_highgui.MouseCallback, param2: org.bytedeco.javacpp.Pointer): void;
				public static saveWindowParameters(param0: org.bytedeco.javacpp.BytePointer): void;
				public static selectROI(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvCreateButton(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_highgui.CvButtonCallback, param2: org.bytedeco.javacpp.Pointer, param3: number, param4: number): number;
				public static cvDisplayStatusBar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static cvCreateTrackbar2(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2): number;
				public static displayStatusBar(param0: string, param1: string): void;
				public static cvSetTrackbarMax(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static cvWaitKey(param0: number): number;
				public static getWindowImageRect(param0: string): org.bytedeco.javacpp.opencv_core.Rect;
				public static selectROIs(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static destroyWindow(param0: string): void;
				public static cvNamedWindow(param0: string): number;
				public static cvvCreateTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static cvDisplayStatusBar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
				public static cvInitSystem(param0: number, param1: org.bytedeco.javacpp.PointerPointer<any>): number;
				public static imshow(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Texture2D): void;
				public static createTrackbar(param0: string, param1: string, param2: java.nio.IntBuffer, param3: number): number;
				public static cvGetWindowProperty(param0: string, param1: number): number;
				public static cvvWaitKey(param0: org.bytedeco.javacpp.BytePointer): number;
				public static selectROIs(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: boolean, param4: boolean): void;
				public static setMouseCallback(param0: string, param1: org.bytedeco.javacpp.opencv_highgui.MouseCallback): void;
				public static createTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.IntBuffer, param3: number): number;
				public static cvStartLoop(param0: org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_byte__, param1: number, param2: native.Array<number>): number;
				public static createTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.TrackbarCallback, param5: org.bytedeco.javacpp.Pointer): number;
				public static addText(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_highgui.QtFont): void;
				public static displayStatusBar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
				public static cvInitSystem(param0: number, param1: java.nio.ByteBuffer): number;
				public static setTrackbarMax(param0: string, param1: string, param2: number): void;
				public static cvAddText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont): void;
				public static cvDisplayOverlay(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static namedWindow(param0: string, param1: number): void;
				public static selectROIs(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static selectROI(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean, param2: boolean): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvLoadWindowParameters(param0: string): void;
				public static cvSetTrackbarMax(param0: string, param1: string, param2: number): void;
				public static cvCreateTrackbar2(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2): number;
				public static selectROIs(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: boolean, param4: boolean): void;
				public static fontQt(param0: string): org.bytedeco.javacpp.opencv_highgui.QtFont;
				public static selectROIs(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static cvSaveWindowParameters(param0: string): void;
				public static cvStartWindowThread(): number;
				public static cvUpdateWindow(param0: org.bytedeco.javacpp.BytePointer): void;
				public static setOpenGlDrawCallback(param0: string, param1: org.bytedeco.javacpp.opencv_highgui.OpenGlDrawCallback): void;
				public static selectROIs(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: boolean, param4: boolean): void;
				public static cvDisplayStatusBar(param0: string, param1: string): void;
				public static cvDestroyWindow(param0: string): void;
				public static cvCreateButton(): number;
				public static cvSetTrackbarMin(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static setOpenGlDrawCallback(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_highgui.OpenGlDrawCallback): void;
				public static cvSetOpenGlContext(param0: string): void;
				public static cvDisplayOverlay(param0: string, param1: string): void;
				public static destroyWindow(param0: org.bytedeco.javacpp.BytePointer): void;
				public static cvSetMouseCallback(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_highgui.CvMouseCallback): void;
				public static cvGetTrackbarPos(param0: string, param1: string): number;
				public static updateWindow(param0: string): void;
				public static addText(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.BytePointer): void;
				public static displayOverlay(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static createTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.TrackbarCallback, param5: org.bytedeco.javacpp.Pointer): number;
				public static cvvWaitKeyEx(param0: string, param1: number): number;
				public static getMouseWheelDelta(param0: number): number;
				public static cvvInitSystem(param0: number, param1: org.bytedeco.javacpp.BytePointer): number;
				public static cvCreateTrackbar(param0: string, param1: string, param2: java.nio.IntBuffer, param3: number): number;
				public static waitKeyEx(): number;
				public static startWindowThread(): number;
				public static cvSetTrackbarPos(param0: string, param1: string, param2: number): void;
				public static fontQt(param0: string, param1: number, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_highgui.QtFont;
				public static createTrackbar(param0: string, param1: string, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.TrackbarCallback, param5: org.bytedeco.javacpp.Pointer): number;
				public static cvvNamedWindow(param0: string, param1: number): void;
				public static displayOverlay(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
				public static createTrackbar(param0: string, param1: string, param2: native.Array<number>, param3: number): number;
				public static cvCreateTrackbar2(param0: string, param1: string, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2): number;
				public static stopLoop(): void;
				public static cvGetWindowProperty(param0: org.bytedeco.javacpp.BytePointer, param1: number): number;
				public static cvCreateTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static cvStartLoop(param0: org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_BytePointer, param1: number, param2: org.bytedeco.javacpp.BytePointer): number;
				public static cvDestroyAllWindows(): void;
				public static setTrackbarMax(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static moveWindow(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number): void;
				public static createTrackbar(param0: string, param1: string, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.TrackbarCallback, param5: org.bytedeco.javacpp.Pointer): number;
				public constructor();
				public static cvvCreateTrackbar(param0: string, param1: string, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static resizeWindow(param0: string, param1: org.bytedeco.javacpp.opencv_core.Size): void;
				public static setWindowProperty(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number): void;
				public static displayOverlay(param0: string, param1: string, param2: number): void;
				public static cvSetMouseCallback(param0: string, param1: org.bytedeco.javacpp.opencv_highgui.CvMouseCallback): void;
				public static cvGetTrackbarPos(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): number;
				public static getWindowProperty(param0: string, param1: number): number;
				public static displayStatusBar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static cvAddText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont): void;
				public static cvGetWindowHandle(param0: string): org.bytedeco.javacpp.Pointer;
				public static setWindowTitle(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
				public static cvvResizeWindow(param0: string, param1: number, param2: number): void;
				public static cvvDestroyWindow(param0: string): void;
				public static cvSetWindowProperty(param0: string, param1: number, param2: number): void;
				public static imshow(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static setTrackbarMin(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): void;
				public static cvCreateTrackbar2(param0: string, param1: string, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2, param5: org.bytedeco.javacpp.Pointer): number;
				public static cvDisplayOverlay(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
				public static addText(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: string, param2: org.bytedeco.javacpp.opencv_core.Point, param3: string, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static setMouseCallback(param0: string, param1: org.bytedeco.javacpp.opencv_highgui.MouseCallback, param2: org.bytedeco.javacpp.Pointer): void;
				public static fontQt(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_highgui.QtFont;
				public static startLoop(param0: org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_PointerPointer, param1: number, param2: org.bytedeco.javacpp.PointerPointer<any>): number;
				public static getTrackbarPos(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): number;
				public static setTrackbarPos(param0: string, param1: string, param2: number): void;
				public static cvvWaitKey(param0: string): number;
				public static cvAddText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont): void;
				public static selectROIs(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static cvCreateTrackbar2(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2, param5: org.bytedeco.javacpp.Pointer): number;
				public static namedWindow(param0: org.bytedeco.javacpp.BytePointer): void;
				public static selectROI(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: boolean, param3: boolean): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvCreateTrackbar2(param0: string, param1: string, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2): number;
				public static cvCreateTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: number): number;
				public static cvDisplayOverlay(param0: string, param1: string, param2: number): void;
				public static startLoop(param0: org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_byte__, param1: number, param2: native.Array<number>): number;
				public static cvvCreateTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static cvvDestroyWindow(param0: org.bytedeco.javacpp.BytePointer): void;
				public static imshow(param0: string, param1: org.bytedeco.javacpp.opencv_core.Texture2D): void;
				public static cvDisplayStatusBar(param0: string, param1: string, param2: number): void;
				public static selectROIs(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: boolean, param4: boolean): void;
				public static startLoop(param0: org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_ByteBuffer, param1: number, param2: java.nio.ByteBuffer): number;
				public static createTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.TrackbarCallback, param5: org.bytedeco.javacpp.Pointer): number;
				public static cvSetOpenGlDrawCallback(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_highgui.CvOpenGlDrawCallback): void;
				public static createTrackbar(param0: string, param1: string, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.TrackbarCallback, param5: org.bytedeco.javacpp.Pointer): number;
				public static createButton(param0: string, param1: org.bytedeco.javacpp.opencv_highgui.ButtonCallback, param2: org.bytedeco.javacpp.Pointer, param3: number, param4: boolean): number;
				public static createButton(param0: string, param1: org.bytedeco.javacpp.opencv_highgui.ButtonCallback): number;
				public static resizeWindow(param0: string, param1: number, param2: number): void;
				public static cvCreateTrackbar(param0: string, param1: string, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static resizeWindow(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Size): void;
				public static cvGetWindowName(param0: org.bytedeco.javacpp.Pointer): org.bytedeco.javacpp.BytePointer;
				public static cvCreateTrackbar2(param0: string, param1: string, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2, param5: org.bytedeco.javacpp.Pointer): number;
				public static cvGetWindowHandle(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.Pointer;
				public static cvMoveWindow(param0: string, param1: number, param2: number): void;
				public static cvCreateTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback): number;
				public static cvvInitSystem(param0: number, param1: native.Array<number>): number;
				public static resizeWindow(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number): void;
				public static selectROI(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: boolean, param3: boolean): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvFontQt(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_imgproc.CvFont;
				public static getWindowProperty(param0: org.bytedeco.javacpp.BytePointer, param1: number): number;
				public static setOpenGlContext(param0: string): void;
				public static cvSetMouseCallback(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_highgui.CvMouseCallback, param2: org.bytedeco.javacpp.Pointer): void;
				public static createButton(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_highgui.ButtonCallback): number;
				public static waitKey(param0: number): number;
				public static createTrackbar(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.IntPointer, param3: number): number;
				public static cvFontQt(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
				public static cvSetMouseCallback(param0: string, param1: org.bytedeco.javacpp.opencv_highgui.CvMouseCallback, param2: org.bytedeco.javacpp.Pointer): void;
			}
			export module opencv_highgui {
				export class ButtonCallback {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.ButtonCallback>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: org.bytedeco.javacpp.Pointer): void;
				}
				export class CvButtonCallback {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.CvButtonCallback>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: org.bytedeco.javacpp.Pointer): void;
				}
				export class CvMouseCallback {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.CvMouseCallback>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.Pointer): void;
				}
				export class CvOpenGlDrawCallback {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.CvOpenGlDrawCallback>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: org.bytedeco.javacpp.Pointer): void;
				}
				export class CvTrackbarCallback {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number): void;
				}
				export class CvTrackbarCallback2 {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.CvTrackbarCallback2>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: org.bytedeco.javacpp.Pointer): void;
				}
				export class MouseCallback {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.MouseCallback>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.Pointer): void;
				}
				export class OpenGlDrawCallback {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.OpenGlDrawCallback>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: org.bytedeco.javacpp.Pointer): void;
				}
				export class Pt2Func_int_ByteBuffer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_ByteBuffer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: java.nio.ByteBuffer): number;
				}
				export class Pt2Func_int_BytePointer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_BytePointer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public call(param0: number, param1: org.bytedeco.javacpp.BytePointer): number;
					public constructor();
				}
				export class Pt2Func_int_PointerPointer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_PointerPointer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: org.bytedeco.javacpp.PointerPointer<any>): number;
				}
				export class Pt2Func_int_byte__ {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.Pt2Func_int_byte__>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: native.Array<number>): number;
				}
				export class QtFont {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.QtFont>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public ascii(): org.bytedeco.javacpp.IntPointer;
					public shear(): number;
					public font_face(param0: number): org.bytedeco.javacpp.opencv_highgui.QtFont;
					public vscale(param0: number): org.bytedeco.javacpp.opencv_highgui.QtFont;
					public hscale(): number;
					public shear(param0: number): org.bytedeco.javacpp.opencv_highgui.QtFont;
					public dx(param0: number): org.bytedeco.javacpp.opencv_highgui.QtFont;
					public dx(): number;
					public greek(): org.bytedeco.javacpp.IntPointer;
					public vscale(): number;
					public font_face(): number;
					public thickness(param0: number): org.bytedeco.javacpp.opencv_highgui.QtFont;
					public constructor();
					public nameFont(): org.bytedeco.javacpp.BytePointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_highgui.QtFont;
					public hscale(param0: number): org.bytedeco.javacpp.opencv_highgui.QtFont;
					public line_type(param0: number): org.bytedeco.javacpp.opencv_highgui.QtFont;
					public color(param0: org.bytedeco.javacpp.opencv_core.Scalar): org.bytedeco.javacpp.opencv_highgui.QtFont;
					public cyrillic(): org.bytedeco.javacpp.IntPointer;
					public thickness(): number;
					public color(): org.bytedeco.javacpp.opencv_core.Scalar;
					public line_type(): number;
					public constructor(param0: number);
				}
				export class TrackbarCallback {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_highgui.TrackbarCallback>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: number, param1: org.bytedeco.javacpp.Pointer): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_img_hash extends org.bytedeco.javacpp.presets.opencv_img_hash {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_img_hash>;
				public static BLOCK_MEAN_HASH_MODE_0: number;
				public static BLOCK_MEAN_HASH_MODE_1: number;
				public static averageHash(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static marrHildrethHash(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static blockMeanHash(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static colorMomentHash(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static marrHildrethHash(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static blockMeanHash(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static marrHildrethHash(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static marrHildrethHash(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public constructor();
				public static averageHash(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static marrHildrethHash(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static radialVarianceHash(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static radialVarianceHash(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static averageHash(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static marrHildrethHash(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static blockMeanHash(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static pHash(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static colorMomentHash(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static blockMeanHash(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static pHash(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static radialVarianceHash(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static radialVarianceHash(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static blockMeanHash(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static radialVarianceHash(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static colorMomentHash(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static radialVarianceHash(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static pHash(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static blockMeanHash(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
			}
			export module opencv_img_hash {
				export class AverageHash extends org.bytedeco.javacpp.opencv_img_hash.ImgHashBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_img_hash.AverageHash>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_img_hash.AverageHash;
					public constructor(param0: number);
				}
				export class BlockMeanHash extends org.bytedeco.javacpp.opencv_img_hash.ImgHashBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_img_hash.BlockMeanHash>;
					public getMean(): org.bytedeco.javacpp.DoublePointer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: number): org.bytedeco.javacpp.opencv_img_hash.BlockMeanHash;
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_img_hash.BlockMeanHash;
					public constructor(param0: number);
					public setMode(param0: number): void;
				}
				export class ColorMomentHash extends org.bytedeco.javacpp.opencv_img_hash.ImgHashBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_img_hash.ColorMomentHash>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_img_hash.ColorMomentHash;
					public constructor();
					public constructor(param0: number);
				}
				export class ImgHashBase extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_img_hash.ImgHashBase>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public compare(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
					public compare(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public compare(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
					public constructor(param0: number);
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export module ImgHashBase {
					export class ImgHashImpl {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_img_hash.ImgHashBase.ImgHashImpl>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
					}
				}
				export class MarrHildrethHash extends org.bytedeco.javacpp.opencv_img_hash.ImgHashBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_img_hash.MarrHildrethHash>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getAlpha(): number;
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_img_hash.MarrHildrethHash;
					public static create(param0: number, param1: number): org.bytedeco.javacpp.opencv_img_hash.MarrHildrethHash;
					public getScale(): number;
					public setKernelParam(param0: number, param1: number): void;
					public constructor(param0: number);
				}
				export class PHash extends org.bytedeco.javacpp.opencv_img_hash.ImgHashBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_img_hash.PHash>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_img_hash.PHash;
					public constructor();
					public constructor(param0: number);
				}
				export class RadialVarianceHash extends org.bytedeco.javacpp.opencv_img_hash.ImgHashBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_img_hash.RadialVarianceHash>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getFeatures(): org.bytedeco.javacpp.DoublePointer;
					public getProjection(): org.bytedeco.javacpp.opencv_core.Mat;
					public getNumOfAngleLine(): number;
					public getSigma(): number;
					public setNumOfAngleLine(param0: number): void;
					public getHash(): org.bytedeco.javacpp.opencv_core.Mat;
					public setSigma(param0: number): void;
					public constructor();
					public static create(param0: number, param1: number): org.bytedeco.javacpp.opencv_img_hash.RadialVarianceHash;
					public static create(): org.bytedeco.javacpp.opencv_img_hash.RadialVarianceHash;
					public constructor(param0: number);
					public getPixPerLine(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_imgcodecs extends org.bytedeco.javacpp.helper.opencv_imgcodecs {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgcodecs>;
				public static IMREAD_UNCHANGED: number;
				public static IMREAD_GRAYSCALE: number;
				public static IMREAD_COLOR: number;
				public static IMREAD_ANYDEPTH: number;
				public static IMREAD_ANYCOLOR: number;
				public static IMREAD_LOAD_GDAL: number;
				public static IMREAD_REDUCED_GRAYSCALE_2: number;
				public static IMREAD_REDUCED_COLOR_2: number;
				public static IMREAD_REDUCED_GRAYSCALE_4: number;
				public static IMREAD_REDUCED_COLOR_4: number;
				public static IMREAD_REDUCED_GRAYSCALE_8: number;
				public static IMREAD_REDUCED_COLOR_8: number;
				public static IMREAD_IGNORE_ORIENTATION: number;
				public static IMWRITE_JPEG_QUALITY: number;
				public static IMWRITE_JPEG_PROGRESSIVE: number;
				public static IMWRITE_JPEG_OPTIMIZE: number;
				public static IMWRITE_JPEG_RST_INTERVAL: number;
				public static IMWRITE_JPEG_LUMA_QUALITY: number;
				public static IMWRITE_JPEG_CHROMA_QUALITY: number;
				public static IMWRITE_PNG_COMPRESSION: number;
				public static IMWRITE_PNG_STRATEGY: number;
				public static IMWRITE_PNG_BILEVEL: number;
				public static IMWRITE_PXM_BINARY: number;
				public static IMWRITE_EXR_TYPE: number;
				public static IMWRITE_WEBP_QUALITY: number;
				public static IMWRITE_PAM_TUPLETYPE: number;
				public static IMWRITE_TIFF_RESUNIT: number;
				public static IMWRITE_TIFF_XDPI: number;
				public static IMWRITE_TIFF_YDPI: number;
				public static IMWRITE_EXR_TYPE_HALF: number;
				public static IMWRITE_EXR_TYPE_FLOAT: number;
				public static IMWRITE_PNG_STRATEGY_DEFAULT: number;
				public static IMWRITE_PNG_STRATEGY_FILTERED: number;
				public static IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY: number;
				public static IMWRITE_PNG_STRATEGY_RLE: number;
				public static IMWRITE_PNG_STRATEGY_FIXED: number;
				public static IMWRITE_PAM_FORMAT_NULL: number;
				public static IMWRITE_PAM_FORMAT_BLACKANDWHITE: number;
				public static IMWRITE_PAM_FORMAT_GRAYSCALE: number;
				public static IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA: number;
				public static IMWRITE_PAM_FORMAT_RGB: number;
				public static IMWRITE_PAM_FORMAT_RGB_ALPHA: number;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>): boolean;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: java.nio.ByteBuffer, param3: java.nio.IntBuffer): boolean;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>): boolean;
				public static imreadmulti(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number): boolean;
				public constructor();
				public static imdecode(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.IntPointer): boolean;
				public static haveImageWriter(param0: string): boolean;
				public static imreadmulti(param0: string, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number): boolean;
				public static imread(param0: string, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static imdecode(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.IntPointer): boolean;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.IntBuffer): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>, param3: native.Array<number>): boolean;
				public static imreadmulti(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.MatVector): boolean;
				public static imdecode(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: java.nio.IntBuffer): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.IntPointer): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<number>): boolean;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.IntPointer): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: java.nio.ByteBuffer): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.IntPointer): boolean;
				public static haveImageReader(param0: string): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.ByteBuffer): boolean;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.IntBuffer): boolean;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: java.nio.IntBuffer): boolean;
				public static imdecode(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static imdecode(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: java.nio.ByteBuffer): boolean;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.IntPointer): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.ByteBuffer, param3: java.nio.IntBuffer): boolean;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>, param3: native.Array<number>): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: java.nio.ByteBuffer, param3: java.nio.IntBuffer): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.BytePointer): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>): boolean;
				public static imread(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.Mat;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer): boolean;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.IntPointer): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.ByteBuffer): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.ByteBuffer): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.IntPointer): boolean;
				public static imreadmulti(param0: string, param1: org.bytedeco.javacpp.opencv_core.MatVector): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.BytePointer): boolean;
				public static haveImageWriter(param0: org.bytedeco.javacpp.BytePointer): boolean;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>): boolean;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<number>, param3: native.Array<number>): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.BytePointer): boolean;
				public static imread(param0: org.bytedeco.javacpp.BytePointer, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.IntPointer): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.ByteBuffer): boolean;
				public static haveImageReader(param0: org.bytedeco.javacpp.BytePointer): boolean;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.IntBuffer): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>, param3: native.Array<number>): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.IntPointer): boolean;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.IntPointer): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer): boolean;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.IntBuffer): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<number>): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.BytePointer): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.ByteBuffer, param3: java.nio.IntBuffer): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.ByteBuffer, param3: java.nio.IntBuffer): boolean;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>): boolean;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.IntPointer): boolean;
				public static imread(param0: string): org.bytedeco.javacpp.opencv_core.Mat;
				public static imwrite(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<number>): boolean;
				public static imdecode(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static imencode(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<number>, param3: native.Array<number>): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.ByteBuffer, param3: java.nio.IntBuffer): boolean;
				public static imwrite(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<number>): boolean;
				public static imencode(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>, param3: native.Array<number>): boolean;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_imgproc extends org.bytedeco.javacpp.helper.opencv_imgproc {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc>;
				public static CV_BLUR_NO_SCALE: number;
				public static CV_BLUR: number;
				public static CV_GAUSSIAN: number;
				public static CV_MEDIAN: number;
				public static CV_BILATERAL: number;
				public static CV_GAUSSIAN_5x5: number;
				public static CV_SCHARR: number;
				public static CV_MAX_SOBEL_KSIZE: number;
				public static CV_BGR2BGRA: number;
				public static CV_RGB2RGBA: number;
				public static CV_BGRA2BGR: number;
				public static CV_RGBA2RGB: number;
				public static CV_BGR2RGBA: number;
				public static CV_RGB2BGRA: number;
				public static CV_RGBA2BGR: number;
				public static CV_BGRA2RGB: number;
				public static CV_BGR2RGB: number;
				public static CV_RGB2BGR: number;
				public static CV_BGRA2RGBA: number;
				public static CV_RGBA2BGRA: number;
				public static CV_BGR2GRAY: number;
				public static CV_RGB2GRAY: number;
				public static CV_GRAY2BGR: number;
				public static CV_GRAY2RGB: number;
				public static CV_GRAY2BGRA: number;
				public static CV_GRAY2RGBA: number;
				public static CV_BGRA2GRAY: number;
				public static CV_RGBA2GRAY: number;
				public static CV_BGR2BGR565: number;
				public static CV_RGB2BGR565: number;
				public static CV_BGR5652BGR: number;
				public static CV_BGR5652RGB: number;
				public static CV_BGRA2BGR565: number;
				public static CV_RGBA2BGR565: number;
				public static CV_BGR5652BGRA: number;
				public static CV_BGR5652RGBA: number;
				public static CV_GRAY2BGR565: number;
				public static CV_BGR5652GRAY: number;
				public static CV_BGR2BGR555: number;
				public static CV_RGB2BGR555: number;
				public static CV_BGR5552BGR: number;
				public static CV_BGR5552RGB: number;
				public static CV_BGRA2BGR555: number;
				public static CV_RGBA2BGR555: number;
				public static CV_BGR5552BGRA: number;
				public static CV_BGR5552RGBA: number;
				public static CV_GRAY2BGR555: number;
				public static CV_BGR5552GRAY: number;
				public static CV_BGR2XYZ: number;
				public static CV_RGB2XYZ: number;
				public static CV_XYZ2BGR: number;
				public static CV_XYZ2RGB: number;
				public static CV_BGR2YCrCb: number;
				public static CV_RGB2YCrCb: number;
				public static CV_YCrCb2BGR: number;
				public static CV_YCrCb2RGB: number;
				public static CV_BGR2HSV: number;
				public static CV_RGB2HSV: number;
				public static CV_BGR2Lab: number;
				public static CV_RGB2Lab: number;
				public static CV_BayerBG2BGR: number;
				public static CV_BayerGB2BGR: number;
				public static CV_BayerRG2BGR: number;
				public static CV_BayerGR2BGR: number;
				public static CV_BayerBG2RGB: number;
				public static CV_BayerGB2RGB: number;
				public static CV_BayerRG2RGB: number;
				public static CV_BayerGR2RGB: number;
				public static CV_BGR2Luv: number;
				public static CV_RGB2Luv: number;
				public static CV_BGR2HLS: number;
				public static CV_RGB2HLS: number;
				public static CV_HSV2BGR: number;
				public static CV_HSV2RGB: number;
				public static CV_Lab2BGR: number;
				public static CV_Lab2RGB: number;
				public static CV_Luv2BGR: number;
				public static CV_Luv2RGB: number;
				public static CV_HLS2BGR: number;
				public static CV_HLS2RGB: number;
				public static CV_BayerBG2BGR_VNG: number;
				public static CV_BayerGB2BGR_VNG: number;
				public static CV_BayerRG2BGR_VNG: number;
				public static CV_BayerGR2BGR_VNG: number;
				public static CV_BayerBG2RGB_VNG: number;
				public static CV_BayerGB2RGB_VNG: number;
				public static CV_BayerRG2RGB_VNG: number;
				public static CV_BayerGR2RGB_VNG: number;
				public static CV_BGR2HSV_FULL: number;
				public static CV_RGB2HSV_FULL: number;
				public static CV_BGR2HLS_FULL: number;
				public static CV_RGB2HLS_FULL: number;
				public static CV_HSV2BGR_FULL: number;
				public static CV_HSV2RGB_FULL: number;
				public static CV_HLS2BGR_FULL: number;
				public static CV_HLS2RGB_FULL: number;
				public static CV_LBGR2Lab: number;
				public static CV_LRGB2Lab: number;
				public static CV_LBGR2Luv: number;
				public static CV_LRGB2Luv: number;
				public static CV_Lab2LBGR: number;
				public static CV_Lab2LRGB: number;
				public static CV_Luv2LBGR: number;
				public static CV_Luv2LRGB: number;
				public static CV_BGR2YUV: number;
				public static CV_RGB2YUV: number;
				public static CV_YUV2BGR: number;
				public static CV_YUV2RGB: number;
				public static CV_BayerBG2GRAY: number;
				public static CV_BayerGB2GRAY: number;
				public static CV_BayerRG2GRAY: number;
				public static CV_BayerGR2GRAY: number;
				public static CV_YUV2RGB_NV12: number;
				public static CV_YUV2BGR_NV12: number;
				public static CV_YUV2RGB_NV21: number;
				public static CV_YUV2BGR_NV21: number;
				public static CV_YUV420sp2RGB: number;
				public static CV_YUV420sp2BGR: number;
				public static CV_YUV2RGBA_NV12: number;
				public static CV_YUV2BGRA_NV12: number;
				public static CV_YUV2RGBA_NV21: number;
				public static CV_YUV2BGRA_NV21: number;
				public static CV_YUV420sp2RGBA: number;
				public static CV_YUV420sp2BGRA: number;
				public static CV_YUV2RGB_YV12: number;
				public static CV_YUV2BGR_YV12: number;
				public static CV_YUV2RGB_IYUV: number;
				public static CV_YUV2BGR_IYUV: number;
				public static CV_YUV2RGB_I420: number;
				public static CV_YUV2BGR_I420: number;
				public static CV_YUV420p2RGB: number;
				public static CV_YUV420p2BGR: number;
				public static CV_YUV2RGBA_YV12: number;
				public static CV_YUV2BGRA_YV12: number;
				public static CV_YUV2RGBA_IYUV: number;
				public static CV_YUV2BGRA_IYUV: number;
				public static CV_YUV2RGBA_I420: number;
				public static CV_YUV2BGRA_I420: number;
				public static CV_YUV420p2RGBA: number;
				public static CV_YUV420p2BGRA: number;
				public static CV_YUV2GRAY_420: number;
				public static CV_YUV2GRAY_NV21: number;
				public static CV_YUV2GRAY_NV12: number;
				public static CV_YUV2GRAY_YV12: number;
				public static CV_YUV2GRAY_IYUV: number;
				public static CV_YUV2GRAY_I420: number;
				public static CV_YUV420sp2GRAY: number;
				public static CV_YUV420p2GRAY: number;
				public static CV_YUV2RGB_UYVY: number;
				public static CV_YUV2BGR_UYVY: number;
				public static CV_YUV2RGB_Y422: number;
				public static CV_YUV2BGR_Y422: number;
				public static CV_YUV2RGB_UYNV: number;
				public static CV_YUV2BGR_UYNV: number;
				public static CV_YUV2RGBA_UYVY: number;
				public static CV_YUV2BGRA_UYVY: number;
				public static CV_YUV2RGBA_Y422: number;
				public static CV_YUV2BGRA_Y422: number;
				public static CV_YUV2RGBA_UYNV: number;
				public static CV_YUV2BGRA_UYNV: number;
				public static CV_YUV2RGB_YUY2: number;
				public static CV_YUV2BGR_YUY2: number;
				public static CV_YUV2RGB_YVYU: number;
				public static CV_YUV2BGR_YVYU: number;
				public static CV_YUV2RGB_YUYV: number;
				public static CV_YUV2BGR_YUYV: number;
				public static CV_YUV2RGB_YUNV: number;
				public static CV_YUV2BGR_YUNV: number;
				public static CV_YUV2RGBA_YUY2: number;
				public static CV_YUV2BGRA_YUY2: number;
				public static CV_YUV2RGBA_YVYU: number;
				public static CV_YUV2BGRA_YVYU: number;
				public static CV_YUV2RGBA_YUYV: number;
				public static CV_YUV2BGRA_YUYV: number;
				public static CV_YUV2RGBA_YUNV: number;
				public static CV_YUV2BGRA_YUNV: number;
				public static CV_YUV2GRAY_UYVY: number;
				public static CV_YUV2GRAY_YUY2: number;
				public static CV_YUV2GRAY_Y422: number;
				public static CV_YUV2GRAY_UYNV: number;
				public static CV_YUV2GRAY_YVYU: number;
				public static CV_YUV2GRAY_YUYV: number;
				public static CV_YUV2GRAY_YUNV: number;
				public static CV_RGBA2mRGBA: number;
				public static CV_mRGBA2RGBA: number;
				public static CV_RGB2YUV_I420: number;
				public static CV_BGR2YUV_I420: number;
				public static CV_RGB2YUV_IYUV: number;
				public static CV_BGR2YUV_IYUV: number;
				public static CV_RGBA2YUV_I420: number;
				public static CV_BGRA2YUV_I420: number;
				public static CV_RGBA2YUV_IYUV: number;
				public static CV_BGRA2YUV_IYUV: number;
				public static CV_RGB2YUV_YV12: number;
				public static CV_BGR2YUV_YV12: number;
				public static CV_RGBA2YUV_YV12: number;
				public static CV_BGRA2YUV_YV12: number;
				public static CV_BayerBG2BGR_EA: number;
				public static CV_BayerGB2BGR_EA: number;
				public static CV_BayerRG2BGR_EA: number;
				public static CV_BayerGR2BGR_EA: number;
				public static CV_BayerBG2RGB_EA: number;
				public static CV_BayerGB2RGB_EA: number;
				public static CV_BayerRG2RGB_EA: number;
				public static CV_BayerGR2RGB_EA: number;
				public static CV_BayerBG2BGRA: number;
				public static CV_BayerGB2BGRA: number;
				public static CV_BayerRG2BGRA: number;
				public static CV_BayerGR2BGRA: number;
				public static CV_BayerBG2RGBA: number;
				public static CV_BayerGB2RGBA: number;
				public static CV_BayerRG2RGBA: number;
				public static CV_BayerGR2RGBA: number;
				public static CV_COLORCVT_MAX: number;
				public static CV_INTER_NN: number;
				public static CV_INTER_LINEAR: number;
				public static CV_INTER_CUBIC: number;
				public static CV_INTER_AREA: number;
				public static CV_INTER_LANCZOS4: number;
				public static CV_WARP_FILL_OUTLIERS: number;
				public static CV_WARP_INVERSE_MAP: number;
				public static CV_SHAPE_RECT: number;
				public static CV_SHAPE_CROSS: number;
				public static CV_SHAPE_ELLIPSE: number;
				public static CV_SHAPE_CUSTOM: number;
				public static CV_MOP_ERODE: number;
				public static CV_MOP_DILATE: number;
				public static CV_MOP_OPEN: number;
				public static CV_MOP_CLOSE: number;
				public static CV_MOP_GRADIENT: number;
				public static CV_MOP_TOPHAT: number;
				public static CV_MOP_BLACKHAT: number;
				public static CV_TM_SQDIFF: number;
				public static CV_TM_SQDIFF_NORMED: number;
				public static CV_TM_CCORR: number;
				public static CV_TM_CCORR_NORMED: number;
				public static CV_TM_CCOEFF: number;
				public static CV_TM_CCOEFF_NORMED: number;
				public static CV_RETR_EXTERNAL: number;
				public static CV_RETR_LIST: number;
				public static CV_RETR_CCOMP: number;
				public static CV_RETR_TREE: number;
				public static CV_RETR_FLOODFILL: number;
				public static CV_CHAIN_CODE: number;
				public static CV_CHAIN_APPROX_NONE: number;
				public static CV_CHAIN_APPROX_SIMPLE: number;
				public static CV_CHAIN_APPROX_TC89_L1: number;
				public static CV_CHAIN_APPROX_TC89_KCOS: number;
				public static CV_LINK_RUNS: number;
				public static CV_POLY_APPROX_DP: number;
				public static CV_CONTOURS_MATCH_I1: number;
				public static CV_CONTOURS_MATCH_I2: number;
				public static CV_CONTOURS_MATCH_I3: number;
				public static CV_CLOCKWISE: number;
				public static CV_COUNTER_CLOCKWISE: number;
				public static CV_COMP_CORREL: number;
				public static CV_COMP_CHISQR: number;
				public static CV_COMP_INTERSECT: number;
				public static CV_COMP_BHATTACHARYYA: number;
				public static CV_COMP_HELLINGER: number;
				public static CV_COMP_CHISQR_ALT: number;
				public static CV_COMP_KL_DIV: number;
				public static CV_DIST_MASK_3: number;
				public static CV_DIST_MASK_5: number;
				public static CV_DIST_MASK_PRECISE: number;
				public static CV_DIST_LABEL_CCOMP: number;
				public static CV_DIST_LABEL_PIXEL: number;
				public static CV_DIST_USER: number;
				public static CV_DIST_L1: number;
				public static CV_DIST_L2: number;
				public static CV_DIST_C: number;
				public static CV_DIST_L12: number;
				public static CV_DIST_FAIR: number;
				public static CV_DIST_WELSCH: number;
				public static CV_DIST_HUBER: number;
				public static CV_THRESH_BINARY: number;
				public static CV_THRESH_BINARY_INV: number;
				public static CV_THRESH_TRUNC: number;
				public static CV_THRESH_TOZERO: number;
				public static CV_THRESH_TOZERO_INV: number;
				public static CV_THRESH_MASK: number;
				public static CV_THRESH_OTSU: number;
				public static CV_THRESH_TRIANGLE: number;
				public static CV_ADAPTIVE_THRESH_MEAN_C: number;
				public static CV_ADAPTIVE_THRESH_GAUSSIAN_C: number;
				public static CV_FLOODFILL_FIXED_RANGE: number;
				public static CV_FLOODFILL_MASK_ONLY: number;
				public static CV_CANNY_L2_GRADIENT: number;
				public static CV_HOUGH_STANDARD: number;
				public static CV_HOUGH_PROBABILISTIC: number;
				public static CV_HOUGH_MULTI_SCALE: number;
				public static CV_HOUGH_GRADIENT: number;
				public static CV_FILLED: number;
				public static CV_AA: number;
				public static CV_FONT_HERSHEY_SIMPLEX: number;
				public static CV_FONT_HERSHEY_PLAIN: number;
				public static CV_FONT_HERSHEY_DUPLEX: number;
				public static CV_FONT_HERSHEY_COMPLEX: number;
				public static CV_FONT_HERSHEY_TRIPLEX: number;
				public static CV_FONT_HERSHEY_COMPLEX_SMALL: number;
				public static CV_FONT_HERSHEY_SCRIPT_SIMPLEX: number;
				public static CV_FONT_HERSHEY_SCRIPT_COMPLEX: number;
				public static CV_FONT_ITALIC: number;
				public static CV_FONT_VECTOR0: number;
				public static FILTER_SCHARR: number;
				public static MORPH_ERODE: number;
				public static MORPH_DILATE: number;
				public static MORPH_OPEN: number;
				public static MORPH_CLOSE: number;
				public static MORPH_GRADIENT: number;
				public static MORPH_TOPHAT: number;
				public static MORPH_BLACKHAT: number;
				public static MORPH_HITMISS: number;
				public static MORPH_RECT: number;
				public static MORPH_CROSS: number;
				public static MORPH_ELLIPSE: number;
				public static INTER_NEAREST: number;
				public static INTER_LINEAR: number;
				public static INTER_CUBIC: number;
				public static INTER_AREA: number;
				public static INTER_LANCZOS4: number;
				public static INTER_LINEAR_EXACT: number;
				public static INTER_MAX: number;
				public static WARP_FILL_OUTLIERS: number;
				public static WARP_INVERSE_MAP: number;
				public static WARP_POLAR_LINEAR: number;
				public static WARP_POLAR_LOG: number;
				public static INTER_BITS: number;
				public static INTER_BITS2: number;
				public static INTER_TAB_SIZE: number;
				public static INTER_TAB_SIZE2: number;
				public static DIST_USER: number;
				public static DIST_L1: number;
				public static DIST_L2: number;
				public static DIST_C: number;
				public static DIST_L12: number;
				public static DIST_FAIR: number;
				public static DIST_WELSCH: number;
				public static DIST_HUBER: number;
				public static DIST_MASK_3: number;
				public static DIST_MASK_5: number;
				public static DIST_MASK_PRECISE: number;
				public static THRESH_BINARY: number;
				public static THRESH_BINARY_INV: number;
				public static THRESH_TRUNC: number;
				public static THRESH_TOZERO: number;
				public static THRESH_TOZERO_INV: number;
				public static THRESH_MASK: number;
				public static THRESH_OTSU: number;
				public static THRESH_TRIANGLE: number;
				public static ADAPTIVE_THRESH_MEAN_C: number;
				public static ADAPTIVE_THRESH_GAUSSIAN_C: number;
				public static GC_BGD: number;
				public static GC_FGD: number;
				public static GC_PR_BGD: number;
				public static GC_PR_FGD: number;
				public static GC_INIT_WITH_RECT: number;
				public static GC_INIT_WITH_MASK: number;
				public static GC_EVAL: number;
				public static GC_EVAL_FREEZE_MODEL: number;
				public static DIST_LABEL_CCOMP: number;
				public static DIST_LABEL_PIXEL: number;
				public static FLOODFILL_FIXED_RANGE: number;
				public static FLOODFILL_MASK_ONLY: number;
				public static CC_STAT_LEFT: number;
				public static CC_STAT_TOP: number;
				public static CC_STAT_WIDTH: number;
				public static CC_STAT_HEIGHT: number;
				public static CC_STAT_AREA: number;
				public static CC_STAT_MAX: number;
				public static CCL_WU: number;
				public static CCL_DEFAULT: number;
				public static CCL_GRANA: number;
				public static RETR_EXTERNAL: number;
				public static RETR_LIST: number;
				public static RETR_CCOMP: number;
				public static RETR_TREE: number;
				public static RETR_FLOODFILL: number;
				public static CHAIN_APPROX_NONE: number;
				public static CHAIN_APPROX_SIMPLE: number;
				public static CHAIN_APPROX_TC89_L1: number;
				public static CHAIN_APPROX_TC89_KCOS: number;
				public static CONTOURS_MATCH_I1: number;
				public static CONTOURS_MATCH_I2: number;
				public static CONTOURS_MATCH_I3: number;
				public static HOUGH_STANDARD: number;
				public static HOUGH_PROBABILISTIC: number;
				public static HOUGH_MULTI_SCALE: number;
				public static HOUGH_GRADIENT: number;
				public static LSD_REFINE_NONE: number;
				public static LSD_REFINE_STD: number;
				public static LSD_REFINE_ADV: number;
				public static HISTCMP_CORREL: number;
				public static HISTCMP_CHISQR: number;
				public static HISTCMP_INTERSECT: number;
				public static HISTCMP_BHATTACHARYYA: number;
				public static HISTCMP_HELLINGER: number;
				public static HISTCMP_CHISQR_ALT: number;
				public static HISTCMP_KL_DIV: number;
				public static COLOR_BGR2BGRA: number;
				public static COLOR_RGB2RGBA: number;
				public static COLOR_BGRA2BGR: number;
				public static COLOR_RGBA2RGB: number;
				public static COLOR_BGR2RGBA: number;
				public static COLOR_RGB2BGRA: number;
				public static COLOR_RGBA2BGR: number;
				public static COLOR_BGRA2RGB: number;
				public static COLOR_BGR2RGB: number;
				public static COLOR_RGB2BGR: number;
				public static COLOR_BGRA2RGBA: number;
				public static COLOR_RGBA2BGRA: number;
				public static COLOR_BGR2GRAY: number;
				public static COLOR_RGB2GRAY: number;
				public static COLOR_GRAY2BGR: number;
				public static COLOR_GRAY2RGB: number;
				public static COLOR_GRAY2BGRA: number;
				public static COLOR_GRAY2RGBA: number;
				public static COLOR_BGRA2GRAY: number;
				public static COLOR_RGBA2GRAY: number;
				public static COLOR_BGR2BGR565: number;
				public static COLOR_RGB2BGR565: number;
				public static COLOR_BGR5652BGR: number;
				public static COLOR_BGR5652RGB: number;
				public static COLOR_BGRA2BGR565: number;
				public static COLOR_RGBA2BGR565: number;
				public static COLOR_BGR5652BGRA: number;
				public static COLOR_BGR5652RGBA: number;
				public static COLOR_GRAY2BGR565: number;
				public static COLOR_BGR5652GRAY: number;
				public static COLOR_BGR2BGR555: number;
				public static COLOR_RGB2BGR555: number;
				public static COLOR_BGR5552BGR: number;
				public static COLOR_BGR5552RGB: number;
				public static COLOR_BGRA2BGR555: number;
				public static COLOR_RGBA2BGR555: number;
				public static COLOR_BGR5552BGRA: number;
				public static COLOR_BGR5552RGBA: number;
				public static COLOR_GRAY2BGR555: number;
				public static COLOR_BGR5552GRAY: number;
				public static COLOR_BGR2XYZ: number;
				public static COLOR_RGB2XYZ: number;
				public static COLOR_XYZ2BGR: number;
				public static COLOR_XYZ2RGB: number;
				public static COLOR_BGR2YCrCb: number;
				public static COLOR_RGB2YCrCb: number;
				public static COLOR_YCrCb2BGR: number;
				public static COLOR_YCrCb2RGB: number;
				public static COLOR_BGR2HSV: number;
				public static COLOR_RGB2HSV: number;
				public static COLOR_BGR2Lab: number;
				public static COLOR_RGB2Lab: number;
				public static COLOR_BGR2Luv: number;
				public static COLOR_RGB2Luv: number;
				public static COLOR_BGR2HLS: number;
				public static COLOR_RGB2HLS: number;
				public static COLOR_HSV2BGR: number;
				public static COLOR_HSV2RGB: number;
				public static COLOR_Lab2BGR: number;
				public static COLOR_Lab2RGB: number;
				public static COLOR_Luv2BGR: number;
				public static COLOR_Luv2RGB: number;
				public static COLOR_HLS2BGR: number;
				public static COLOR_HLS2RGB: number;
				public static COLOR_BGR2HSV_FULL: number;
				public static COLOR_RGB2HSV_FULL: number;
				public static COLOR_BGR2HLS_FULL: number;
				public static COLOR_RGB2HLS_FULL: number;
				public static COLOR_HSV2BGR_FULL: number;
				public static COLOR_HSV2RGB_FULL: number;
				public static COLOR_HLS2BGR_FULL: number;
				public static COLOR_HLS2RGB_FULL: number;
				public static COLOR_LBGR2Lab: number;
				public static COLOR_LRGB2Lab: number;
				public static COLOR_LBGR2Luv: number;
				public static COLOR_LRGB2Luv: number;
				public static COLOR_Lab2LBGR: number;
				public static COLOR_Lab2LRGB: number;
				public static COLOR_Luv2LBGR: number;
				public static COLOR_Luv2LRGB: number;
				public static COLOR_BGR2YUV: number;
				public static COLOR_RGB2YUV: number;
				public static COLOR_YUV2BGR: number;
				public static COLOR_YUV2RGB: number;
				public static COLOR_YUV2RGB_NV12: number;
				public static COLOR_YUV2BGR_NV12: number;
				public static COLOR_YUV2RGB_NV21: number;
				public static COLOR_YUV2BGR_NV21: number;
				public static COLOR_YUV420sp2RGB: number;
				public static COLOR_YUV420sp2BGR: number;
				public static COLOR_YUV2RGBA_NV12: number;
				public static COLOR_YUV2BGRA_NV12: number;
				public static COLOR_YUV2RGBA_NV21: number;
				public static COLOR_YUV2BGRA_NV21: number;
				public static COLOR_YUV420sp2RGBA: number;
				public static COLOR_YUV420sp2BGRA: number;
				public static COLOR_YUV2RGB_YV12: number;
				public static COLOR_YUV2BGR_YV12: number;
				public static COLOR_YUV2RGB_IYUV: number;
				public static COLOR_YUV2BGR_IYUV: number;
				public static COLOR_YUV2RGB_I420: number;
				public static COLOR_YUV2BGR_I420: number;
				public static COLOR_YUV420p2RGB: number;
				public static COLOR_YUV420p2BGR: number;
				public static COLOR_YUV2RGBA_YV12: number;
				public static COLOR_YUV2BGRA_YV12: number;
				public static COLOR_YUV2RGBA_IYUV: number;
				public static COLOR_YUV2BGRA_IYUV: number;
				public static COLOR_YUV2RGBA_I420: number;
				public static COLOR_YUV2BGRA_I420: number;
				public static COLOR_YUV420p2RGBA: number;
				public static COLOR_YUV420p2BGRA: number;
				public static COLOR_YUV2GRAY_420: number;
				public static COLOR_YUV2GRAY_NV21: number;
				public static COLOR_YUV2GRAY_NV12: number;
				public static COLOR_YUV2GRAY_YV12: number;
				public static COLOR_YUV2GRAY_IYUV: number;
				public static COLOR_YUV2GRAY_I420: number;
				public static COLOR_YUV420sp2GRAY: number;
				public static COLOR_YUV420p2GRAY: number;
				public static COLOR_YUV2RGB_UYVY: number;
				public static COLOR_YUV2BGR_UYVY: number;
				public static COLOR_YUV2RGB_Y422: number;
				public static COLOR_YUV2BGR_Y422: number;
				public static COLOR_YUV2RGB_UYNV: number;
				public static COLOR_YUV2BGR_UYNV: number;
				public static COLOR_YUV2RGBA_UYVY: number;
				public static COLOR_YUV2BGRA_UYVY: number;
				public static COLOR_YUV2RGBA_Y422: number;
				public static COLOR_YUV2BGRA_Y422: number;
				public static COLOR_YUV2RGBA_UYNV: number;
				public static COLOR_YUV2BGRA_UYNV: number;
				public static COLOR_YUV2RGB_YUY2: number;
				public static COLOR_YUV2BGR_YUY2: number;
				public static COLOR_YUV2RGB_YVYU: number;
				public static COLOR_YUV2BGR_YVYU: number;
				public static COLOR_YUV2RGB_YUYV: number;
				public static COLOR_YUV2BGR_YUYV: number;
				public static COLOR_YUV2RGB_YUNV: number;
				public static COLOR_YUV2BGR_YUNV: number;
				public static COLOR_YUV2RGBA_YUY2: number;
				public static COLOR_YUV2BGRA_YUY2: number;
				public static COLOR_YUV2RGBA_YVYU: number;
				public static COLOR_YUV2BGRA_YVYU: number;
				public static COLOR_YUV2RGBA_YUYV: number;
				public static COLOR_YUV2BGRA_YUYV: number;
				public static COLOR_YUV2RGBA_YUNV: number;
				public static COLOR_YUV2BGRA_YUNV: number;
				public static COLOR_YUV2GRAY_UYVY: number;
				public static COLOR_YUV2GRAY_YUY2: number;
				public static COLOR_YUV2GRAY_Y422: number;
				public static COLOR_YUV2GRAY_UYNV: number;
				public static COLOR_YUV2GRAY_YVYU: number;
				public static COLOR_YUV2GRAY_YUYV: number;
				public static COLOR_YUV2GRAY_YUNV: number;
				public static COLOR_RGBA2mRGBA: number;
				public static COLOR_mRGBA2RGBA: number;
				public static COLOR_RGB2YUV_I420: number;
				public static COLOR_BGR2YUV_I420: number;
				public static COLOR_RGB2YUV_IYUV: number;
				public static COLOR_BGR2YUV_IYUV: number;
				public static COLOR_RGBA2YUV_I420: number;
				public static COLOR_BGRA2YUV_I420: number;
				public static COLOR_RGBA2YUV_IYUV: number;
				public static COLOR_BGRA2YUV_IYUV: number;
				public static COLOR_RGB2YUV_YV12: number;
				public static COLOR_BGR2YUV_YV12: number;
				public static COLOR_RGBA2YUV_YV12: number;
				public static COLOR_BGRA2YUV_YV12: number;
				public static COLOR_BayerBG2BGR: number;
				public static COLOR_BayerGB2BGR: number;
				public static COLOR_BayerRG2BGR: number;
				public static COLOR_BayerGR2BGR: number;
				public static COLOR_BayerBG2RGB: number;
				public static COLOR_BayerGB2RGB: number;
				public static COLOR_BayerRG2RGB: number;
				public static COLOR_BayerGR2RGB: number;
				public static COLOR_BayerBG2GRAY: number;
				public static COLOR_BayerGB2GRAY: number;
				public static COLOR_BayerRG2GRAY: number;
				public static COLOR_BayerGR2GRAY: number;
				public static COLOR_BayerBG2BGR_VNG: number;
				public static COLOR_BayerGB2BGR_VNG: number;
				public static COLOR_BayerRG2BGR_VNG: number;
				public static COLOR_BayerGR2BGR_VNG: number;
				public static COLOR_BayerBG2RGB_VNG: number;
				public static COLOR_BayerGB2RGB_VNG: number;
				public static COLOR_BayerRG2RGB_VNG: number;
				public static COLOR_BayerGR2RGB_VNG: number;
				public static COLOR_BayerBG2BGR_EA: number;
				public static COLOR_BayerGB2BGR_EA: number;
				public static COLOR_BayerRG2BGR_EA: number;
				public static COLOR_BayerGR2BGR_EA: number;
				public static COLOR_BayerBG2RGB_EA: number;
				public static COLOR_BayerGB2RGB_EA: number;
				public static COLOR_BayerRG2RGB_EA: number;
				public static COLOR_BayerGR2RGB_EA: number;
				public static COLOR_BayerBG2BGRA: number;
				public static COLOR_BayerGB2BGRA: number;
				public static COLOR_BayerRG2BGRA: number;
				public static COLOR_BayerGR2BGRA: number;
				public static COLOR_BayerBG2RGBA: number;
				public static COLOR_BayerGB2RGBA: number;
				public static COLOR_BayerRG2RGBA: number;
				public static COLOR_BayerGR2RGBA: number;
				public static COLOR_COLORCVT_MAX: number;
				public static INTERSECT_NONE: number;
				public static INTERSECT_PARTIAL: number;
				public static INTERSECT_FULL: number;
				public static FILLED: number;
				public static LINE_4: number;
				public static LINE_8: number;
				public static LINE_AA: number;
				public static FONT_HERSHEY_SIMPLEX: number;
				public static FONT_HERSHEY_PLAIN: number;
				public static FONT_HERSHEY_DUPLEX: number;
				public static FONT_HERSHEY_COMPLEX: number;
				public static FONT_HERSHEY_TRIPLEX: number;
				public static FONT_HERSHEY_COMPLEX_SMALL: number;
				public static FONT_HERSHEY_SCRIPT_SIMPLEX: number;
				public static FONT_HERSHEY_SCRIPT_COMPLEX: number;
				public static FONT_ITALIC: number;
				public static MARKER_CROSS: number;
				public static MARKER_TILTED_CROSS: number;
				public static MARKER_STAR: number;
				public static MARKER_DIAMOND: number;
				public static MARKER_SQUARE: number;
				public static MARKER_TRIANGLE_UP: number;
				public static MARKER_TRIANGLE_DOWN: number;
				public static TM_SQDIFF: number;
				public static TM_SQDIFF_NORMED: number;
				public static TM_CCORR: number;
				public static TM_CCORR_NORMED: number;
				public static TM_CCOEFF: number;
				public static TM_CCOEFF_NORMED: number;
				public static COLORMAP_AUTUMN: number;
				public static COLORMAP_BONE: number;
				public static COLORMAP_JET: number;
				public static COLORMAP_WINTER: number;
				public static COLORMAP_RAINBOW: number;
				public static COLORMAP_OCEAN: number;
				public static COLORMAP_SUMMER: number;
				public static COLORMAP_SPRING: number;
				public static COLORMAP_COOL: number;
				public static COLORMAP_HSV: number;
				public static COLORMAP_PINK: number;
				public static COLORMAP_HOT: number;
				public static COLORMAP_PARULA: number;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer): void;
				public static cvGetTextSize(param0: string, param1: org.bytedeco.javacpp.opencv_imgproc.CvFont, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.IntPointer): void;
				public static cvSampleLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.Pointer, param4: number): number;
				public static accumulateSquare(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: number, param8: org.bytedeco.javacpp.opencv_core.Point): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer): void;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvPyrMeanShiftFiltering(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static cvCalcArrBackProject(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static cvCopyMakeBorder(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: native.Array<number>): void;
				public static HoughLines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: number): void;
				public static cvGetAffineTransform(param0: native.Array<number>, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static accumulateSquare(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static cvEllipse(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer): void;
				public static connectedComponentsWithStatsWithAlgorithm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number, param6: number): number;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: java.nio.FloatBuffer, param6: number, param7: boolean): void;
				public static cvBoundingRect(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.CvRect;
				public static cvEllipse(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.CvScalar, param7: number, param8: number, param9: number): void;
				public static accumulateProduct(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static erode(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static minEnclosingCircle(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: org.bytedeco.javacpp.FloatPointer): void;
				public static cvGoodFeaturesToTrack(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: java.nio.FloatBuffer, param4: java.nio.IntBuffer, param5: number, param6: number, param7: org.bytedeco.javacpp.helper.opencv_core.CvArr, param8: number, param9: number, param10: number): void;
				public static filter2D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: number): void;
				public static cvLinearPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: java.nio.FloatBuffer, param3: number): void;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number): void;
				public static cvFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: org.bytedeco.javacpp.opencv_core.CvSeq): number;
				public static cvCopyMakeBorder(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvStartFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_imgproc.CvContourScanner;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: native.Array<number>, param5: number): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static grabCut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Rect, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static blur(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number): void;
				public static erode(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static createCLAHE(): org.bytedeco.javacpp.opencv_imgproc.CLAHE;
				public static invertAffineTransform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvReleaseHist(param0: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number): void;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: boolean): void;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static rotatedRectangleIntersection(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: org.bytedeco.javacpp.opencv_core.RotatedRect, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvMakeHistHeaderForArray(param0: number, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: org.bytedeco.javacpp.FloatPointer, param4: native.Array<native.Array<number>>, param5: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static cvDistTransform(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number, param4: native.Array<number>, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr, param6: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer, param8: boolean, param9: boolean): void;
				public static approxPolyDP(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: boolean): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.FloatPointer, param6: number, param7: boolean): void;
				public static cvCopyMakeBorder(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: number): void;
				public static cvRectangleR(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: number, param4: number, param5: number): void;
				public static sqrBoxFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Point, param5: boolean, param6: number): void;
				public static cvFitEllipse2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.CvBox2D;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvFillPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: java.nio.FloatBuffer, param6: number, param7: boolean): void;
				public static equalizeHist(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvCalcArrBackProjectPatch(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.opencv_core.CvHistogram, param4: number, param5: number): void;
				public static cvCreateHist(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: org.bytedeco.javacpp.FloatPointer, param4: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static cvRectangle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static matchTemplate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static applyColorMap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static createLineSegmentDetector(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): org.bytedeco.javacpp.opencv_imgproc.LineSegmentDetector;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: number, param7: number): void;
				public static cvCalcArrHist(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static GaussianBlur(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvSampleLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.Pointer): number;
				public static cvEllipseBox(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvBox2D, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static convertMaps(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: boolean): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvGetRectSubPix(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvPoint2D32f): void;
				public static cvCreateHist(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static sqrBoxFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static fitEllipseAMS(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static getAffineTransform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static cvSampleLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.Pointer, param4: number): number;
				public static circle(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static contourArea(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static getPerspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static cvFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: org.bytedeco.javacpp.opencv_core.CvSeq, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.CvPoint): number;
				public static cvPointPolygonTest(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param2: number): number;
				public static spatialGradient(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvWarpAffine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static cvDistTransform(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number, param4: java.nio.FloatBuffer, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr, param6: number): void;
				public static filter2D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Point, param5: number, param6: number): void;
				public static matchShapes(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): number;
				public static cvInitLineIterator(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_core.CvLineIterator): number;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: java.nio.DoubleBuffer): org.bytedeco.javacpp.opencv_core.Point2d;
				public static cvPointPolygonTest(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.FloatBuffer, param2: number): number;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: number, param7: number): void;
				public static getDerivKernels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: boolean, param6: number): void;
				public static accumulateWeighted(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static cvLogPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: native.Array<number>, param3: number): void;
				public static cvSetHistBinRanges(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: org.bytedeco.javacpp.FloatPointer, param2: number): void;
				public static compareHist(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): number;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: java.nio.IntBuffer, param5: java.nio.FloatBuffer, param6: boolean): void;
				public static getDerivKernels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static cvInitLineIterator(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.CvLineIterator): number;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static cvStartFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: number, param3: number, param4: number, param5: native.Array<number>): org.bytedeco.javacpp.opencv_imgproc.CvContourScanner;
				public static sqrBoxFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static boxPoints(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static sepFilter2D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Point, param6: number, param7: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.FloatPointer): void;
				public static sepFilter2D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.Point, param6: number, param7: number): void;
				public static spatialGradient(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: native.Array<number>, param5: native.Array<number>, param6: boolean): void;
				public static intersectConvexConvex(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar): number;
				public static boxFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvFillPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar, param5: number, param6: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer, param8: boolean, param9: boolean): void;
				public static cvCopyMakeBorder(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: java.nio.IntBuffer, param3: number): void;
				public static HoughLines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static cvGoodFeaturesToTrack(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: java.nio.FloatBuffer, param4: java.nio.IntBuffer, param5: number, param6: number): void;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
				public static GaussianBlur(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static blur(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number): void;
				public static HoughLinesP(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static cvCompareHist(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: number): number;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static circle(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvGetAffineTransform(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: number, param8: number, param9: number): void;
				public static watershed(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static accumulate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvInitFont(param0: org.bytedeco.javacpp.opencv_imgproc.CvFont, param1: number, param2: number, param3: number): void;
				public static cvCreateHist(param0: number, param1: native.Array<number>, param2: number, param3: native.Array<native.Array<number>>, param4: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static accumulateWeighted(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static threshold(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): number;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.FloatPointer, param5: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static erode(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static connectedComponents(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point2d;
				public static connectedComponents(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): number;
				public static threshold(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): number;
				public static cvApproxPoly(param0: org.bytedeco.javacpp.Pointer, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvMemStorage, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static cvHoughCircles(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.Pointer, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static connectedComponentsWithAlgorithm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): number;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: native.Array<number>, param7: native.Array<number>): void;
				public static cvFillPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar, param5: number, param6: number): void;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): number;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvSquareAcc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static logPolar(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: number, param4: number): void;
				public static morphologyEx(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Point, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: native.Array<number>, param7: native.Array<number>): void;
				public static cvFloodFill(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: org.bytedeco.javacpp.opencv_core.CvScalar, param5: org.bytedeco.javacpp.opencv_imgproc.CvConnectedComp, param6: number, param7: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvCalcBackProjectPatch(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.opencv_core.CvHistogram, param4: number, param5: number): void;
				public static cvGetTextSize(param0: string, param1: org.bytedeco.javacpp.opencv_imgproc.CvFont, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: native.Array<number>): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.FloatPointer): void;
				public static cvDrawContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvSeq, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number, param7: java.nio.IntBuffer): void;
				public static cvMultiplyAcc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvCornerHarris(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static cvRectangle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static fitLine(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number): void;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: native.Array<number>, param5: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: number): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvFindCornerSubPix(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvSize, param4: org.bytedeco.javacpp.opencv_core.CvSize, param5: org.bytedeco.javacpp.opencv_core.CvTermCriteria): void;
				public static fitEllipseDirect(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static cvCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static Sobel(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: native.Array<number>): org.bytedeco.javacpp.opencv_core.Point2d;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static cvApproxChains(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: number, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static cvCopyHist(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static accumulate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static cvCalcHist(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static HoughLines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static moments(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Moments;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvCopyMakeBorder(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static cvPutText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.BytePointer, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static getGaussianKernel(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static cvCalcEMD2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.opencv_imgproc.CvDistanceFunction, param4: org.bytedeco.javacpp.helper.opencv_core.CvArr, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr, param6: native.Array<number>, param7: org.bytedeco.javacpp.Pointer): number;
				public static pointPolygonTest(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: boolean): number;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: number, param7: number, param8: boolean, param9: number): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static integral3(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RotatedRect, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static Scharr(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: number, param6: number): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: number): void;
				public static cvFillConvexPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number): void;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvNormalizeHist(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.PointerPointer<any>, param8: boolean, param9: boolean): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: number, param8: org.bytedeco.javacpp.opencv_core.Point): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: java.nio.FloatBuffer): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: native.Array<number>, param6: number, param7: boolean): void;
				public static getPerspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static minEnclosingCircle(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: java.nio.FloatBuffer): void;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static cvErode(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer, param8: boolean, param9: boolean): void;
				public static cvAdaptiveThreshold(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static cornerMinEigenVal(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static GaussianBlur(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: java.nio.IntBuffer, param5: java.nio.FloatBuffer, param6: boolean): void;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: boolean): void;
				public static cvGetTextSize(param0: string, param1: org.bytedeco.javacpp.opencv_imgproc.CvFont, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: java.nio.IntBuffer): void;
				public static cvCalcEMD2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.opencv_imgproc.CvDistanceFunction, param4: org.bytedeco.javacpp.helper.opencv_core.CvArr, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr, param6: org.bytedeco.javacpp.FloatPointer, param7: org.bytedeco.javacpp.Pointer): number;
				public static Scharr(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static connectedComponentsWithAlgorithm(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): number;
				public static approxPolyDP(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: boolean): void;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number): void;
				public static cvSmooth(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static invertAffineTransform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static minEnclosingCircle(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: native.Array<number>): void;
				public static preCornerDetect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static HoughCircles(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static cvEllipse(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.CvScalar, param7: number, param8: number, param9: number): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static cvCalcArrBackProject(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static cvEllipse(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.CvScalar, param7: number, param8: number, param9: number): void;
				public static cvCornerEigenValsAndVecs(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public constructor();
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.FloatPointer, param6: number, param7: boolean): void;
				public static equalizeHist(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvFillConvexPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static invertAffineTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvGetMinMaxHistValue(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: org.bytedeco.javacpp.FloatPointer, param2: org.bytedeco.javacpp.FloatPointer): void;
				public static cvMakeHistHeaderForArray(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static cvGetSpatialMoment(param0: org.bytedeco.javacpp.opencv_imgproc.CvMoments, param1: number, param2: number): number;
				public static cvDrawCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static convexHull(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.FloatPointer): void;
				public static integral2(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number): void;
				public static minAreaRect(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static sqrBoxFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Point, param5: boolean, param6: number): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: number): void;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number): void;
				public static arrowedLine(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number, param7: number): void;
				public static convertMaps(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvIntegral(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static getGaborKernel(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static matchShapes(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): number;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer, param8: boolean, param9: boolean): void;
				public static pyrMeanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number): void;
				public static cvGetTextSize(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_imgproc.CvFont, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.IntPointer): void;
				public static morphologyDefaultBorderValue(): org.bytedeco.javacpp.opencv_core.Scalar;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: native.Array<number>, param7: native.Array<number>, param8: boolean, param9: boolean): void;
				public static cvRunningAvg(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: string, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvDilate(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.IplConvKernel, param3: number): void;
				public static cornerHarris(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static getRectSubPix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static getTextSize(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: number, param4: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_core.Size;
				public static cvSobel(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static fitEllipse(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static boxFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Point, param5: boolean, param6: number): void;
				public static getGaborKernel(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static Laplacian(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static preCornerDetect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvMakeHistHeaderForArray(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: org.bytedeco.javacpp.FloatPointer, param4: org.bytedeco.javacpp.PointerPointer<any>, param5: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: java.nio.FloatBuffer, param6: number, param7: boolean): void;
				public static boxPoints(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvFloodFill(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static cvMatchTemplate(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: number): void;
				public static cvGoodFeaturesToTrack(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number, param7: org.bytedeco.javacpp.helper.opencv_core.CvArr, param8: number, param9: number, param10: number): void;
				public static blur(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static HuMoments(param0: org.bytedeco.javacpp.opencv_core.Moments, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvPutText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.BytePointer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static distanceTransform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static HoughCircles(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static grabCut(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Rect, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: number): void;
				public static pyrMeanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static applyColorMap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static cvReleaseStructuringElement(param0: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static cvGetCentralMoment(param0: org.bytedeco.javacpp.opencv_imgproc.CvMoments, param1: number, param2: number): number;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: native.Array<number>, param5: native.Array<number>): void;
				public static HoughLinesPointSet(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static accumulateWeighted(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static moments(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean): org.bytedeco.javacpp.opencv_core.Moments;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvPyrDown(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static cvPyrUp(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvGetMinMaxHistValue(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: java.nio.FloatBuffer, param2: java.nio.FloatBuffer): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: java.nio.FloatBuffer): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static integral2(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static cvCalcBayesianProb(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static cvCalcBackProject(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static cvLinearPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: native.Array<number>, param3: number, param4: number): void;
				public static dilate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvApproxChains(param0: org.bytedeco.javacpp.opencv_core.CvSeq, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer): void;
				public static integral3(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number): void;
				public static cvPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvFillConvexPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number): void;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): number;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static cvDrawPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<org.bytedeco.javacpp.opencv_core.CvPoint>, param2: native.Array<number>, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
				public static cvReleasePyramid(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: number): void;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: number, param7: number): void;
				public static cvIntegral(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvDrawRect(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: java.nio.FloatBuffer, param6: number, param7: boolean): void;
				public static cvDrawCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static convertMaps(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: number, param8: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvCornerMinEigenVal(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: java.nio.FloatBuffer, param5: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvEllipseBox(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvBox2D, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: number, param4: number, param5: number): void;
				public static accumulateSquare(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvLinearPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: native.Array<number>, param3: number): void;
				public static cv2DRotationMatrix(param0: native.Array<number>, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static cvSetHistBinRanges(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: org.bytedeco.javacpp.FloatPointer): void;
				public static filter2D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvEllipse(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvCanny(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static spatialGradient(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static convertMaps(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: boolean): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static convexHull(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static convexHull(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: boolean, param3: boolean): void;
				public static matchTemplate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
				public static cvFilter2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: native.Array<number>): void;
				public static integral3(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static preCornerDetect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: native.Array<number>, param6: number, param7: boolean): void;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.FloatPointer, param5: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static accumulateWeighted(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: java.nio.FloatBuffer, param5: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static getPerspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: native.Array<number>): void;
				public static matchTemplate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
				public static cvMinAreaRect2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvBox2D;
				public static cvLaplace(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static Laplacian(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static fitEllipse(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static cvFindCornerSubPix(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.FloatBuffer, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvSize, param4: org.bytedeco.javacpp.opencv_core.CvSize, param5: org.bytedeco.javacpp.opencv_core.CvTermCriteria): void;
				public static cvGetNormalizedCentralMoment(param0: org.bytedeco.javacpp.opencv_imgproc.CvMoments, param1: number, param2: number): number;
				public static cvGetMinMaxHistValue(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: native.Array<number>, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>): void;
				public static connectedComponentsWithStats(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static connectedComponents(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static filter2D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvDrawContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvSeq, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static cornerHarris(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.DoublePointer): org.bytedeco.javacpp.opencv_core.Point2d;
				public static cvGetMinMaxHistValue(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: native.Array<number>, param2: native.Array<number>): void;
				public static cvDrawEllipse(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.CvScalar, param7: number, param8: number, param9: number): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: number, param8: org.bytedeco.javacpp.opencv_core.Point): void;
				public static minEnclosingCircle(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: org.bytedeco.javacpp.FloatPointer): void;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: number, param8: number, param9: number): void;
				public static ellipse2Poly(param0: org.bytedeco.javacpp.opencv_core.Point, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.PointVector): void;
				public static boxFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Point, param5: boolean, param6: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: java.nio.IntBuffer, param5: java.nio.FloatBuffer): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static cvCreateStructuringElementEx(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.IplConvKernel;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static minAreaRect(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.DoublePointer): org.bytedeco.javacpp.opencv_core.Point2d;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static adaptiveThreshold(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RotatedRect, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number): void;
				public static minEnclosingCircle(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: org.bytedeco.javacpp.FloatPointer): void;
				public static warpPolar(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Point2f, param4: number, param5: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static line(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static cvFillConvexPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static cvMoments(): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: number, param8: org.bytedeco.javacpp.opencv_core.Point): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static getPerspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static Laplacian(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: native.Array<number>): void;
				public static convexHull(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: boolean, param3: boolean): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number): void;
				public static boundingRect(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
				public static HoughLinesPointSet(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static cvMoments(param0: org.bytedeco.javacpp.opencv_core.Moments): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: number, param7: number, param8: boolean, param9: number): void;
				public static contourArea(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean): number;
				public static cvResize(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static cvGoodFeaturesToTrack(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: native.Array<number>, param4: native.Array<number>, param5: number, param6: number): void;
				public static HuMoments(param0: org.bytedeco.javacpp.opencv_core.Moments, param1: org.bytedeco.javacpp.DoublePointer): void;
				public static GaussianBlur(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static arcLength(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean): number;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: number): void;
				public static cvFloodFill(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: native.Array<number>): org.bytedeco.javacpp.opencv_core.Point2d;
				public static connectedComponents(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static accumulateWeighted(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.FloatPointer, param6: boolean): void;
				public static moments(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Moments;
				public static minEnclosingCircle(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: java.nio.FloatBuffer): void;
				public static cvCalcBackProjectPatch(param0: org.bytedeco.javacpp.helper.opencv_core.IplImageArray, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.opencv_core.CvHistogram, param4: number, param5: number): void;
				public static cvCreateHist(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: org.bytedeco.javacpp.PointerPointer<any>, param4: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static cornerEigenValsAndVecs(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static minEnclosingTriangle(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RotatedRect, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static createHanningWindow(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.FloatPointer, param5: number): void;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: boolean): void;
				public static logPolar(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: number, param4: number): void;
				public static applyColorMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer, param8: boolean, param9: boolean): void;
				public static cvCalcHist(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static Laplacian(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static sepFilter2D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvFloodFill(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: org.bytedeco.javacpp.opencv_core.CvScalar, param5: org.bytedeco.javacpp.opencv_imgproc.CvConnectedComp, param6: number, param7: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static compareHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): number;
				public static cvMakeHistHeaderForArray(param0: number, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: native.Array<number>, param4: native.Array<number>, param5: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvCreatePyramid(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.CvMat;
				public static getPerspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static arrowedLine(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static blendLinear(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: org.bytedeco.javacpp.opencv_core.Rect, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: number): number;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static cvBoundingRect(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number): org.bytedeco.javacpp.opencv_core.CvRect;
				public static cvCalcBackProject(param0: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static arrowedLine(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvCalcBackProjectPatch(param0: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.opencv_core.CvHistogram, param4: number, param5: number): void;
				public static cornerMinEigenVal(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer, param8: boolean, param9: boolean): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: number): void;
				public static distanceTransformWithLabels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number): void;
				public static watershed(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static cvClearHist(param0: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static blur(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static getRectSubPix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static getRectSubPix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: java.nio.FloatBuffer, param6: number, param7: boolean): void;
				public static connectedComponentsWithStatsWithAlgorithm(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number, param6: number): number;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvMakeHistHeaderForArray(param0: number, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: java.nio.FloatBuffer, param4: java.nio.FloatBuffer, param5: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static sepFilter2D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.FloatPointer, param6: number, param7: boolean): void;
				public static cvWarpPerspective(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static warpPolar(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Point2f, param4: number, param5: number): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static distanceTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static getStructuringElement(param0: number, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Point): org.bytedeco.javacpp.opencv_core.Mat;
				public static minEnclosingCircle(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: native.Array<number>): void;
				public static cvMinEnclosingCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param2: org.bytedeco.javacpp.FloatPointer): number;
				public static cvSetHistBinRanges(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: native.Array<number>, param2: number): void;
				public static cvStartFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: number, param3: number, param4: number, param5: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_imgproc.CvContourScanner;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat, param7: number, param8: org.bytedeco.javacpp.opencv_core.Point): void;
				public static HuMoments(param0: org.bytedeco.javacpp.opencv_core.Moments, param1: java.nio.DoubleBuffer): void;
				public static cvFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: org.bytedeco.javacpp.PointerPointer<any>, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.CvPoint): number;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvResize(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvCalcArrHist(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): number;
				public static cvEqualizeHist(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static HuMoments(param0: org.bytedeco.javacpp.opencv_core.Moments, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvMakeHistHeaderForArray(param0: number, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static matchTemplate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static createHanningWindow(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.FloatPointer): void;
				public static cvCalcBackProject(param0: org.bytedeco.javacpp.helper.opencv_core.IplImageArray, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static filter2D(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Point, param5: number, param6: number): void;
				public static blendLinear(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static circle(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static cornerEigenValsAndVecs(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: native.Array<number>): org.bytedeco.javacpp.opencv_core.Point2d;
				public static arcLength(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean): number;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: string, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: boolean): void;
				public static cvGetHuMoments(param0: org.bytedeco.javacpp.opencv_imgproc.CvMoments, param1: org.bytedeco.javacpp.opencv_imgproc.CvHuMoments): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: native.Array<number>, param7: native.Array<number>, param8: boolean, param9: boolean): void;
				public static cvCreatePyramid(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvSize, param4: org.bytedeco.javacpp.helper.opencv_core.CvArr, param5: number, param6: number): org.bytedeco.javacpp.PointerPointer<any>;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number): void;
				public static cvGoodFeaturesToTrack(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param4: org.bytedeco.javacpp.IntPointer, param5: number, param6: number): void;
				public static getTextSize(param0: string, param1: number, param2: number, param3: number, param4: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_core.Size;
				public static rotatedRectangleIntersection(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: org.bytedeco.javacpp.opencv_core.RotatedRect, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: native.Array<number>, param5: native.Array<number>): void;
				public static accumulateSquare(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static boxFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static cvMinAreaRect2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.CvBox2D;
				public static cvMakeHistHeaderForArray(param0: number, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: native.Array<number>, param4: native.Array<native.Array<number>>, param5: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static boxFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: native.Array<number>, param7: native.Array<number>, param8: boolean, param9: boolean): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static cvSobel(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number, param4: number): void;
				public static getDerivKernels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: boolean, param6: number): void;
				public static blendLinear(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvLinearPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param3: number, param4: number): void;
				public static accumulate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static adaptiveThreshold(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.FloatPointer): void;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar): number;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: number, param7: boolean, param8: number): void;
				public static grabCut(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Rect, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: number): void;
				public static cvPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static integral2(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static connectedComponentsWithAlgorithm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): number;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: number): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: org.bytedeco.javacpp.opencv_core.Rect, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number): number;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static distanceTransformWithLabels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static HoughLinesP(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static convertMaps(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
				public static cvGoodFeaturesToTrack(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: native.Array<number>, param4: native.Array<number>, param5: number, param6: number, param7: org.bytedeco.javacpp.helper.opencv_core.CvArr, param8: number, param9: number, param10: number): void;
				public static cornerSubPix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
				public static integral2(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static cvMakeHistHeaderForArray(param0: number, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: java.nio.FloatBuffer): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.FloatPointer, param5: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.FloatPointer): void;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: number): void;
				public static connectedComponents(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): number;
				public static cvCreateStructuringElementEx(param0: number, param1: number, param2: number, param3: number, param4: number, param5: native.Array<number>): org.bytedeco.javacpp.opencv_core.IplConvKernel;
				public static cvBoxPoints(param0: org.bytedeco.javacpp.opencv_core.CvBox2D, param1: org.bytedeco.javacpp.opencv_core.CvPoint2D32f): void;
				public static moments(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean): org.bytedeco.javacpp.opencv_core.Moments;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvFont(param0: number, param1: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
				public static compareHist(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): number;
				public static cvCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static convexityDefects(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: string, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: boolean): void;
				public static cvPreCornerDetect(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvDrawRect(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static cvCanny(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number, param4: number): void;
				public static getDerivKernels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: boolean, param6: number): void;
				public static fitEllipseDirect(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static accumulateSquare(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: native.Array<number>, param6: number, param7: boolean): void;
				public static cvInitLineIterator(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_core.CvLineIterator, param4: number, param5: number): number;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: java.nio.FloatBuffer, param5: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static preCornerDetect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: boolean): void;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static cvDrawLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static minEnclosingCircle(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: java.nio.FloatBuffer): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: native.Array<number>, param5: number): void;
				public static connectedComponentsWithStats(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number): number;
				public static erode(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvLogPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param3: number, param4: number): void;
				public static Laplacian(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static HoughLines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static cvPutText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: string, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static HoughLinesP(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static cvFilter2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.FloatPointer, param6: boolean): void;
				public static cornerHarris(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static morphologyEx(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static getStructuringElement(param0: number, param1: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_core.Mat;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static sqrBoxFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Point, param5: boolean, param6: number): void;
				public static boundingRect(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
				public static connectedComponents(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): number;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static intersectConvexConvex(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvGetRectSubPix(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: native.Array<number>): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static cvCalcArrBackProject(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: number, param6: number): void;
				public static cvCalcEMD2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.opencv_imgproc.CvDistanceFunction, param4: org.bytedeco.javacpp.helper.opencv_core.CvArr, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr, param6: java.nio.FloatBuffer, param7: org.bytedeco.javacpp.Pointer): number;
				public static cvDrawPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer, param8: boolean, param9: boolean): void;
				public static cvMatchShapes(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.Pointer, param2: number): number;
				public static HoughLines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: native.Array<number>, param7: native.Array<number>): void;
				public static cvStartFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_imgproc.CvContourScanner;
				public static getDerivKernels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static cvCalcHist(param0: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvFitLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number, param4: number, param5: native.Array<number>): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: number): void;
				public static cvMatchShapes(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.Pointer, param2: number, param3: number): number;
				public static cvCalcArrHist(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static Laplacian(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static cvLaplace(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static cvPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvFillConvexPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number): void;
				public static getGaussianKernel(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: number): void;
				public static cvGetMinMaxHistValue(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: org.bytedeco.javacpp.FloatPointer, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.IntPointer): void;
				public static cvCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static cvLogPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param3: number): void;
				public static convertMaps(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: boolean): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: native.Array<number>, param7: native.Array<number>, param8: boolean, param9: boolean): void;
				public static minEnclosingTriangle(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvErode(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.IplConvKernel, param3: number): void;
				public static cvDrawContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvSeq, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number): void;
				public static matchTemplate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvDistTransform(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: org.bytedeco.javacpp.helper.opencv_core.CvArr, param6: number): void;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): number;
				public static clipLine(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point): boolean;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: number, param7: boolean, param8: number): void;
				public static HoughCircles(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static spatialGradient(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: native.Array<number>, param5: number): void;
				public static cvCreateHist(param0: number, param1: java.nio.IntBuffer, param2: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static Sobel(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static cvRectangleR(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static cvStartReadChainPoints(param0: org.bytedeco.javacpp.opencv_core.CvChain, param1: org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.FloatPointer, param6: number, param7: boolean): void;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvGetAffineTransform(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param1: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param2: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static cvLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static cvPutText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: string, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static cvGetPerspectiveTransform(param0: java.nio.FloatBuffer, param1: java.nio.FloatBuffer, param2: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: native.Array<number>, param6: number, param7: boolean): void;
				public static cv2DRotationMatrix(param0: java.nio.FloatBuffer, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: native.Array<number>, param6: number, param7: boolean): void;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: boolean): void;
				public static circle(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static pyrMeanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static HoughCircles(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static minAreaRect(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static convexityDefects(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvFloodFill(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static integral3(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvCreateStructuringElementEx(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.IplConvKernel;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.PointerPointer<any>, param8: boolean, param9: boolean): void;
				public static convexityDefects(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvDrawRect(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static cvDrawEllipse(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.CvScalar, param7: number, param8: number, param9: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: native.Array<number>): void;
				public static cvCvtColor(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvLinearPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param3: number): void;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): number;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static HoughLinesPointSet(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static dilate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvPointSeqFromMat(param0: number, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvContour, param3: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: java.nio.FloatBuffer, param5: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: native.Array<number>): void;
				public static cvApproxPoly(param0: org.bytedeco.javacpp.Pointer, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvMemStorage, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static cvDrawContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvSeq, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.CvPoint): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvPreCornerDetect(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static cvClipLine(param0: org.bytedeco.javacpp.opencv_core.CvSize, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer): number;
				public static convexHull(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static cvSampleLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.Pointer, param4: number): number;
				public static cvCalcHist(param0: org.bytedeco.javacpp.helper.opencv_core.IplImageArray, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static Sobel(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: string, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static boxFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Point, param5: boolean, param6: number): void;
				public static cvCreateHist(param0: number, param1: native.Array<number>, param2: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static cvHoughLines2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.Pointer, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static cvRectangle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static cvThreshHist(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: number): void;
				public static cvLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static getTextSize(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.Size;
				public static compareHist(param0: org.bytedeco.javacpp.opencv_core.SparseMat, param1: org.bytedeco.javacpp.opencv_core.SparseMat, param2: number): number;
				public static cvPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
				public static cvRectangle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: boolean): void;
				public static line(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static linearPolar(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: number, param4: number): void;
				public static cvLinearPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: java.nio.FloatBuffer, param3: number, param4: number): void;
				public static cvCopyHist(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static medianBlur(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static sqrBoxFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point2d;
				public static pointPolygonTest(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: boolean): number;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): number;
				public static isContourConvex(param0: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static cvRemap(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static connectedComponentsWithStats(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar): number;
				public static cvFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: org.bytedeco.javacpp.opencv_core.CvSeq, param3: number, param4: number, param5: number, param6: java.nio.IntBuffer): number;
				public static cvPyrDown(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static preCornerDetect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static cornerSubPix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
				public static fitEllipseAMS(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static cvConvexHull2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.Pointer, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RotatedRect, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number): void;
				public static cvPyrUp(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static cvGetPerspectiveTransform(param0: native.Array<number>, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static cv2DRotationMatrix(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static intersectConvexConvex(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: boolean): number;
				public static equalizeHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvDrawContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvSeq, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number, param7: native.Array<number>): void;
				public static adaptiveThreshold(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static cvHoughCircles(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.Pointer, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static cvMinEnclosingCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.FloatBuffer, param2: java.nio.FloatBuffer): number;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): void;
				public static cvFindNextContour(param0: org.bytedeco.javacpp.opencv_imgproc.CvContourScanner): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static cvArcLength(param0: org.bytedeco.javacpp.Pointer): number;
				public static cvMakeHistHeaderForArray(param0: number, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: org.bytedeco.javacpp.FloatPointer, param4: org.bytedeco.javacpp.FloatPointer, param5: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer): void;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: org.bytedeco.javacpp.opencv_core.Rect, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number): number;
				public static getRotationMatrix2D(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: number, param2: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static cvEndFindContours(param0: org.bytedeco.javacpp.opencv_imgproc.CvContourScanner): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Point): void;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static cornerSubPix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
				public static cvCalcEMD2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): number;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Point): void;
				public static line(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static cvEllipse(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static applyColorMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvRemap(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static morphologyEx(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Point, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static line(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static HuMoments(param0: org.bytedeco.javacpp.opencv_core.Moments, param1: native.Array<number>): void;
				public static cvMinEnclosingCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>): number;
				public static isContourConvex(param0: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static cvGetTextSize(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_imgproc.CvFont, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: native.Array<number>): void;
				public static moments(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean): org.bytedeco.javacpp.opencv_core.Moments;
				public static cvFindCornerSubPix(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvSize, param4: org.bytedeco.javacpp.opencv_core.CvSize, param5: org.bytedeco.javacpp.opencv_core.CvTermCriteria): void;
				public static cornerMinEigenVal(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.FloatPointer): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: number): void;
				public static cvFitLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.FloatPointer): void;
				public static cvCalcBackProjectPatch(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.opencv_core.CvHistogram, param4: number, param5: number): void;
				public static cvAdaptiveThreshold(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static cvFillPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static sepFilter2D(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.Point, param6: number, param7: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer): void;
				public static cvMaxRect(param0: org.bytedeco.javacpp.opencv_core.CvRect, param1: org.bytedeco.javacpp.opencv_core.CvRect): org.bytedeco.javacpp.opencv_core.CvRect;
				public static cvThreshold(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number, param4: number): number;
				public static getDerivKernels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static accumulateWeighted(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static connectedComponentsWithStatsWithAlgorithm(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number, param6: number): number;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvLogPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: java.nio.FloatBuffer, param3: number, param4: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Point): void;
				public static contourArea(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static cvCreateHist(param0: number, param1: java.nio.IntBuffer, param2: number, param3: java.nio.FloatBuffer, param4: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static integral3(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number): void;
				public static cvInitFont(param0: org.bytedeco.javacpp.opencv_imgproc.CvFont, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: number, param8: org.bytedeco.javacpp.opencv_core.Point): void;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: boolean): void;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RotatedRect, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: native.Array<number>, param5: native.Array<number>, param6: boolean): void;
				public static arrowedLine(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number, param7: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: org.bytedeco.javacpp.opencv_core.CvSeq, param3: number, param4: number, param5: number): number;
				public static cvSetHistBinRanges(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: java.nio.FloatBuffer, param2: number): void;
				public static cvCalcHist(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvClipLine(param0: org.bytedeco.javacpp.opencv_core.CvSize, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvPoint): number;
				public static accumulateProduct(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvCalcBayesianProb(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: number, param2: org.bytedeco.javacpp.PointerPointer<any>): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
				public static dilate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static watershed(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: string, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static HoughLinesP(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static cvBoxPoints(param0: org.bytedeco.javacpp.opencv_core.CvBox2D, param1: java.nio.FloatBuffer): void;
				public static warpPolar(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Point2f, param4: number, param5: number): void;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number): void;
				public static HoughLinesP(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.IntPointer, param5: org.bytedeco.javacpp.FloatPointer, param6: boolean): void;
				public static cvFillPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RotatedRect, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.PointerPointer<any>, param6: number, param7: boolean): void;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: boolean): void;
				public static cvWatershed(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.FloatPointer, param6: number, param7: boolean): void;
				public static cvtColorTwoPlane(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
				public static cvSetHistBinRanges(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: native.Array<native.Array<number>>, param2: number): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static getTextSize(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: number, param4: native.Array<number>): org.bytedeco.javacpp.opencv_core.Size;
				public static bilateralFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.FloatPointer, param5: number): void;
				public static fitEllipseAMS(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static cvEllipse2Poly(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.CvSize, param2: number, param3: number, param4: number, param5: native.Array<number>, param6: number): number;
				public static createHanningWindow(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number): void;
				public static applyColorMap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvCalcArrBackProjectPatch(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.opencv_core.CvHistogram, param4: number, param5: number): void;
				public static clipLine(param0: org.bytedeco.javacpp.opencv_core.Rect, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point): boolean;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.DoublePointer): org.bytedeco.javacpp.opencv_core.Point2d;
				public static fitEllipse(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static getAffineTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: number, param8: number, param9: number): void;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static cvRunningAvg(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvSampleLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.Pointer): number;
				public static threshold(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): number;
				public static getAffineTransform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: java.nio.FloatBuffer, param5: number): void;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: org.bytedeco.javacpp.opencv_core.Rect, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number): number;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: number): void;
				public static cvContourArea(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: number, param7: boolean, param8: number): void;
				public static fitLine(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number): void;
				public static cvMoments(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_imgproc.CvMoments): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvContourPerimeter(param0: org.bytedeco.javacpp.Pointer): number;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: native.Array<number>, param5: native.Array<number>, param6: boolean): void;
				public static HuMoments(param0: org.bytedeco.javacpp.opencv_core.Moments, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvMultiplyAcc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvDrawPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
				public static cvGetTextSize(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_imgproc.CvFont, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: java.nio.IntBuffer): void;
				public static cvStartFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_imgproc.CvContourScanner;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: native.Array<number>): void;
				public static cvInitLineIterator(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.CvLineIterator): number;
				public static cvEllipse2Poly(param0: java.nio.IntBuffer, param1: org.bytedeco.javacpp.opencv_core.CvSize, param2: number, param3: number, param4: number, param5: java.nio.IntBuffer, param6: number): number;
				public static integral2(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static getRectSubPix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): void;
				public static dilate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: native.Array<number>, param7: native.Array<number>): void;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static cvDrawCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static cvSetHistBinRanges(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: java.nio.FloatBuffer): void;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static accumulateSquare(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvContourArea(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvSlice, param2: number): number;
				public static preCornerDetect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static accumulateProduct(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static cvGetRectSubPix(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: java.nio.FloatBuffer): void;
				public static cvFilter2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvPoint): void;
				public static convexHull(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: boolean, param3: boolean): void;
				public static contourArea(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean): number;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer): void;
				public static cvCornerEigenValsAndVecs(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number): void;
				public static matchShapes(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): number;
				public static cvInitLineIterator(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.CvLineIterator, param4: number, param5: number): number;
				public static Scharr(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static cvRectangle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static line(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cornerEigenValsAndVecs(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static accumulateProduct(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvWarpPerspective(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvFilter2D(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: java.nio.IntBuffer): void;
				public static cvCreateStructuringElementEx(param0: number, param1: number, param2: number, param3: number, param4: number, param5: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_core.IplConvKernel;
				public static medianBlur(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer, param8: boolean, param9: boolean): void;
				public static cvDrawLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static filter2D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Point, param5: number, param6: number): void;
				public static cvConvexityDefects(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMemStorage): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static cvSetHistBinRanges(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: native.Array<number>): void;
				public static goodFeaturesToTrack(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: number, param7: number, param8: boolean, param9: number): void;
				public static rotatedRectangleIntersection(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: org.bytedeco.javacpp.opencv_core.RotatedRect, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvCheckContourConvexity(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): number;
				public static Scharr(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static dilate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvDistTransform(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvSmooth(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static cvCalcProbDensity(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: org.bytedeco.javacpp.opencv_core.CvHistogram, param3: number): void;
				public static connectedComponentsWithStats(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.FloatPointer, param5: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static cvFillPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<org.bytedeco.javacpp.opencv_core.CvPoint>, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar, param5: number, param6: number): void;
				public static cvCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static Scharr(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static cvtColorTwoPlane(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: java.nio.IntBuffer, param5: java.nio.FloatBuffer, param6: boolean): void;
				public static createGeneralizedHoughBallard(): org.bytedeco.javacpp.opencv_imgproc.GeneralizedHoughBallard;
				public static line(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Point): void;
				public static HoughLinesP(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static putText(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: string, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: boolean): void;
				public static cvCreateHist(param0: number, param1: native.Array<number>, param2: number, param3: native.Array<number>, param4: number): org.bytedeco.javacpp.opencv_core.CvHistogram;
				public static cornerHarris(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number): void;
				public static distanceTransform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static circle(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: java.nio.DoubleBuffer): org.bytedeco.javacpp.opencv_core.Point2d;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer): void;
				public static warpAffine(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Size): void;
				public static circle(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static cornerMinEigenVal(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static cvGetPerspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param1: org.bytedeco.javacpp.opencv_core.CvPoint2D32f, param2: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvGetQuadrangleSubPix(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static cvMorphologyEx(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.IplConvKernel, param4: number): void;
				public static grabCut(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Rect, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number): void;
				public static pyrMeanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: java.nio.IntBuffer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: native.Array<number>, param5: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static Scharr(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static morphologyEx(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer): void;
				public static connectedComponentsWithStats(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number): number;
				public static Sobel(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static cvFitLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: number, param2: number, param3: number, param4: number, param5: java.nio.FloatBuffer): void;
				public static connectedComponentsWithStats(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number): number;
				public static cvCalcArrBackProjectPatch(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: org.bytedeco.javacpp.opencv_core.CvHistogram, param4: number, param5: number): void;
				public static cvFillPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar, param5: number, param6: number): void;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static fitEllipseDirect(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static cvLogPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: native.Array<number>, param3: number, param4: number): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number): void;
				public static getTextSize(param0: string, param1: number, param2: number, param3: number, param4: native.Array<number>): org.bytedeco.javacpp.opencv_core.Size;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number): void;
				public static cvCalcArrHist(param0: native.Array<org.bytedeco.javacpp.helper.opencv_core.CvArr>, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: number, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static cvPutText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: string, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static intersectConvexConvex(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: boolean): number;
				public static cvGetMinMaxHistValue(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: java.nio.FloatBuffer, param2: java.nio.FloatBuffer, param3: java.nio.IntBuffer, param4: java.nio.IntBuffer): void;
				public static GaussianBlur(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number): void;
				public static isContourConvex(param0: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static cvBoxPoints(param0: org.bytedeco.javacpp.opencv_core.CvBox2D, param1: native.Array<number>): void;
				public static cvPutText(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_imgproc.CvFont, param4: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static arrowedLine(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static grabCut(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Rect, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: number): void;
				public static sepFilter2D(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static HoughCircles(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static cvReleaseHist(param0: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: native.Array<number>, param7: native.Array<number>, param8: boolean, param9: boolean): void;
				public static pyrMeanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static cvCalcBackProject(param0: org.bytedeco.javacpp.PointerPointer<any>, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static cvRectangle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.FloatPointer, param6: number, param7: boolean): void;
				public static boundingRect(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
				public static cvAcc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: number): void;
				public static cvFloodFill(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.CvScalar, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: org.bytedeco.javacpp.opencv_core.CvScalar, param5: org.bytedeco.javacpp.opencv_imgproc.CvConnectedComp, param6: number, param7: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: native.Array<number>, param5: native.Array<number>): void;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: org.bytedeco.javacpp.opencv_core.Rect, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: number): number;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: boolean): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvMoments(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_imgproc.CvMoments, param2: number): void;
				public static fitLine(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static cvDrawLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static applyColorMap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static getFontScaleFromHeight(param0: number, param1: number): number;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point2d;
				public static morphologyEx(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number): void;
				public static cvPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static logPolar(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: number, param4: number): void;
				public static cornerHarris(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: java.nio.FloatBuffer, param6: number, param7: boolean): void;
				public static cvDrawPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
				public static Sobel(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: native.Array<number>, param7: native.Array<number>, param8: boolean, param9: boolean): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static getPerspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static contourArea(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static fillConvexPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static GaussianBlur(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number): void;
				public static accumulate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvMorphologyEx(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.opencv_core.IplConvKernel, param4: number, param5: number): void;
				public static getPerspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static cvLogPolar(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: java.nio.FloatBuffer, param3: number): void;
				public static cvConvexHull2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static cornerHarris(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static accumulate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static distanceTransform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static cvSubstituteContour(param0: org.bytedeco.javacpp.opencv_imgproc.CvContourScanner, param1: org.bytedeco.javacpp.opencv_core.CvSeq): void;
				public static boxPoints(param0: org.bytedeco.javacpp.opencv_core.RotatedRect, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static accumulate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvCalcProbDensity(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: org.bytedeco.javacpp.opencv_core.CvHistogram, param2: org.bytedeco.javacpp.opencv_core.CvHistogram): void;
				public static cvCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: java.nio.IntBuffer, param5: java.nio.FloatBuffer): void;
				public static cvFillPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvScalar, param5: number, param6: number): void;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvDrawEllipse(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.CvSize, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.CvScalar, param7: number, param8: number, param9: number): void;
				public static minEnclosingCircle(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: native.Array<number>): void;
				public static pointPolygonTest(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point2f, param2: boolean): number;
				public static remap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static arrowedLine(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number, param7: number): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: number): void;
				public static erode(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cornerEigenValsAndVecs(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static accumulateProduct(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer, param8: boolean, param9: boolean): void;
				public static cvCornerHarris(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number, param4: number): void;
				public static linearPolar(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: number, param4: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: java.nio.IntBuffer, param5: java.nio.FloatBuffer): void;
				public static HoughCircles(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static cvPointPolygonTest(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: number): number;
				public static cvDrawPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
				public static distanceTransformWithLabels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number): void;
				public static EMD(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: native.Array<number>, param5: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: org.bytedeco.javacpp.IntPointer, param7: org.bytedeco.javacpp.FloatPointer, param8: boolean, param9: boolean): void;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: number): void;
				public static cvSetHistBinRanges(param0: org.bytedeco.javacpp.opencv_core.CvHistogram, param1: org.bytedeco.javacpp.PointerPointer<any>, param2: number): void;
				public static integral2(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static distanceTransform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.FloatPointer): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: number, param8: org.bytedeco.javacpp.opencv_core.Point): void;
				public static getAffineTransform(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Point2f): org.bytedeco.javacpp.opencv_core.Mat;
				public static matchTemplate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static distanceTransformWithLabels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static pyrMeanShiftFiltering(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: native.Array<number>, param6: number, param7: boolean): void;
				public static pyrUp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: java.nio.FloatBuffer): void;
				public static createGeneralizedHoughGuil(): org.bytedeco.javacpp.opencv_imgproc.GeneralizedHoughGuil;
				public static pyrDown(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: java.nio.FloatBuffer, param5: number): void;
				public static resize(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static ellipse(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvCopyMakeBorder(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: native.Array<number>, param3: number): void;
				public static cvLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number, param6: number): void;
				public static cvSampleLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.Pointer): number;
				public static cornerMinEigenVal(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static accumulateProduct(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static medianBlur(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static getFontScaleFromHeight(param0: number, param1: number, param2: number): number;
				public static cvPyrMeanShiftFiltering(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvTermCriteria): void;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static Canny(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: boolean, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static cornerEigenValsAndVecs(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static cvClipLine(param0: org.bytedeco.javacpp.opencv_core.CvSize, param1: native.Array<number>, param2: native.Array<number>): number;
				public static cvConvexityDefects(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static blur(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number): void;
				public static createCLAHE(param0: number, param1: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_imgproc.CLAHE;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static moments(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Moments;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: native.Array<number>, param7: native.Array<number>): void;
				public static contourArea(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean): number;
				public static blur(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
				public static cornerMinEigenVal(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvCircle(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static getTextSize(param0: string, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.Size;
				public static spatialGradient(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static HoughLines(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static distanceTransformWithLabels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.SparseMat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer, param8: boolean, param9: boolean): void;
				public static intersectConvexConvex(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: boolean): number;
				public static ellipse2Poly(param0: org.bytedeco.javacpp.opencv_core.Point2d, param1: org.bytedeco.javacpp.opencv_core.Size2d, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Point2dVector): void;
				public static cvLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvPoint, param2: org.bytedeco.javacpp.opencv_core.CvPoint, param3: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number): void;
				public static distanceTransformWithLabels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number): void;
				public static cvWarpAffine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static cvDilate(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: number): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static integral3(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static cvAcc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static intersectConvexConvex(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static cvArcLength(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.opencv_core.CvSlice, param2: number): number;
				public static cvColorToScalar(param0: number, param1: number): org.bytedeco.javacpp.opencv_core.CvScalar;
				public static demosaicing(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static cvConvertMaps(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr, param3: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cvPolyLine(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<org.bytedeco.javacpp.opencv_core.CvPoint>, param2: native.Array<number>, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number, param7: number, param8: number): void;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.FloatPointer): void;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Point): void;
				public static phaseCorrelate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: java.nio.DoubleBuffer): org.bytedeco.javacpp.opencv_core.Point2d;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static warpPerspective(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvReleaseStructuringElement(param0: org.bytedeco.javacpp.opencv_core.IplConvKernel): void;
				public static morphologyEx(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Point, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static cvtColorTwoPlane(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
				public static cvInitLineIterator(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.CvLineIterator, param4: number, param5: number): number;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: java.nio.FloatBuffer): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Point): void;
				public static spatialGradient(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static cvReadChainPoint(param0: org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader): org.bytedeco.javacpp.opencv_core.CvPoint;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number, param6: native.Array<number>, param7: native.Array<number>): void;
				public static cvSquareAcc(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: org.bytedeco.javacpp.helper.opencv_core.CvArr): void;
				public static Sobel(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static rectangle(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: number): void;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat, param7: number, param8: org.bytedeco.javacpp.opencv_core.Point): void;
				public static minEnclosingTriangle(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static grabCut(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Rect, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number): void;
				public static dilate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number, param3: number): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static cvFillConvexPoly(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: native.Array<number>, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvScalar, param4: number, param5: number): void;
				public static cvEllipse2Poly(param0: org.bytedeco.javacpp.opencv_core.CvPoint, param1: org.bytedeco.javacpp.opencv_core.CvSize, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.CvPoint, param6: number): number;
				public static buildPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: number): void;
				public static cvHoughLines2(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.Pointer, param2: number, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_core.CvSeq;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.opencv_core.SparseMat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.PointerPointer<any>, param6: number, param7: boolean): void;
				public static arcLength(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean): number;
				public static cvCornerMinEigenVal(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.helper.opencv_core.CvArr, param2: number, param3: number): void;
				public static findContours(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static floodFill(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Point, param3: org.bytedeco.javacpp.opencv_core.Scalar, param4: org.bytedeco.javacpp.opencv_core.Rect, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: org.bytedeco.javacpp.opencv_core.Scalar, param7: number): number;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: java.nio.FloatBuffer): void;
				public static approxPolyDP(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: boolean): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static fillPoly(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Point): void;
				public static cornerEigenValsAndVecs(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static polylines(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: boolean, param5: org.bytedeco.javacpp.opencv_core.Scalar, param6: number, param7: number, param8: number): void;
				public static cvFont(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
				public static cvFindContours(param0: org.bytedeco.javacpp.helper.opencv_core.CvArr, param1: org.bytedeco.javacpp.opencv_core.CvMemStorage, param2: org.bytedeco.javacpp.opencv_core.CvSeq, param3: number, param4: number, param5: number, param6: native.Array<number>): number;
				public static calcBackProject(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: java.nio.FloatBuffer): void;
				public static getRectSubPix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): void;
				public static calcHist(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.IntBuffer, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number, param6: java.nio.IntBuffer, param7: java.nio.FloatBuffer, param8: boolean, param9: boolean): void;
				public static getPerspectiveTransform(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Point2f): org.bytedeco.javacpp.opencv_core.Mat;
				public static drawContours(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static distanceTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static createLineSegmentDetector(): org.bytedeco.javacpp.opencv_imgproc.LineSegmentDetector;
				public static linearPolar(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: number, param4: number): void;
				public static integral(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static erode(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Scalar): void;
				public static getRectSubPix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Point2f, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static cvtColor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static drawMarker(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Scalar, param3: number, param4: number, param5: number, param6: number): void;
			}
			export module opencv_imgproc {
				export class CLAHE extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CLAHE>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setClipLimit(param0: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setTilesGridSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
					public getTilesGridSize(): org.bytedeco.javacpp.opencv_core.Size;
					public constructor();
					public collectGarbage(): void;
					public constructor(param0: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getClipLimit(): number;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class CvChainPtReader extends org.bytedeco.javacpp.opencv_core.CvSeqReader {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader>;
					public block(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public position(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public prev_elem(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public code(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public block(param0: org.bytedeco.javacpp.opencv_core.CvSeqBlock): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public delta_index(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public seq(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public pt(): org.bytedeco.javacpp.opencv_core.CvPoint;
					public constructor();
					public block_min(): org.bytedeco.javacpp.BytePointer;
					public deltas(): org.bytedeco.javacpp.BytePointer;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public seq(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public constructor(param0: number);
					public block_max(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public block_min(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public prev_elem(): org.bytedeco.javacpp.BytePointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public block_min(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public seq(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public pt(param0: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public deltas(param0: number, param1: number): number;
					public deltas(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public block(): org.bytedeco.javacpp.opencv_core.CvSeqBlock;
					public header_size(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public block_max(): org.bytedeco.javacpp.BytePointer;
					public header_size(): number;
					public prev_elem(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_imgproc.CvChainPtReader;
					public delta_index(): number;
					public delta_index(param0: number): org.bytedeco.javacpp.opencv_core.CvSeqReader;
					public code(): number;
				}
				export class CvConnectedComp {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CvConnectedComp>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvConnectedComp;
					public rect(param0: org.bytedeco.javacpp.opencv_core.CvRect): org.bytedeco.javacpp.opencv_imgproc.CvConnectedComp;
					public contour(param0: org.bytedeco.javacpp.opencv_core.CvSeq): org.bytedeco.javacpp.opencv_imgproc.CvConnectedComp;
					public constructor();
					public contour(): org.bytedeco.javacpp.opencv_core.CvSeq;
					public area(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvConnectedComp;
					public value(): org.bytedeco.javacpp.opencv_core.CvScalar;
					public value(param0: org.bytedeco.javacpp.opencv_core.CvScalar): org.bytedeco.javacpp.opencv_imgproc.CvConnectedComp;
					public constructor(param0: number);
					public area(): number;
					public rect(): org.bytedeco.javacpp.opencv_core.CvRect;
				}
				export class CvContourScanner {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CvContourScanner>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class CvConvexityDefect {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CvConvexityDefect>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public end(): org.bytedeco.javacpp.opencv_core.CvPoint;
					public depth(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvConvexityDefect;
					public constructor();
					public depth_point(): org.bytedeco.javacpp.opencv_core.CvPoint;
					public depth_point(param0: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_imgproc.CvConvexityDefect;
					public start(): org.bytedeco.javacpp.opencv_core.CvPoint;
					public end(param0: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_imgproc.CvConvexityDefect;
					public position(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvConvexityDefect;
					public start(param0: org.bytedeco.javacpp.opencv_core.CvPoint): org.bytedeco.javacpp.opencv_imgproc.CvConvexityDefect;
					public depth(): number;
					public constructor(param0: number);
				}
				export class CvDistanceFunction {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CvDistanceFunction>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public call(param0: org.bytedeco.javacpp.FloatPointer, param1: org.bytedeco.javacpp.FloatPointer, param2: org.bytedeco.javacpp.Pointer): number;
				}
				export class CvFeatureTree {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CvFeatureTree>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class CvFont extends org.bytedeco.javacpp.helper.opencv_core.AbstractCvFont {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CvFont>;
					public font_face(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public ascii(): org.bytedeco.javacpp.IntPointer;
					public vscale(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
					public shear(): number;
					public color(param0: org.bytedeco.javacpp.opencv_core.CvScalar): org.bytedeco.javacpp.opencv_imgproc.CvFont;
					public shear(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
					public hscale(): number;
					public hscale(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
					public dx(): number;
					public greek(): org.bytedeco.javacpp.IntPointer;
					public vscale(): number;
					public color(): org.bytedeco.javacpp.opencv_core.CvScalar;
					public thickness(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
					public font_face(): number;
					public constructor();
					public nameFont(): org.bytedeco.javacpp.BytePointer;
					public dx(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
					public position(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
					public line_type(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvFont;
					public cyrillic(): org.bytedeco.javacpp.IntPointer;
					public thickness(): number;
					public line_type(): number;
					public constructor(param0: number);
				}
				export class CvHuMoments {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CvHuMoments>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public hu7(): number;
					public hu2(): number;
					public hu2(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvHuMoments;
					public hu4(): number;
					public hu1(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvHuMoments;
					public hu6(): number;
					public hu1(): number;
					public constructor();
					public hu3(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvHuMoments;
					public hu4(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvHuMoments;
					public hu5(): number;
					public hu5(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvHuMoments;
					public hu6(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvHuMoments;
					public hu3(): number;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvHuMoments;
					public hu7(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvHuMoments;
				}
				export class CvLSH {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CvLSH>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class CvLSHOperations {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CvLSHOperations>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class CvMoments extends org.bytedeco.javacpp.helper.opencv_imgproc.AbstractCvMoments {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.CvMoments>;
					public mu02(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Moments);
					public mu12(): number;
					public mu21(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public asMoments(): org.bytedeco.javacpp.opencv_core.Moments;
					public m03(): number;
					public m21(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public m20(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public mu11(): number;
					public mu21(): number;
					public m20(): number;
					public constructor();
					public m30(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public m10(): number;
					public inv_sqrt_m00(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public m00(): number;
					public constructor(param0: number);
					public m11(): number;
					public mu02(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mu20(): number;
					public mu30(): number;
					public m01(): number;
					public m21(): number;
					public mu03(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public m00(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public m01(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public inv_sqrt_m00(): number;
					public m03(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public m02(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public mu30(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public m30(): number;
					public m02(): number;
					public mu12(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public position(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public mu11(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public m12(): number;
					public mu03(): number;
					public m12(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public m10(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public m11(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
					public mu20(param0: number): org.bytedeco.javacpp.opencv_imgproc.CvMoments;
				}
				export class GeneralizedHough extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.GeneralizedHough>;
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point): void;
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getDp(): number;
					public setMinDist(param0: number): void;
					public setCannyHighThresh(param0: number): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Point): void;
					public setDp(param0: number): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public getCannyHighThresh(): number;
					public constructor(param0: number);
					public getMaxBufferSize(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Point): void;
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Point): void;
					public setMaxBufferSize(param0: number): void;
					public setCannyLowThresh(param0: number): void;
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Point): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Point): void;
					public getCannyLowThresh(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getMinDist(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setTemplate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
				export class GeneralizedHoughBallard extends org.bytedeco.javacpp.opencv_imgproc.GeneralizedHough {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.GeneralizedHoughBallard>;
					public getLevels(): number;
					public getVotesThreshold(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setVotesThreshold(param0: number): void;
					public constructor();
					public setLevels(param0: number): void;
					public constructor(param0: number);
				}
				export class GeneralizedHoughGuil extends org.bytedeco.javacpp.opencv_imgproc.GeneralizedHough {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.GeneralizedHoughGuil>;
					public getScaleThresh(): number;
					public setPosThresh(param0: number): void;
					public getPosThresh(): number;
					public setMinScale(param0: number): void;
					public getScaleStep(): number;
					public setScaleThresh(param0: number): void;
					public getMinScale(): number;
					public constructor();
					public getAngleStep(): number;
					public getMinAngle(): number;
					public constructor(param0: number);
					public setAngleEpsilon(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setMaxScale(param0: number): void;
					public getXi(): number;
					public getAngleThresh(): number;
					public setScaleStep(param0: number): void;
					public setAngleThresh(param0: number): void;
					public setXi(param0: number): void;
					public getLevels(): number;
					public getMaxScale(): number;
					public setMaxAngle(param0: number): void;
					public setLevels(param0: number): void;
					public getMaxAngle(): number;
					public setAngleStep(param0: number): void;
					public getAngleEpsilon(): number;
					public setMinAngle(param0: number): void;
				}
				export class LineIterator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.LineIterator>;
					public count(param0: number): org.bytedeco.javacpp.opencv_imgproc.LineIterator;
					public increment(param0: number): org.bytedeco.javacpp.opencv_imgproc.LineIterator;
					public ptr(): org.bytedeco.javacpp.BytePointer;
					public plusStep(): number;
					public ptr0(): org.bytedeco.javacpp.BytePointer;
					public minusStep(): number;
					public minusStep(param0: number): org.bytedeco.javacpp.opencv_imgproc.LineIterator;
					public elemSize(param0: number): org.bytedeco.javacpp.opencv_imgproc.LineIterator;
					public plusStep(param0: number): org.bytedeco.javacpp.opencv_imgproc.LineIterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point, param3: number, param4: boolean);
					public increment(): org.bytedeco.javacpp.opencv_imgproc.LineIterator;
					public plusDelta(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public multiply(): org.bytedeco.javacpp.BytePointer;
					public pos(): org.bytedeco.javacpp.opencv_core.Point;
					public err(param0: number): org.bytedeco.javacpp.opencv_imgproc.LineIterator;
					public count(): number;
					public minusDelta(): number;
					public err(): number;
					public plusDelta(param0: number): org.bytedeco.javacpp.opencv_imgproc.LineIterator;
					public ptr(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_imgproc.LineIterator;
					public step(): number;
					public step(param0: number): org.bytedeco.javacpp.opencv_imgproc.LineIterator;
					public elemSize(): number;
					public minusDelta(param0: number): org.bytedeco.javacpp.opencv_imgproc.LineIterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Point);
				}
				export class LineSegmentDetector extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.LineSegmentDetector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public compareSegments(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public drawSegments(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public compareSegments(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public compareSegments(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
					public constructor();
					public compareSegments(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public compareSegments(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
					public drawSegments(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public compareSegments(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): number;
					public drawSegments(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: number);
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
				export class Subdiv2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_imgproc.Subdiv2D>;
					public static PTLOC_ERROR: number;
					public static PTLOC_OUTSIDE_RECT: number;
					public static PTLOC_INSIDE: number;
					public static PTLOC_VERTEX: number;
					public static PTLOC_ON_EDGE: number;
					public static NEXT_AROUND_ORG: number;
					public static NEXT_AROUND_DST: number;
					public static PREV_AROUND_ORG: number;
					public static PREV_AROUND_DST: number;
					public static NEXT_AROUND_LEFT: number;
					public static NEXT_AROUND_RIGHT: number;
					public static PREV_AROUND_LEFT: number;
					public static PREV_AROUND_RIGHT: number;
					public position(param0: number): org.bytedeco.javacpp.opencv_imgproc.Subdiv2D;
					public getEdgeList(param0: org.bytedeco.javacpp.FloatPointer): void;
					public getLeadingEdgeList(param0: org.bytedeco.javacpp.IntPointer): void;
					public getLeadingEdgeList(param0: java.nio.IntBuffer): void;
					public edgeOrg(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point2f): number;
					public edgeOrg(param0: number): number;
					public findNearest(param0: org.bytedeco.javacpp.opencv_core.Point2f): number;
					public getVertex(param0: number, param1: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_core.Point2f;
					public getVertex(param0: number, param1: native.Array<number>): org.bytedeco.javacpp.opencv_core.Point2f;
					public getEdge(param0: number, param1: number): number;
					public initDelaunay(param0: org.bytedeco.javacpp.opencv_core.Rect): void;
					public constructor();
					public getVertex(param0: number): org.bytedeco.javacpp.opencv_core.Point2f;
					public constructor(param0: number);
					public edgeDst(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point2f): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public insert(param0: org.bytedeco.javacpp.opencv_core.Point2f): number;
					public getTriangleList(param0: org.bytedeco.javacpp.FloatPointer): void;
					public getVertex(param0: number, param1: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.Point2f;
					public getLeadingEdgeList(param0: native.Array<number>): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Rect);
					public locate(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.IntPointer): number;
					public nextEdge(param0: number): number;
					public symEdge(param0: number): number;
					public edgeDst(param0: number): number;
					public locate(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: java.nio.IntBuffer, param2: java.nio.IntBuffer): number;
					public locate(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: native.Array<number>, param2: native.Array<number>): number;
					public getVoronoiFacetList(param0: java.nio.IntBuffer, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Point2fVector): void;
					public getVoronoiFacetList(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Point2fVector): void;
					public findNearest(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Point2f): number;
					public insert(param0: org.bytedeco.javacpp.opencv_core.Point2fVector): void;
					public getVoronoiFacetList(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.opencv_core.Point2fVectorVector, param2: org.bytedeco.javacpp.opencv_core.Point2fVector): void;
					public rotateEdge(param0: number, param1: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_java {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_java>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_ml extends org.bytedeco.javacpp.helper.opencv_ml {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml>;
				public static VAR_NUMERICAL: number;
				public static VAR_ORDERED: number;
				public static VAR_CATEGORICAL: number;
				public static TEST_ERROR: number;
				public static TRAIN_ERROR: number;
				public static ROW_SAMPLE: number;
				public static COL_SAMPLE: number;
				public static createConcentricSpheresTestSet(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static randMVNormal(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static createConcentricSpheresTestSet(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static createConcentricSpheresTestSet(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
				public constructor();
				public static randMVNormal(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static randMVNormal(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
			}
			export module opencv_ml {
				export class ANN_MLP extends org.bytedeco.javacpp.opencv_ml.StatModel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.ANN_MLP>;
					public static BACKPROP: number;
					public static RPROP: number;
					public static ANNEAL: number;
					public static IDENTITY: number;
					public static SIGMOID_SYM: number;
					public static GAUSSIAN: number;
					public static RELU: number;
					public static LEAKYRELU: number;
					public static UPDATE_WEIGHTS: number;
					public static NO_INPUT_SCALE: number;
					public static NO_OUTPUT_SCALE: number;
					public setAnnealItePerStep(param0: number): void;
					public setBackpropMomentumScale(param0: number): void;
					public getTrainMethod(): number;
					public getRpropDWPlus(): number;
					public setActivationFunction(param0: number, param1: number, param2: number): void;
					public getAnnealItePerStep(): number;
					public setRpropDW0(param0: number): void;
					public setBackpropWeightScale(param0: number): void;
					public setTrainMethod(param0: number): void;
					public getBackpropMomentumScale(): number;
					public constructor();
					public getRpropDWMinus(): number;
					public setTrainMethod(param0: number, param1: number, param2: number): void;
					public getTermCriteria(): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public getLayerSizes(): org.bytedeco.javacpp.opencv_core.Mat;
					public getRpropDWMin(): number;
					public setAnnealInitialT(param0: number): void;
					public getBackpropWeightScale(): number;
					public getRpropDWMax(): number;
					public constructor(param0: number);
					public getAnnealInitialT(): number;
					public getAnnealCoolingRatio(): number;
					public getRpropDW0(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setLayerSizes(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setRpropDWMinus(param0: number): void;
					public static load(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.ANN_MLP;
					public setTermCriteria(param0: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
					public setActivationFunction(param0: number): void;
					public getWeights(param0: number): org.bytedeco.javacpp.opencv_core.Mat;
					public getAnnealFinalT(): number;
					public static load(param0: string): org.bytedeco.javacpp.opencv_ml.ANN_MLP;
					public setAnnealCoolingRatio(param0: number): void;
					public static create(): org.bytedeco.javacpp.opencv_ml.ANN_MLP;
					public setRpropDWMax(param0: number): void;
					public setAnnealFinalT(param0: number): void;
					public setRpropDWPlus(param0: number): void;
					public setLayerSizes(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setRpropDWMin(param0: number): void;
					public setLayerSizes(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setAnnealEnergyRNG(param0: org.bytedeco.javacpp.opencv_core.RNG): void;
				}
				export class Boost extends org.bytedeco.javacpp.opencv_ml.DTrees {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.Boost>;
					public static DISCRETE: number;
					public static REAL: number;
					public static LOGIT: number;
					public static GENTLE: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static load(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.Boost;
					public static create(): org.bytedeco.javacpp.opencv_ml.Boost;
					public static load(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.Boost;
					public static load(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.Boost;
					public static load(param0: string): org.bytedeco.javacpp.opencv_ml.Boost;
					public getWeightTrimRate(): number;
					public setWeakCount(param0: number): void;
					public constructor();
					public setWeightTrimRate(param0: number): void;
					public setBoostType(param0: number): void;
					public static load(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.DTrees;
					public static load(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.DTrees;
					public static load(param0: string): org.bytedeco.javacpp.opencv_ml.DTrees;
					public static create(): org.bytedeco.javacpp.opencv_ml.DTrees;
					public constructor(param0: number);
					public static load(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.DTrees;
					public getBoostType(): number;
					public getWeakCount(): number;
				}
				export class DTrees extends org.bytedeco.javacpp.opencv_ml.StatModel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.DTrees>;
					public static PREDICT_AUTO: number;
					public static PREDICT_SUM: number;
					public static PREDICT_MAX_VOTE: number;
					public static PREDICT_MASK: number;
					public getMaxDepth(): number;
					public getPriors(): org.bytedeco.javacpp.opencv_core.Mat;
					public getNodes(): org.bytedeco.javacpp.opencv_ml.DTrees.Node;
					public setMaxCategories(param0: number): void;
					public setCVFolds(param0: number): void;
					public getSplits(): org.bytedeco.javacpp.opencv_ml.DTrees.Split;
					public getTruncatePrunedTree(): boolean;
					public constructor();
					public setUse1SERule(param0: boolean): void;
					public static load(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.DTrees;
					public constructor(param0: number);
					public getMaxCategories(): number;
					public setMaxDepth(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setRegressionAccuracy(param0: number): void;
					public setTruncatePrunedTree(param0: boolean): void;
					public setMinSampleCount(param0: number): void;
					public setUseSurrogates(param0: boolean): void;
					public getUse1SERule(): boolean;
					public getSubsets(): org.bytedeco.javacpp.IntPointer;
					public setPriors(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getCVFolds(): number;
					public getMinSampleCount(): number;
					public getUseSurrogates(): boolean;
					public getRegressionAccuracy(): number;
					public getRoots(): org.bytedeco.javacpp.IntPointer;
					public static load(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.DTrees;
					public static load(param0: string): org.bytedeco.javacpp.opencv_ml.DTrees;
					public static create(): org.bytedeco.javacpp.opencv_ml.DTrees;
					public static load(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.DTrees;
				}
				export module DTrees {
					export class Node {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.DTrees.Node>;
						public right(): number;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public parent(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Node;
						public position(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Node;
						public split(): number;
						public left(): number;
						public defaultDir(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Node;
						public value(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Node;
						public classIdx(): number;
						public value(): number;
						public parent(): number;
						public constructor(param0: number);
						public right(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Node;
						public classIdx(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Node;
						public split(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Node;
						public left(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Node;
						public defaultDir(): number;
					}
					export class Split {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.DTrees.Split>;
						public varIdx(): number;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public quality(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Split;
						public subsetOfs(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Split;
						public inversed(): boolean;
						public c(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Split;
						public varIdx(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Split;
						public next(): number;
						public next(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Split;
						public position(param0: number): org.bytedeco.javacpp.opencv_ml.DTrees.Split;
						public inversed(param0: boolean): org.bytedeco.javacpp.opencv_ml.DTrees.Split;
						public c(): number;
						public subsetOfs(): number;
						public constructor(param0: number);
						public quality(): number;
					}
				}
				export class EM extends org.bytedeco.javacpp.opencv_ml.StatModel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.EM>;
					public static COV_MAT_SPHERICAL: number;
					public static COV_MAT_DIAGONAL: number;
					public static COV_MAT_GENERIC: number;
					public static COV_MAT_DEFAULT: number;
					public static DEFAULT_NCLUSTERS: number;
					public static DEFAULT_MAX_ITERS: number;
					public static START_E_STEP: number;
					public static START_M_STEP: number;
					public static START_AUTO_STEP: number;
					public predict(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public trainE(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public trainM(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public static load(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.EM;
					public trainE(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public predict2(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point2d;
					public trainM(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public predict(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): number;
					public constructor();
					public trainM(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public predict2(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point2d;
					public static load(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.EM;
					public getTermCriteria(): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public predict(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): number;
					public trainM(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public constructor(param0: number);
					public getCovs(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public getCovarianceMatrixType(): number;
					public predict(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): number;
					public trainE(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getClustersNumber(): number;
					public predict(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
					public predict2(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point2d;
					public trainEM(param0: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public trainEM(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public setClustersNumber(param0: number): void;
					public trainEM(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public trainE(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public trainM(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public predict(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public setCovarianceMatrixType(param0: number): void;
					public setTermCriteria(param0: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
					public trainM(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public static load(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.EM;
					public getWeights(): org.bytedeco.javacpp.opencv_core.Mat;
					public trainE(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public static create(): org.bytedeco.javacpp.opencv_ml.EM;
					public trainEM(param0: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public trainEM(param0: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public getMeans(): org.bytedeco.javacpp.opencv_core.Mat;
					public trainEM(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public trainE(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public static load(param0: string): org.bytedeco.javacpp.opencv_ml.EM;
				}
				export class KNearest extends org.bytedeco.javacpp.opencv_ml.StatModel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.KNearest>;
					public static BRUTE_FORCE: number;
					public static KDTREE: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setDefaultK(param0: number): void;
					public setIsClassifier(param0: boolean): void;
					public setEmax(param0: number): void;
					public findNearest(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): number;
					public static create(): org.bytedeco.javacpp.opencv_ml.KNearest;
					public getEmax(): number;
					public setAlgorithmType(param0: number): void;
					public findNearest(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
					public getIsClassifier(): boolean;
					public findNearest(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
					public constructor();
					public findNearest(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public findNearest(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public getAlgorithmType(): number;
					public findNearest(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): number;
					public getDefaultK(): number;
					public constructor(param0: number);
				}
				export class LogisticRegression extends org.bytedeco.javacpp.opencv_ml.StatModel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.LogisticRegression>;
					public static REG_DISABLE: number;
					public static REG_L1: number;
					public static REG_L2: number;
					public static BATCH: number;
					public static MINI_BATCH: number;
					public predict(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public static load(param0: string): org.bytedeco.javacpp.opencv_ml.LogisticRegression;
					public getTrainMethod(): number;
					public static load(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.LogisticRegression;
					public static create(): org.bytedeco.javacpp.opencv_ml.LogisticRegression;
					public setMiniBatchSize(param0: number): void;
					public setTrainMethod(param0: number): void;
					public predict(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): number;
					public constructor();
					public setRegularization(param0: number): void;
					public getTermCriteria(): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public getMiniBatchSize(): number;
					public setLearningRate(param0: number): void;
					public predict(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): number;
					public constructor(param0: number);
					public predict(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public predict(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
					public getLearningRate(): number;
					public getIterations(): number;
					public predict(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public static load(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.LogisticRegression;
					public setTermCriteria(param0: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
					public getRegularization(): number;
					public get_learnt_thetas(): org.bytedeco.javacpp.opencv_core.Mat;
					public setIterations(param0: number): void;
					public static load(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.LogisticRegression;
				}
				export class NormalBayesClassifier extends org.bytedeco.javacpp.opencv_ml.StatModel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.NormalBayesClassifier>;
					public predictProb(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static load(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.NormalBayesClassifier;
					public predictProb(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): number;
					public static load(param0: string): org.bytedeco.javacpp.opencv_ml.NormalBayesClassifier;
					public static load(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.NormalBayesClassifier;
					public predictProb(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public predictProb(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
					public static create(): org.bytedeco.javacpp.opencv_ml.NormalBayesClassifier;
					public static load(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.NormalBayesClassifier;
					public predictProb(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): number;
					public constructor();
					public predictProb(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
					public constructor(param0: number);
				}
				export class ParamGrid {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.ParamGrid>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_ml.ParamGrid;
					public logStep(): number;
					public maxVal(param0: number): org.bytedeco.javacpp.opencv_ml.ParamGrid;
					public minVal(param0: number): org.bytedeco.javacpp.opencv_ml.ParamGrid;
					public minVal(): number;
					public constructor();
					public static create(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_ml.ParamGrid;
					public constructor(param0: number, param1: number, param2: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_ml.ParamGrid;
					public logStep(param0: number): org.bytedeco.javacpp.opencv_ml.ParamGrid;
					public constructor(param0: number);
					public maxVal(): number;
				}
				export class RTrees extends org.bytedeco.javacpp.opencv_ml.DTrees {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.RTrees>;
					public getCalculateVarImportance(): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getVotes(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
					public setTermCriteria(param0: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
					public getVarImportance(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public setCalculateVarImportance(param0: boolean): void;
					public getTermCriteria(): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public static create(): org.bytedeco.javacpp.opencv_ml.RTrees;
					public static load(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.DTrees;
					public static load(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.DTrees;
					public static load(param0: string): org.bytedeco.javacpp.opencv_ml.DTrees;
					public static load(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.RTrees;
					public getVotes(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
					public static load(param0: string): org.bytedeco.javacpp.opencv_ml.RTrees;
					public getActiveVarCount(): number;
					public setActiveVarCount(param0: number): void;
					public static create(): org.bytedeco.javacpp.opencv_ml.DTrees;
					public static load(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.RTrees;
					public constructor(param0: number);
					public getVotes(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
					public static load(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.DTrees;
					public static load(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.RTrees;
				}
				export class SVM extends org.bytedeco.javacpp.opencv_ml.StatModel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.SVM>;
					public static C_SVC: number;
					public static NU_SVC: number;
					public static ONE_CLASS: number;
					public static EPS_SVR: number;
					public static NU_SVR: number;
					public static CUSTOM: number;
					public static LINEAR: number;
					public static POLY: number;
					public static RBF: number;
					public static SIGMOID: number;
					public static CHI2: number;
					public static INTER: number;
					public static C: number;
					public static GAMMA: number;
					public static P: number;
					public static NU: number;
					public static COEF: number;
					public static DEGREE: number;
					public getType(): number;
					public getKernelType(): number;
					public getDecisionFunction(param0: number, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public getGamma(): number;
					public getCoef0(): number;
					public setDegree(param0: number): void;
					public static getDefaultGrid(param0: number): org.bytedeco.javacpp.opencv_ml.ParamGrid;
					public getClassWeights(): org.bytedeco.javacpp.opencv_core.Mat;
					public trainAuto(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_ml.ParamGrid, param5: org.bytedeco.javacpp.opencv_ml.ParamGrid, param6: org.bytedeco.javacpp.opencv_ml.ParamGrid, param7: org.bytedeco.javacpp.opencv_ml.ParamGrid, param8: org.bytedeco.javacpp.opencv_ml.ParamGrid, param9: org.bytedeco.javacpp.opencv_ml.ParamGrid, param10: boolean): boolean;
					public constructor();
					public trainAuto(param0: org.bytedeco.javacpp.opencv_ml.TrainData): boolean;
					public getNu(): number;
					public setType(param0: number): void;
					public getTermCriteria(): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public getSupportVectors(): org.bytedeco.javacpp.opencv_core.Mat;
					public getDecisionFunction(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
					public setNu(param0: number): void;
					public trainAuto(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public getDecisionFunction(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
					public getC(): number;
					public static load(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.SVM;
					public constructor(param0: number);
					public trainAuto(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_ml.ParamGrid, param5: org.bytedeco.javacpp.opencv_ml.ParamGrid, param6: org.bytedeco.javacpp.opencv_ml.ParamGrid, param7: org.bytedeco.javacpp.opencv_ml.ParamGrid, param8: org.bytedeco.javacpp.opencv_ml.ParamGrid, param9: org.bytedeco.javacpp.opencv_ml.ParamGrid, param10: boolean): boolean;
					public trainAuto(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static load(param0: string): org.bytedeco.javacpp.opencv_ml.SVM;
					public setC(param0: number): void;
					public getDegree(): number;
					public setClassWeights(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setGamma(param0: number): void;
					public setKernel(param0: number): void;
					public setP(param0: number): void;
					public setTermCriteria(param0: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
					public trainAuto(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public static create(): org.bytedeco.javacpp.opencv_ml.SVM;
					public trainAuto(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_ml.ParamGrid, param5: org.bytedeco.javacpp.opencv_ml.ParamGrid, param6: org.bytedeco.javacpp.opencv_ml.ParamGrid, param7: org.bytedeco.javacpp.opencv_ml.ParamGrid, param8: org.bytedeco.javacpp.opencv_ml.ParamGrid, param9: org.bytedeco.javacpp.opencv_ml.ParamGrid, param10: boolean): boolean;
					public getP(): number;
					public setCustomKernel(param0: org.bytedeco.javacpp.opencv_ml.SVM.Kernel): void;
					public getUncompressedSupportVectors(): org.bytedeco.javacpp.opencv_core.Mat;
					public setCoef0(param0: number): void;
					public static getDefaultGridPtr(param0: number): org.bytedeco.javacpp.opencv_ml.ParamGrid;
					public trainAuto(param0: org.bytedeco.javacpp.opencv_ml.TrainData, param1: number, param2: org.bytedeco.javacpp.opencv_ml.ParamGrid, param3: org.bytedeco.javacpp.opencv_ml.ParamGrid, param4: org.bytedeco.javacpp.opencv_ml.ParamGrid, param5: org.bytedeco.javacpp.opencv_ml.ParamGrid, param6: org.bytedeco.javacpp.opencv_ml.ParamGrid, param7: org.bytedeco.javacpp.opencv_ml.ParamGrid, param8: boolean): boolean;
				}
				export module SVM {
					export class Kernel extends org.bytedeco.javacpp.opencv_core.Algorithm {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.SVM.Kernel>;
						public constructor();
						public calc(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer, param4: java.nio.FloatBuffer): void;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public constructor(param0: number);
						public calc(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>): void;
						public getType(): number;
						public calc(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer, param4: org.bytedeco.javacpp.FloatPointer): void;
					}
				}
				export class SVMSGD extends org.bytedeco.javacpp.opencv_ml.StatModel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.SVMSGD>;
					public static SGD: number;
					public static ASGD: number;
					public static SOFT_MARGIN: number;
					public static HARD_MARGIN: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setInitialStepSize(param0: number): void;
					public setMarginType(param0: number): void;
					public getMarginRegularization(): number;
					public setStepDecreasingPower(param0: number): void;
					public setTermCriteria(param0: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
					public getInitialStepSize(): number;
					public getShift(): number;
					public getWeights(): org.bytedeco.javacpp.opencv_core.Mat;
					public getStepDecreasingPower(): number;
					public static load(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.SVMSGD;
					public constructor();
					public static load(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ml.SVMSGD;
					public setOptimalParameters(): void;
					public static create(): org.bytedeco.javacpp.opencv_ml.SVMSGD;
					public setOptimalParameters(param0: number, param1: number): void;
					public getTermCriteria(): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public static load(param0: string): org.bytedeco.javacpp.opencv_ml.SVMSGD;
					public setSvmsgdType(param0: number): void;
					public static load(param0: string, param1: string): org.bytedeco.javacpp.opencv_ml.SVMSGD;
					public getSvmsgdType(): number;
					public getMarginType(): number;
					public setMarginRegularization(param0: number): void;
					public constructor(param0: number);
				}
				export class StatModel extends org.bytedeco.javacpp.helper.opencv_ml.AbstractStatModel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.StatModel>;
					public static UPDATE_MODEL: number;
					public static RAW_OUTPUT: number;
					public static COMPRESSED_INPUT: number;
					public static PREPROCESSED_INPUT: number;
					public calcError(param0: org.bytedeco.javacpp.opencv_ml.TrainData, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
					public predict(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public calcError(param0: org.bytedeco.javacpp.opencv_ml.TrainData, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public predict(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public predict(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
					public train(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public getVarCount(): number;
					public empty(): boolean;
					public isClassifier(): boolean;
					public predict(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public train(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public calcError(param0: org.bytedeco.javacpp.opencv_ml.TrainData, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
					public predict(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): number;
					public constructor();
					public train(param0: org.bytedeco.javacpp.opencv_ml.TrainData, param1: number): boolean;
					public isTrained(): boolean;
					public train(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public train(param0: org.bytedeco.javacpp.opencv_ml.TrainData): boolean;
					public predict(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): number;
					public constructor(param0: number);
				}
				export class TrainData {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ml.TrainData>;
					public getSample(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.FloatPointer): void;
					public getSample(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: native.Array<number>): void;
					public getTrainResponses(): org.bytedeco.javacpp.opencv_core.Mat;
					public getNTestSamples(): number;
					public getValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.FloatPointer): void;
					public getTestResponses(): org.bytedeco.javacpp.opencv_core.Mat;
					public getCatMap(): org.bytedeco.javacpp.opencv_core.Mat;
					public getVarIdx(): org.bytedeco.javacpp.opencv_core.Mat;
					public getSample(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.FloatPointer): void;
					public getTestSampleWeights(): org.bytedeco.javacpp.opencv_core.Mat;
					public getNormCatValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>): void;
					public getSample(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: java.nio.FloatBuffer): void;
					public getVarSymbolFlags(): org.bytedeco.javacpp.opencv_core.Mat;
					public getSampleWeights(): org.bytedeco.javacpp.opencv_core.Mat;
					public getLayout(): number;
					public getValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>): void;
					public getDefaultSubstValues(): org.bytedeco.javacpp.opencv_core.Mat;
					public getNormCatValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.IntBuffer): void;
					public getSample(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: java.nio.FloatBuffer): void;
					public getVarType(): org.bytedeco.javacpp.opencv_core.Mat;
					public getValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.FloatPointer): void;
					public setTrainTestSplit(param0: number, param1: boolean): void;
					public getTestSampleIdx(): org.bytedeco.javacpp.opencv_core.Mat;
					public getValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>): void;
					public setTrainTestSplitRatio(param0: number): void;
					public getTrainSamples(): org.bytedeco.javacpp.opencv_core.Mat;
					public getResponses(): org.bytedeco.javacpp.opencv_core.Mat;
					public getNormCatValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.IntPointer): void;
					public getNormCatValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>): void;
					public getCatCount(param0: number): number;
					public getValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<number>): void;
					public getSamples(): org.bytedeco.javacpp.opencv_core.Mat;
					public getValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.FloatBuffer): void;
					public getSample(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: native.Array<number>): void;
					public getTrainNormCatResponses(): org.bytedeco.javacpp.opencv_core.Mat;
					public getClassLabels(): org.bytedeco.javacpp.opencv_core.Mat;
					public getCatOfs(): org.bytedeco.javacpp.opencv_core.Mat;
					public getSample(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: native.Array<number>): void;
					public getNTrainSamples(): number;
					public static loadFromCSV(param0: string, param1: number): org.bytedeco.javacpp.opencv_ml.TrainData;
					public static missingValue(): number;
					public getNormCatValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: java.nio.IntBuffer): void;
					public getNames(param0: org.bytedeco.javacpp.opencv_core.StringVector): void;
					public shuffleTrainTest(): void;
					public getNormCatValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.IntBuffer): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_ml.TrainData;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_ml.TrainData;
					public getResponseType(): number;
					public static getSubVector(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_ml.TrainData;
					public getTrainSampleWeights(): org.bytedeco.javacpp.opencv_core.Mat;
					public static loadFromCSV(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.BytePointer, param5: number, param6: number): org.bytedeco.javacpp.opencv_ml.TrainData;
					public setTrainTestSplit(param0: number): void;
					public getNormCatResponses(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getSample(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: java.nio.FloatBuffer): void;
					public getNormCatValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.IntPointer): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_ml.TrainData;
					public getNVars(): number;
					public getTestNormCatResponses(): org.bytedeco.javacpp.opencv_core.Mat;
					public static loadFromCSV(param0: string, param1: number, param2: number, param3: number, param4: string, param5: number, param6: number): org.bytedeco.javacpp.opencv_ml.TrainData;
					public getNAllVars(): number;
					public getSample(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.FloatPointer): void;
					public getValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: java.nio.FloatBuffer): void;
					public getMissing(): org.bytedeco.javacpp.opencv_core.Mat;
					public static loadFromCSV(param0: org.bytedeco.javacpp.BytePointer, param1: number): org.bytedeco.javacpp.opencv_ml.TrainData;
					public getNSamples(): number;
					public getTestSamples(): org.bytedeco.javacpp.opencv_core.Mat;
					public getTrainSamples(param0: number, param1: boolean, param2: boolean): org.bytedeco.javacpp.opencv_core.Mat;
					public setTrainTestSplitRatio(param0: number, param1: boolean): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_ml.TrainData;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_ml.TrainData;
					public getValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.FloatBuffer): void;
					public static getSubMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): org.bytedeco.javacpp.opencv_core.Mat;
					public getValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.FloatPointer): void;
					public getTrainSampleIdx(): org.bytedeco.javacpp.opencv_core.Mat;
					public getNormCatValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<number>): void;
					public getNormCatValues(param0: number, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.IntPointer): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_objdetect extends org.bytedeco.javacpp.helper.opencv_objdetect {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect>;
				public static CASCADE_DO_CANNY_PRUNING: number;
				public static CASCADE_SCALE_IMAGE: number;
				public static CASCADE_FIND_BIGGEST_OBJECT: number;
				public static CASCADE_DO_ROUGH_SEARCH: number;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: number, param2: number): void;
				public static groupRectangles_meanshift(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer): void;
				public static createFaceDetectionMaskGenerator(): org.bytedeco.javacpp.opencv_objdetect.BaseCascadeClassifier.MaskGenerator;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: native.Array<number>, param2: native.Array<number>, param3: number, param4: number): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: org.bytedeco.javacpp.IntPointer, param2: number, param3: number): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: native.Array<number>, param2: native.Array<number>, param3: number): void;
				public static groupRectangles_meanshift(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size): void;
				public constructor();
				public static groupRectangles_meanshift(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: native.Array<number>, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: org.bytedeco.javacpp.IntPointer, param2: number): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: number): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: number, param2: number, param3: native.Array<number>, param4: native.Array<number>): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: number, param2: number, param3: java.nio.IntBuffer, param4: java.nio.DoubleBuffer): void;
				public static groupRectangles_meanshift(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.DoublePointer, param3: number): void;
				public static groupRectangles_meanshift(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: java.nio.IntBuffer, param2: number, param3: number): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: java.nio.IntBuffer, param2: java.nio.DoubleBuffer, param3: number, param4: number): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: java.nio.IntBuffer, param2: number): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: number): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: native.Array<number>, param2: number): void;
				public static groupRectangles_meanshift(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: native.Array<number>, param2: native.Array<number>): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: native.Array<number>, param2: number, param3: number): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: number, param2: number, param3: org.bytedeco.javacpp.IntPointer, param4: org.bytedeco.javacpp.DoublePointer): void;
				public static groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: java.nio.IntBuffer, param2: java.nio.DoubleBuffer, param3: number): void;
			}
			export module opencv_objdetect {
				export class BaseCascadeClassifier extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.BaseCascadeClassifier>;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public empty(): boolean;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: native.Array<number>, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: native.Array<number>, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public constructor();
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: java.nio.DoubleBuffer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public getOldCascade(): org.bytedeco.javacpp.Pointer;
					public isOldFormatCascade(): boolean;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public load(param0: string): boolean;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public getOriginalWindowSize(): org.bytedeco.javacpp.opencv_core.Size;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: native.Array<number>, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: java.nio.DoubleBuffer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public setMaskGenerator(param0: org.bytedeco.javacpp.opencv_objdetect.BaseCascadeClassifier.MaskGenerator): void;
					public getMaskGenerator(): org.bytedeco.javacpp.opencv_objdetect.BaseCascadeClassifier.MaskGenerator;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: java.nio.DoubleBuffer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public getFeatureType(): number;
					public load(param0: org.bytedeco.javacpp.BytePointer): boolean;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
				}
				export module BaseCascadeClassifier {
					export class MaskGenerator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.BaseCascadeClassifier.MaskGenerator>;
						public generateMask(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public initializeMask(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					}
				}
				export class CascadeClassifier {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.CascadeClassifier>;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: java.nio.DoubleBuffer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: native.Array<number>, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public constructor(param0: string);
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public empty(): boolean;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer): void;
					public static convert(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): boolean;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: native.Array<number>, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.DoublePointer): void;
					public constructor();
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public getOldCascade(): org.bytedeco.javacpp.Pointer;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public cc(): org.bytedeco.javacpp.opencv_objdetect.BaseCascadeClassifier;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public getOriginalWindowSize(): org.bytedeco.javacpp.opencv_core.Size;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: java.nio.DoubleBuffer): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: java.nio.DoubleBuffer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_objdetect.CascadeClassifier;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: java.nio.DoubleBuffer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: java.nio.DoubleBuffer): void;
					public getMaskGenerator(): org.bytedeco.javacpp.opencv_objdetect.BaseCascadeClassifier.MaskGenerator;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public getFeatureType(): number;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.DoublePointer): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: native.Array<number>): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: native.Array<number>): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public isOldFormatCascade(): boolean;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
					public static convert(param0: string, param1: string): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public load(param0: string): boolean;
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): boolean;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: java.nio.DoubleBuffer): void;
					public setMaskGenerator(param0: org.bytedeco.javacpp.opencv_objdetect.BaseCascadeClassifier.MaskGenerator): void;
					public cc(param0: org.bytedeco.javacpp.opencv_objdetect.BaseCascadeClassifier): org.bytedeco.javacpp.opencv_objdetect.CascadeClassifier;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: native.Array<number>, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.Size, param8: org.bytedeco.javacpp.opencv_core.Size, param9: boolean): void;
					public load(param0: org.bytedeco.javacpp.BytePointer): boolean;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Size, param7: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale2(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.IntBuffer): void;
					public detectMultiScale3(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.IntPointer, param3: org.bytedeco.javacpp.DoublePointer): void;
				}
				export class CvHaarClassifierCascade {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.CvHaarClassifierCascade>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class DetectionBasedTracker {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker>;
					public static DETECTED_NOT_SHOWN_YET: number;
					public static DETECTED: number;
					public static DETECTED_TEMPORARY_LOST: number;
					public static WRONG_OBJECT: number;
					public resetTracking(): void;
					public getObjects(param0: org.bytedeco.javacpp.opencv_core.IntIntPair): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getParameters(): org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.Parameters;
					public getObjects(param0: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public run(): boolean;
					public stop(): void;
					public getObjects(param0: org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.ExtObject): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.IDetector, param1: org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.IDetector, param2: org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.Parameters);
					public addObject(param0: org.bytedeco.javacpp.opencv_core.Rect): number;
					public setParameters(param0: org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.Parameters): boolean;
				}
				export module DetectionBasedTracker {
					export class ExtObject {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.ExtObject>;
						public id(param0: number): org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.ExtObject;
						public status(param0: number): org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.ExtObject;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public constructor(param0: number, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: number);
						public location(): org.bytedeco.javacpp.opencv_core.Rect;
						public location(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.ExtObject;
						public status(): number;
						public id(): number;
					}
					export class IDetector {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.IDetector>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public getScaleFactor(): number;
						public setMinNeighbours(param0: number): void;
						public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
						public getMinObjectSize(): org.bytedeco.javacpp.opencv_core.Size;
						public getMaxObjectSize(): org.bytedeco.javacpp.opencv_core.Size;
						public getMinNeighbours(): number;
						public setMinObjectSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
						public setMaxObjectSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
						public setScaleFactor(param0: number): void;
					}
					export class Parameters {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.Parameters>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public minDetectionPeriod(): number;
						public constructor(param0: number);
						public maxTrackLifetime(): number;
						public minDetectionPeriod(param0: number): org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.Parameters;
						public position(param0: number): org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.Parameters;
						public maxTrackLifetime(param0: number): org.bytedeco.javacpp.opencv_objdetect.DetectionBasedTracker.Parameters;
					}
				}
				export class DetectionROI {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.DetectionROI>;
					public confidences(param0: org.bytedeco.javacpp.DoublePointer): org.bytedeco.javacpp.opencv_objdetect.DetectionROI;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public locations(param0: org.bytedeco.javacpp.opencv_core.PointVector): org.bytedeco.javacpp.opencv_objdetect.DetectionROI;
					public scale(param0: number): org.bytedeco.javacpp.opencv_objdetect.DetectionROI;
					public confidences(): org.bytedeco.javacpp.DoublePointer;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_objdetect.DetectionROI;
					public locations(): org.bytedeco.javacpp.opencv_core.PointVector;
					public scale(): number;
					public constructor(param0: number);
				}
				export class HOGDescriptor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor>;
					public static L2Hys: number;
					public static DEFAULT_NLEVELS: number;
					public static DESCR_FORMAT_COL_BY_COL: number;
					public static DESCR_FORMAT_ROW_BY_ROW: number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public cellSize(): org.bytedeco.javacpp.opencv_core.Size;
					public groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: native.Array<number>, param2: number, param3: number): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public load(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): boolean;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.FloatPointer, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.FloatBuffer, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: java.nio.DoubleBuffer): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public nlevels(param0: number): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: java.nio.DoubleBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public winSize(): org.bytedeco.javacpp.opencv_core.Size;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.FloatBuffer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.FloatPointer, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.DoubleBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: number, param7: number, param8: boolean): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: java.nio.DoubleBuffer, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public getWinSigma(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public blockSize(): org.bytedeco.javacpp.opencv_core.Size;
					public copyTo(param0: org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.FloatBuffer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.FloatPointer): void;
					public detectMultiScaleROI(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.opencv_objdetect.DetectionROI): void;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public constructor();
					public winSize(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: java.nio.DoubleBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public L2HysThreshold(): number;
					public checkDetectorSize(): boolean;
					public save(param0: string, param1: string): void;
					public detectMultiScaleROI(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.opencv_objdetect.DetectionROI, param3: number, param4: number): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: native.Array<number>): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public nbins(param0: number): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: native.Array<number>): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: native.Array<number>): void;
					public nlevels(): number;
					public blockStride(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.DoubleBuffer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: native.Array<number>): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public static getDaimlerPeopleDetector(): org.bytedeco.javacpp.FloatPointer;
					public histogramNormType(param0: number): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: java.nio.DoubleBuffer, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: java.nio.DoubleBuffer): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public histogramNormType(): number;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: number, param7: number, param8: boolean): void;
					public signedGradient(param0: boolean): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: org.bytedeco.javacpp.DoublePointer): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.FloatBuffer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: org.bytedeco.javacpp.DoublePointer, param2: number, param3: number): void;
					public L2HysThreshold(param0: number): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public setSVMDetector(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor);
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.DoubleBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: number, param7: number, param8: boolean): void;
					public nbins(): number;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: native.Array<number>, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: number, param7: number, param8: boolean): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public constructor(param0: number);
					public detectMultiScaleROI(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.opencv_objdetect.DetectionROI, param3: number, param4: number): void;
					public svmDetector(): org.bytedeco.javacpp.FloatPointer;
					public computeGradient(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public cellSize(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>): void;
					public derivAperture(param0: number): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Size, param5: number, param6: number, param7: boolean): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public static getDefaultPeopleDetector(): org.bytedeco.javacpp.FloatPointer;
					public setSVMDetector(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public load(param0: org.bytedeco.javacpp.BytePointer): boolean;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public oclSvmDetector(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: number, param7: number, param8: boolean): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public detectMultiScaleROI(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.opencv_objdetect.DetectionROI): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: java.nio.DoubleBuffer): void;
					public svmDetector(param0: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public constructor(param0: string);
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.FloatBuffer, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: number, param7: number, param8: boolean): void;
					public computeGradient(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public winSigma(param0: number): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public derivAperture(): number;
					public free_coef(): number;
					public computeGradient(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public computeGradient(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Size): void;
					public getDescriptorSize(): number;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: native.Array<number>): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number, param5: number, param6: number, param7: number, param8: number, param9: boolean, param10: number, param11: boolean);
					public setSVMDetector(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public computeGradient(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Size): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: java.nio.DoubleBuffer): void;
					public gammaCorrection(param0: boolean): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: org.bytedeco.javacpp.DoublePointer): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: org.bytedeco.javacpp.DoublePointer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.FloatPointer, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.FloatBuffer, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public save(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>): void;
					public detectMultiScaleROI(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.opencv_objdetect.DetectionROI, param3: number, param4: number): void;
					public signedGradient(): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: number);
					public blockStride(): org.bytedeco.javacpp.opencv_core.Size;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.DoublePointer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: number, param7: number, param8: boolean): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.DoubleBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: number, param7: number, param8: boolean): void;
					public save(param0: org.bytedeco.javacpp.BytePointer): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Size, param5: number, param6: number, param7: boolean): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: org.bytedeco.javacpp.DoublePointer, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: number, param7: number, param8: boolean): void;
					public load(param0: string, param1: string): boolean;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: java.nio.DoubleBuffer, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Size, param5: number, param6: number, param7: boolean): void;
					public free_coef(param0: number): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public gammaCorrection(): boolean;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: java.nio.DoubleBuffer): void;
					public groupRectangles(param0: org.bytedeco.javacpp.opencv_core.RectVector, param1: java.nio.DoubleBuffer, param2: number, param3: number): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.FloatPointer): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public load(param0: string): boolean;
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): boolean;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.DoubleBuffer): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.FloatPointer): void;
					public detectMultiScaleROI(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.opencv_objdetect.DetectionROI): void;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.DoubleBuffer): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: java.nio.DoubleBuffer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: java.nio.DoubleBuffer, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.PointVector): void;
					public save(param0: string): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: native.Array<number>): void;
					public blockSize(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_objdetect.HOGDescriptor;
					public winSigma(): number;
					public detectMultiScale(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.DoublePointer): void;
					public computeGradient(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Size): void;
					public oclSvmDetector(): org.bytedeco.javacpp.opencv_core.UMat;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: native.Array<number>, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
					public detectROI(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.PointVector, param3: native.Array<number>, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Size): void;
				}
				export class QRCodeDetector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.QRCodeDetector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public decode(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): string;
					public detectAndDecode(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.BytePointer;
					public detectAndDecode(param0: org.bytedeco.javacpp.opencv_core.UMat): string;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public detectAndDecode(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.BytePointer;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public detectAndDecode(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.BytePointer;
					public decode(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.BytePointer;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_objdetect.QRCodeDetector;
					public decode(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.BytePointer;
					public detectAndDecode(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.BytePointer;
					public decode(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.BytePointer;
					public decode(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): string;
					public setEpsX(param0: number): void;
					public setEpsY(param0: number): void;
					public detectAndDecode(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): string;
					public constructor(param0: number);
					public decode(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.BytePointer;
				}
				export class SimilarRects {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_objdetect.SimilarRects>;
					public eps(param0: number): org.bytedeco.javacpp.opencv_objdetect.SimilarRects;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public eps(): number;
					public constructor(param0: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Rect, param1: org.bytedeco.javacpp.opencv_core.Rect): boolean;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_optflow extends org.bytedeco.javacpp.presets.opencv_optflow {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_optflow>;
				public static calcOpticalFlowSF(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number, param13: number, param14: number, param15: number): void;
				public static createOptFlow_DeepFlow(): org.bytedeco.javacpp.opencv_video.DenseOpticalFlow;
				public static calcOpticalFlowSparseToDense(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number, param6: boolean, param7: number, param8: number): void;
				public static calcOpticalFlowSF(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number): void;
				public static calcMotionGradient(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number): void;
				public static calcOpticalFlowSF(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number, param13: number, param14: number, param15: number): void;
				public static calcMotionGradient(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number): void;
				public static createOptFlow_Farneback(): org.bytedeco.javacpp.opencv_video.DenseOpticalFlow;
				public static updateMotionHistory(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static calcOpticalFlowSF(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number): void;
				public static calcMotionGradient(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static updateMotionHistory(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public constructor();
				public static createOptFlow_DualTVL1(): org.bytedeco.javacpp.opencv_optflow.DualTVL1OpticalFlow;
				public static createOptFlow_SimpleFlow(): org.bytedeco.javacpp.opencv_video.DenseOpticalFlow;
				public static calcMotionGradient(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number): void;
				public static calcOpticalFlowSparseToDense(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static createOptFlow_SparseToDense(): org.bytedeco.javacpp.opencv_video.DenseOpticalFlow;
				public static calcMotionGradient(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static segmentMotion(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: number, param4: number): void;
				public static calcGlobalOrientation(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): number;
				public static calcOpticalFlowSparseToDense(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number, param6: boolean, param7: number, param8: number): void;
				public static calcOpticalFlowSparseToDense(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number, param6: boolean, param7: number, param8: number): void;
				public static calcGlobalOrientation(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): number;
				public static calcGlobalOrientation(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): number;
				public static calcOpticalFlowSF(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number): void;
				public static updateMotionHistory(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static segmentMotion(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: number, param4: number): void;
				public static calcOpticalFlowSF(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number, param13: number, param14: number, param15: number): void;
				public static calcMotionGradient(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static calcOpticalFlowSparseToDense(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static calcOpticalFlowSparseToDense(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static segmentMotion(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: number, param4: number): void;
			}
			export module opencv_optflow {
				export class DualTVL1OpticalFlow extends org.bytedeco.javacpp.opencv_video.DenseOpticalFlow {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_optflow.DualTVL1OpticalFlow>;
					public getOuterIterations(): number;
					public setLambda(param0: number): void;
					public getUseInitialFlow(): boolean;
					public setMedianFiltering(param0: number): void;
					public getInnerIterations(): number;
					public getLambda(): number;
					public getGamma(): number;
					public getScaleStep(): number;
					public setInnerIterations(param0: number): void;
					public setOuterIterations(param0: number): void;
					public constructor();
					public setUseInitialFlow(param0: boolean): void;
					public setTheta(param0: number): void;
					public setScalesNumber(param0: number): void;
					public getWarpingsNumber(): number;
					public constructor(param0: number);
					public setEpsilon(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setWarpingsNumber(param0: number): void;
					public getTheta(): number;
					public getScalesNumber(): number;
					public static create(): org.bytedeco.javacpp.opencv_optflow.DualTVL1OpticalFlow;
					public setTau(param0: number): void;
					public setScaleStep(param0: number): void;
					public getTau(): number;
					public setGamma(param0: number): void;
					public getMedianFiltering(): number;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: boolean): org.bytedeco.javacpp.opencv_optflow.DualTVL1OpticalFlow;
					public getEpsilon(): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_phase_unwrapping extends org.bytedeco.javacpp.presets.opencv_phase_unwrapping {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_phase_unwrapping>;
				public constructor();
			}
			export module opencv_phase_unwrapping {
				export class HistogramPhaseUnwrapping extends org.bytedeco.javacpp.opencv_phase_unwrapping.PhaseUnwrapping {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_phase_unwrapping.HistogramPhaseUnwrapping>;
					public getInverseReliabilityMap(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getInverseReliabilityMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_phase_unwrapping.HistogramPhaseUnwrapping;
					public static create(param0: org.bytedeco.javacpp.opencv_phase_unwrapping.HistogramPhaseUnwrapping.Params): org.bytedeco.javacpp.opencv_phase_unwrapping.HistogramPhaseUnwrapping;
					public getInverseReliabilityMap(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export module HistogramPhaseUnwrapping {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_phase_unwrapping.HistogramPhaseUnwrapping.Params>;
						public nbrOfSmallBins(): number;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public position(param0: number): org.bytedeco.javacpp.opencv_phase_unwrapping.HistogramPhaseUnwrapping.Params;
						public height(): number;
						public nbrOfLargeBins(param0: number): org.bytedeco.javacpp.opencv_phase_unwrapping.HistogramPhaseUnwrapping.Params;
						public histThresh(): number;
						public width(): number;
						public nbrOfLargeBins(): number;
						public nbrOfSmallBins(param0: number): org.bytedeco.javacpp.opencv_phase_unwrapping.HistogramPhaseUnwrapping.Params;
						public histThresh(param0: number): org.bytedeco.javacpp.opencv_phase_unwrapping.HistogramPhaseUnwrapping.Params;
						public constructor(param0: number);
						public width(param0: number): org.bytedeco.javacpp.opencv_phase_unwrapping.HistogramPhaseUnwrapping.Params;
						public height(param0: number): org.bytedeco.javacpp.opencv_phase_unwrapping.HistogramPhaseUnwrapping.Params;
					}
				}
				export class PhaseUnwrapping extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_phase_unwrapping.PhaseUnwrapping>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_photo extends org.bytedeco.javacpp.presets.opencv_photo {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo>;
				public static INPAINT_NS: number;
				public static INPAINT_TELEA: number;
				public static NORMAL_CLONE: number;
				public static MIXED_CLONE: number;
				public static MONOCHROME_TRANSFER: number;
				public static RECURS_FILTER: number;
				public static NORMCONV_FILTER: number;
				public static LDR_SIZE: number;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static createTonemap(param0: number): org.bytedeco.javacpp.opencv_photo.Tonemap;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static colorChange(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static illuminationChange(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: java.nio.FloatBuffer, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: org.bytedeco.javacpp.FloatPointer): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static illuminationChange(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static edgePreservingFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static illuminationChange(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static stylization(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.FloatBuffer): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.FloatPointer): void;
				public static detailEnhance(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static createTonemapReinhard(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_photo.TonemapReinhard;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static illuminationChange(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static denoise_TVL1(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: native.Array<number>): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: java.nio.FloatBuffer, param3: number, param4: number, param5: number): void;
				public static stylization(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static edgePreservingFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static colorChange(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static nonLocalMeans(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static textureFlattening(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number): void;
				public static pencilSketch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: java.nio.FloatBuffer): void;
				public static seamlessClone(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static detailEnhance(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static createMergeMertens(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_photo.MergeMertens;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number): void;
				public static seamlessClone(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static denoise_TVL1(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static createAlignMTB(param0: number, param1: number, param2: boolean): org.bytedeco.javacpp.opencv_photo.AlignMTB;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static stylization(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static inpaint(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<number>): void;
				public static edgePreservingFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: native.Array<number>): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: java.nio.FloatBuffer): void;
				public static nonLocalMeans(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static seamlessClone(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.Point, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: org.bytedeco.javacpp.FloatPointer): void;
				public static inpaint(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static createTonemapDrago(): org.bytedeco.javacpp.opencv_photo.TonemapDrago;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static createCalibrateRobertson(param0: number, param1: number): org.bytedeco.javacpp.opencv_photo.CalibrateRobertson;
				public static createAlignMTB(): org.bytedeco.javacpp.opencv_photo.AlignMTB;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static textureFlattening(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static colorChange(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number): void;
				public static createTonemapMantiuk(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_photo.TonemapMantiuk;
				public static pencilSketch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number): void;
				public static decolor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static decolor(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static colorChange(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<number>, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static stylization(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static detailEnhance(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.FloatBuffer, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.FloatPointer): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: org.bytedeco.javacpp.FloatPointer): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public constructor();
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<number>): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static createTonemapReinhard(): org.bytedeco.javacpp.opencv_photo.TonemapReinhard;
				public static nonLocalMeans(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static decolor(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static createTonemap(): org.bytedeco.javacpp.opencv_photo.Tonemap;
				public static createMergeRobertson(): org.bytedeco.javacpp.opencv_photo.MergeRobertson;
				public static textureFlattening(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static createMergeMertens(): org.bytedeco.javacpp.opencv_photo.MergeMertens;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: java.nio.FloatBuffer): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: java.nio.FloatBuffer): void;
				public static createCalibrateDebevec(): org.bytedeco.javacpp.opencv_photo.CalibrateDebevec;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static pencilSketch(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static nonLocalMeans(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static textureFlattening(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number): void;
				public static edgePreservingFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>, param3: number, param4: number, param5: number): void;
				public static detailEnhance(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static stylization(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static createMergeDebevec(): org.bytedeco.javacpp.opencv_photo.MergeDebevec;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static nonLocalMeans(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static pencilSketch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static createCalibrateDebevec(param0: number, param1: number, param2: boolean): org.bytedeco.javacpp.opencv_photo.CalibrateDebevec;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static edgePreservingFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static inpaint(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.FloatPointer): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: java.nio.FloatBuffer): void;
				public static createTonemapMantiuk(): org.bytedeco.javacpp.opencv_photo.TonemapMantiuk;
				public static nonLocalMeans(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static textureFlattening(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static edgePreservingFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: native.Array<number>): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static pencilSketch(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static createTonemapDrago(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_photo.TonemapDrago;
				public static colorChange(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number): void;
				public static colorChange(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static illuminationChange(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number): void;
				public static textureFlattening(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: org.bytedeco.javacpp.FloatPointer, param5: number, param6: number, param7: number): void;
				public static stylization(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: native.Array<number>, param5: number, param6: number, param7: number): void;
				public static detailEnhance(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<number>): void;
				public static fastNlMeansDenoisingColored(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.FloatPointer, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static illuminationChange(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static createCalibrateRobertson(): org.bytedeco.javacpp.opencv_photo.CalibrateRobertson;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static fastNlMeansDenoisingMulti(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: java.nio.FloatBuffer, param5: number, param6: number, param7: number): void;
				public static fastNlMeansDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Stream): void;
				public static detailEnhance(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static pencilSketch(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
			}
			export module opencv_photo {
				export class AlignExposures extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.AlignExposures>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
				export class AlignMTB extends org.bytedeco.javacpp.opencv_photo.AlignExposures {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.AlignMTB>;
					public getCut(): boolean;
					public calculateShift(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setExcludeRange(param0: number): void;
					public computeBitmaps(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getMaxBits(): number;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public shiftMat(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public calculateShift(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public constructor(param0: number);
					public setMaxBits(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public shiftMat(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public computeBitmaps(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public calculateShift(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public shiftMat(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getExcludeRange(): number;
					public computeBitmaps(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setCut(param0: boolean): void;
				}
				export class CalibrateCRF extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.CalibrateCRF>;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor();
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export class CalibrateDebevec extends org.bytedeco.javacpp.opencv_photo.CalibrateCRF {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.CalibrateDebevec>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public setLambda(param0: number): void;
					public getRandom(): boolean;
					public setSamples(param0: number): void;
					public setRandom(param0: boolean): void;
					public getLambda(): number;
					public getSamples(): number;
					public constructor(param0: number);
				}
				export class CalibrateRobertson extends org.bytedeco.javacpp.opencv_photo.CalibrateCRF {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.CalibrateRobertson>;
					public setMaxIter(param0: number): void;
					public getThreshold(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public getMaxIter(): number;
					public getRadiance(): org.bytedeco.javacpp.opencv_core.Mat;
					public setThreshold(param0: number): void;
					public constructor(param0: number);
				}
				export class MergeDebevec extends org.bytedeco.javacpp.opencv_photo.MergeExposures {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.MergeDebevec>;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class MergeExposures extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.MergeExposures>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: number);
				}
				export class MergeMertens extends org.bytedeco.javacpp.opencv_photo.MergeExposures {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.MergeMertens>;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setSaturationWeight(param0: number): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getContrastWeight(): number;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor();
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getExposureWeight(): number;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getSaturationWeight(): number;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setContrastWeight(param0: number): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setExposureWeight(param0: number): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class MergeRobertson extends org.bytedeco.javacpp.opencv_photo.MergeExposures {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.MergeRobertson>;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class Tonemap extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.Tonemap>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public process(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getGamma(): number;
					public setGamma(param0: number): void;
					public constructor(param0: number);
					public process(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export class TonemapDrago extends org.bytedeco.javacpp.opencv_photo.Tonemap {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.TonemapDrago>;
					public setBias(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setSaturation(param0: number): void;
					public getBias(): number;
					public constructor();
					public getSaturation(): number;
					public constructor(param0: number);
				}
				export class TonemapMantiuk extends org.bytedeco.javacpp.opencv_photo.Tonemap {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.TonemapMantiuk>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setSaturation(param0: number): void;
					public setScale(param0: number): void;
					public constructor();
					public getSaturation(): number;
					public getScale(): number;
					public constructor(param0: number);
				}
				export class TonemapReinhard extends org.bytedeco.javacpp.opencv_photo.Tonemap {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_photo.TonemapReinhard>;
					public getLightAdaptation(): number;
					public setColorAdaptation(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getIntensity(): number;
					public setLightAdaptation(param0: number): void;
					public getColorAdaptation(): number;
					public constructor();
					public constructor(param0: number);
					public setIntensity(param0: number): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_plot extends org.bytedeco.javacpp.presets.opencv_plot {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_plot>;
				public constructor();
			}
			export module opencv_plot {
				export class Plot2d extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_plot.Plot2d>;
					public setInvertOrientation(param0: boolean): void;
					public setMinY(param0: number): void;
					public render(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setPlotSize(param0: number, param1: number): void;
					public render(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_plot.Plot2d;
					public setPlotLineColor(param0: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_plot.Plot2d;
					public setMaxY(param0: number): void;
					public render(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: number);
					public setShowText(param0: boolean): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setMinX(param0: number): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_plot.Plot2d;
					public static create(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_plot.Plot2d;
					public setPlotLineWidth(param0: number): void;
					public setPointIdxToPrint(param0: number): void;
					public setPlotAxisColor(param0: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public setPlotGridColor(param0: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_plot.Plot2d;
					public setNeedPlotLine(param0: boolean): void;
					public setPlotBackgroundColor(param0: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public setShowGrid(param0: boolean): void;
					public setGridLinesNumber(param0: number): void;
					public setPlotTextColor(param0: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public setMaxX(param0: number): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_plot.Plot2d;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_saliency extends org.bytedeco.javacpp.presets.opencv_saliency {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_saliency>;
				public constructor();
			}
			export module opencv_saliency {
				export class MotionSaliency extends org.bytedeco.javacpp.opencv_saliency.Saliency {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_saliency.MotionSaliency>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: number);
				}
				export class MotionSaliencyBinWangApr2014 extends org.bytedeco.javacpp.opencv_saliency.MotionSaliency {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_saliency.MotionSaliencyBinWangApr2014>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public init(): boolean;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public setImageWidth(param0: number): void;
					public getImageWidth(): number;
					public setImagesize(param0: number, param1: number): void;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_saliency.MotionSaliencyBinWangApr2014;
					public getImageHeight(): number;
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_saliency.MotionSaliencyBinWangApr2014;
					public setImageHeight(param0: number): void;
					public constructor(param0: number);
				}
				export class Objectness extends org.bytedeco.javacpp.opencv_saliency.Saliency {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_saliency.Objectness>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: number);
				}
				export class ObjectnessBING extends org.bytedeco.javacpp.opencv_saliency.Objectness {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_saliency.ObjectnessBING>;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public getBase(): number;
					public getNSS(): number;
					public getW(): number;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public constructor();
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public getobjectnessValues(): org.bytedeco.javacpp.FloatPointer;
					public setBase(param0: number): void;
					public constructor(param0: number);
					public static create(): org.bytedeco.javacpp.opencv_saliency.ObjectnessBING;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_saliency.ObjectnessBING;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public setW(param0: number): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public write(): void;
					public setNSS(param0: number): void;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public setTrainingPath(param0: org.bytedeco.javacpp.BytePointer): void;
					public setBBResDir(param0: string): void;
					public read(): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public setTrainingPath(param0: string): void;
					public setBBResDir(param0: org.bytedeco.javacpp.BytePointer): void;
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
				}
				export class Saliency extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_saliency.Saliency>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public constructor();
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public constructor(param0: number);
				}
				export class StaticSaliency extends org.bytedeco.javacpp.opencv_saliency.Saliency {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_saliency.StaticSaliency>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public computeBinaryMap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public computeBinaryMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public constructor(param0: number);
					public computeBinaryMap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				}
				export class StaticSaliencyFineGrained extends org.bytedeco.javacpp.opencv_saliency.StaticSaliency {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_saliency.StaticSaliencyFineGrained>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_saliency.StaticSaliencyFineGrained;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public static create(): org.bytedeco.javacpp.opencv_saliency.StaticSaliencyFineGrained;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public constructor(param0: number);
				}
				export class StaticSaliencySpectralResidual extends org.bytedeco.javacpp.opencv_saliency.StaticSaliency {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_saliency.StaticSaliencySpectralResidual>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public setImageWidth(param0: number): void;
					public static create(): org.bytedeco.javacpp.opencv_saliency.StaticSaliencySpectralResidual;
					public getImageWidth(): number;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public computeSaliency(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public getImageHeight(): number;
					public constructor();
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_saliency.StaticSaliencySpectralResidual;
					public setImageHeight(param0: number): void;
					public constructor(param0: number);
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_shape extends org.bytedeco.javacpp.presets.opencv_shape {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape>;
				public static createShapeContextDistanceExtractor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor, param6: org.bytedeco.javacpp.opencv_shape.ShapeTransformer): org.bytedeco.javacpp.opencv_shape.ShapeContextDistanceExtractor;
				public static createEMDL1HistogramCostExtractor(param0: number, param1: number): org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor;
				public static createShapeContextDistanceExtractor(): org.bytedeco.javacpp.opencv_shape.ShapeContextDistanceExtractor;
				public static createAffineTransformer(param0: boolean): org.bytedeco.javacpp.opencv_shape.AffineTransformer;
				public static createNormHistogramCostExtractor(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor;
				public static createEMDHistogramCostExtractor(): org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor;
				public static EMDL1(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public constructor();
				public static createEMDHistogramCostExtractor(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor;
				public static createThinPlateSplineShapeTransformer(param0: number): org.bytedeco.javacpp.opencv_shape.ThinPlateSplineShapeTransformer;
				public static createEMDL1HistogramCostExtractor(): org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor;
				public static createHausdorffDistanceExtractor(param0: number, param1: number): org.bytedeco.javacpp.opencv_shape.HausdorffDistanceExtractor;
				public static EMDL1(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static EMDL1(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static createNormHistogramCostExtractor(): org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor;
				public static createThinPlateSplineShapeTransformer(): org.bytedeco.javacpp.opencv_shape.ThinPlateSplineShapeTransformer;
				public static createChiHistogramCostExtractor(): org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor;
				public static createChiHistogramCostExtractor(param0: number, param1: number): org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor;
				public static createHausdorffDistanceExtractor(): org.bytedeco.javacpp.opencv_shape.HausdorffDistanceExtractor;
			}
			export module opencv_shape {
				export class AffineTransformer extends org.bytedeco.javacpp.opencv_shape.ShapeTransformer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape.AffineTransformer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public setFullAffine(param0: boolean): void;
					public constructor(param0: number);
					public getFullAffine(): boolean;
				}
				export class ChiHistogramCostExtractor extends org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape.ChiHistogramCostExtractor>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: number);
				}
				export class EMDHistogramCostExtractor extends org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape.EMDHistogramCostExtractor>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setNormFlag(param0: number): void;
					public constructor();
					public getNormFlag(): number;
					public constructor(param0: number);
				}
				export class EMDL1HistogramCostExtractor extends org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape.EMDL1HistogramCostExtractor>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: number);
				}
				export class HausdorffDistanceExtractor extends org.bytedeco.javacpp.opencv_shape.ShapeDistanceExtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape.HausdorffDistanceExtractor>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public setDistanceFlag(param0: number): void;
					public setRankProportion(param0: number): void;
					public getRankProportion(): number;
					public constructor(param0: number);
					public getDistanceFlag(): number;
				}
				export class HistogramCostExtractor extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public buildCostMatrix(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public buildCostMatrix(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getDefaultCost(): number;
					public constructor();
					public buildCostMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setDefaultCost(param0: number): void;
					public getNDummies(): number;
					public constructor(param0: number);
					public setNDummies(param0: number): void;
				}
				export class NormHistogramCostExtractor extends org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape.NormHistogramCostExtractor>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setNormFlag(param0: number): void;
					public constructor();
					public getNormFlag(): number;
					public constructor(param0: number);
				}
				export class ShapeContextDistanceExtractor extends org.bytedeco.javacpp.opencv_shape.ShapeDistanceExtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape.ShapeContextDistanceExtractor>;
					public getInnerRadius(): number;
					public getBendingEnergyWeight(): number;
					public setStdDev(param0: number): void;
					public setImages(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setOuterRadius(param0: number): void;
					public setShapeContextWeight(param0: number): void;
					public getAngularBins(): number;
					public getRadialBins(): number;
					public setRadialBins(param0: number): void;
					public constructor();
					public setImages(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setImages(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getCostExtractor(): org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor;
					public getRotationInvariant(): boolean;
					public constructor(param0: number);
					public setInnerRadius(param0: number): void;
					public setImageAppearanceWeight(param0: number): void;
					public getImages(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setCostExtractor(param0: org.bytedeco.javacpp.opencv_shape.HistogramCostExtractor): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setRotationInvariant(param0: boolean): void;
					public getStdDev(): number;
					public getImages(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getIterations(): number;
					public getTransformAlgorithm(): org.bytedeco.javacpp.opencv_shape.ShapeTransformer;
					public getOuterRadius(): number;
					public setAngularBins(param0: number): void;
					public getShapeContextWeight(): number;
					public getImageAppearanceWeight(): number;
					public setBendingEnergyWeight(param0: number): void;
					public setIterations(param0: number): void;
					public setTransformAlgorithm(param0: org.bytedeco.javacpp.opencv_shape.ShapeTransformer): void;
					public getImages(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class ShapeDistanceExtractor extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape.ShapeDistanceExtractor>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public computeDistance(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public constructor();
					public computeDistance(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
					public computeDistance(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
					public constructor(param0: number);
				}
				export class ShapeTransformer extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape.ShapeTransformer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public warpImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public estimateTransformation(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
					public warpImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public applyTransformation(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
					public estimateTransformation(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
					public constructor();
					public applyTransformation(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
					public applyTransformation(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public warpImage(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public warpImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public warpImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Scalar): void;
					public applyTransformation(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public warpImage(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public estimateTransformation(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
					public applyTransformation(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
					public constructor(param0: number);
					public applyTransformation(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				}
				export class ThinPlateSplineShapeTransformer extends org.bytedeco.javacpp.opencv_shape.ShapeTransformer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_shape.ThinPlateSplineShapeTransformer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public setRegularizationParameter(param0: number): void;
					public constructor(param0: number);
					public getRegularizationParameter(): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_stitching extends org.bytedeco.javacpp.presets.opencv_stitching {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching>;
				public static WAVE_CORRECT_HORIZ: number;
				public static WAVE_CORRECT_VERT: number;
				public static normalizeUsingWeightMap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static computeImageFeatures2(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures): void;
				public static createLaplacePyrGpu(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static computeImageFeatures2(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static waveCorrect(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: number): void;
				public static focalsFromHomography(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: native.Array<boolean>, param4: native.Array<boolean>): void;
				public constructor();
				public static createWeightMap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static findMaxSpanningTree(param0: number, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo, param2: org.bytedeco.javacpp.opencv_stitching.Graph, param3: native.Array<number>): void;
				public static createStitcher(param0: boolean): org.bytedeco.javacpp.opencv_stitching.Stitcher;
				public static matchesGraphAsString(param0: org.bytedeco.javacpp.opencv_core.StringVector, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo, param2: number): org.bytedeco.javacpp.BytePointer;
				public static createStitcher(): org.bytedeco.javacpp.opencv_stitching.Stitcher;
				public static createLaplacePyr(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static computeImageFeatures2(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static stitchingLogLevel(): org.bytedeco.javacpp.IntPointer;
				public static resultRoi(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.SizeVector): org.bytedeco.javacpp.opencv_core.Rect;
				public static selectRandomSubset(param0: number, param1: number, param2: java.nio.IntBuffer): void;
				public static restoreImageFromLaplacePyrGpu(param0: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static createLaplacePyr(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static estimateFocal(param0: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo, param2: native.Array<number>): void;
				public static createStitcherScans(param0: boolean): org.bytedeco.javacpp.opencv_stitching.Stitcher;
				public static focalsFromHomography(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: native.Array<number>, param3: org.bytedeco.javacpp.BoolPointer, param4: org.bytedeco.javacpp.BoolPointer): void;
				public static selectRandomSubset(param0: number, param1: number, param2: org.bytedeco.javacpp.IntPointer): void;
				public static leaveBiggestComponent(param0: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo, param2: number): org.bytedeco.javacpp.IntPointer;
				public static createWeightMap(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static createLaplacePyr(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static normalizeUsingWeightMap(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static computeImageFeatures(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param3: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static resultRoi(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector): org.bytedeco.javacpp.opencv_core.Rect;
				public static findMaxSpanningTree(param0: number, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo, param2: org.bytedeco.javacpp.opencv_stitching.Graph, param3: org.bytedeco.javacpp.IntPointer): void;
				public static computeImageFeatures(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param3: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static createStitcherScans(): org.bytedeco.javacpp.opencv_stitching.Stitcher;
				public static computeImageFeatures2(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static focalsFromHomography(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: native.Array<boolean>, param4: native.Array<boolean>): void;
				public static computeImageFeatures(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures): void;
				public static computeImageFeatures2(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures): void;
				public static focalsFromHomography(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: native.Array<number>, param3: native.Array<boolean>, param4: native.Array<boolean>): void;
				public static resultTl(param0: org.bytedeco.javacpp.opencv_core.PointVector): org.bytedeco.javacpp.opencv_core.Point;
				public static createWeightMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static calibrateRotatingCamera(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static focalsFromHomography(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.DoublePointer, param2: org.bytedeco.javacpp.DoublePointer, param3: org.bytedeco.javacpp.BoolPointer, param4: org.bytedeco.javacpp.BoolPointer): void;
				public static computeImageFeatures(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures): void;
				public static computeImageFeatures2(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures): void;
				public static computeImageFeatures(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures): void;
				public static estimateFocal(param0: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo, param2: org.bytedeco.javacpp.DoublePointer): void;
				public static findMaxSpanningTree(param0: number, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo, param2: org.bytedeco.javacpp.opencv_stitching.Graph, param3: java.nio.IntBuffer): void;
				public static createLaplacePyrGpu(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static restoreImageFromLaplacePyr(param0: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static selectRandomSubset(param0: number, param1: number, param2: native.Array<number>): void;
				public static normalizeUsingWeightMap(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static overlapRoi(param0: org.bytedeco.javacpp.opencv_core.Point, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Rect): boolean;
				public static estimateFocal(param0: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo, param2: java.nio.DoubleBuffer): void;
				public static focalsFromHomography(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.DoubleBuffer, param2: java.nio.DoubleBuffer, param3: org.bytedeco.javacpp.BoolPointer, param4: org.bytedeco.javacpp.BoolPointer): void;
				public static createLaplacePyrGpu(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static computeImageFeatures(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static resultRoiIntersection(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.SizeVector): org.bytedeco.javacpp.opencv_core.Rect;
			}
			export module opencv_stitching {
				export class AffineBasedEstimator extends org.bytedeco.javacpp.opencv_stitching.Estimator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.AffineBasedEstimator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.AffineBasedEstimator;
					public constructor();
					public constructor(param0: number);
				}
				export class AffineBestOf2NearestMatcher extends org.bytedeco.javacpp.opencv_stitching.BestOf2NearestMatcher {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.AffineBestOf2NearestMatcher>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.BestOf2NearestMatcher;
					public constructor(param0: boolean, param1: number, param2: number, param3: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.AffineBestOf2NearestMatcher;
					public constructor(param0: number);
					public constructor(param0: boolean, param1: boolean, param2: number, param3: number);
				}
				export class AffineWarper extends org.bytedeco.javacpp.opencv_stitching.DetailPlaneWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.AffineWarper>;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point2f;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.DetailPlaneWarper;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public constructor();
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.AffineWarper;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public constructor(param0: number);
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
				}
				export class BestOf2NearestMatcher extends org.bytedeco.javacpp.opencv_stitching.FeaturesMatcher {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.BestOf2NearestMatcher>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: boolean, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_stitching.BestOf2NearestMatcher;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.BestOf2NearestMatcher;
					public constructor();
					public constructor(param0: boolean, param1: number, param2: number, param3: number);
					public collectGarbage(): void;
					public constructor(param0: number);
					public static create(): org.bytedeco.javacpp.opencv_stitching.BestOf2NearestMatcher;
				}
				export class BestOf2NearestRangeMatcher extends org.bytedeco.javacpp.opencv_stitching.BestOf2NearestMatcher {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.BestOf2NearestRangeMatcher>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public apply(param0: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo): void;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.BestOf2NearestMatcher;
					public constructor(param0: number, param1: boolean, param2: number, param3: number, param4: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.BestOf2NearestRangeMatcher;
					public apply(param0: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: boolean, param1: number, param2: number, param3: number);
					public apply(param0: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param1: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param2: org.bytedeco.javacpp.opencv_stitching.MatchesInfo): void;
					public constructor(param0: number);
				}
				export class Blender {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.Blender>;
					public static NO: number;
					public static FEATHER: number;
					public static MULTI_BAND: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public blend(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public prepare(param0: org.bytedeco.javacpp.opencv_core.Rect): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.Blender;
					public feed(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public blend(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public feed(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public blend(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public static createDefault(param0: number): org.bytedeco.javacpp.opencv_stitching.Blender;
					public constructor();
					public static createDefault(param0: number, param1: boolean): org.bytedeco.javacpp.opencv_stitching.Blender;
					public prepare(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.SizeVector): void;
					public constructor(param0: number);
					public feed(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
				}
				export class BlocksGainCompensator extends org.bytedeco.javacpp.opencv_stitching.ExposureCompensator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.BlocksGainCompensator>;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public feed(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.BlocksGainCompensator;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public getMatGains(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public feed(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMatBytePairVector): void;
					public constructor(param0: number);
					public setMatGains(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public constructor(param0: number, param1: number);
				}
				export class BundleAdjusterAffine extends org.bytedeco.javacpp.opencv_stitching.BundleAdjusterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.BundleAdjusterAffine>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.BundleAdjusterAffine;
					public constructor(param0: number);
				}
				export class BundleAdjusterAffinePartial extends org.bytedeco.javacpp.opencv_stitching.BundleAdjusterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.BundleAdjusterAffinePartial>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.BundleAdjusterAffinePartial;
					public constructor();
					public constructor(param0: number);
				}
				export class BundleAdjusterBase extends org.bytedeco.javacpp.opencv_stitching.Estimator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.BundleAdjusterBase>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setConfThresh(param0: number): void;
					public termCriteria(): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public setRefinementMask(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public confThresh(): number;
					public setTermCriteria(param0: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
					public refinementMask(): org.bytedeco.javacpp.opencv_core.Mat;
				}
				export class BundleAdjusterRay extends org.bytedeco.javacpp.opencv_stitching.BundleAdjusterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.BundleAdjusterRay>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.BundleAdjusterRay;
					public constructor();
					public constructor(param0: number);
				}
				export class BundleAdjusterReproj extends org.bytedeco.javacpp.opencv_stitching.BundleAdjusterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.BundleAdjusterReproj>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.BundleAdjusterReproj;
					public constructor(param0: number);
				}
				export class CameraParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.CameraParams>;
					public aspect(param0: number): org.bytedeco.javacpp.opencv_stitching.CameraParams;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: org.bytedeco.javacpp.opencv_stitching.CameraParams): org.bytedeco.javacpp.opencv_stitching.CameraParams;
					public aspect(): number;
					public focal(param0: number): org.bytedeco.javacpp.opencv_stitching.CameraParams;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.CameraParams;
					public K(): org.bytedeco.javacpp.opencv_core.Mat;
					public ppx(param0: number): org.bytedeco.javacpp.opencv_stitching.CameraParams;
					public ppx(): number;
					public ppy(param0: number): org.bytedeco.javacpp.opencv_stitching.CameraParams;
					public t(): org.bytedeco.javacpp.opencv_core.Mat;
					public t(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_stitching.CameraParams;
					public R(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_stitching.CameraParams);
					public R(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_stitching.CameraParams;
					public ppy(): number;
					public constructor(param0: number);
					public focal(): number;
				}
				export class CompressedRectilinearPortraitProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearPortraitProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearPortraitProjector;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public a(): number;
					public b(): number;
					public constructor();
					public b(param0: number): org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearPortraitProjector;
					public a(param0: number): org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearPortraitProjector;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
				}
				export class CompressedRectilinearPortraitWarper extends org.bytedeco.javacpp.opencv_stitching.WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearPortraitWarper>;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearPortraitWarper;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
				export class CompressedRectilinearProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public a(): number;
					public b(): number;
					public constructor();
					public a(param0: number): org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearProjector;
					public b(param0: number): org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearProjector;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearProjector;
				}
				export class CompressedRectilinearWarper extends org.bytedeco.javacpp.opencv_stitching.WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.CompressedRectilinearWarper;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
				export class CylindricalPortraitProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.CylindricalPortraitProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public constructor();
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.CylindricalPortraitProjector;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
				}
				export class CylindricalPortraitWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.CylindricalPortraitWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number);
				}
				export class CylindricalProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.CylindricalProjector>;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.CylindricalProjector;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public constructor();
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
				}
				export class CylindricalWarper extends org.bytedeco.javacpp.opencv_stitching.WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.CylindricalWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.CylindricalWarper;
					public constructor(param0: number);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
				export class DetailCompressedRectilinearPortraitWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailCompressedRectilinearPortraitWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number, param1: number, param2: number);
					public constructor(param0: number);
				}
				export class DetailCompressedRectilinearWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailCompressedRectilinearWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number, param1: number, param2: number);
					public constructor(param0: number);
				}
				export class DetailCylindricalWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailCylindricalWarper>;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: number);
				}
				export class DetailCylindricalWarperGpu extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailCylindricalWarperGpu>;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: number);
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
				}
				export class DetailFisheyeWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailFisheyeWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number);
				}
				export class DetailMercatorWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailMercatorWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number);
				}
				export class DetailPaniniPortraitWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailPaniniPortraitWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number, param1: number, param2: number);
					public constructor(param0: number);
				}
				export class DetailPaniniWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailPaniniWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number, param1: number, param2: number);
					public constructor(param0: number);
				}
				export class DetailPlaneWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailPlaneWarper>;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point2f;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.DetailPlaneWarper;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public constructor();
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public constructor(param0: number);
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
				}
				export class DetailPlaneWarperGpu extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailPlaneWarperGpu>;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.DetailPlaneWarperGpu;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public constructor();
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public constructor(param0: number);
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
				}
				export class DetailSphericalWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailSphericalWarper>;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: number);
				}
				export class DetailSphericalWarperGpu extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailSphericalWarperGpu>;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: number);
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
				}
				export class DetailStereographicWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailStereographicWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number);
				}
				export class DetailTransverseMercatorWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DetailTransverseMercatorWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number);
				}
				export class DisjointSets {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DisjointSets>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public parent(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_stitching.DisjointSets;
					public size(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_stitching.DisjointSets;
					public createOneElemSets(param0: number): void;
					public constructor();
					public findSetByElem(param0: number): number;
					public mergeSets(param0: number, param1: number): number;
					public parent(): org.bytedeco.javacpp.IntPointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.DisjointSets;
					public size(): org.bytedeco.javacpp.IntPointer;
					public constructor(param0: number);
				}
				export class DpSeamFinder extends org.bytedeco.javacpp.opencv_stitching.SeamFinder {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.DpSeamFinder>;
					public static COLOR: number;
					public static COLOR_GRAD: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.DpSeamFinder;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public constructor(param0: string);
					public costFunction(): number;
					public find(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public constructor();
					public setCostFunction(param0: string): void;
					public setCostFunction(param0: org.bytedeco.javacpp.BytePointer): void;
					public constructor(param0: number);
					public setCostFunction(param0: number): void;
				}
				export class Estimator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.Estimator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public apply(param0: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo, param2: org.bytedeco.javacpp.opencv_stitching.CameraParams): boolean;
				}
				export class ExposureCompensator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.ExposureCompensator>;
					public static NO: number;
					public static GAIN: number;
					public static GAIN_BLOCKS: number;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public feed(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setUpdateGain(param0: boolean): void;
					public getUpdateGain(): boolean;
					public getMatGains(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public static createDefault(param0: number): org.bytedeco.javacpp.opencv_stitching.ExposureCompensator;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public feed(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMatBytePairVector): void;
					public setMatGains(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
				}
				export class FeatherBlender extends org.bytedeco.javacpp.opencv_stitching.Blender {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.FeatherBlender>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public blend(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public sharpness(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.FeatherBlender;
					public prepare(param0: org.bytedeco.javacpp.opencv_core.Rect): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.Blender;
					public feed(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public blend(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public feed(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public blend(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public createWeightMaps(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): org.bytedeco.javacpp.opencv_core.Rect;
					public setSharpness(param0: number): void;
					public constructor();
					public prepare(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.SizeVector): void;
					public constructor(param0: number);
					public feed(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
				}
				export class FeaturesMatcher {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.FeaturesMatcher>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public isThreadSafe(): boolean;
					public apply(param0: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param1: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param2: org.bytedeco.javacpp.opencv_stitching.MatchesInfo): void;
					public apply2(param0: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public collectGarbage(): void;
					public apply2(param0: org.bytedeco.javacpp.opencv_stitching.ImageFeatures, param1: org.bytedeco.javacpp.opencv_stitching.MatchesInfo): void;
				}
				export class FisheyeProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.FisheyeProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.FisheyeProjector;
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
				}
				export class FisheyeWarper extends org.bytedeco.javacpp.opencv_stitching.WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.FisheyeWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.FisheyeWarper;
					public constructor(param0: number);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
				export class GainCompensator extends org.bytedeco.javacpp.opencv_stitching.ExposureCompensator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.GainCompensator>;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.GainCompensator;
					public feed(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public getMatGains(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public gains(): org.bytedeco.javacpp.DoublePointer;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public feed(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMatBytePairVector): void;
					public constructor(param0: number);
					public setMatGains(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
				}
				export class Graph {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.Graph>;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.Graph;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public create(param0: number): void;
					public numVertices(): number;
					public addEdge(param0: number, param1: number, param2: number): void;
					public constructor(param0: number);
				}
				export class GraphCutSeamFinder extends org.bytedeco.javacpp.opencv_stitching.GraphCutSeamFinderBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.GraphCutSeamFinder>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: string);
					public find(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public asSeamFinder(): org.bytedeco.javacpp.opencv_stitching.SeamFinder;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number);
					public constructor();
					public constructor(param0: number, param1: number, param2: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.GraphCutSeamFinderBase;
					public static asSeamFinder(param0: org.bytedeco.javacpp.opencv_stitching.GraphCutSeamFinder): org.bytedeco.javacpp.opencv_stitching.SeamFinder;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.GraphCutSeamFinder;
					public constructor(param0: string, param1: number, param2: number);
					public constructor(param0: number);
				}
				export class GraphCutSeamFinderBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.GraphCutSeamFinderBase>;
					public static COST_COLOR: number;
					public static COST_COLOR_GRAD: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.GraphCutSeamFinderBase;
					public constructor(param0: number);
				}
				export class GraphEdge {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.GraphEdge>;
					public greaterThan(param0: org.bytedeco.javacpp.opencv_stitching.GraphEdge): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public lessThan(param0: org.bytedeco.javacpp.opencv_stitching.GraphEdge): boolean;
					public to(): number;
					public constructor(param0: number, param1: number, param2: number);
					public from(): number;
					public to(param0: number): org.bytedeco.javacpp.opencv_stitching.GraphEdge;
					public weight(param0: number): org.bytedeco.javacpp.opencv_stitching.GraphEdge;
					public from(param0: number): org.bytedeco.javacpp.opencv_stitching.GraphEdge;
					public weight(): number;
				}
				export class HomographyBasedEstimator extends org.bytedeco.javacpp.opencv_stitching.Estimator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.HomographyBasedEstimator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: boolean);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.HomographyBasedEstimator;
					public constructor(param0: number);
				}
				export class ImageFeatures {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.ImageFeatures>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public descriptors(): org.bytedeco.javacpp.opencv_core.UMat;
					public getKeypoints(): org.bytedeco.javacpp.opencv_core.KeyPointVector;
					public img_idx(): number;
					public img_size(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_stitching.ImageFeatures;
					public img_idx(param0: number): org.bytedeco.javacpp.opencv_stitching.ImageFeatures;
					public img_size(): org.bytedeco.javacpp.opencv_core.Size;
					public constructor();
					public descriptors(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_stitching.ImageFeatures;
					public keypoints(param0: org.bytedeco.javacpp.opencv_core.KeyPointVector): org.bytedeco.javacpp.opencv_stitching.ImageFeatures;
					public keypoints(): org.bytedeco.javacpp.opencv_core.KeyPointVector;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.ImageFeatures;
				}
				export class MatchesInfo {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.MatchesInfo>;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.MatchesInfo;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public src_img_idx(): number;
					public src_img_idx(param0: number): org.bytedeco.javacpp.opencv_stitching.MatchesInfo;
					public inliers_mask(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_stitching.MatchesInfo;
					public matches(param0: org.bytedeco.javacpp.opencv_core.DMatchVector): org.bytedeco.javacpp.opencv_stitching.MatchesInfo;
					public put(param0: org.bytedeco.javacpp.opencv_stitching.MatchesInfo): org.bytedeco.javacpp.opencv_stitching.MatchesInfo;
					public dst_img_idx(): number;
					public num_inliers(param0: number): org.bytedeco.javacpp.opencv_stitching.MatchesInfo;
					public num_inliers(): number;
					public getMatches(): org.bytedeco.javacpp.opencv_core.DMatchVector;
					public inliers_mask(): org.bytedeco.javacpp.BytePointer;
					public matches(): org.bytedeco.javacpp.opencv_core.DMatchVector;
					public H(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_stitching.MatchesInfo;
					public H(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public getInliers(): org.bytedeco.javacpp.BytePointer;
					public dst_img_idx(param0: number): org.bytedeco.javacpp.opencv_stitching.MatchesInfo;
					public constructor(param0: org.bytedeco.javacpp.opencv_stitching.MatchesInfo);
					public confidence(): number;
					public confidence(param0: number): org.bytedeco.javacpp.opencv_stitching.MatchesInfo;
					public constructor(param0: number);
				}
				export class MercatorProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.MercatorProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.MercatorProjector;
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
				}
				export class MercatorWarper extends org.bytedeco.javacpp.opencv_stitching.WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.MercatorWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.MercatorWarper;
					public constructor(param0: number);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
				export class MultiBandBlender extends org.bytedeco.javacpp.opencv_stitching.Blender {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.MultiBandBlender>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public blend(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public prepare(param0: org.bytedeco.javacpp.opencv_core.Rect): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.Blender;
					public feed(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.MultiBandBlender;
					public blend(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public feed(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public setNumBands(param0: number): void;
					public blend(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public numBands(): number;
					public constructor(param0: number, param1: number, param2: number);
					public prepare(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.SizeVector): void;
					public constructor(param0: number);
					public feed(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
				}
				export class NoBundleAdjuster extends org.bytedeco.javacpp.opencv_stitching.BundleAdjusterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.NoBundleAdjuster>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.NoBundleAdjuster;
					public constructor(param0: number);
				}
				export class NoExposureCompensator extends org.bytedeco.javacpp.opencv_stitching.ExposureCompensator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.NoExposureCompensator>;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.NoExposureCompensator;
					public feed(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public getMatGains(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public apply(param0: number, param1: org.bytedeco.javacpp.opencv_core.Point, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public feed(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMatBytePairVector): void;
					public constructor(param0: number);
					public setMatGains(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
				}
				export class NoSeamFinder extends org.bytedeco.javacpp.opencv_stitching.SeamFinder {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.NoSeamFinder>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public find(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.NoSeamFinder;
					public constructor(param0: number);
				}
				export class PairwiseSeamFinder extends org.bytedeco.javacpp.opencv_stitching.SeamFinder {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.PairwiseSeamFinder>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public find(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				}
				export class PaniniPortraitProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.PaniniPortraitProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public a(param0: number): org.bytedeco.javacpp.opencv_stitching.PaniniPortraitProjector;
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public b(param0: number): org.bytedeco.javacpp.opencv_stitching.PaniniPortraitProjector;
					public a(): number;
					public b(): number;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.PaniniPortraitProjector;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
				}
				export class PaniniPortraitWarper extends org.bytedeco.javacpp.opencv_stitching.WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.PaniniPortraitWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.PaniniPortraitWarper;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
				export class PaniniProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.PaniniProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public b(param0: number): org.bytedeco.javacpp.opencv_stitching.PaniniProjector;
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public a(): number;
					public b(): number;
					public constructor();
					public a(param0: number): org.bytedeco.javacpp.opencv_stitching.PaniniProjector;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.PaniniProjector;
					public constructor(param0: number);
				}
				export class PaniniWarper extends org.bytedeco.javacpp.opencv_stitching.WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.PaniniWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.PaniniWarper;
					public constructor();
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
				export class PlanePortraitProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.PlanePortraitProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.PlanePortraitProjector;
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
				}
				export class PlanePortraitWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.PlanePortraitWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number);
				}
				export class PlaneProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.PlaneProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public constructor();
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.PlaneProjector;
					public constructor(param0: number);
				}
				export class PlaneWarper extends org.bytedeco.javacpp.opencv_stitching.WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.PlaneWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.PlaneWarper;
					public constructor(param0: number);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
				export class ProjectorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.ProjectorBase>;
					public k(): org.bytedeco.javacpp.FloatPointer;
					public rinv(param0: number): number;
					public t(): org.bytedeco.javacpp.FloatPointer;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.ProjectorBase;
					public t(param0: number): number;
					public scale(param0: number): org.bytedeco.javacpp.opencv_stitching.ProjectorBase;
					public r_kinv(): org.bytedeco.javacpp.FloatPointer;
					public setCameraParams(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setCameraParams(): void;
					public k_rinv(): org.bytedeco.javacpp.FloatPointer;
					public k_rinv(param0: number): number;
					public constructor();
					public r_kinv(param0: number, param1: number): org.bytedeco.javacpp.opencv_stitching.ProjectorBase;
					public scale(): number;
					public k(param0: number, param1: number): org.bytedeco.javacpp.opencv_stitching.ProjectorBase;
					public constructor(param0: number);
					public setCameraParams(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public k_rinv(param0: number, param1: number): org.bytedeco.javacpp.opencv_stitching.ProjectorBase;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public r_kinv(param0: number): number;
					public t(param0: number, param1: number): org.bytedeco.javacpp.opencv_stitching.ProjectorBase;
					public k(param0: number): number;
					public rinv(param0: number, param1: number): org.bytedeco.javacpp.opencv_stitching.ProjectorBase;
					public setCameraParams(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public rinv(): org.bytedeco.javacpp.FloatPointer;
				}
				export class PyRotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.PyRotationWarper>;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: number);
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public warpBackward(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.PyRotationWarper;
					public warpBackward(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Mat): void;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public setScale(param0: number): void;
					public constructor();
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: string, param1: number);
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpBackward(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.UMat): void;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public getScale(): number;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: number);
				}
				export class RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.RotationWarper>;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public warp(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warp(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Point;
					public warpBackward(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public warpBackward(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.Mat): void;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Rect;
					public warp(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Point;
					public setScale(param0: number): void;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public warpBackward(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Size, param6: org.bytedeco.javacpp.opencv_core.UMat): void;
					public warpRoi(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Rect;
					public getScale(): number;
					public warpPoint(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Point2f;
					public buildMaps(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Rect;
				}
				export class SeamFinder {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.SeamFinder>;
					public static NO: number;
					public static VORONOI_SEAM: number;
					public static DP_SEAM: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static createDefault(param0: number): org.bytedeco.javacpp.opencv_stitching.SeamFinder;
					public find(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				}
				export class SphericalPortraitProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.SphericalPortraitProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.SphericalPortraitProjector;
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
				}
				export class SphericalPortraitWarper extends org.bytedeco.javacpp.opencv_stitching.RotationWarper {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.SphericalPortraitWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: number);
				}
				export class SphericalProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.SphericalProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public constructor();
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.SphericalProjector;
					public constructor(param0: number);
				}
				export class SphericalWarper extends org.bytedeco.javacpp.opencv_stitching.WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.SphericalWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.SphericalWarper;
					public constructor(param0: number);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
				export class StereographicProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.StereographicProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public constructor();
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.StereographicProjector;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
				}
				export class StereographicWarper extends org.bytedeco.javacpp.opencv_stitching.WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.StereographicWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.StereographicWarper;
					public constructor();
					public constructor(param0: number);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
				export class Stitcher {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.Stitcher>;
					public static OK: number;
					public static ERR_NEED_MORE_IMGS: number;
					public static ERR_HOMOGRAPHY_EST_FAIL: number;
					public static ERR_CAMERA_PARAMS_ADJUST_FAIL: number;
					public static PANORAMA: number;
					public static SCANS: number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public matchingMask(): org.bytedeco.javacpp.opencv_core.UMat;
					public panoConfidenceThresh(): number;
					public estimateTransform(param0: org.bytedeco.javacpp.opencv_core.UMatVector): number;
					public compositingResol(): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
					public constructor();
					public setSeamFinder(param0: org.bytedeco.javacpp.opencv_stitching.SeamFinder): void;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
					public setFeaturesMatcher(param0: org.bytedeco.javacpp.opencv_stitching.FeaturesMatcher): void;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.UMat): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
					public setWarper(param0: org.bytedeco.javacpp.opencv_stitching.WarperCreator): void;
					public estimateTransform(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector): number;
					public setSeamEstimationResol(param0: number): void;
					public setInterpolationFlags(param0: number): void;
					public waveCorrection(): boolean;
					public blender(): org.bytedeco.javacpp.opencv_stitching.Blender;
					public estimateTransform(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
					public component(): org.bytedeco.javacpp.IntPointer;
					public interpolationFlags(): number;
					public setCompositingResol(param0: number): void;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
					public setEstimator(param0: org.bytedeco.javacpp.opencv_stitching.Estimator): void;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
					public waveCorrectKind(): number;
					public setBlender(param0: org.bytedeco.javacpp.opencv_stitching.Blender): void;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public featuresFinder(): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public setMatchingMask(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public estimateTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): number;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public cameras(): org.bytedeco.javacpp.opencv_stitching.CameraParams;
					public static create(): org.bytedeco.javacpp.opencv_stitching.Stitcher;
					public exposureCompensator(): org.bytedeco.javacpp.opencv_stitching.ExposureCompensator;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.Stitcher;
					public static ORIG_RESOL(): number;
					public seamEstimationResol(): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public estimator(): org.bytedeco.javacpp.opencv_stitching.Estimator;
					public seamFinder(): org.bytedeco.javacpp.opencv_stitching.SeamFinder;
					public bundleAdjuster(): org.bytedeco.javacpp.opencv_stitching.BundleAdjusterBase;
					public estimateTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector): number;
					public setWaveCorrection(param0: boolean): void;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public registrationResol(): number;
					public setRegistrationResol(param0: number): void;
					public constructor(param0: number);
					public workScale(): number;
					public setWaveCorrectKind(param0: number): void;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setBundleAdjuster(param0: org.bytedeco.javacpp.opencv_stitching.BundleAdjusterBase): void;
					public featuresMatcher(): org.bytedeco.javacpp.opencv_stitching.FeaturesMatcher;
					public warper(): org.bytedeco.javacpp.opencv_stitching.WarperCreator;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public setPanoConfidenceThresh(param0: number): void;
					public composePanorama(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
					public static create(param0: number): org.bytedeco.javacpp.opencv_stitching.Stitcher;
					public setFeaturesFinder(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D): void;
					public setExposureCompensator(param0: org.bytedeco.javacpp.opencv_stitching.ExposureCompensator): void;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public estimateTransform(param0: org.bytedeco.javacpp.opencv_core.MatVector): number;
					public stitch(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				}
				export class Timelapser {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.Timelapser>;
					public static AS_IS: number;
					public static CROP: number;
					public process(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public initialize(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.SizeVector): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.Timelapser;
					public getDst(): org.bytedeco.javacpp.opencv_core.UMat;
					public process(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Point): void;
					public static createDefault(param0: number): org.bytedeco.javacpp.opencv_stitching.Timelapser;
					public constructor(param0: number);
				}
				export class TimelapserCrop extends org.bytedeco.javacpp.opencv_stitching.Timelapser {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.TimelapserCrop>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public initialize(param0: org.bytedeco.javacpp.opencv_core.PointVector, param1: org.bytedeco.javacpp.opencv_core.SizeVector): void;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.Timelapser;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.TimelapserCrop;
					public constructor(param0: number);
				}
				export class TransverseMercatorProjector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.TransverseMercatorProjector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public mapForward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.TransverseMercatorProjector;
					public mapForward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public mapBackward(param0: number, param1: number, param2: org.bytedeco.javacpp.FloatPointer, param3: org.bytedeco.javacpp.FloatPointer): void;
					public constructor();
					public mapBackward(param0: number, param1: number, param2: java.nio.FloatBuffer, param3: java.nio.FloatBuffer): void;
					public mapForward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public mapBackward(param0: number, param1: number, param2: native.Array<number>, param3: native.Array<number>): void;
					public constructor(param0: number);
				}
				export class TransverseMercatorWarper extends org.bytedeco.javacpp.opencv_stitching.WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.TransverseMercatorWarper>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.TransverseMercatorWarper;
					public constructor();
					public constructor(param0: number);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
				export class VoronoiSeamFinder extends org.bytedeco.javacpp.opencv_stitching.PairwiseSeamFinder {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.VoronoiSeamFinder>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public find(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_stitching.VoronoiSeamFinder;
					public constructor(param0: number);
					public find(param0: org.bytedeco.javacpp.opencv_core.SizeVector, param1: org.bytedeco.javacpp.opencv_core.PointVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				}
				export class WarperCreator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_stitching.WarperCreator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public create(param0: number): org.bytedeco.javacpp.opencv_stitching.RotationWarper;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_structured_light extends org.bytedeco.javacpp.presets.opencv_structured_light {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_structured_light>;
				public static DECODE_3D_UNDERWORLD: number;
				public static FTP: number;
				public static PSP: number;
				public static FAPS: number;
				public constructor();
			}
			export module opencv_structured_light {
				export class GrayCodePattern extends org.bytedeco.javacpp.opencv_structured_light.StructuredLightPattern {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_structured_light.GrayCodePattern>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_structured_light.GrayCodePattern.Params): org.bytedeco.javacpp.opencv_structured_light.GrayCodePattern;
					public getProjPixel(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Point): boolean;
					public getImagesForShadowMasks(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getProjPixel(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Point): boolean;
					public static create(param0: number, param1: number): org.bytedeco.javacpp.opencv_structured_light.GrayCodePattern;
					public getNumberOfPatternImages(): number;
					public getImagesForShadowMasks(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public static create(): org.bytedeco.javacpp.opencv_structured_light.GrayCodePattern;
					public getProjPixel(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Point): boolean;
					public constructor();
					public setWhiteThreshold(param0: number): void;
					public getImagesForShadowMasks(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setBlackThreshold(param0: number): void;
					public constructor(param0: number);
				}
				export module GrayCodePattern {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_structured_light.GrayCodePattern.Params>;
						public constructor();
						public width(param0: number): org.bytedeco.javacpp.opencv_structured_light.GrayCodePattern.Params;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public height(): number;
						public position(param0: number): org.bytedeco.javacpp.opencv_structured_light.GrayCodePattern.Params;
						public constructor(param0: number);
						public width(): number;
						public height(param0: number): org.bytedeco.javacpp.opencv_structured_light.GrayCodePattern.Params;
					}
				}
				export class SinusoidalPattern extends org.bytedeco.javacpp.opencv_structured_light.StructuredLightPattern {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern>;
					public findProCamMatches(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public computeDataModulationTerm(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public findProCamMatches(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public computeDataModulationTerm(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public static create(): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public findProCamMatches(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public computeDataModulationTerm(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public findProCamMatches(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public computeDataModulationTerm(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public computeDataModulationTerm(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public findProCamMatches(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public findProCamMatches(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public computeDataModulationTerm(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern;
					public computeDataModulationTerm(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public computeDataModulationTerm(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public computeDataModulationTerm(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public findProCamMatches(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public findProCamMatches(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public unwrapPhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public findProCamMatches(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public computePhaseMap(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export module SinusoidalPattern {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params>;
						public constructor();
						public setMarkers(param0: boolean): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params;
						public nbrOfPeriods(param0: number): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params;
						public shiftValue(param0: number): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public width(param0: number): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params;
						public height(): number;
						public nbrOfPixelsBetweenMarkers(): number;
						public height(param0: number): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params;
						public horizontal(param0: boolean): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params;
						public markersLocation(param0: org.bytedeco.javacpp.opencv_core.Point2fVector): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params;
						public position(param0: number): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params;
						public width(): number;
						public nbrOfPixelsBetweenMarkers(param0: number): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params;
						public methodId(param0: number): org.bytedeco.javacpp.opencv_structured_light.SinusoidalPattern.Params;
						public nbrOfPeriods(): number;
						public shiftValue(): number;
						public constructor(param0: number);
						public setMarkers(): boolean;
						public markersLocation(): org.bytedeco.javacpp.opencv_core.Point2fVector;
						public methodId(): number;
						public horizontal(): boolean;
					}
				}
				export class StructuredLightPattern extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_structured_light.StructuredLightPattern>;
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: number): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public generate(param0: org.bytedeco.javacpp.opencv_core.UMatVector): boolean;
					public generate(param0: org.bytedeco.javacpp.opencv_core.MatVector): boolean;
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: number): boolean;
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: number): boolean;
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public constructor();
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: number): boolean;
					public generate(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector): boolean;
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: number): boolean;
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: number): boolean;
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector, param3: org.bytedeco.javacpp.opencv_core.GpuMatVector, param4: number): boolean;
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMatVector, param3: org.bytedeco.javacpp.opencv_core.UMatVector, param4: number): boolean;
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public constructor(param0: number);
					public decode(param0: org.bytedeco.javacpp.opencv_core.MatVectorVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.MatVector, param3: org.bytedeco.javacpp.opencv_core.MatVector, param4: number): boolean;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_superres extends org.bytedeco.javacpp.presets.opencv_superres {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_superres>;
				public static createFrameSource_Video_CUDA(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_superres.FrameSource;
				public static createFrameSource_Camera(param0: number): org.bytedeco.javacpp.opencv_superres.FrameSource;
				public static createFrameSource_Video(param0: string): org.bytedeco.javacpp.opencv_superres.FrameSource;
				public static createFrameSource_Camera(): org.bytedeco.javacpp.opencv_superres.FrameSource;
				public static createSuperResolution_BTVL1_CUDA(): org.bytedeco.javacpp.opencv_superres.SuperResolution;
				public static createSuperResolution_BTVL1(): org.bytedeco.javacpp.opencv_superres.SuperResolution;
				public static createOptFlow_DualTVL1_CUDA(): org.bytedeco.javacpp.opencv_superres.SuperResDualTVL1OpticalFlow;
				public static createOptFlow_Brox_CUDA(): org.bytedeco.javacpp.opencv_superres.BroxOpticalFlow;
				public static createFrameSource_Video(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_superres.FrameSource;
				public static createFrameSource_Video_CUDA(param0: string): org.bytedeco.javacpp.opencv_superres.FrameSource;
				public constructor();
				public static createOptFlow_PyrLK_CUDA(): org.bytedeco.javacpp.opencv_superres.PyrLKOpticalFlow;
				public static createFrameSource_Empty(): org.bytedeco.javacpp.opencv_superres.FrameSource;
				public static createOptFlow_Farneback(): org.bytedeco.javacpp.opencv_superres.SuperResFarnebackOpticalFlow;
				public static createOptFlow_Farneback_CUDA(): org.bytedeco.javacpp.opencv_superres.SuperResFarnebackOpticalFlow;
				public static createOptFlow_DualTVL1(): org.bytedeco.javacpp.opencv_superres.SuperResDualTVL1OpticalFlow;
			}
			export module opencv_superres {
				export class BroxOpticalFlow extends org.bytedeco.javacpp.opencv_superres.DenseOpticalFlowExt {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_superres.BroxOpticalFlow>;
					public getOuterIterations(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getAlpha(): number;
					public getInnerIterations(): number;
					public getSolverIterations(): number;
					public setAlpha(param0: number): void;
					public getGamma(): number;
					public setGamma(param0: number): void;
					public setInnerIterations(param0: number): void;
					public setOuterIterations(param0: number): void;
					public setScaleFactor(param0: number): void;
					public getScaleFactor(): number;
					public constructor();
					public constructor(param0: number);
					public setSolverIterations(param0: number): void;
				}
				export class DenseOpticalFlowExt extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_superres.DenseOpticalFlowExt>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public calc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public calc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public collectGarbage(): void;
					public constructor(param0: number);
					public calc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class FrameSource {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_superres.FrameSource>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public reset(): void;
					public nextFrame(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public nextFrame(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public nextFrame(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export class PyrLKOpticalFlow extends org.bytedeco.javacpp.opencv_superres.DenseOpticalFlowExt {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_superres.PyrLKOpticalFlow>;
					public getWindowSize(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public setWindowSize(param0: number): void;
					public getIterations(): number;
					public getMaxLevel(): number;
					public setMaxLevel(param0: number): void;
					public setIterations(param0: number): void;
					public constructor(param0: number);
				}
				export class SuperResDualTVL1OpticalFlow extends org.bytedeco.javacpp.opencv_superres.DenseOpticalFlowExt {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_superres.SuperResDualTVL1OpticalFlow>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setWarpingsNumber(param0: number): void;
					public getTheta(): number;
					public getScalesNumber(): number;
					public setLambda(param0: number): void;
					public getUseInitialFlow(): boolean;
					public setTau(param0: number): void;
					public getTau(): number;
					public getLambda(): number;
					public getIterations(): number;
					public constructor();
					public setUseInitialFlow(param0: boolean): void;
					public setTheta(param0: number): void;
					public getEpsilon(): number;
					public setScalesNumber(param0: number): void;
					public getWarpingsNumber(): number;
					public setIterations(param0: number): void;
					public constructor(param0: number);
					public setEpsilon(param0: number): void;
				}
				export class SuperResFarnebackOpticalFlow extends org.bytedeco.javacpp.opencv_superres.DenseOpticalFlowExt {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_superres.SuperResFarnebackOpticalFlow>;
					public getWindowSize(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getLevelsNumber(): number;
					public getFlags(): number;
					public setLevelsNumber(param0: number): void;
					public getPolySigma(): number;
					public getIterations(): number;
					public setPolyN(param0: number): void;
					public getPolyN(): number;
					public constructor();
					public setWindowSize(param0: number): void;
					public setFlags(param0: number): void;
					public setPyrScale(param0: number): void;
					public getPyrScale(): number;
					public setIterations(param0: number): void;
					public setPolySigma(param0: number): void;
					public constructor(param0: number);
				}
				export class SuperResolution extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_superres.SuperResolution>;
					public asFrameSource(): org.bytedeco.javacpp.opencv_superres.FrameSource;
					public setLabmda(param0: number): void;
					public setInput(param0: org.bytedeco.javacpp.opencv_superres.FrameSource): void;
					public getKernelSize(): number;
					public setScale(param0: number): void;
					public constructor();
					public setBlurKernelSize(param0: number): void;
					public setTemporalAreaRadius(param0: number): void;
					public getLabmda(): number;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getAlpha(): number;
					public reset(): void;
					public getBlurSigma(): number;
					public setKernelSize(param0: number): void;
					public getBlurKernelSize(): number;
					public getOpticalFlow(): org.bytedeco.javacpp.opencv_superres.DenseOpticalFlowExt;
					public setTau(param0: number): void;
					public getTau(): number;
					public getIterations(): number;
					public setAlpha(param0: number): void;
					public getTemporalAreaRadius(): number;
					public static asFrameSource(param0: org.bytedeco.javacpp.opencv_superres.SuperResolution): org.bytedeco.javacpp.opencv_superres.FrameSource;
					public nextFrame(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public nextFrame(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getScale(): number;
					public setIterations(param0: number): void;
					public setOpticalFlow(param0: org.bytedeco.javacpp.opencv_superres.DenseOpticalFlowExt): void;
					public collectGarbage(): void;
					public setBlurSigma(param0: number): void;
					public nextFrame(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_text extends org.bytedeco.javacpp.presets.opencv_text {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text>;
				public static ERFILTER_NM_RGBLGrad: number;
				public static ERFILTER_NM_IHSGrad: number;
				public static ERGROUPING_ORIENTATION_HORIZ: number;
				public static ERGROUPING_ORIENTATION_ANY: number;
				public static OCR_LEVEL_WORD: number;
				public static OCR_LEVEL_TEXTLINE: number;
				public static PSM_OSD_ONLY: number;
				public static PSM_AUTO_OSD: number;
				public static PSM_AUTO_ONLY: number;
				public static PSM_AUTO: number;
				public static PSM_SINGLE_COLUMN: number;
				public static PSM_SINGLE_BLOCK_VERT_TEXT: number;
				public static PSM_SINGLE_BLOCK: number;
				public static PSM_SINGLE_LINE: number;
				public static PSM_SINGLE_WORD: number;
				public static PSM_CIRCLE_WORD: number;
				public static PSM_SINGLE_CHAR: number;
				public static OEM_TESSERACT_ONLY: number;
				public static OEM_CUBE_ONLY: number;
				public static OEM_TESSERACT_CUBE_COMBINED: number;
				public static OEM_DEFAULT: number;
				public static OCR_DECODER_VITERBI: number;
				public static OCR_KNN_CLASSIFIER: number;
				public static OCR_CNN_CLASSIFIER: number;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: string, param7: number): void;
				public static createERFilterNM2(param0: string, param1: number): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: string, param7: number): void;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.PointVectorVector, param3: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: org.bytedeco.javacpp.BytePointer, param7: number): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: string, param7: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: org.bytedeco.javacpp.BytePointer, param7: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: org.bytedeco.javacpp.BytePointer, param7: number): void;
				public static loadOCRBeamSearchClassifierCNN(param0: string): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder.ClassifierCallback;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: string, param6: number): void;
				public static createOCRHMMTransitionsTable(param0: string, param1: org.bytedeco.javacpp.opencv_core.StringVector): org.bytedeco.javacpp.opencv_core.Mat;
				public static createERFilterNM2(param0: org.bytedeco.javacpp.opencv_text.ERFilter.Callback, param1: number): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static createERFilterNM1(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: org.bytedeco.javacpp.BytePointer, param7: number): void;
				public static loadClassifierNM2(param0: string): org.bytedeco.javacpp.opencv_text.ERFilter.Callback;
				public static loadOCRHMMClassifier(param0: string, param1: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: org.bytedeco.javacpp.BytePointer, param7: number): void;
				public static loadOCRHMMClassifierCNN(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.PointVectorVector, param3: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static createOCRHMMTransitionsTable(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.StringVector): org.bytedeco.javacpp.opencv_core.Mat;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: org.bytedeco.javacpp.BytePointer, param6: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static MSERsToERStats(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.PointVectorVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector): void;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.PointVectorVector, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: org.bytedeco.javacpp.BytePointer, param6: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.PointVectorVector, param3: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static createOCRHMMTransitionsTable(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_text.StdStringVector, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static createERFilterNM1(param0: org.bytedeco.javacpp.opencv_text.ERFilter.Callback, param1: number, param2: number, param3: number, param4: number, param5: boolean, param6: number): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static createERFilterNM2(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static loadClassifierNM2(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.ERFilter.Callback;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: org.bytedeco.javacpp.BytePointer, param7: number): void;
				public static loadOCRBeamSearchClassifierCNN(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder.ClassifierCallback;
				public static createERFilterNM1(param0: org.bytedeco.javacpp.opencv_text.ERFilter.Callback): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static loadOCRHMMClassifierCNN(param0: string): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback;
				public static createERFilterNM1(param0: string, param1: number, param2: number, param3: number, param4: number, param5: boolean, param6: number): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: org.bytedeco.javacpp.BytePointer, param7: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: string, param7: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: org.bytedeco.javacpp.BytePointer, param7: number): void;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: string, param6: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: string, param7: number): void;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public constructor();
				public static MSERsToERStats(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.PointVectorVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector): void;
				public static createERFilterNM1(param0: string): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static loadOCRHMMClassifier(param0: org.bytedeco.javacpp.BytePointer, param1: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback;
				public static createERFilterNM2(param0: string): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: string, param7: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.PointVectorVector, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: string, param6: number): void;
				public static loadClassifierNM1(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.ERFilter.Callback;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: org.bytedeco.javacpp.BytePointer, param6: number): void;
				public static loadClassifierNM1(param0: string): org.bytedeco.javacpp.opencv_text.ERFilter.Callback;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: string, param7: number): void;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: org.bytedeco.javacpp.BytePointer, param6: number): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number): void;
				public static createOCRHMMTransitionsTable(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_text.StdStringVector, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.PointVectorVector, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: string, param6: number): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector): void;
				public static createERFilterNM2(param0: org.bytedeco.javacpp.BytePointer, param1: number): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static loadOCRHMMClassifierNM(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
				public static createOCRHMMTransitionsTable(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_text.StdStringVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.PointVectorVector, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: string, param6: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.PointVectorVector, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: org.bytedeco.javacpp.BytePointer, param6: number): void;
				public static loadOCRHMMClassifierNM(param0: string): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback;
				public static createERFilterNM2(param0: org.bytedeco.javacpp.opencv_text.ERFilter.Callback): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: string, param7: number): void;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: number): void;
				public static MSERsToERStats(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.PointVectorVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector): void;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: org.bytedeco.javacpp.BytePointer, param7: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector): void;
				public static detectRegions(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_text.ERFilter, param2: org.bytedeco.javacpp.opencv_text.ERFilter, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: string, param6: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_text.ERStatVectorVector, param3: org.bytedeco.javacpp.opencv_core.PointVectorVector, param4: org.bytedeco.javacpp.opencv_core.RectVector, param5: number, param6: string, param7: number): void;
				public static erGrouping(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.PointVectorVector, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: number, param5: org.bytedeco.javacpp.BytePointer, param6: number): void;
				public static createERFilterNM1(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: number, param4: number, param5: boolean, param6: number): org.bytedeco.javacpp.opencv_text.ERFilter;
				public static computeNMChannels(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: number): void;
			}
			export module opencv_text {
				export class BaseOCR {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.BaseOCR>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: java.nio.FloatBuffer, param5: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: java.nio.FloatBuffer, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: native.Array<number>, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: native.Array<number>, param5: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: org.bytedeco.javacpp.FloatPointer, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: org.bytedeco.javacpp.FloatPointer, param5: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer): void;
				}
				export class DoubleVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.DoubleVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: org.bytedeco.javacpp.opencv_text.DoubleVector): org.bytedeco.javacpp.opencv_text.DoubleVector;
					public empty(): boolean;
					public size(): number;
					public pop_back(): number;
					public end(): org.bytedeco.javacpp.opencv_text.DoubleVector.Iterator;
					public push_back(param0: number): org.bytedeco.javacpp.opencv_text.DoubleVector;
					public get(param0: number): number;
					public put(param0: number): org.bytedeco.javacpp.opencv_text.DoubleVector;
					public toString(): string;
					public constructor(param0: native.Array<number>);
					public put(param0: number, param1: number): org.bytedeco.javacpp.opencv_text.DoubleVector;
					public begin(): org.bytedeco.javacpp.opencv_text.DoubleVector.Iterator;
					public constructor();
					public clear(): void;
					public resize(param0: number): void;
					public get(): native.Array<number>;
					public put(param0: native.Array<number>): org.bytedeco.javacpp.opencv_text.DoubleVector;
					public insert(param0: org.bytedeco.javacpp.opencv_text.DoubleVector.Iterator, param1: number): org.bytedeco.javacpp.opencv_text.DoubleVector.Iterator;
					public erase(param0: org.bytedeco.javacpp.opencv_text.DoubleVector.Iterator): org.bytedeco.javacpp.opencv_text.DoubleVector.Iterator;
					public constructor(param0: number);
				}
				export module DoubleVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.DoubleVector.Iterator>;
						public constructor();
						public equals(param0: org.bytedeco.javacpp.opencv_text.DoubleVector.Iterator): boolean;
						public get(): number;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_text.DoubleVector.Iterator;
					}
				}
				export class ERFilter extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.ERFilter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setCallback(param0: org.bytedeco.javacpp.opencv_text.ERFilter.Callback): void;
					public setNonMaxSuppression(param0: boolean): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_text.ERStatVector): void;
					public setMinProbability(param0: number): void;
					public setMaxArea(param0: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_text.ERStatVector): void;
					public constructor();
					public setThresholdDelta(param0: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_text.ERStatVector): void;
					public setMinProbabilityDiff(param0: number): void;
					public constructor(param0: number);
					public setMinArea(param0: number): void;
					public getNumRejected(): number;
				}
				export module ERFilter {
					export class Callback {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.ERFilter.Callback>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public eval(param0: org.bytedeco.javacpp.opencv_text.ERStat): number;
					}
				}
				export class ERStat {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.ERStat>;
					public probability(): number;
					public pixels(): org.bytedeco.javacpp.IntPointer;
					public perimeter(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public med_crossings(): number;
					public child(): org.bytedeco.javacpp.opencv_text.ERStat;
					public rect(): org.bytedeco.javacpp.opencv_core.Rect;
					public central_moments(): org.bytedeco.javacpp.DoublePointer;
					public level(): number;
					public convex_hull_ratio(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public constructor();
					public local_maxima(): boolean;
					public local_maxima(param0: boolean): org.bytedeco.javacpp.opencv_text.ERStat;
					public area(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public pixels(param0: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_text.ERStat;
					public raw_moments(): org.bytedeco.javacpp.DoublePointer;
					public euler(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public rect(param0: org.bytedeco.javacpp.opencv_core.Rect): org.bytedeco.javacpp.opencv_text.ERStat;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public central_moments(param0: number, param1: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public prev(param0: org.bytedeco.javacpp.opencv_text.ERStat): org.bytedeco.javacpp.opencv_text.ERStat;
					public hole_area_ratio(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public area(): number;
					public perimeter(): number;
					public convex_hull_ratio(): number;
					public num_inflexion_points(): number;
					public probability(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public prev(): org.bytedeco.javacpp.opencv_text.ERStat;
					public num_inflexion_points(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public pixel(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public hole_area_ratio(): number;
					public parent(): org.bytedeco.javacpp.opencv_text.ERStat;
					public med_crossings(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public euler(): number;
					public raw_moments(param0: number, param1: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public next(param0: org.bytedeco.javacpp.opencv_text.ERStat): org.bytedeco.javacpp.opencv_text.ERStat;
					public raw_moments(param0: number): number;
					public max_probability_ancestor(): org.bytedeco.javacpp.opencv_text.ERStat;
					public next(): org.bytedeco.javacpp.opencv_text.ERStat;
					public constructor(param0: number);
					public min_probability_ancestor(): org.bytedeco.javacpp.opencv_text.ERStat;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public pixel(): number;
					public crossings(): org.bytedeco.javacpp.opencv_text.IntDeque;
					public central_moments(param0: number): number;
					public level(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public parent(param0: org.bytedeco.javacpp.opencv_text.ERStat): org.bytedeco.javacpp.opencv_text.ERStat;
					public crossings(param0: org.bytedeco.javacpp.opencv_text.IntDeque): org.bytedeco.javacpp.opencv_text.ERStat;
					public child(param0: org.bytedeco.javacpp.opencv_text.ERStat): org.bytedeco.javacpp.opencv_text.ERStat;
					public min_probability_ancestor(param0: org.bytedeco.javacpp.opencv_text.ERStat): org.bytedeco.javacpp.opencv_text.ERStat;
					public max_probability_ancestor(param0: org.bytedeco.javacpp.opencv_text.ERStat): org.bytedeco.javacpp.opencv_text.ERStat;
					public position(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
				}
				export class ERStatVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.ERStatVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public get(): native.Array<org.bytedeco.javacpp.opencv_text.ERStat>;
					public pop_back(): org.bytedeco.javacpp.opencv_text.ERStat;
					public empty(): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_text.ERStat);
					public size(): number;
					public begin(): org.bytedeco.javacpp.opencv_text.ERStatVector.Iterator;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_text.ERStat>);
					public get(param0: number): org.bytedeco.javacpp.opencv_text.ERStat;
					public toString(): string;
					public put(param0: org.bytedeco.javacpp.opencv_text.ERStat): org.bytedeco.javacpp.opencv_text.ERStatVector;
					public constructor();
					public put(param0: org.bytedeco.javacpp.opencv_text.ERStatVector): org.bytedeco.javacpp.opencv_text.ERStatVector;
					public erase(param0: org.bytedeco.javacpp.opencv_text.ERStatVector.Iterator): org.bytedeco.javacpp.opencv_text.ERStatVector.Iterator;
					public clear(): void;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_text.ERStat): org.bytedeco.javacpp.opencv_text.ERStatVector;
					public insert(param0: org.bytedeco.javacpp.opencv_text.ERStatVector.Iterator, param1: org.bytedeco.javacpp.opencv_text.ERStat): org.bytedeco.javacpp.opencv_text.ERStatVector.Iterator;
					public end(): org.bytedeco.javacpp.opencv_text.ERStatVector.Iterator;
					public push_back(param0: org.bytedeco.javacpp.opencv_text.ERStat): org.bytedeco.javacpp.opencv_text.ERStatVector;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_text.ERStat>): org.bytedeco.javacpp.opencv_text.ERStatVector;
					public resize(param0: number): void;
					public constructor(param0: number);
				}
				export module ERStatVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.ERStatVector.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public equals(param0: org.bytedeco.javacpp.opencv_text.ERStatVector.Iterator): boolean;
						public get(): org.bytedeco.javacpp.opencv_text.ERStat;
						public increment(): org.bytedeco.javacpp.opencv_text.ERStatVector.Iterator;
					}
				}
				export class ERStatVectorVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.ERStatVectorVector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public begin(): org.bytedeco.javacpp.opencv_text.ERStatVectorVector.Iterator;
					public get(param0: number): org.bytedeco.javacpp.opencv_text.ERStatVector;
					public empty(): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_text.ERStatVector);
					public size(): number;
					public pop_back(): org.bytedeco.javacpp.opencv_text.ERStatVector;
					public put(param0: org.bytedeco.javacpp.opencv_text.ERStatVector): org.bytedeco.javacpp.opencv_text.ERStatVectorVector;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_text.ERStatVector): org.bytedeco.javacpp.opencv_text.ERStatVectorVector;
					public toString(): string;
					public push_back(param0: org.bytedeco.javacpp.opencv_text.ERStatVector): org.bytedeco.javacpp.opencv_text.ERStatVectorVector;
					public erase(param0: org.bytedeco.javacpp.opencv_text.ERStatVectorVector.Iterator): org.bytedeco.javacpp.opencv_text.ERStatVectorVector.Iterator;
					public constructor();
					public clear(): void;
					public get(): native.Array<org.bytedeco.javacpp.opencv_text.ERStatVector>;
					public end(): org.bytedeco.javacpp.opencv_text.ERStatVectorVector.Iterator;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_text.ERStatVector>);
					public insert(param0: org.bytedeco.javacpp.opencv_text.ERStatVectorVector.Iterator, param1: org.bytedeco.javacpp.opencv_text.ERStatVector): org.bytedeco.javacpp.opencv_text.ERStatVectorVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_text.ERStatVectorVector): org.bytedeco.javacpp.opencv_text.ERStatVectorVector;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_text.ERStatVector>): org.bytedeco.javacpp.opencv_text.ERStatVectorVector;
					public resize(param0: number): void;
					public constructor(param0: number);
				}
				export module ERStatVectorVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.ERStatVectorVector.Iterator>;
						public equals(param0: org.bytedeco.javacpp.opencv_text.ERStatVectorVector.Iterator): boolean;
						public constructor();
						public get(): org.bytedeco.javacpp.opencv_text.ERStatVector;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_text.ERStatVectorVector.Iterator;
					}
				}
				export class IntDeque {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.IntDeque>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public insert(param0: org.bytedeco.javacpp.opencv_text.IntDeque.Iterator, param1: number): org.bytedeco.javacpp.opencv_text.IntDeque.Iterator;
					public erase(param0: org.bytedeco.javacpp.opencv_text.IntDeque.Iterator): org.bytedeco.javacpp.opencv_text.IntDeque.Iterator;
					public empty(): boolean;
					public put(param0: number): org.bytedeco.javacpp.opencv_text.IntDeque;
					public size(): number;
					public pop_back(): number;
					public get(param0: number): number;
					public begin(): org.bytedeco.javacpp.opencv_text.IntDeque.Iterator;
					public toString(): string;
					public constructor(param0: native.Array<number>);
					public constructor();
					public push_back(param0: number): org.bytedeco.javacpp.opencv_text.IntDeque;
					public put(param0: org.bytedeco.javacpp.opencv_text.IntDeque): org.bytedeco.javacpp.opencv_text.IntDeque;
					public clear(): void;
					public resize(param0: number): void;
					public end(): org.bytedeco.javacpp.opencv_text.IntDeque.Iterator;
					public get(): native.Array<number>;
					public put(param0: native.Array<number>): org.bytedeco.javacpp.opencv_text.IntDeque;
					public put(param0: number, param1: number): org.bytedeco.javacpp.opencv_text.IntDeque;
					public constructor(param0: number);
				}
				export module IntDeque {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.IntDeque.Iterator>;
						public equals(param0: org.bytedeco.javacpp.opencv_text.IntDeque.Iterator): boolean;
						public constructor();
						public get(): number;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_text.IntDeque.Iterator;
					}
				}
				export class OCRBeamSearchDecoder extends org.bytedeco.javacpp.opencv_text.BaseOCR {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder>;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder.ClassifierCallback, param1: string, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public static create(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: org.bytedeco.javacpp.FloatPointer, param6: number): void;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder.ClassifierCallback, param1: string, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): string;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public constructor();
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: java.nio.FloatBuffer, param5: number): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public static create(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): string;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder.ClassifierCallback, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): org.bytedeco.javacpp.BytePointer;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder.ClassifierCallback, param1: string, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: native.Array<number>, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number): org.bytedeco.javacpp.BytePointer;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder.ClassifierCallback, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public static create(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: native.Array<number>, param5: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: org.bytedeco.javacpp.FloatPointer, param5: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): string;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: java.nio.FloatBuffer, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): org.bytedeco.javacpp.BytePointer;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder.ClassifierCallback, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): string;
				}
				export module OCRBeamSearchDecoder {
					export class ClassifierCallback {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder.ClassifierCallback>;
						public constructor();
						public eval(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_text.DoubleVector, param2: java.nio.IntBuffer): void;
						public getWindowSize(): number;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public eval(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_text.DoubleVector, param2: java.nio.IntBuffer): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_text.DoubleVector, param2: native.Array<number>): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_text.DoubleVector, param2: native.Array<number>): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_text.DoubleVector, param2: org.bytedeco.javacpp.IntPointer): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_text.DoubleVector, param2: java.nio.IntBuffer): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_text.DoubleVector, param2: org.bytedeco.javacpp.IntPointer): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_text.DoubleVector, param2: org.bytedeco.javacpp.IntPointer): void;
						public getStepSize(): number;
						public constructor(param0: number);
						public position(param0: number): org.bytedeco.javacpp.opencv_text.OCRBeamSearchDecoder.ClassifierCallback;
						public eval(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_text.DoubleVector, param2: native.Array<number>): void;
					}
				}
				export class OCRHMMDecoder extends org.bytedeco.javacpp.opencv_text.BaseOCR {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.OCRHMMDecoder>;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: string, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: string, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.BytePointer;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: string, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: org.bytedeco.javacpp.FloatPointer, param6: number): void;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: string, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): string;
					public constructor();
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: java.nio.FloatBuffer, param5: number): void;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: string, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public position(param0: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): string;
					public constructor(param0: number);
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: native.Array<number>, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number): org.bytedeco.javacpp.BytePointer;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: string, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: native.Array<number>, param5: number): void;
					public static create(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: org.bytedeco.javacpp.FloatPointer, param5: number): void;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): string;
					public static create(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): org.bytedeco.javacpp.BytePointer;
					public static create(param0: org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: java.nio.FloatBuffer, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): string;
				}
				export module OCRHMMDecoder {
					export class ClassifierCallback {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback>;
						public constructor();
						public eval(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_text.DoubleVector): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_text.DoubleVector): void;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public eval(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_text.DoubleVector): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_text.DoubleVector): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_text.DoubleVector): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.IntPointer, param2: org.bytedeco.javacpp.opencv_text.DoubleVector): void;
						public constructor(param0: number);
						public eval(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_text.DoubleVector): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_text.DoubleVector): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: java.nio.IntBuffer, param2: org.bytedeco.javacpp.opencv_text.DoubleVector): void;
						public position(param0: number): org.bytedeco.javacpp.opencv_text.OCRHMMDecoder.ClassifierCallback;
					}
				}
				export class OCRHolisticWordRecognizer extends org.bytedeco.javacpp.opencv_text.BaseOCR {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.OCRHolisticWordRecognizer>;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.OCRHolisticWordRecognizer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: string, param1: string, param2: string): org.bytedeco.javacpp.opencv_text.OCRHolisticWordRecognizer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: java.nio.FloatBuffer, param5: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: java.nio.FloatBuffer, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: native.Array<number>, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: native.Array<number>, param5: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: org.bytedeco.javacpp.FloatPointer, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: org.bytedeco.javacpp.FloatPointer, param5: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer): void;
				}
				export class OCRTesseract extends org.bytedeco.javacpp.opencv_text.BaseOCR {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.OCRTesseract>;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: org.bytedeco.javacpp.FloatPointer, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): string;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: java.nio.FloatBuffer, param5: number): void;
					public setWhiteList(param0: org.bytedeco.javacpp.BytePointer): void;
					public static create(): org.bytedeco.javacpp.opencv_text.OCRTesseract;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): string;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: native.Array<number>, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: native.Array<number>, param5: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.RectVector, param3: org.bytedeco.javacpp.opencv_text.StdStringVector, param4: org.bytedeco.javacpp.FloatPointer, param5: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): string;
					public setWhiteList(param0: string): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.opencv_core.RectVector, param4: org.bytedeco.javacpp.opencv_text.StdStringVector, param5: java.nio.FloatBuffer, param6: number): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): org.bytedeco.javacpp.BytePointer;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): org.bytedeco.javacpp.BytePointer;
					public static create(param0: string, param1: string, param2: string, param3: number, param4: number): org.bytedeco.javacpp.opencv_text.OCRTesseract;
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.BytePointer): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): string;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: number, param4: number): org.bytedeco.javacpp.opencv_text.OCRTesseract;
				}
				export class StdStringVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.StdStringVector>;
					public put(param0: native.Array<string>): org.bytedeco.javacpp.opencv_text.StdStringVector;
					public constructor(param0: string);
					public end(): org.bytedeco.javacpp.opencv_text.StdStringVector.Iterator;
					public empty(): boolean;
					public push_back(param0: string): org.bytedeco.javacpp.opencv_text.StdStringVector;
					public size(): number;
					public constructor(param0: native.Array<string>);
					public put(param0: number, param1: string): org.bytedeco.javacpp.opencv_text.StdStringVector;
					public put(param0: number, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.StdStringVector;
					public begin(): org.bytedeco.javacpp.opencv_text.StdStringVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public toString(): string;
					public push_back(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.StdStringVector;
					public constructor();
					public constructor(param0: native.Array<org.bytedeco.javacpp.BytePointer>);
					public clear(): void;
					public insert(param0: org.bytedeco.javacpp.opencv_text.StdStringVector.Iterator, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.StdStringVector.Iterator;
					public resize(param0: number): void;
					public get(): native.Array<org.bytedeco.javacpp.BytePointer>;
					public constructor(param0: number);
					public put(param0: org.bytedeco.javacpp.opencv_text.StdStringVector): org.bytedeco.javacpp.opencv_text.StdStringVector;
					public put(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.StdStringVector;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: string): org.bytedeco.javacpp.opencv_text.StdStringVector;
					public get(param0: number): org.bytedeco.javacpp.BytePointer;
					public pop_back(): org.bytedeco.javacpp.BytePointer;
					public put(param0: native.Array<org.bytedeco.javacpp.BytePointer>): org.bytedeco.javacpp.opencv_text.StdStringVector;
					public erase(param0: org.bytedeco.javacpp.opencv_text.StdStringVector.Iterator): org.bytedeco.javacpp.opencv_text.StdStringVector.Iterator;
				}
				export module StdStringVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.StdStringVector.Iterator>;
						public get(): org.bytedeco.javacpp.BytePointer;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_text.StdStringVector.Iterator;
						public equals(param0: org.bytedeco.javacpp.opencv_text.StdStringVector.Iterator): boolean;
					}
				}
				export class TextDetector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.TextDetector>;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.FloatBuffer): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.FloatBuffer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.FloatPointer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.FloatPointer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.FloatPointer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.FloatBuffer): void;
				}
				export class TextDetectorCNN extends org.bytedeco.javacpp.opencv_text.TextDetector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_text.TextDetectorCNN>;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.FloatBuffer): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public static create(param0: string, param1: string, param2: org.bytedeco.javacpp.opencv_core.SizeVector): org.bytedeco.javacpp.opencv_text.TextDetectorCNN;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.FloatBuffer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.FloatPointer): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.FloatPointer): void;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.opencv_core.SizeVector): org.bytedeco.javacpp.opencv_text.TextDetectorCNN;
					public static create(param0: string, param1: string): org.bytedeco.javacpp.opencv_text.TextDetectorCNN;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: org.bytedeco.javacpp.FloatPointer): void;
					public static create(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_text.TextDetectorCNN;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: native.Array<number>): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.RectVector, param2: java.nio.FloatBuffer): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_tracking extends org.bytedeco.javacpp.presets.opencv_tracking {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking>;
				public static FEATURES: string;
				public static CC_FEATURES: string;
				public static CC_FEATURE_PARAMS: string;
				public static CC_MAX_CAT_COUNT: string;
				public static CC_FEATURE_SIZE: string;
				public static CC_NUM_FEATURES: string;
				public static CC_ISINTEGRAL: string;
				public static CC_RECTS: string;
				public static CC_TILTED: string;
				public static CC_RECT: string;
				public static LBPF_NAME: string;
				public static HOGF_NAME: string;
				public static HFP_NAME: string;
				public static CV_HAAR_FEATURE_MAX: number;
				public static N_BINS: number;
				public static N_CELLS: number;
				public static createAugmentedUnscentedKalmanFilter(param0: org.bytedeco.javacpp.opencv_tracking.AugmentedUnscentedKalmanFilterParams): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilter;
				public static tld_getNextDatasetFrame(): org.bytedeco.javacpp.BytePointer;
				public static tld_InitDataset(param0: number, param1: string, param2: number): org.bytedeco.javacpp.opencv_core.Rect2d;
				public static tld_InitDataset(param0: number, param1: org.bytedeco.javacpp.BytePointer, param2: number): org.bytedeco.javacpp.opencv_core.Rect2d;
				public static createUnscentedKalmanFilter(param0: org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilter;
				public static tld_InitDataset(param0: number): org.bytedeco.javacpp.opencv_core.Rect2d;
				public constructor();
			}
			export module opencv_tracking {
				export class AugmentedUnscentedKalmanFilterParams extends org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.AugmentedUnscentedKalmanFilterParams>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.AugmentedUnscentedKalmanFilterParams;
					public constructor();
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_tracking.UkfSystemModel, param6: number);
					public init(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_tracking.UkfSystemModel): void;
					public constructor(param0: number);
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_tracking.UkfSystemModel);
					public init(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_tracking.UkfSystemModel, param6: number): void;
				}
				export class BaseClassifier {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.BaseClassifier>;
					public constructor(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_tracking.WeakClassifierHaarFeature);
					public selectBestClassifier(param0: native.Array<boolean>, param1: number, param2: native.Array<number>): number;
					public getIdxOfNewWeakClassifier(): number;
					public getErrors(param0: native.Array<number>): void;
					public trainClassifier(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: org.bytedeco.javacpp.BoolPointer): void;
					public getReferenceWeakClassifier(): org.bytedeco.javacpp.PointerPointer<any>;
					public computeReplaceWeakestClassifier(param0: native.Array<number>): number;
					public selectBestClassifier(param0: native.Array<boolean>, param1: number, param2: java.nio.FloatBuffer): number;
					public computeReplaceWeakestClassifier(param0: java.nio.FloatBuffer): number;
					public getError(param0: number): number;
					public getSelectedClassifier(): number;
					public constructor(param0: number, param1: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public selectBestClassifier(param0: org.bytedeco.javacpp.BoolPointer, param1: number, param2: java.nio.FloatBuffer): number;
					public selectBestClassifier(param0: org.bytedeco.javacpp.BoolPointer, param1: number, param2: native.Array<number>): number;
					public computeReplaceWeakestClassifier(param0: org.bytedeco.javacpp.FloatPointer): number;
					public trainClassifier(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: native.Array<boolean>): void;
					public selectBestClassifier(param0: org.bytedeco.javacpp.BoolPointer, param1: number, param2: org.bytedeco.javacpp.FloatPointer): number;
					public selectBestClassifier(param0: native.Array<boolean>, param1: number, param2: org.bytedeco.javacpp.FloatPointer): number;
					public getErrors(param0: java.nio.FloatBuffer): void;
					public constructor(param0: number, param1: number, param2: org.bytedeco.javacpp.PointerPointer<any>);
					public eval(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public replaceWeakClassifier(param0: number): void;
					public replaceClassifierStatistic(param0: number, param1: number): void;
					public getErrors(param0: org.bytedeco.javacpp.FloatPointer): void;
				}
				export class ClassifierThreshold {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.ClassifierThreshold>;
					public getDistribution(param0: number): org.bytedeco.javacpp.Pointer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public eval(param0: number): number;
					public update(param0: number, param1: number): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_tracking.EstimatedGaussDistribution, param1: org.bytedeco.javacpp.opencv_tracking.EstimatedGaussDistribution);
				}
				export class ClfMilBoost {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.ClfMilBoost>;
					public classify(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.FloatPointer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public update(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfMilBoost;
					public classify(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean): org.bytedeco.javacpp.FloatPointer;
					public constructor();
					public init(): void;
					public sigmoid(param0: number): number;
					public constructor(param0: number);
					public init(param0: org.bytedeco.javacpp.opencv_tracking.ClfMilBoost.Params): void;
				}
				export module ClfMilBoost {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.ClfMilBoost.Params>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfMilBoost.Params;
						public constructor(param0: number);
						public _lRate(): number;
						public _numFeat(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfMilBoost.Params;
						public _numFeat(): number;
						public _numSel(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfMilBoost.Params;
						public _numSel(): number;
						public _lRate(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfMilBoost.Params;
					}
				}
				export class ClfOnlineStump {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump>;
					public classify(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): boolean;
					public _sig0(): number;
					public _mu0(): number;
					public _mu1(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public _log_n0(): number;
					public classifyF(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): number;
					public _q(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public _sig1(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public constructor();
					public _s(): number;
					public _e0(): number;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public _e0(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public update(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public classifySetF(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.FloatPointer;
					public _mu0(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public _e1(): number;
					public _lRate(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public init(): void;
					public _log_n1(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public _q(): number;
					public _log_n1(): number;
					public _e1(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public _sig1(): number;
					public _mu1(): number;
					public _sig0(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public _s(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public _log_n0(param0: number): org.bytedeco.javacpp.opencv_tracking.ClfOnlineStump;
					public _lRate(): number;
				}
				export class ConfidenceMap {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.ConfidenceMap>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public first(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerTargetState;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerTargetState>, param1: native.Array<number>);
					public empty(): boolean;
					public put(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMap): org.bytedeco.javacpp.opencv_tracking.ConfidenceMap;
					public size(): number;
					public second(param0: number): number;
					public second(param0: number, param1: number): org.bytedeco.javacpp.opencv_tracking.ConfidenceMap;
					public constructor();
					public clear(): void;
					public first(param0: number, param1: org.bytedeco.javacpp.opencv_tracking.TrackerTargetState): org.bytedeco.javacpp.opencv_tracking.ConfidenceMap;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerTargetState>, param1: native.Array<number>): org.bytedeco.javacpp.opencv_tracking.ConfidenceMap;
					public resize(param0: number): void;
					public constructor(param0: number);
				}
				export class ConfidenceMapVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector>;
					public put(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMap): org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMap);
					public push_back(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMap): org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector;
					public empty(): boolean;
					public begin(): org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector.Iterator;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_tracking.ConfidenceMap>): org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector;
					public size(): number;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_tracking.ConfidenceMap>);
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_tracking.ConfidenceMap): org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector;
					public get(): native.Array<org.bytedeco.javacpp.opencv_tracking.ConfidenceMap>;
					public get(param0: number): org.bytedeco.javacpp.opencv_tracking.ConfidenceMap;
					public toString(): string;
					public insert(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector.Iterator, param1: org.bytedeco.javacpp.opencv_tracking.ConfidenceMap): org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector): org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector;
					public constructor();
					public erase(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector.Iterator): org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector.Iterator;
					public clear(): void;
					public pop_back(): org.bytedeco.javacpp.opencv_tracking.ConfidenceMap;
					public resize(param0: number): void;
					public constructor(param0: number);
					public end(): org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector.Iterator;
				}
				export module ConfidenceMapVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector.Iterator>;
						public constructor();
						public increment(): org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector.Iterator;
						public get(): org.bytedeco.javacpp.opencv_tracking.ConfidenceMap;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public equals(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector.Iterator): boolean;
					}
				}
				export class CvFeatureEvaluator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.CvFeatureEvaluator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getNumFeatures(): number;
					public getMaxCatCount(): number;
					public getFeatureSize(): number;
					public init(param0: org.bytedeco.javacpp.opencv_tracking.CvFeatureParams, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public setImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): void;
					public getCls(param0: number): number;
					public getCls(): org.bytedeco.javacpp.opencv_core.Mat;
					public static create(param0: number): org.bytedeco.javacpp.opencv_tracking.CvFeatureEvaluator;
					public writeFeatures(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public apply(param0: number, param1: number): number;
				}
				export class CvFeatureParams extends org.bytedeco.javacpp.opencv_tracking.CvParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.CvFeatureParams>;
					public static HAAR: number;
					public static LBP: number;
					public static HOG: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): boolean;
					public maxCatCount(): number;
					public static create(param0: number): org.bytedeco.javacpp.opencv_tracking.CvFeatureParams;
					public constructor();
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public featSize(): number;
					public maxCatCount(param0: number): org.bytedeco.javacpp.opencv_tracking.CvFeatureParams;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.CvFeatureParams;
					public init(param0: org.bytedeco.javacpp.opencv_tracking.CvFeatureParams): void;
					public featSize(param0: number): org.bytedeco.javacpp.opencv_tracking.CvFeatureParams;
					public numFeatures(): number;
					public constructor(param0: number);
					public numFeatures(param0: number): org.bytedeco.javacpp.opencv_tracking.CvFeatureParams;
				}
				export class CvHOGEvaluator extends org.bytedeco.javacpp.opencv_tracking.CvFeatureEvaluator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.CvHOGEvaluator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public init(param0: org.bytedeco.javacpp.opencv_tracking.CvFeatureParams, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public setImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.CvHOGEvaluator;
					public apply(param0: number, param1: number): number;
					public writeFeatures(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class CvHOGFeatureParams extends org.bytedeco.javacpp.opencv_tracking.CvFeatureParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.CvHOGFeatureParams>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.CvFeatureParams;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.CvHOGFeatureParams;
					public constructor(param0: number);
				}
				export class CvHaarEvaluator extends org.bytedeco.javacpp.opencv_tracking.CvFeatureEvaluator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.CvHaarEvaluator>;
					public generateFeatures(): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public writeFeature(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public setWinSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
					public setImage(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getFeatures(param0: number): org.bytedeco.javacpp.opencv_tracking.CvHaarEvaluator.FeatureHaar;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.CvHaarEvaluator;
					public apply(param0: number, param1: number): number;
					public getFeatures(): org.bytedeco.javacpp.opencv_tracking.CvHaarEvaluator.FeatureHaar;
					public constructor();
					public init(param0: org.bytedeco.javacpp.opencv_tracking.CvFeatureParams, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public setImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): void;
					public generateFeatures(param0: number): void;
					public writeFeatures(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setWinSize(): org.bytedeco.javacpp.opencv_core.Size;
					public constructor(param0: number);
				}
				export module CvHaarEvaluator {
					export class FeatureHaar {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.CvHaarEvaluator.FeatureHaar>;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public getAreas(): org.bytedeco.javacpp.opencv_core.RectVector;
						public getInitMean(): number;
						public constructor(param0: org.bytedeco.javacpp.opencv_core.Size);
						public eval(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: java.nio.FloatBuffer): boolean;
						public getNumAreas(): number;
						public getInitSigma(): number;
						public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
						public eval(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.FloatPointer): boolean;
						public eval(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: native.Array<number>): boolean;
						public getWeights(): org.bytedeco.javacpp.FloatPointer;
					}
				}
				export class CvHaarFeatureParams extends org.bytedeco.javacpp.opencv_tracking.CvFeatureParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.CvHaarFeatureParams>;
					public isIntegral(): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.CvHaarFeatureParams;
					public scanAttr(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): boolean;
					public isIntegral(param0: boolean): org.bytedeco.javacpp.opencv_tracking.CvHaarFeatureParams;
					public printAttrs(): void;
					public scanAttr(param0: string, param1: string): boolean;
					public constructor();
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.CvFeatureParams;
					public init(param0: org.bytedeco.javacpp.opencv_tracking.CvFeatureParams): void;
					public printDefaults(): void;
					public constructor(param0: number);
				}
				export class CvLBPEvaluator extends org.bytedeco.javacpp.opencv_tracking.CvFeatureEvaluator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.CvLBPEvaluator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public init(param0: org.bytedeco.javacpp.opencv_tracking.CvFeatureParams, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size): void;
					public setImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.CvLBPEvaluator;
					public apply(param0: number, param1: number): number;
					public writeFeatures(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class CvLBPFeatureParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.CvLBPFeatureParams>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.CvLBPFeatureParams;
					public constructor();
					public constructor(param0: number);
				}
				export class CvParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.CvParams>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): boolean;
					public printAttrs(): void;
					public scanAttr(param0: string, param1: string): boolean;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public name(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_tracking.CvParams;
					public scanAttr(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer): boolean;
					public printDefaults(): void;
					public name(): org.bytedeco.javacpp.BytePointer;
				}
				export class Detector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.Detector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getNumDetections(): number;
					public getConfidence(param0: number): number;
					public getConfidences(): org.bytedeco.javacpp.FloatPointer;
					public getIdxDetections(): org.bytedeco.javacpp.IntPointer;
					public getConfImageDisplay(): org.bytedeco.javacpp.opencv_core.Mat;
					public classifySmooth(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: number): void;
					public constructor(param0: org.bytedeco.javacpp.opencv_tracking.StrongClassifierDirectSelection);
					public getPatchIdxOfBestDetection(): number;
					public getConfidenceOfDetection(param0: number): number;
					public getPatchIdxOfDetection(param0: number): number;
					public classifySmooth(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public getConfidenceOfBestDetection(): number;
				}
				export class EstimatedGaussDistribution {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.EstimatedGaussDistribution>;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public update(param0: number): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.EstimatedGaussDistribution;
					public constructor();
					public getSigma(): number;
					public setValues(param0: number, param1: number): void;
					public getMean(): number;
					public constructor(param0: number);
				}
				export class MultiTracker extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.MultiTracker>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public update(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Rect2dVector): boolean;
					public static create(): org.bytedeco.javacpp.opencv_tracking.MultiTracker;
					public add(param0: org.bytedeco.javacpp.opencv_tracking.Tracker, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Rect2d): boolean;
					public update(param0: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public add(param0: org.bytedeco.javacpp.opencv_tracking.TrackerVector, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Rect2dVector): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public getObjects(): org.bytedeco.javacpp.opencv_core.Rect2dVector;
					public add(param0: org.bytedeco.javacpp.opencv_tracking.Tracker, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Rect2d): boolean;
					public add(param0: org.bytedeco.javacpp.opencv_tracking.TrackerVector, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Rect2dVector): boolean;
					public update(param0: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public update(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect2dVector): boolean;
					public constructor();
					public update(param0: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public add(param0: org.bytedeco.javacpp.opencv_tracking.Tracker, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Rect2d): boolean;
					public add(param0: org.bytedeco.javacpp.opencv_tracking.TrackerVector, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Rect2dVector): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.MultiTracker;
					public update(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Rect2dVector): boolean;
					public constructor(param0: number);
				}
				export class MultiTrackerTLD extends org.bytedeco.javacpp.opencv_tracking.MultiTracker_Alt {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.MultiTrackerTLD>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.MultiTrackerTLD;
					public update_opt(param0: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public update_opt(param0: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public constructor();
					public update_opt(param0: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.MultiTracker_Alt;
					public constructor(param0: number);
				}
				export class MultiTracker_Alt {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.MultiTracker_Alt>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public targetNum(): number;
					public trackers(): org.bytedeco.javacpp.opencv_tracking.TrackerVector;
					public trackers(param0: org.bytedeco.javacpp.opencv_tracking.TrackerVector): org.bytedeco.javacpp.opencv_tracking.MultiTracker_Alt;
					public colors(param0: org.bytedeco.javacpp.opencv_core.ScalarVector): org.bytedeco.javacpp.opencv_tracking.MultiTracker_Alt;
					public update(param0: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public targetNum(param0: number): org.bytedeco.javacpp.opencv_tracking.MultiTracker_Alt;
					public addTarget(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Rect2d, param2: org.bytedeco.javacpp.opencv_tracking.Tracker): boolean;
					public boundingBoxes(): org.bytedeco.javacpp.opencv_core.Rect2dVector;
					public addTarget(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect2d, param2: org.bytedeco.javacpp.opencv_tracking.Tracker): boolean;
					public update(param0: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public boundingBoxes(param0: org.bytedeco.javacpp.opencv_core.Rect2dVector): org.bytedeco.javacpp.opencv_tracking.MultiTracker_Alt;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.MultiTracker_Alt;
					public addTarget(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Rect2d, param2: org.bytedeco.javacpp.opencv_tracking.Tracker): boolean;
					public update(param0: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public colors(): org.bytedeco.javacpp.opencv_core.ScalarVector;
					public constructor(param0: number);
				}
				export class StringTrackerFeaturePairVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.StringTrackerFeaturePairVector>;
					public second(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerFeature;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public second(param0: number, param1: org.bytedeco.javacpp.opencv_tracking.TrackerFeature): org.bytedeco.javacpp.opencv_tracking.StringTrackerFeaturePairVector;
					public empty(): boolean;
					public size(): number;
					public put(param0: org.bytedeco.javacpp.opencv_tracking.StringTrackerFeaturePairVector): org.bytedeco.javacpp.opencv_tracking.StringTrackerFeaturePairVector;
					public first(param0: number, param1: string): org.bytedeco.javacpp.opencv_tracking.StringTrackerFeaturePairVector;
					public constructor();
					public put(param0: native.Array<org.bytedeco.javacpp.BytePointer>, param1: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerFeature>): org.bytedeco.javacpp.opencv_tracking.StringTrackerFeaturePairVector;
					public clear(): void;
					public constructor(param0: native.Array<org.bytedeco.javacpp.BytePointer>, param1: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerFeature>);
					public resize(param0: number): void;
					public first(param0: number): org.bytedeco.javacpp.BytePointer;
					public put(param0: native.Array<string>, param1: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerFeature>): org.bytedeco.javacpp.opencv_tracking.StringTrackerFeaturePairVector;
					public constructor(param0: number);
					public constructor(param0: native.Array<string>, param1: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerFeature>);
					public first(param0: number, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_tracking.StringTrackerFeaturePairVector;
				}
				export class StringTrackerSamplerAlgorithmPairVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.StringTrackerSamplerAlgorithmPairVector>;
					public constructor(param0: native.Array<org.bytedeco.javacpp.BytePointer>, param1: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm>);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public empty(): boolean;
					public first(param0: number, param1: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_tracking.StringTrackerSamplerAlgorithmPairVector;
					public size(): number;
					public constructor(param0: native.Array<string>, param1: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm>);
					public second(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm;
					public put(param0: native.Array<string>, param1: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm>): org.bytedeco.javacpp.opencv_tracking.StringTrackerSamplerAlgorithmPairVector;
					public constructor();
					public put(param0: org.bytedeco.javacpp.opencv_tracking.StringTrackerSamplerAlgorithmPairVector): org.bytedeco.javacpp.opencv_tracking.StringTrackerSamplerAlgorithmPairVector;
					public first(param0: number, param1: string): org.bytedeco.javacpp.opencv_tracking.StringTrackerSamplerAlgorithmPairVector;
					public clear(): void;
					public put(param0: native.Array<org.bytedeco.javacpp.BytePointer>, param1: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm>): org.bytedeco.javacpp.opencv_tracking.StringTrackerSamplerAlgorithmPairVector;
					public resize(param0: number): void;
					public first(param0: number): org.bytedeco.javacpp.BytePointer;
					public second(param0: number, param1: org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm): org.bytedeco.javacpp.opencv_tracking.StringTrackerSamplerAlgorithmPairVector;
					public constructor(param0: number);
				}
				export class StrongClassifierDirectSelection {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.StrongClassifierDirectSelection>;
					public getSwappedClassifier(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getSelectedWeakClassifier(): org.bytedeco.javacpp.IntPointer;
					public getPatchSize(): org.bytedeco.javacpp.opencv_core.Size;
					public constructor(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Rect);
					public update(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): boolean;
					public classifySmooth(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: java.nio.IntBuffer): number;
					public classifySmooth(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: native.Array<number>): number;
					public getReplacedClassifier(): number;
					public initBaseClassifier(): void;
					public eval(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
					public replaceWeakClassifier(param0: number): void;
					public update(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): boolean;
					public classifySmooth(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.IntPointer): number;
					public getROI(): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: org.bytedeco.javacpp.opencv_core.Rect, param4: boolean, param5: number);
					public getNumBaseClassifier(): number;
					public getUseFeatureExchange(): boolean;
				}
				export class Tracker extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.Tracker>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: org.bytedeco.javacpp.BytePointer): void;
					public update(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Rect2d): boolean;
					public init(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect2d): boolean;
					public constructor();
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage, param1: string): void;
					public init(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Rect2d): boolean;
					public update(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect2d): boolean;
					public init(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Rect2d): boolean;
					public update(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Rect2d): boolean;
					public constructor(param0: number);
					public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
				}
				export class TrackerBoosting extends org.bytedeco.javacpp.opencv_tracking.Tracker {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerBoosting>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_tracking.TrackerBoosting.Params): org.bytedeco.javacpp.opencv_tracking.TrackerBoosting;
					public static create(): org.bytedeco.javacpp.opencv_tracking.TrackerBoosting;
					public constructor(param0: number);
				}
				export module TrackerBoosting {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerBoosting.Params>;
						public iterationInit(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerBoosting.Params;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public samplerOverlap(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerBoosting.Params;
						public featureSetNumFeatures(): number;
						public samplerSearchFactor(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerBoosting.Params;
						public numClassifiers(): number;
						public featureSetNumFeatures(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerBoosting.Params;
						public numClassifiers(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerBoosting.Params;
						public samplerOverlap(): number;
						public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
						public samplerSearchFactor(): number;
						public constructor(param0: number);
						public iterationInit(): number;
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerBoosting.Params;
						public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					}
				}
				export class TrackerCSRT extends org.bytedeco.javacpp.opencv_tracking.Tracker {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerCSRT>;
					public setInitialMask(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setInitialMask(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT;
					public setInitialMask(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: number);
					public static create(param0: org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT;
				}
				export module TrackerCSRT {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params>;
						public admm_iterations(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public histogram_bins(): number;
						public use_rgb(param0: boolean): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public scale_model_max_area(): number;
						public scale_step(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public scale_sigma_factor(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
						public hog_orientations(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public use_rgb(): boolean;
						public gsl_sigma(): number;
						public histogram_lr(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public gsl_sigma(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public scale_lr(): number;
						public use_segmentation(): boolean;
						public padding(): number;
						public template_size(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public weights_lr(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public constructor();
						public padding(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public cheb_attenuation(): number;
						public hog_clip(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public num_hog_channels_used(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public use_gray(param0: boolean): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public window_function(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public background_ratio(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public background_ratio(): number;
						public use_color_names(param0: boolean): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public hog_clip(): number;
						public kaiser_alpha(): number;
						public number_of_scales(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public use_hog(): boolean;
						public use_hog(param0: boolean): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public admm_iterations(): number;
						public number_of_scales(): number;
						public window_function(): org.bytedeco.javacpp.BytePointer;
						public use_channel_weights(): boolean;
						public scale_model_max_area(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public histogram_lr(): number;
						public psr_threshold(): number;
						public psr_threshold(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public histogram_bins(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public use_gray(): boolean;
						public num_hog_channels_used(): number;
						public cheb_attenuation(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public scale_lr(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public hog_orientations(): number;
						public scale_sigma_factor(): number;
						public template_size(): number;
						public scale_step(): number;
						public filter_lr(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public constructor(param0: number);
						public use_color_names(): boolean;
						public weights_lr(): number;
						public use_segmentation(param0: boolean): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
						public use_channel_weights(param0: boolean): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public kaiser_alpha(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerCSRT.Params;
						public filter_lr(): number;
					}
				}
				export class TrackerFeature {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerFeature>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: string): org.bytedeco.javacpp.opencv_tracking.TrackerFeature;
					public getClassName(): org.bytedeco.javacpp.BytePointer;
					public compute(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public selection(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
					public static create(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_tracking.TrackerFeature;
				}
				export class TrackerFeatureFeature2d extends org.bytedeco.javacpp.opencv_tracking.TrackerFeature {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerFeatureFeature2d>;
					public constructor(param0: string, param1: string);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.BytePointer);
					public selection(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
				}
				export class TrackerFeatureHAAR extends org.bytedeco.javacpp.opencv_tracking.TrackerFeature {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerFeatureHAAR>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public extractSelected(param0: java.nio.IntBuffer, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public extractSelected(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public constructor();
					public getFeatureAt(param0: number): org.bytedeco.javacpp.opencv_tracking.CvHaarEvaluator.FeatureHaar;
					public swapFeature(param0: number, param1: number): boolean;
					public constructor(param0: org.bytedeco.javacpp.opencv_tracking.TrackerFeatureHAAR.Params);
					public extractSelected(param0: org.bytedeco.javacpp.IntPointer, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public swapFeature(param0: number, param1: org.bytedeco.javacpp.opencv_tracking.CvHaarEvaluator.FeatureHaar): boolean;
					public selection(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerFeatureHAAR;
				}
				export module TrackerFeatureHAAR {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerFeatureHAAR.Params>;
						public constructor();
						public rectSize(): org.bytedeco.javacpp.opencv_core.Size;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerFeatureHAAR.Params;
						public numFeatures(): number;
						public constructor(param0: number);
						public rectSize(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_tracking.TrackerFeatureHAAR.Params;
						public isIntegral(param0: boolean): org.bytedeco.javacpp.opencv_tracking.TrackerFeatureHAAR.Params;
						public isIntegral(): boolean;
						public numFeatures(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerFeatureHAAR.Params;
					}
				}
				export class TrackerFeatureHOG extends org.bytedeco.javacpp.opencv_tracking.TrackerFeature {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerFeatureHOG>;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerFeatureHOG;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public selection(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
					public constructor(param0: number);
				}
				export class TrackerFeatureLBP extends org.bytedeco.javacpp.opencv_tracking.TrackerFeature {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerFeatureLBP>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerFeatureLBP;
					public constructor();
					public selection(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
					public constructor(param0: number);
				}
				export class TrackerFeatureSet {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerFeatureSet>;
					public addTrackerFeature(param0: string): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getResponses(): org.bytedeco.javacpp.opencv_core.MatVector;
					public getTrackerFeature(): org.bytedeco.javacpp.opencv_tracking.StringTrackerFeaturePairVector;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerFeatureSet;
					public addTrackerFeature(param0: org.bytedeco.javacpp.opencv_tracking.TrackerFeature): boolean;
					public selection(): void;
					public removeOutliers(): void;
					public constructor(param0: number);
					public addTrackerFeature(param0: org.bytedeco.javacpp.BytePointer): boolean;
					public extraction(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
				}
				export class TrackerGOTURN extends org.bytedeco.javacpp.opencv_tracking.Tracker {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerGOTURN>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_tracking.TrackerGOTURN;
					public constructor();
					public static create(param0: org.bytedeco.javacpp.opencv_tracking.TrackerGOTURN.Params): org.bytedeco.javacpp.opencv_tracking.TrackerGOTURN;
					public constructor(param0: number);
				}
				export module TrackerGOTURN {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerGOTURN.Params>;
						public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerGOTURN.Params;
						public constructor(param0: number);
						public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					}
				}
				export class TrackerKCF extends org.bytedeco.javacpp.opencv_tracking.Tracker {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerKCF>;
					public static GRAY: number;
					public static CN: number;
					public static CUSTOM: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public setFeatureExtractor(param0: org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Arg0_Mat_Rect_Mat, param1: boolean): void;
					public static create(param0: org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params): org.bytedeco.javacpp.opencv_tracking.TrackerKCF;
					public static create(): org.bytedeco.javacpp.opencv_tracking.TrackerKCF;
					public setFeatureExtractor(param0: org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Arg0_Mat_Rect_Mat): void;
					public constructor(param0: number);
				}
				export module TrackerKCF {
					export class Arg0_Mat_Rect_Mat {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Arg0_Mat_Rect_Mat>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public call(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					}
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params>;
						public wrap_kernel(): boolean;
						public detect_thresh(): number;
						public resize(param0: boolean): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public compress_feature(): boolean;
						public interp_factor(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public split_coeff(): boolean;
						public compressed_size(): number;
						public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
						public output_sigma_factor(): number;
						public compressed_size(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public pca_learning_rate(): number;
						public pca_learning_rate(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public compress_feature(param0: boolean): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public desc_pca(): number;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public split_coeff(param0: boolean): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public max_patch_size(): number;
						public wrap_kernel(param0: boolean): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public sigma(): number;
						public resize(): boolean;
						public desc_pca(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public lambda(): number;
						public interp_factor(): number;
						public sigma(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public max_patch_size(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public lambda(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public detect_thresh(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public desc_npca(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
						public constructor(param0: number);
						public desc_npca(): number;
						public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
						public output_sigma_factor(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerKCF.Params;
					}
				}
				export class TrackerMIL extends org.bytedeco.javacpp.opencv_tracking.Tracker {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerMIL>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.opencv_tracking.TrackerMIL.Params): org.bytedeco.javacpp.opencv_tracking.TrackerMIL;
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_tracking.TrackerMIL;
					public constructor(param0: number);
				}
				export module TrackerMIL {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerMIL.Params>;
						public constructor();
						public samplerTrackMaxPosNum(): number;
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public featureSetNumFeatures(): number;
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMIL.Params;
						public samplerInitInRadius(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMIL.Params;
						public featureSetNumFeatures(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMIL.Params;
						public samplerSearchWinSize(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMIL.Params;
						public samplerTrackMaxNegNum(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMIL.Params;
						public samplerSearchWinSize(): number;
						public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
						public samplerInitMaxNegNum(): number;
						public samplerInitMaxNegNum(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMIL.Params;
						public samplerTrackInRadius(): number;
						public constructor(param0: number);
						public samplerTrackMaxNegNum(): number;
						public samplerTrackMaxPosNum(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMIL.Params;
						public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
						public samplerTrackInRadius(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMIL.Params;
						public samplerInitInRadius(): number;
					}
				}
				export class TrackerMOSSE extends org.bytedeco.javacpp.opencv_tracking.Tracker {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerMOSSE>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_tracking.TrackerMOSSE;
					public constructor(param0: number);
				}
				export class TrackerMedianFlow extends org.bytedeco.javacpp.opencv_tracking.Tracker {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow>;
					public static create(param0: org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow.Params): org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow;
					public constructor();
					public constructor(param0: number);
				}
				export module TrackerMedianFlow {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow.Params>;
						public maxLevel(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow.Params;
						public maxLevel(): number;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public pointsInGrid(): number;
						public termCriteria(param0: org.bytedeco.javacpp.opencv_core.TermCriteria): org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow.Params;
						public pointsInGrid(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow.Params;
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow.Params;
						public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
						public winSize(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow.Params;
						public termCriteria(): org.bytedeco.javacpp.opencv_core.TermCriteria;
						public maxMedianLengthOfDisplacementDifference(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow.Params;
						public winSizeNCC(param0: org.bytedeco.javacpp.opencv_core.Size): org.bytedeco.javacpp.opencv_tracking.TrackerMedianFlow.Params;
						public constructor(param0: number);
						public winSizeNCC(): org.bytedeco.javacpp.opencv_core.Size;
						public maxMedianLengthOfDisplacementDifference(): number;
						public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
						public winSize(): org.bytedeco.javacpp.opencv_core.Size;
					}
				}
				export class TrackerModel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerModel>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setLastTargetState(param0: org.bytedeco.javacpp.opencv_tracking.TrackerTargetState): void;
					public getConfidenceMaps(): org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector;
					public runStateEstimator(): boolean;
					public modelEstimation(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public modelUpdate(): void;
					public setTrackerStateEstimator(param0: org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimator): boolean;
					public getLastConfidenceMap(): org.bytedeco.javacpp.opencv_tracking.ConfidenceMap;
					public getTrackerStateEstimator(): org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimator;
					public getLastTargetState(): org.bytedeco.javacpp.opencv_tracking.TrackerTargetState;
				}
				export class TrackerSampler {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerSampler>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public addTrackerSamplerAlgorithm(param0: string): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSampler;
					public constructor();
					public addTrackerSamplerAlgorithm(param0: org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm): boolean;
					public sampling(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect): void;
					public getSamples(): org.bytedeco.javacpp.opencv_core.MatVector;
					public constructor(param0: number);
					public getSamplers(): org.bytedeco.javacpp.opencv_tracking.StringTrackerSamplerAlgorithmPairVector;
					public addTrackerSamplerAlgorithm(param0: org.bytedeco.javacpp.BytePointer): boolean;
				}
				export class TrackerSamplerAlgorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm;
					public sampling(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.MatVector): boolean;
					public getClassName(): org.bytedeco.javacpp.BytePointer;
					public static create(param0: string): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm;
				}
				export class TrackerSamplerCS extends org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCS>;
					public static MODE_POSITIVE: number;
					public static MODE_NEGATIVE: number;
					public static MODE_CLASSIFY: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCS.Params);
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCS;
					public getROI(): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: number);
					public samplingImpl(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.MatVector): boolean;
					public setMode(param0: number): void;
				}
				export module TrackerSamplerCS {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCS.Params>;
						public overlap(): number;
						public overlap(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCS.Params;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public constructor(param0: number);
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCS.Params;
						public searchFactor(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCS.Params;
						public searchFactor(): number;
					}
				}
				export class TrackerSamplerCSC extends org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCSC>;
					public static MODE_INIT_POS: number;
					public static MODE_INIT_NEG: number;
					public static MODE_TRACK_POS: number;
					public static MODE_TRACK_NEG: number;
					public static MODE_DETECT: number;
					public constructor(param0: org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCSC.Params);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCSC;
					public constructor(param0: number);
					public setMode(param0: number): void;
				}
				export module TrackerSamplerCSC {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCSC.Params>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public initInRad(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCSC.Params;
						public trackMaxPosNum(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCSC.Params;
						public trackMaxNegNum(): number;
						public searchWinSize(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCSC.Params;
						public initMaxNegNum(): number;
						public trackMaxNegNum(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCSC.Params;
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCSC.Params;
						public initMaxNegNum(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCSC.Params;
						public initInRad(): number;
						public constructor(param0: number);
						public trackInPosRad(): number;
						public trackMaxPosNum(): number;
						public trackInPosRad(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerCSC.Params;
						public searchWinSize(): number;
					}
				}
				export class TrackerSamplerPF extends org.bytedeco.javacpp.opencv_tracking.TrackerSamplerAlgorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerSamplerPF>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat);
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_tracking.TrackerSamplerPF.Params);
				}
				export module TrackerSamplerPF {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerSamplerPF.Params>;
						public particlesNum(): number;
						public alpha(): number;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public particlesNum(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerPF.Params;
						public constructor(param0: number);
						public iterationNum(): number;
						public iterationNum(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerPF.Params;
						public alpha(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerPF.Params;
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerSamplerPF.Params;
					}
				}
				export class TrackerStateEstimator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: string): org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimator;
					public estimate(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector): org.bytedeco.javacpp.opencv_tracking.TrackerTargetState;
					public getClassName(): org.bytedeco.javacpp.BytePointer;
					public update(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMapVector): void;
					public static create(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimator;
				}
				export class TrackerStateEstimatorAdaBoosting extends org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimatorAdaBoosting>;
					public computeSelectedWeakClassifier(): org.bytedeco.javacpp.IntPointer;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getSampleROI(): org.bytedeco.javacpp.opencv_core.Rect;
					public constructor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: org.bytedeco.javacpp.opencv_core.Rect);
					public computeSwappedClassifier(): org.bytedeco.javacpp.IntPointer;
					public setSampleROI(param0: org.bytedeco.javacpp.opencv_core.Rect): void;
					public setCurrentConfidenceMap(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMap): void;
					public computeReplacedClassifier(): org.bytedeco.javacpp.IntPointer;
				}
				export module TrackerStateEstimatorAdaBoosting {
					export class TrackerAdaBoostingTargetState extends org.bytedeco.javacpp.opencv_tracking.TrackerTargetState {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimatorAdaBoosting.TrackerAdaBoostingTargetState>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public setTargetFg(param0: boolean): void;
						public constructor(param0: number);
						public getTargetResponses(): org.bytedeco.javacpp.opencv_core.Mat;
						public isTargetFg(): boolean;
						public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: number, param2: number, param3: boolean, param4: org.bytedeco.javacpp.opencv_core.Mat);
						public setTargetResponses(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					}
				}
				export class TrackerStateEstimatorMILBoosting extends org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimatorMILBoosting>;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimatorMILBoosting;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: number);
					public setCurrentConfidenceMap(param0: org.bytedeco.javacpp.opencv_tracking.ConfidenceMap): void;
				}
				export module TrackerStateEstimatorMILBoosting {
					export class TrackerMILTargetState extends org.bytedeco.javacpp.opencv_tracking.TrackerTargetState {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimatorMILBoosting.TrackerMILTargetState>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public setTargetFg(param0: boolean): void;
						public constructor(param0: number);
						public setFeatures(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
						public isTargetFg(): boolean;
						public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: number, param2: number, param3: boolean, param4: org.bytedeco.javacpp.opencv_core.Mat);
						public getFeatures(): org.bytedeco.javacpp.opencv_core.Mat;
					}
				}
				export class TrackerStateEstimatorSVM extends org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimatorSVM>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerStateEstimatorSVM;
					public constructor();
					public constructor(param0: number);
				}
				export class TrackerTLD extends org.bytedeco.javacpp.opencv_tracking.Tracker {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerTLD>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_tracking.TrackerTLD;
					public static create(param0: org.bytedeco.javacpp.opencv_tracking.TrackerTLD.Params): org.bytedeco.javacpp.opencv_tracking.TrackerTLD;
					public constructor(param0: number);
				}
				export module TrackerTLD {
					export class Params {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerTLD.Params>;
						public read(param0: org.bytedeco.javacpp.opencv_core.FileNode): void;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public constructor(param0: number);
						public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerTLD.Params;
						public write(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
					}
				}
				export class TrackerTargetState {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerTargetState>;
					public setTargetHeight(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setTargetPosition(param0: org.bytedeco.javacpp.opencv_core.Point2f): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerTargetState;
					public constructor();
					public getTargetWidth(): number;
					public getTargetPosition(): org.bytedeco.javacpp.opencv_core.Point2f;
					public getTargetHeight(): number;
					public constructor(param0: number);
					public setTargetWidth(param0: number): void;
				}
				export class TrackerVector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerVector>;
					public end(): org.bytedeco.javacpp.opencv_tracking.TrackerVector.Iterator;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public put(param0: org.bytedeco.javacpp.opencv_tracking.TrackerVector): org.bytedeco.javacpp.opencv_tracking.TrackerVector;
					public begin(): org.bytedeco.javacpp.opencv_tracking.TrackerVector.Iterator;
					public empty(): boolean;
					public get(param0: number): org.bytedeco.javacpp.opencv_tracking.Tracker;
					public put(param0: org.bytedeco.javacpp.opencv_tracking.Tracker): org.bytedeco.javacpp.opencv_tracking.TrackerVector;
					public size(): number;
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_tracking.Tracker>);
					public erase(param0: org.bytedeco.javacpp.opencv_tracking.TrackerVector.Iterator): org.bytedeco.javacpp.opencv_tracking.TrackerVector.Iterator;
					public get(): native.Array<org.bytedeco.javacpp.opencv_tracking.Tracker>;
					public push_back(param0: org.bytedeco.javacpp.opencv_tracking.Tracker): org.bytedeco.javacpp.opencv_tracking.TrackerVector;
					public insert(param0: org.bytedeco.javacpp.opencv_tracking.TrackerVector.Iterator, param1: org.bytedeco.javacpp.opencv_tracking.Tracker): org.bytedeco.javacpp.opencv_tracking.TrackerVector.Iterator;
					public toString(): string;
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_tracking.Tracker): org.bytedeco.javacpp.opencv_tracking.TrackerVector;
					public constructor();
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_tracking.Tracker>): org.bytedeco.javacpp.opencv_tracking.TrackerVector;
					public clear(): void;
					public resize(param0: number): void;
					public constructor(param0: number);
					public constructor(param0: org.bytedeco.javacpp.opencv_tracking.Tracker);
					public pop_back(): org.bytedeco.javacpp.opencv_tracking.Tracker;
				}
				export module TrackerVector {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.TrackerVector.Iterator>;
						public equals(param0: org.bytedeco.javacpp.opencv_tracking.TrackerVector.Iterator): boolean;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public get(): org.bytedeco.javacpp.opencv_tracking.Tracker;
						public increment(): org.bytedeco.javacpp.opencv_tracking.TrackerVector.Iterator;
					}
				}
				export class Trajectory {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.Trajectory>;
					public begin(): org.bytedeco.javacpp.opencv_tracking.Trajectory.Iterator;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerTargetState>);
					public empty(): boolean;
					public size(): number;
					public pop_back(): org.bytedeco.javacpp.opencv_tracking.TrackerTargetState;
					public put(param0: org.bytedeco.javacpp.opencv_tracking.Trajectory): org.bytedeco.javacpp.opencv_tracking.Trajectory;
					public erase(param0: org.bytedeco.javacpp.opencv_tracking.Trajectory.Iterator): org.bytedeco.javacpp.opencv_tracking.Trajectory.Iterator;
					public constructor(param0: org.bytedeco.javacpp.opencv_tracking.TrackerTargetState);
					public put(param0: number, param1: org.bytedeco.javacpp.opencv_tracking.TrackerTargetState): org.bytedeco.javacpp.opencv_tracking.Trajectory;
					public toString(): string;
					public constructor();
					public get(): native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerTargetState>;
					public get(param0: number): org.bytedeco.javacpp.opencv_tracking.TrackerTargetState;
					public clear(): void;
					public put(param0: native.Array<org.bytedeco.javacpp.opencv_tracking.TrackerTargetState>): org.bytedeco.javacpp.opencv_tracking.Trajectory;
					public resize(param0: number): void;
					public insert(param0: org.bytedeco.javacpp.opencv_tracking.Trajectory.Iterator, param1: org.bytedeco.javacpp.opencv_tracking.TrackerTargetState): org.bytedeco.javacpp.opencv_tracking.Trajectory.Iterator;
					public end(): org.bytedeco.javacpp.opencv_tracking.Trajectory.Iterator;
					public put(param0: org.bytedeco.javacpp.opencv_tracking.TrackerTargetState): org.bytedeco.javacpp.opencv_tracking.Trajectory;
					public push_back(param0: org.bytedeco.javacpp.opencv_tracking.TrackerTargetState): org.bytedeco.javacpp.opencv_tracking.Trajectory;
					public constructor(param0: number);
				}
				export module Trajectory {
					export class Iterator {
						public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.Trajectory.Iterator>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public increment(): org.bytedeco.javacpp.opencv_tracking.Trajectory.Iterator;
						public get(): org.bytedeco.javacpp.opencv_tracking.TrackerTargetState;
						public equals(param0: org.bytedeco.javacpp.opencv_tracking.Trajectory.Iterator): boolean;
					}
				}
				export class UkfSystemModel {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.UkfSystemModel>;
					public stateConversionFunction(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public measurementFunction(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export class UnscentedKalmanFilter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public predict(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public getProcessNoiseCov(): org.bytedeco.javacpp.opencv_core.Mat;
					public correct(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public correct(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public getState(): org.bytedeco.javacpp.opencv_core.Mat;
					public correct(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public predict(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public predict(): org.bytedeco.javacpp.opencv_core.Mat;
					public getMeasurementNoiseCov(): org.bytedeco.javacpp.opencv_core.Mat;
					public predict(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public getErrorCov(): org.bytedeco.javacpp.opencv_core.Mat;
				}
				export class UnscentedKalmanFilterParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams>;
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public MP(param0: number): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public processNoiseCov(): org.bytedeco.javacpp.opencv_core.Mat;
					public measurementNoiseCov(): org.bytedeco.javacpp.opencv_core.Mat;
					public DP(param0: number): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public alpha(param0: number): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public k(): number;
					public alpha(): number;
					public k(param0: number): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public constructor();
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_tracking.UkfSystemModel, param6: number);
					public init(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_tracking.UkfSystemModel): void;
					public stateInit(): org.bytedeco.javacpp.opencv_core.Mat;
					public measurementNoiseCov(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public constructor(param0: number);
					public processNoiseCov(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public errorCovInit(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public model(param0: org.bytedeco.javacpp.opencv_tracking.UkfSystemModel): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public MP(): number;
					public dataType(param0: number): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public errorCovInit(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public stateInit(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public beta(param0: number): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_tracking.UkfSystemModel);
					public init(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_tracking.UkfSystemModel, param6: number): void;
					public CP(): number;
					public DP(): number;
					public model(): org.bytedeco.javacpp.opencv_tracking.UkfSystemModel;
					public beta(): number;
					public dataType(): number;
					public CP(param0: number): org.bytedeco.javacpp.opencv_tracking.UnscentedKalmanFilterParams;
				}
				export class WeakClassifierHaarFeature {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_tracking.WeakClassifierHaarFeature>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public update(param0: number, param1: number): boolean;
					public eval(param0: number): number;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_tracking.WeakClassifierHaarFeature;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_video extends org.bytedeco.javacpp.helper.opencv_video {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_video>;
				public static OPTFLOW_USE_INITIAL_FLOW: number;
				public static OPTFLOW_LK_GET_MIN_EIGENVALS: number;
				public static OPTFLOW_FARNEBACK_GAUSSIAN: number;
				public static MOTION_TRANSLATION: number;
				public static MOTION_EUCLIDEAN: number;
				public static MOTION_AFFINE: number;
				public static MOTION_HOMOGRAPHY: number;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: boolean, param5: number, param6: number, param7: boolean): number;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): number;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): number;
				public static calcOpticalFlowPyrLK(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Size, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria, param9: number, param10: number): void;
				public constructor();
				public static createBackgroundSubtractorKNN(): org.bytedeco.javacpp.opencv_video.BackgroundSubtractorKNN;
				public static calcOpticalFlowFarneback(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static findTransformECC(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static writeOpticalFlow(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static createBackgroundSubtractorKNN(param0: number, param1: number, param2: boolean): org.bytedeco.javacpp.opencv_video.BackgroundSubtractorKNN;
				public static writeOpticalFlow(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): number;
				public static findTransformECC(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.TermCriteria, param5: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static writeOpticalFlow(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat): boolean;
				public static findTransformECC(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.TermCriteria, param5: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static findTransformECC(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static estimateRigidTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: boolean): org.bytedeco.javacpp.opencv_core.Mat;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: boolean, param5: number, param6: number, param7: boolean): number;
				public static calcOpticalFlowPyrLK(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: org.bytedeco.javacpp.opencv_core.Size, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria, param9: number, param10: number): void;
				public static findTransformECC(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): number;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: boolean, param5: number, param6: number, param7: boolean): number;
				public static writeOpticalFlow(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: boolean, param5: number, param6: number, param7: boolean): number;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: boolean, param5: number, param6: number, param7: boolean): number;
				public static readOpticalFlow(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_core.Mat;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: boolean, param5: number, param6: number, param7: boolean): number;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): number;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: boolean, param5: number, param6: number, param7: boolean): number;
				public static findTransformECC(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: org.bytedeco.javacpp.opencv_core.TermCriteria, param5: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static meanShift(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: boolean, param5: number, param6: number, param7: boolean): number;
				public static calcOpticalFlowFarneback(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): number;
				public static createBackgroundSubtractorMOG2(param0: number, param1: number, param2: boolean): org.bytedeco.javacpp.opencv_video.BackgroundSubtractorMOG2;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.GpuMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: boolean, param5: number, param6: number, param7: boolean): number;
				public static calcOpticalFlowPyrLK(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: org.bytedeco.javacpp.opencv_core.Size, param7: number, param8: org.bytedeco.javacpp.opencv_core.TermCriteria, param9: number, param10: number): void;
				public static createBackgroundSubtractorMOG2(): org.bytedeco.javacpp.opencv_video.BackgroundSubtractorMOG2;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): number;
				public static calcOpticalFlowPyrLK(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimateRigidTransform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: boolean): org.bytedeco.javacpp.opencv_core.Mat;
				public static calcOpticalFlowFarneback(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static writeOpticalFlow(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				public static writeOpticalFlow(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
				public static calcOpticalFlowPyrLK(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static CamShift(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.TermCriteria): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static CamShift(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.TermCriteria): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static CamShift(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.TermCriteria): org.bytedeco.javacpp.opencv_core.RotatedRect;
				public static readOpticalFlow(param0: string): org.bytedeco.javacpp.opencv_core.Mat;
				public static calcOpticalFlowPyrLK(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static estimateRigidTransform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: boolean): org.bytedeco.javacpp.opencv_core.Mat;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): number;
				public static meanShift(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static meanShift(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.TermCriteria): number;
				public static buildOpticalFlowPyramid(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.UMatVector, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number): number;
			}
			export module opencv_video {
				export class BackgroundSubtractor extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_video.BackgroundSubtractor>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
					public constructor(param0: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getBackgroundImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class BackgroundSubtractorKNN extends org.bytedeco.javacpp.opencv_video.BackgroundSubtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_video.BackgroundSubtractorKNN>;
					public setkNNSamples(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getkNNSamples(): number;
					public getDist2Threshold(): number;
					public getHistory(): number;
					public setShadowThreshold(param0: number): void;
					public setDist2Threshold(param0: number): void;
					public setHistory(param0: number): void;
					public getNSamples(): number;
					public getDetectShadows(): boolean;
					public setDetectShadows(param0: boolean): void;
					public getShadowValue(): number;
					public setNSamples(param0: number): void;
					public constructor();
					public setShadowValue(param0: number): void;
					public getShadowThreshold(): number;
					public constructor(param0: number);
				}
				export class BackgroundSubtractorMOG2 extends org.bytedeco.javacpp.opencv_video.BackgroundSubtractor {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_video.BackgroundSubtractorMOG2>;
					public setComplexityReductionThreshold(param0: number): void;
					public setBackgroundRatio(param0: number): void;
					public getComplexityReductionThreshold(): number;
					public setVarMin(param0: number): void;
					public setNMixtures(param0: number): void;
					public getNMixtures(): number;
					public getDetectShadows(): boolean;
					public setDetectShadows(param0: boolean): void;
					public constructor();
					public getVarMax(): number;
					public getVarMin(): number;
					public constructor(param0: number);
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setVarMax(param0: number): void;
					public getHistory(): number;
					public setVarThreshold(param0: number): void;
					public setShadowThreshold(param0: number): void;
					public getBackgroundRatio(): number;
					public setHistory(param0: number): void;
					public getShadowValue(): number;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setShadowValue(param0: number): void;
					public getShadowThreshold(): number;
					public getVarThresholdGen(): number;
					public apply(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
					public apply(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
					public setVarInit(param0: number): void;
					public setVarThresholdGen(param0: number): void;
					public getVarInit(): number;
					public getVarThreshold(): number;
				}
				export class DISOpticalFlow extends org.bytedeco.javacpp.opencv_video.DenseOpticalFlow {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_video.DISOpticalFlow>;
					public static PRESET_ULTRAFAST: number;
					public static PRESET_FAST: number;
					public static PRESET_MEDIUM: number;
					public getVariationalRefinementIterations(): number;
					public getFinestScale(): number;
					public constructor();
					public setGradientDescentIterations(param0: number): void;
					public setVariationalRefinementGamma(param0: number): void;
					public constructor(param0: number);
					public getGradientDescentIterations(): number;
					public setVariationalRefinementAlpha(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_video.DISOpticalFlow;
					public setPatchSize(param0: number): void;
					public setUseMeanNormalization(param0: boolean): void;
					public getUseMeanNormalization(): boolean;
					public setUseSpatialPropagation(param0: boolean): void;
					public getVariationalRefinementAlpha(): number;
					public setVariationalRefinementDelta(param0: number): void;
					public setPatchStride(param0: number): void;
					public getUseSpatialPropagation(): boolean;
					public getVariationalRefinementDelta(): number;
					public getPatchStride(): number;
					public setFinestScale(param0: number): void;
					public setVariationalRefinementIterations(param0: number): void;
					public getPatchSize(): number;
					public static create(param0: number): org.bytedeco.javacpp.opencv_video.DISOpticalFlow;
					public getVariationalRefinementGamma(): number;
				}
				export class DenseOpticalFlow extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_video.DenseOpticalFlow>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public calc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public collectGarbage(): void;
					public constructor(param0: number);
					public calc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class FarnebackOpticalFlow extends org.bytedeco.javacpp.opencv_video.DenseOpticalFlow {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_video.FarnebackOpticalFlow>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setFastPyramids(param0: boolean): void;
					public getFlags(): number;
					public getPolySigma(): number;
					public static create(param0: number, param1: number, param2: boolean, param3: number, param4: number, param5: number, param6: number, param7: number): org.bytedeco.javacpp.opencv_video.FarnebackOpticalFlow;
					public setPolyN(param0: number): void;
					public setWinSize(param0: number): void;
					public getPolyN(): number;
					public setNumIters(param0: number): void;
					public getWinSize(): number;
					public static create(): org.bytedeco.javacpp.opencv_video.FarnebackOpticalFlow;
					public constructor();
					public getNumLevels(): number;
					public setFlags(param0: number): void;
					public setPyrScale(param0: number): void;
					public getFastPyramids(): boolean;
					public getPyrScale(): number;
					public setPolySigma(param0: number): void;
					public constructor(param0: number);
					public setNumLevels(param0: number): void;
					public getNumIters(): number;
				}
				export class KalmanFilter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_video.KalmanFilter>;
					public temp2(): org.bytedeco.javacpp.opencv_core.Mat;
					public errorCovPost(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public init(param0: number, param1: number): void;
					public processNoiseCov(): org.bytedeco.javacpp.opencv_core.Mat;
					public temp1(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public temp1(): org.bytedeco.javacpp.opencv_core.Mat;
					public controlMatrix(): org.bytedeco.javacpp.opencv_core.Mat;
					public measurementMatrix(): org.bytedeco.javacpp.opencv_core.Mat;
					public statePost(): org.bytedeco.javacpp.opencv_core.Mat;
					public measurementNoiseCov(): org.bytedeco.javacpp.opencv_core.Mat;
					public predict(): org.bytedeco.javacpp.opencv_core.Mat;
					public transitionMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public statePre(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public controlMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public temp5(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public temp4(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public correct(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public temp3(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public temp5(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number);
					public processNoiseCov(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public temp3(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number, param1: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public measurementMatrix(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public predict(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public statePost(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public transitionMatrix(): org.bytedeco.javacpp.opencv_core.Mat;
					public position(param0: number): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public errorCovPost(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public init(param0: number, param1: number, param2: number, param3: number): void;
					public statePre(): org.bytedeco.javacpp.opencv_core.Mat;
					public measurementNoiseCov(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public gain(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public errorCovPre(): org.bytedeco.javacpp.opencv_core.Mat;
					public gain(): org.bytedeco.javacpp.opencv_core.Mat;
					public temp4(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public temp2(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
					public errorCovPre(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_video.KalmanFilter;
				}
				export class SparseOpticalFlow extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_video.SparseOpticalFlow>;
					public calc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public calc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public calc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public calc(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
					public calc(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
				export class SparsePyrLKOpticalFlow extends org.bytedeco.javacpp.opencv_video.SparseOpticalFlow {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_video.SparsePyrLKOpticalFlow>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getMinEigThreshold(): number;
					public setWinSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
					public getFlags(): number;
					public setMinEigThreshold(param0: number): void;
					public setMaxLevel(param0: number): void;
					public setTermCriteria(param0: org.bytedeco.javacpp.opencv_core.TermCriteria): void;
					public constructor();
					public setFlags(param0: number): void;
					public getWinSize(): org.bytedeco.javacpp.opencv_core.Size;
					public getTermCriteria(): org.bytedeco.javacpp.opencv_core.TermCriteria;
					public static create(): org.bytedeco.javacpp.opencv_video.SparsePyrLKOpticalFlow;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Size, param1: number, param2: org.bytedeco.javacpp.opencv_core.TermCriteria, param3: number, param4: number): org.bytedeco.javacpp.opencv_video.SparsePyrLKOpticalFlow;
					public getMaxLevel(): number;
					public constructor(param0: number);
				}
				export class VariationalRefinement extends org.bytedeco.javacpp.opencv_video.DenseOpticalFlow {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_video.VariationalRefinement>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getAlpha(): number;
					public getSorIterations(): number;
					public setAlpha(param0: number): void;
					public getGamma(): number;
					public getFixedPointIterations(): number;
					public getDelta(): number;
					public setGamma(param0: number): void;
					public getOmega(): number;
					public calcUV(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setSorIterations(param0: number): void;
					public setDelta(param0: number): void;
					public constructor();
					public setFixedPointIterations(param0: number): void;
					public setOmega(param0: number): void;
					public static create(): org.bytedeco.javacpp.opencv_video.VariationalRefinement;
					public constructor(param0: number);
					public calcUV(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public calcUV(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_videoio extends org.bytedeco.javacpp.presets.opencv_videoio {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videoio>;
				public static CAP_ANY: number;
				public static CAP_VFW: number;
				public static CAP_V4L: number;
				public static CAP_V4L2: number;
				public static CAP_FIREWIRE: number;
				public static CAP_FIREWARE: number;
				public static CAP_IEEE1394: number;
				public static CAP_DC1394: number;
				public static CAP_CMU1394: number;
				public static CAP_QT: number;
				public static CAP_UNICAP: number;
				public static CAP_DSHOW: number;
				public static CAP_PVAPI: number;
				public static CAP_OPENNI: number;
				public static CAP_OPENNI_ASUS: number;
				public static CAP_ANDROID: number;
				public static CAP_XIAPI: number;
				public static CAP_AVFOUNDATION: number;
				public static CAP_GIGANETIX: number;
				public static CAP_MSMF: number;
				public static CAP_WINRT: number;
				public static CAP_INTELPERC: number;
				public static CAP_OPENNI2: number;
				public static CAP_OPENNI2_ASUS: number;
				public static CAP_GPHOTO2: number;
				public static CAP_GSTREAMER: number;
				public static CAP_FFMPEG: number;
				public static CAP_IMAGES: number;
				public static CAP_ARAVIS: number;
				public static CAP_OPENCV_MJPEG: number;
				public static CAP_INTEL_MFX: number;
				public static CAP_XINE: number;
				public static CAP_PROP_POS_MSEC: number;
				public static CAP_PROP_POS_FRAMES: number;
				public static CAP_PROP_POS_AVI_RATIO: number;
				public static CAP_PROP_FRAME_WIDTH: number;
				public static CAP_PROP_FRAME_HEIGHT: number;
				public static CAP_PROP_FPS: number;
				public static CAP_PROP_FOURCC: number;
				public static CAP_PROP_FRAME_COUNT: number;
				public static CAP_PROP_FORMAT: number;
				public static CAP_PROP_MODE: number;
				public static CAP_PROP_BRIGHTNESS: number;
				public static CAP_PROP_CONTRAST: number;
				public static CAP_PROP_SATURATION: number;
				public static CAP_PROP_HUE: number;
				public static CAP_PROP_GAIN: number;
				public static CAP_PROP_EXPOSURE: number;
				public static CAP_PROP_CONVERT_RGB: number;
				public static CAP_PROP_WHITE_BALANCE_BLUE_U: number;
				public static CAP_PROP_RECTIFICATION: number;
				public static CAP_PROP_MONOCHROME: number;
				public static CAP_PROP_SHARPNESS: number;
				public static CAP_PROP_AUTO_EXPOSURE: number;
				public static CAP_PROP_GAMMA: number;
				public static CAP_PROP_TEMPERATURE: number;
				public static CAP_PROP_TRIGGER: number;
				public static CAP_PROP_TRIGGER_DELAY: number;
				public static CAP_PROP_WHITE_BALANCE_RED_V: number;
				public static CAP_PROP_ZOOM: number;
				public static CAP_PROP_FOCUS: number;
				public static CAP_PROP_GUID: number;
				public static CAP_PROP_ISO_SPEED: number;
				public static CAP_PROP_BACKLIGHT: number;
				public static CAP_PROP_PAN: number;
				public static CAP_PROP_TILT: number;
				public static CAP_PROP_ROLL: number;
				public static CAP_PROP_IRIS: number;
				public static CAP_PROP_SETTINGS: number;
				public static CAP_PROP_BUFFERSIZE: number;
				public static CAP_PROP_AUTOFOCUS: number;
				public static CAP_PROP_SAR_NUM: number;
				public static CAP_PROP_SAR_DEN: number;
				public static CAP_PROP_BACKEND: number;
				public static CAP_PROP_CHANNEL: number;
				public static CAP_PROP_AUTO_WB: number;
				public static CAP_PROP_WB_TEMPERATURE: number;
				public static CV__CAP_PROP_LATEST: number;
				public static VIDEOWRITER_PROP_QUALITY: number;
				public static VIDEOWRITER_PROP_FRAMEBYTES: number;
				public static VIDEOWRITER_PROP_NSTRIPES: number;
				public static CAP_PROP_DC1394_OFF: number;
				public static CAP_PROP_DC1394_MODE_MANUAL: number;
				public static CAP_PROP_DC1394_MODE_AUTO: number;
				public static CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO: number;
				public static CAP_PROP_DC1394_MAX: number;
				public static CAP_OPENNI_DEPTH_GENERATOR: number;
				public static CAP_OPENNI_IMAGE_GENERATOR: number;
				public static CAP_OPENNI_IR_GENERATOR: number;
				public static CAP_OPENNI_GENERATORS_MASK: number;
				public static CAP_PROP_OPENNI_OUTPUT_MODE: number;
				public static CAP_PROP_OPENNI_FRAME_MAX_DEPTH: number;
				public static CAP_PROP_OPENNI_BASELINE: number;
				public static CAP_PROP_OPENNI_FOCAL_LENGTH: number;
				public static CAP_PROP_OPENNI_REGISTRATION: number;
				public static CAP_PROP_OPENNI_REGISTRATION_ON: number;
				public static CAP_PROP_OPENNI_APPROX_FRAME_SYNC: number;
				public static CAP_PROP_OPENNI_MAX_BUFFER_SIZE: number;
				public static CAP_PROP_OPENNI_CIRCLE_BUFFER: number;
				public static CAP_PROP_OPENNI_MAX_TIME_DURATION: number;
				public static CAP_PROP_OPENNI_GENERATOR_PRESENT: number;
				public static CAP_PROP_OPENNI2_SYNC: number;
				public static CAP_PROP_OPENNI2_MIRROR: number;
				public static CAP_OPENNI_IMAGE_GENERATOR_PRESENT: number;
				public static CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE: number;
				public static CAP_OPENNI_DEPTH_GENERATOR_PRESENT: number;
				public static CAP_OPENNI_DEPTH_GENERATOR_BASELINE: number;
				public static CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH: number;
				public static CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION: number;
				public static CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON: number;
				public static CAP_OPENNI_IR_GENERATOR_PRESENT: number;
				public static CAP_OPENNI_DEPTH_MAP: number;
				public static CAP_OPENNI_POINT_CLOUD_MAP: number;
				public static CAP_OPENNI_DISPARITY_MAP: number;
				public static CAP_OPENNI_DISPARITY_MAP_32F: number;
				public static CAP_OPENNI_VALID_DEPTH_MASK: number;
				public static CAP_OPENNI_BGR_IMAGE: number;
				public static CAP_OPENNI_GRAY_IMAGE: number;
				public static CAP_OPENNI_IR_IMAGE: number;
				public static CAP_OPENNI_VGA_30HZ: number;
				public static CAP_OPENNI_SXGA_15HZ: number;
				public static CAP_OPENNI_SXGA_30HZ: number;
				public static CAP_OPENNI_QVGA_30HZ: number;
				public static CAP_OPENNI_QVGA_60HZ: number;
				public static CAP_PROP_GSTREAMER_QUEUE_LENGTH: number;
				public static CAP_PROP_PVAPI_MULTICASTIP: number;
				public static CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE: number;
				public static CAP_PROP_PVAPI_DECIMATIONHORIZONTAL: number;
				public static CAP_PROP_PVAPI_DECIMATIONVERTICAL: number;
				public static CAP_PROP_PVAPI_BINNINGX: number;
				public static CAP_PROP_PVAPI_BINNINGY: number;
				public static CAP_PROP_PVAPI_PIXELFORMAT: number;
				public static CAP_PVAPI_FSTRIGMODE_FREERUN: number;
				public static CAP_PVAPI_FSTRIGMODE_SYNCIN1: number;
				public static CAP_PVAPI_FSTRIGMODE_SYNCIN2: number;
				public static CAP_PVAPI_FSTRIGMODE_FIXEDRATE: number;
				public static CAP_PVAPI_FSTRIGMODE_SOFTWARE: number;
				public static CAP_PVAPI_DECIMATION_OFF: number;
				public static CAP_PVAPI_DECIMATION_2OUTOF4: number;
				public static CAP_PVAPI_DECIMATION_2OUTOF8: number;
				public static CAP_PVAPI_DECIMATION_2OUTOF16: number;
				public static CAP_PVAPI_PIXELFORMAT_MONO8: number;
				public static CAP_PVAPI_PIXELFORMAT_MONO16: number;
				public static CAP_PVAPI_PIXELFORMAT_BAYER8: number;
				public static CAP_PVAPI_PIXELFORMAT_BAYER16: number;
				public static CAP_PVAPI_PIXELFORMAT_RGB24: number;
				public static CAP_PVAPI_PIXELFORMAT_BGR24: number;
				public static CAP_PVAPI_PIXELFORMAT_RGBA32: number;
				public static CAP_PVAPI_PIXELFORMAT_BGRA32: number;
				public static CAP_PROP_XI_DOWNSAMPLING: number;
				public static CAP_PROP_XI_DATA_FORMAT: number;
				public static CAP_PROP_XI_OFFSET_X: number;
				public static CAP_PROP_XI_OFFSET_Y: number;
				public static CAP_PROP_XI_TRG_SOURCE: number;
				public static CAP_PROP_XI_TRG_SOFTWARE: number;
				public static CAP_PROP_XI_GPI_SELECTOR: number;
				public static CAP_PROP_XI_GPI_MODE: number;
				public static CAP_PROP_XI_GPI_LEVEL: number;
				public static CAP_PROP_XI_GPO_SELECTOR: number;
				public static CAP_PROP_XI_GPO_MODE: number;
				public static CAP_PROP_XI_LED_SELECTOR: number;
				public static CAP_PROP_XI_LED_MODE: number;
				public static CAP_PROP_XI_MANUAL_WB: number;
				public static CAP_PROP_XI_AUTO_WB: number;
				public static CAP_PROP_XI_AEAG: number;
				public static CAP_PROP_XI_EXP_PRIORITY: number;
				public static CAP_PROP_XI_AE_MAX_LIMIT: number;
				public static CAP_PROP_XI_AG_MAX_LIMIT: number;
				public static CAP_PROP_XI_AEAG_LEVEL: number;
				public static CAP_PROP_XI_TIMEOUT: number;
				public static CAP_PROP_XI_EXPOSURE: number;
				public static CAP_PROP_XI_EXPOSURE_BURST_COUNT: number;
				public static CAP_PROP_XI_GAIN_SELECTOR: number;
				public static CAP_PROP_XI_GAIN: number;
				public static CAP_PROP_XI_DOWNSAMPLING_TYPE: number;
				public static CAP_PROP_XI_BINNING_SELECTOR: number;
				public static CAP_PROP_XI_BINNING_VERTICAL: number;
				public static CAP_PROP_XI_BINNING_HORIZONTAL: number;
				public static CAP_PROP_XI_BINNING_PATTERN: number;
				public static CAP_PROP_XI_DECIMATION_SELECTOR: number;
				public static CAP_PROP_XI_DECIMATION_VERTICAL: number;
				public static CAP_PROP_XI_DECIMATION_HORIZONTAL: number;
				public static CAP_PROP_XI_DECIMATION_PATTERN: number;
				public static CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR: number;
				public static CAP_PROP_XI_TEST_PATTERN: number;
				public static CAP_PROP_XI_IMAGE_DATA_FORMAT: number;
				public static CAP_PROP_XI_SHUTTER_TYPE: number;
				public static CAP_PROP_XI_SENSOR_TAPS: number;
				public static CAP_PROP_XI_AEAG_ROI_OFFSET_X: number;
				public static CAP_PROP_XI_AEAG_ROI_OFFSET_Y: number;
				public static CAP_PROP_XI_AEAG_ROI_WIDTH: number;
				public static CAP_PROP_XI_AEAG_ROI_HEIGHT: number;
				public static CAP_PROP_XI_BPC: number;
				public static CAP_PROP_XI_WB_KR: number;
				public static CAP_PROP_XI_WB_KG: number;
				public static CAP_PROP_XI_WB_KB: number;
				public static CAP_PROP_XI_WIDTH: number;
				public static CAP_PROP_XI_HEIGHT: number;
				public static CAP_PROP_XI_REGION_SELECTOR: number;
				public static CAP_PROP_XI_REGION_MODE: number;
				public static CAP_PROP_XI_LIMIT_BANDWIDTH: number;
				public static CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH: number;
				public static CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH: number;
				public static CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH: number;
				public static CAP_PROP_XI_OUTPUT_DATA_PACKING: number;
				public static CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE: number;
				public static CAP_PROP_XI_IS_COOLED: number;
				public static CAP_PROP_XI_COOLING: number;
				public static CAP_PROP_XI_TARGET_TEMP: number;
				public static CAP_PROP_XI_CHIP_TEMP: number;
				public static CAP_PROP_XI_HOUS_TEMP: number;
				public static CAP_PROP_XI_HOUS_BACK_SIDE_TEMP: number;
				public static CAP_PROP_XI_SENSOR_BOARD_TEMP: number;
				public static CAP_PROP_XI_CMS: number;
				public static CAP_PROP_XI_APPLY_CMS: number;
				public static CAP_PROP_XI_IMAGE_IS_COLOR: number;
				public static CAP_PROP_XI_COLOR_FILTER_ARRAY: number;
				public static CAP_PROP_XI_GAMMAY: number;
				public static CAP_PROP_XI_GAMMAC: number;
				public static CAP_PROP_XI_SHARPNESS: number;
				public static CAP_PROP_XI_CC_MATRIX_00: number;
				public static CAP_PROP_XI_CC_MATRIX_01: number;
				public static CAP_PROP_XI_CC_MATRIX_02: number;
				public static CAP_PROP_XI_CC_MATRIX_03: number;
				public static CAP_PROP_XI_CC_MATRIX_10: number;
				public static CAP_PROP_XI_CC_MATRIX_11: number;
				public static CAP_PROP_XI_CC_MATRIX_12: number;
				public static CAP_PROP_XI_CC_MATRIX_13: number;
				public static CAP_PROP_XI_CC_MATRIX_20: number;
				public static CAP_PROP_XI_CC_MATRIX_21: number;
				public static CAP_PROP_XI_CC_MATRIX_22: number;
				public static CAP_PROP_XI_CC_MATRIX_23: number;
				public static CAP_PROP_XI_CC_MATRIX_30: number;
				public static CAP_PROP_XI_CC_MATRIX_31: number;
				public static CAP_PROP_XI_CC_MATRIX_32: number;
				public static CAP_PROP_XI_CC_MATRIX_33: number;
				public static CAP_PROP_XI_DEFAULT_CC_MATRIX: number;
				public static CAP_PROP_XI_TRG_SELECTOR: number;
				public static CAP_PROP_XI_ACQ_FRAME_BURST_COUNT: number;
				public static CAP_PROP_XI_DEBOUNCE_EN: number;
				public static CAP_PROP_XI_DEBOUNCE_T0: number;
				public static CAP_PROP_XI_DEBOUNCE_T1: number;
				public static CAP_PROP_XI_DEBOUNCE_POL: number;
				public static CAP_PROP_XI_LENS_MODE: number;
				public static CAP_PROP_XI_LENS_APERTURE_VALUE: number;
				public static CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE: number;
				public static CAP_PROP_XI_LENS_FOCUS_MOVE: number;
				public static CAP_PROP_XI_LENS_FOCUS_DISTANCE: number;
				public static CAP_PROP_XI_LENS_FOCAL_LENGTH: number;
				public static CAP_PROP_XI_LENS_FEATURE_SELECTOR: number;
				public static CAP_PROP_XI_LENS_FEATURE: number;
				public static CAP_PROP_XI_DEVICE_MODEL_ID: number;
				public static CAP_PROP_XI_DEVICE_SN: number;
				public static CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA: number;
				public static CAP_PROP_XI_IMAGE_PAYLOAD_SIZE: number;
				public static CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT: number;
				public static CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ: number;
				public static CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX: number;
				public static CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT: number;
				public static CAP_PROP_XI_FRAMERATE: number;
				public static CAP_PROP_XI_COUNTER_SELECTOR: number;
				public static CAP_PROP_XI_COUNTER_VALUE: number;
				public static CAP_PROP_XI_ACQ_TIMING_MODE: number;
				public static CAP_PROP_XI_AVAILABLE_BANDWIDTH: number;
				public static CAP_PROP_XI_BUFFER_POLICY: number;
				public static CAP_PROP_XI_LUT_EN: number;
				public static CAP_PROP_XI_LUT_INDEX: number;
				public static CAP_PROP_XI_LUT_VALUE: number;
				public static CAP_PROP_XI_TRG_DELAY: number;
				public static CAP_PROP_XI_TS_RST_MODE: number;
				public static CAP_PROP_XI_TS_RST_SOURCE: number;
				public static CAP_PROP_XI_IS_DEVICE_EXIST: number;
				public static CAP_PROP_XI_ACQ_BUFFER_SIZE: number;
				public static CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT: number;
				public static CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE: number;
				public static CAP_PROP_XI_BUFFERS_QUEUE_SIZE: number;
				public static CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT: number;
				public static CAP_PROP_XI_RECENT_FRAME: number;
				public static CAP_PROP_XI_DEVICE_RESET: number;
				public static CAP_PROP_XI_COLUMN_FPN_CORRECTION: number;
				public static CAP_PROP_XI_ROW_FPN_CORRECTION: number;
				public static CAP_PROP_XI_SENSOR_MODE: number;
				public static CAP_PROP_XI_HDR: number;
				public static CAP_PROP_XI_HDR_KNEEPOINT_COUNT: number;
				public static CAP_PROP_XI_HDR_T1: number;
				public static CAP_PROP_XI_HDR_T2: number;
				public static CAP_PROP_XI_KNEEPOINT1: number;
				public static CAP_PROP_XI_KNEEPOINT2: number;
				public static CAP_PROP_XI_IMAGE_BLACK_LEVEL: number;
				public static CAP_PROP_XI_HW_REVISION: number;
				public static CAP_PROP_XI_DEBUG_LEVEL: number;
				public static CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION: number;
				public static CAP_PROP_XI_FFS_FILE_ID: number;
				public static CAP_PROP_XI_FFS_FILE_SIZE: number;
				public static CAP_PROP_XI_FREE_FFS_SIZE: number;
				public static CAP_PROP_XI_USED_FFS_SIZE: number;
				public static CAP_PROP_XI_FFS_ACCESS_KEY: number;
				public static CAP_PROP_XI_SENSOR_FEATURE_SELECTOR: number;
				public static CAP_PROP_XI_SENSOR_FEATURE_VALUE: number;
				public static CAP_PROP_IOS_DEVICE_FOCUS: number;
				public static CAP_PROP_IOS_DEVICE_EXPOSURE: number;
				public static CAP_PROP_IOS_DEVICE_FLASH: number;
				public static CAP_PROP_IOS_DEVICE_WHITEBALANCE: number;
				public static CAP_PROP_IOS_DEVICE_TORCH: number;
				public static CAP_PROP_GIGA_FRAME_OFFSET_X: number;
				public static CAP_PROP_GIGA_FRAME_OFFSET_Y: number;
				public static CAP_PROP_GIGA_FRAME_WIDTH_MAX: number;
				public static CAP_PROP_GIGA_FRAME_HEIGH_MAX: number;
				public static CAP_PROP_GIGA_FRAME_SENS_WIDTH: number;
				public static CAP_PROP_GIGA_FRAME_SENS_HEIGH: number;
				public static CAP_PROP_INTELPERC_PROFILE_COUNT: number;
				public static CAP_PROP_INTELPERC_PROFILE_IDX: number;
				public static CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE: number;
				public static CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE: number;
				public static CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD: number;
				public static CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ: number;
				public static CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT: number;
				public static CAP_INTELPERC_DEPTH_GENERATOR: number;
				public static CAP_INTELPERC_IMAGE_GENERATOR: number;
				public static CAP_INTELPERC_IR_GENERATOR: number;
				public static CAP_INTELPERC_GENERATORS_MASK: number;
				public static CAP_INTELPERC_DEPTH_MAP: number;
				public static CAP_INTELPERC_UVDEPTH_MAP: number;
				public static CAP_INTELPERC_IR_MAP: number;
				public static CAP_INTELPERC_IMAGE: number;
				public static CAP_PROP_GPHOTO2_PREVIEW: number;
				public static CAP_PROP_GPHOTO2_WIDGET_ENUMERATE: number;
				public static CAP_PROP_GPHOTO2_RELOAD_CONFIG: number;
				public static CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE: number;
				public static CAP_PROP_GPHOTO2_COLLECT_MSGS: number;
				public static CAP_PROP_GPHOTO2_FLUSH_MSGS: number;
				public static CAP_PROP_SPEED: number;
				public static CAP_PROP_APERTURE: number;
				public static CAP_PROP_EXPOSUREPROGRAM: number;
				public static CAP_PROP_VIEWFINDER: number;
				public static CAP_PROP_IMAGES_BASE: number;
				public static CAP_PROP_IMAGES_LAST: number;
				public constructor();
			}
			export module opencv_videoio {
				export class CvCapture {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videoio.CvCapture>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class CvCaptureDefaultDeleter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videoio.CvCaptureDefaultDeleter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_videoio.CvCaptureDefaultDeleter;
					public apply(param0: org.bytedeco.javacpp.opencv_videoio.CvCapture): void;
					public constructor(param0: number);
				}
				export class CvVideoWriter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videoio.CvVideoWriter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class CvVideoWriterDefaultDeleter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videoio.CvVideoWriterDefaultDeleter>;
					public position(param0: number): org.bytedeco.javacpp.opencv_videoio.CvVideoWriterDefaultDeleter;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public apply(param0: org.bytedeco.javacpp.opencv_videoio.CvVideoWriter): void;
					public constructor(param0: number);
				}
				export class IVideoCapture {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videoio.IVideoCapture>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class IVideoWriter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videoio.IVideoWriter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
				}
				export class VideoCapture {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videoio.VideoCapture>;
					public shiftRight(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_videoio.VideoCapture;
					public read(param0: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public open(param0: string): boolean;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: number);
					public retrieve(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): boolean;
					public constructor(param0: string);
					public retrieve(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): boolean;
					public retrieve(param0: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public set(param0: number, param1: number): boolean;
					public open(param0: string, param1: number): boolean;
					public get(param0: number): number;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public retrieve(param0: org.bytedeco.javacpp.opencv_core.Mat): boolean;
					public retrieve(param0: org.bytedeco.javacpp.opencv_core.UMat): boolean;
					public constructor();
					public read(param0: org.bytedeco.javacpp.opencv_core.GpuMat): boolean;
					public constructor(param0: string, param1: number);
					public open(param0: org.bytedeco.javacpp.BytePointer): boolean;
					public retrieve(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): boolean;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public open(param0: number, param1: number): boolean;
					public open(param0: number): boolean;
					public release(): void;
					public shiftRight(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_videoio.VideoCapture;
					public grab(): boolean;
					public getBackendName(): org.bytedeco.javacpp.BytePointer;
					public isOpened(): boolean;
					public open(param0: org.bytedeco.javacpp.BytePointer, param1: number): boolean;
					public position(param0: number): org.bytedeco.javacpp.opencv_videoio.VideoCapture;
					public read(param0: org.bytedeco.javacpp.opencv_core.Mat): boolean;
				}
				export class VideoWriter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videoio.VideoWriter>;
					public open(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: boolean): boolean;
					public shiftLeft(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_videoio.VideoWriter;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: boolean);
					public open(param0: string, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: boolean): boolean;
					public open(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: boolean): boolean;
					public write(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public set(param0: number, param1: number): boolean;
					public shiftLeft(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_videoio.VideoWriter;
					public get(param0: number): number;
					public static fourcc(param0: number, param1: number, param2: number, param3: number): number;
					public constructor();
					public constructor(param0: string, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size);
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: boolean);
					public write(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public write(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public open(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size): boolean;
					public open(param0: string, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size): boolean;
					public constructor(param0: number);
					public open(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size): boolean;
					public open(param0: string, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: boolean): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor(param0: string, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size, param5: boolean);
					public constructor(param0: string, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size);
					public open(param0: string, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size): boolean;
					public release(): void;
					public constructor(param0: string, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size, param4: boolean);
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: org.bytedeco.javacpp.opencv_core.Size);
					public getBackendName(): org.bytedeco.javacpp.BytePointer;
					public isOpened(): boolean;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: number, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.Size);
					public position(param0: number): org.bytedeco.javacpp.opencv_videoio.VideoWriter;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_videostab extends org.bytedeco.javacpp.presets.opencv_videostab {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab>;
				public static MM_TRANSLATION: number;
				public static MM_TRANSLATION_AND_SCALE: number;
				public static MM_ROTATION: number;
				public static MM_RIGID: number;
				public static MM_SIMILARITY: number;
				public static MM_AFFINE: number;
				public static MM_HOMOGRAPHY: number;
				public static MM_UNKNOWN: number;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_videostab.RansacParams, param4: native.Array<number>, param5: native.Array<number>): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static completeFrameAccordingToFlow(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: number, param6: org.bytedeco.javacpp.opencv_core.Mat, param7: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: native.Array<number>): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public constructor();
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: java.nio.FloatBuffer): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_videostab.RansacParams, param4: java.nio.FloatBuffer, param5: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: java.nio.FloatBuffer): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: native.Array<number>): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_core.Mat;
				public static calcFlowMask(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_videostab.RansacParams, param4: native.Array<number>, param5: native.Array<number>): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: native.Array<number>): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.opencv_videostab.RansacParams, param4: org.bytedeco.javacpp.FloatPointer, param5: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_videostab.RansacParams, param4: java.nio.FloatBuffer, param5: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_videostab.RansacParams, param4: org.bytedeco.javacpp.FloatPointer, param5: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.Mat;
				public static calcBlurriness(param0: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_videostab.RansacParams, param4: java.nio.FloatBuffer, param5: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_core.Mat;
				public static ensureInclusionConstraint(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size, param2: number): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: org.bytedeco.javacpp.opencv_videostab.RansacParams, param4: native.Array<number>, param5: native.Array<number>): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionRansac(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: org.bytedeco.javacpp.opencv_videostab.RansacParams, param4: org.bytedeco.javacpp.FloatPointer, param5: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_core.Mat;
				public static getMotion(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.MatVector): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateGlobalMotionLeastSquares(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: java.nio.FloatBuffer): org.bytedeco.javacpp.opencv_core.Mat;
				public static estimateOptimalTrimRatio(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Size): number;
			}
			export module opencv_videostab {
				export class ColorAverageInpainter extends org.bytedeco.javacpp.opencv_videostab.InpainterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.ColorAverageInpainter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.ColorAverageInpainter;
					public constructor();
					public inpaint(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class ColorInpainter extends org.bytedeco.javacpp.opencv_videostab.InpainterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.ColorInpainter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public inpaint(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.ColorInpainter;
					public constructor(param0: number);
					public constructor(param0: number, param1: number);
				}
				export class ConsistentMosaicInpainter extends org.bytedeco.javacpp.opencv_videostab.InpainterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.ConsistentMosaicInpainter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.ConsistentMosaicInpainter;
					public constructor();
					public stdevThresh(): number;
					public inpaint(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setStdevThresh(param0: number): void;
					public constructor(param0: number);
				}
				export class DeblurerBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.DeblurerBase>;
					public deblur(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public radius(): number;
					public frames(): org.bytedeco.javacpp.opencv_core.MatVector;
					public setRadius(param0: number): void;
					public motions(): org.bytedeco.javacpp.opencv_core.MatVector;
					public setFrames(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public setBlurrinessRates(param0: org.bytedeco.javacpp.FloatPointer): void;
					public setBlurrinessRates(param0: native.Array<number>): void;
					public setMotions(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public setBlurrinessRates(param0: java.nio.FloatBuffer): void;
					public blurrinessRates(): org.bytedeco.javacpp.FloatPointer;
				}
				export class FastMarchingMethod {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.FastMarchingMethod>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.FastMarchingMethod;
					public constructor();
					public distanceMap(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number);
				}
				export class FromFileMotionReader extends org.bytedeco.javacpp.opencv_videostab.ImageMotionEstimatorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.FromFileMotionReader>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public constructor(param0: string);
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
				}
				export class GaussianMotionFilter extends org.bytedeco.javacpp.opencv_videostab.MotionFilterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.GaussianMotionFilter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public radius(): number;
					public stdev(): number;
					public stabilize(param0: number, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.IntIntPair): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public setParams(param0: number): void;
					public setParams(param0: number, param1: number): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.GaussianMotionFilter;
					public constructor(param0: number);
					public stabilize(param0: number, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.IntIntPair, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number, param1: number);
				}
				export class IDenseOptFlowEstimator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.IDenseOptFlowEstimator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class IFrameSource {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.IFrameSource>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public reset(): void;
					public nextFrame(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.IFrameSource;
					public constructor(param0: number);
				}
				export class ILog {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.ILog>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public print(param0: string): void;
					public print(param0: org.bytedeco.javacpp.BytePointer): void;
				}
				export class IMotionStabilizer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.IMotionStabilizer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public stabilize(param0: number, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.IntIntPair, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export class IOutlierRejector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.IOutlierRejector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public process(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class ISparseOptFlowEstimator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.ISparseOptFlowEstimator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
				export class ImageMotionEstimatorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.ImageMotionEstimatorBase>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public motionModel(): number;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public setMotionModel(param0: number): void;
				}
				export class InpainterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.InpainterBase>;
					public setStabilizedFrames(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public setStabilizationMotions(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public frames(): org.bytedeco.javacpp.opencv_core.MatVector;
					public motionModel(): number;
					public setMotions(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public stabilizationMotions(): org.bytedeco.javacpp.opencv_core.MatVector;
					public radius(): number;
					public stabilizedFrames(): org.bytedeco.javacpp.opencv_core.MatVector;
					public inpaint(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setRadius(param0: number): void;
					public motions(): org.bytedeco.javacpp.opencv_core.MatVector;
					public setFrames(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public setMotionModel(param0: number): void;
				}
				export class InpaintingPipeline extends org.bytedeco.javacpp.opencv_videostab.InpainterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.InpaintingPipeline>;
					public setStabilizedFrames(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public setStabilizationMotions(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public pushBack(param0: org.bytedeco.javacpp.opencv_videostab.InpainterBase): void;
					public empty(): boolean;
					public setMotions(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.InpaintingPipeline;
					public constructor();
					public inpaint(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setRadius(param0: number): void;
					public setFrames(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public constructor(param0: number);
					public setMotionModel(param0: number): void;
				}
				export class KeypointBasedMotionEstimator extends org.bytedeco.javacpp.opencv_videostab.ImageMotionEstimatorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.KeypointBasedMotionEstimator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public motionModel(): number;
					public constructor(param0: org.bytedeco.javacpp.opencv_videostab.MotionEstimatorBase);
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public detector(): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public outlierRejector(): org.bytedeco.javacpp.opencv_videostab.IOutlierRejector;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public setOutlierRejector(param0: org.bytedeco.javacpp.opencv_videostab.IOutlierRejector): void;
					public setDetector(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D): void;
					public opticalFlowEstimator(): org.bytedeco.javacpp.opencv_videostab.ISparseOptFlowEstimator;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public setOpticalFlowEstimator(param0: org.bytedeco.javacpp.opencv_videostab.ISparseOptFlowEstimator): void;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public setMotionModel(param0: number): void;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
				}
				export class LogToStdout extends org.bytedeco.javacpp.opencv_videostab.ILog {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.LogToStdout>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public print(param0: string): void;
					public constructor();
					public print(param0: org.bytedeco.javacpp.BytePointer): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.LogToStdout;
					public constructor(param0: number);
				}
				export class LpMotionStabilizer extends org.bytedeco.javacpp.opencv_videostab.IMotionStabilizer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.LpMotionStabilizer>;
					public weight4(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public weight2(): number;
					public motionModel(): number;
					public weight1(): number;
					public trimRatio(): number;
					public setWeight3(param0: number): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.LpMotionStabilizer;
					public setFrameSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
					public constructor();
					public setWeight1(param0: number): void;
					public weight3(): number;
					public setTrimRatio(param0: number): void;
					public setWeight2(param0: number): void;
					public setWeight4(param0: number): void;
					public frameSize(): org.bytedeco.javacpp.opencv_core.Size;
					public constructor(param0: number);
					public setMotionModel(param0: number): void;
					public stabilize(param0: number, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.IntIntPair, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export class MoreAccurateMotionWobbleSuppressor extends org.bytedeco.javacpp.opencv_videostab.MoreAccurateMotionWobbleSuppressorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.MoreAccurateMotionWobbleSuppressor>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.MoreAccurateMotionWobbleSuppressor;
					public suppress(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class MoreAccurateMotionWobbleSuppressorBase extends org.bytedeco.javacpp.opencv_videostab.WobbleSuppressorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.MoreAccurateMotionWobbleSuppressorBase>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setPeriod(param0: number): void;
					public period(): number;
				}
				export class MotionEstimatorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.MotionEstimatorBase>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public motionModel(): number;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public setMotionModel(param0: number): void;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
				}
				export class MotionEstimatorL1 extends org.bytedeco.javacpp.opencv_videostab.MotionEstimatorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.MotionEstimatorL1>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.MotionEstimatorL1;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: number);
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
				}
				export class MotionEstimatorRansacL2 extends org.bytedeco.javacpp.opencv_videostab.MotionEstimatorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.MotionEstimatorRansacL2>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public setMinInlierRatio(param0: number): void;
					public minInlierRatio(): number;
					public setRansacParams(param0: org.bytedeco.javacpp.opencv_videostab.RansacParams): void;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public ransacParams(): org.bytedeco.javacpp.opencv_videostab.RansacParams;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public estimate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Mat;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.MotionEstimatorRansacL2;
					public constructor(param0: number);
					public estimate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
				}
				export class MotionFilterBase extends org.bytedeco.javacpp.opencv_videostab.IMotionStabilizer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.MotionFilterBase>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public stabilize(param0: number, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.IntIntPair): org.bytedeco.javacpp.opencv_core.Mat;
					public stabilize(param0: number, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.IntIntPair, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export class MotionInpainter extends org.bytedeco.javacpp.opencv_videostab.InpainterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.MotionInpainter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.MotionInpainter;
					public distThresh(): number;
					public setOptFlowEstimator(param0: org.bytedeco.javacpp.opencv_videostab.IDenseOptFlowEstimator): void;
					public optFlowEstimator(): org.bytedeco.javacpp.opencv_videostab.IDenseOptFlowEstimator;
					public setBorderMode(param0: number): void;
					public setFlowErrorThreshold(param0: number): void;
					public constructor();
					public inpaint(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public flowErrorThreshold(): number;
					public setDistThreshold(param0: number): void;
					public borderMode(): number;
					public constructor(param0: number);
				}
				export class MotionStabilizationPipeline extends org.bytedeco.javacpp.opencv_videostab.IMotionStabilizer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.MotionStabilizationPipeline>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public empty(): boolean;
					public pushBack(param0: org.bytedeco.javacpp.opencv_videostab.IMotionStabilizer): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.MotionStabilizationPipeline;
					public constructor(param0: number);
					public stabilize(param0: number, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.opencv_core.IntIntPair, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				}
				export class NullDeblurer extends org.bytedeco.javacpp.opencv_videostab.DeblurerBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.NullDeblurer>;
					public deblur(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.NullDeblurer;
					public constructor(param0: number);
				}
				export class NullFrameSource extends org.bytedeco.javacpp.opencv_videostab.IFrameSource {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.NullFrameSource>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public reset(): void;
					public nextFrame(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.IFrameSource;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.NullFrameSource;
					public constructor(param0: number);
				}
				export class NullInpainter extends org.bytedeco.javacpp.opencv_videostab.InpainterBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.NullInpainter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public inpaint(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.NullInpainter;
					public constructor(param0: number);
				}
				export class NullLog extends org.bytedeco.javacpp.opencv_videostab.ILog {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.NullLog>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public print(param0: string): void;
					public constructor();
					public print(param0: org.bytedeco.javacpp.BytePointer): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.NullLog;
					public constructor(param0: number);
				}
				export class NullOutlierRejector extends org.bytedeco.javacpp.opencv_videostab.IOutlierRejector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.NullOutlierRejector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public process(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public process(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.NullOutlierRejector;
					public constructor(param0: number);
				}
				export class NullWobbleSuppressor extends org.bytedeco.javacpp.opencv_videostab.WobbleSuppressorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.NullWobbleSuppressor>;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.NullWobbleSuppressor;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public suppress(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class OnePassStabilizer extends org.bytedeco.javacpp.opencv_videostab.StabilizerBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.OnePassStabilizer>;
					public setMotionFilter(param0: org.bytedeco.javacpp.opencv_videostab.MotionFilterBase): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public reset(): void;
					public nextFrame(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public motionFilter(): org.bytedeco.javacpp.opencv_videostab.MotionFilterBase;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.OnePassStabilizer;
					public constructor(param0: number);
					public asIFrameSource(): org.bytedeco.javacpp.opencv_videostab.IFrameSource;
					public static asIFrameSource(param0: org.bytedeco.javacpp.opencv_videostab.OnePassStabilizer): org.bytedeco.javacpp.opencv_videostab.IFrameSource;
				}
				export class PyrLkOptFlowEstimatorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.PyrLkOptFlowEstimatorBase>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setWinSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.PyrLkOptFlowEstimatorBase;
					public winSize(): org.bytedeco.javacpp.opencv_core.Size;
					public setMaxLevel(param0: number): void;
					public constructor(param0: number);
					public maxLevel(): number;
				}
				export class RansacParams {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.RansacParams>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public size(param0: number): org.bytedeco.javacpp.opencv_videostab.RansacParams;
					public niters(): number;
					public size(): number;
					public eps(param0: number): org.bytedeco.javacpp.opencv_videostab.RansacParams;
					public thresh(): number;
					public prob(param0: number): org.bytedeco.javacpp.opencv_videostab.RansacParams;
					public static default2dMotion(param0: number): org.bytedeco.javacpp.opencv_videostab.RansacParams;
					public constructor(param0: number, param1: number, param2: number, param3: number);
					public prob(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.RansacParams;
					public thresh(param0: number): org.bytedeco.javacpp.opencv_videostab.RansacParams;
					public constructor();
					public eps(): number;
					public constructor(param0: number);
				}
				export class SparsePyrLkOptFlowEstimator extends org.bytedeco.javacpp.opencv_videostab.PyrLkOptFlowEstimatorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.SparsePyrLkOptFlowEstimator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public run(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public run(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public static asISparseOptFlowEstimator(param0: org.bytedeco.javacpp.opencv_videostab.SparsePyrLkOptFlowEstimator): org.bytedeco.javacpp.opencv_videostab.ISparseOptFlowEstimator;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.SparsePyrLkOptFlowEstimator;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.PyrLkOptFlowEstimatorBase;
					public asISparseOptFlowEstimator(): org.bytedeco.javacpp.opencv_videostab.ISparseOptFlowEstimator;
					public constructor(param0: number);
				}
				export class StabilizerBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.StabilizerBase>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setInpainter(param0: org.bytedeco.javacpp.opencv_videostab.InpainterBase): void;
					public frameSource(): org.bytedeco.javacpp.opencv_videostab.IFrameSource;
					public deblurrer(): org.bytedeco.javacpp.opencv_videostab.DeblurerBase;
					public setBorderMode(param0: number): void;
					public trimRatio(): number;
					public inpainter(): org.bytedeco.javacpp.opencv_videostab.InpainterBase;
					public radius(): number;
					public motionEstimator(): org.bytedeco.javacpp.opencv_videostab.ImageMotionEstimatorBase;
					public setFrameSource(param0: org.bytedeco.javacpp.opencv_videostab.IFrameSource): void;
					public setMotionEstimator(param0: org.bytedeco.javacpp.opencv_videostab.ImageMotionEstimatorBase): void;
					public setDeblurer(param0: org.bytedeco.javacpp.opencv_videostab.DeblurerBase): void;
					public setLog(param0: org.bytedeco.javacpp.opencv_videostab.ILog): void;
					public setTrimRatio(param0: number): void;
					public setRadius(param0: number): void;
					public borderMode(): number;
					public setCorrectionForInclusion(param0: boolean): void;
					public log(): org.bytedeco.javacpp.opencv_videostab.ILog;
					public doCorrectionForInclusion(): boolean;
				}
				export class ToFileMotionWriter extends org.bytedeco.javacpp.opencv_videostab.ImageMotionEstimatorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.ToFileMotionWriter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_videostab.ImageMotionEstimatorBase);
					public motionModel(): number;
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.BoolPointer): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor(param0: string, param1: org.bytedeco.javacpp.opencv_videostab.ImageMotionEstimatorBase);
					public estimate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: native.Array<boolean>): org.bytedeco.javacpp.opencv_core.Mat;
					public setMotionModel(param0: number): void;
				}
				export class TranslationBasedLocalOutlierRejector extends org.bytedeco.javacpp.opencv_videostab.IOutlierRejector {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.TranslationBasedLocalOutlierRejector>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public cellSize(): org.bytedeco.javacpp.opencv_core.Size;
					public setRansacParams(param0: org.bytedeco.javacpp.opencv_videostab.RansacParams): void;
					public ransacParams(): org.bytedeco.javacpp.opencv_videostab.RansacParams;
					public process(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public process(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.TranslationBasedLocalOutlierRejector;
					public setCellSize(param0: org.bytedeco.javacpp.opencv_core.Size): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: number);
				}
				export class TwoPassStabilizer extends org.bytedeco.javacpp.opencv_videostab.StabilizerBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.TwoPassStabilizer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public reset(): void;
					public static asIFrameSource(param0: org.bytedeco.javacpp.opencv_videostab.TwoPassStabilizer): org.bytedeco.javacpp.opencv_videostab.IFrameSource;
					public motionStabilizer(): org.bytedeco.javacpp.opencv_videostab.IMotionStabilizer;
					public mustEstimateTrimaRatio(): boolean;
					public setWobbleSuppressor(param0: org.bytedeco.javacpp.opencv_videostab.WobbleSuppressorBase): void;
					public wobbleSuppressor(): org.bytedeco.javacpp.opencv_videostab.WobbleSuppressorBase;
					public setEstimateTrimRatio(param0: boolean): void;
					public nextFrame(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public setMotionStabilizer(param0: org.bytedeco.javacpp.opencv_videostab.IMotionStabilizer): void;
					public constructor(param0: number);
					public asIFrameSource(): org.bytedeco.javacpp.opencv_videostab.IFrameSource;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.TwoPassStabilizer;
				}
				export class VideoFileSource extends org.bytedeco.javacpp.opencv_videostab.IFrameSource {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.VideoFileSource>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public height(): number;
					public reset(): void;
					public constructor(param0: org.bytedeco.javacpp.BytePointer, param1: boolean);
					public constructor(param0: string);
					public count(): number;
					public constructor(param0: org.bytedeco.javacpp.BytePointer);
					public nextFrame(): org.bytedeco.javacpp.opencv_core.Mat;
					public width(): number;
					public constructor();
					public fps(): number;
					public constructor(param0: string, param1: boolean);
					public constructor(param0: number);
				}
				export class WeightingDeblurer extends org.bytedeco.javacpp.opencv_videostab.DeblurerBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.WeightingDeblurer>;
					public deblur(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setSensitivity(param0: number): void;
					public constructor();
					public sensitivity(): number;
					public position(param0: number): org.bytedeco.javacpp.opencv_videostab.WeightingDeblurer;
					public constructor(param0: number);
				}
				export class WobbleSuppressorBase {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_videostab.WobbleSuppressorBase>;
					public motions2(): org.bytedeco.javacpp.opencv_core.MatVector;
					public setStabilizationMotions(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public motionEstimator(): org.bytedeco.javacpp.opencv_videostab.ImageMotionEstimatorBase;
					public setMotionEstimator(param0: org.bytedeco.javacpp.opencv_videostab.ImageMotionEstimatorBase): void;
					public frameCount(): number;
					public suppress(param0: number, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public motions(): org.bytedeco.javacpp.opencv_core.MatVector;
					public setFrameCount(param0: number): void;
					public setMotions(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public setMotions2(param0: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public stabilizationMotions(): org.bytedeco.javacpp.opencv_core.MatVector;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_xfeatures2d extends org.bytedeco.javacpp.presets.opencv_xfeatures2d {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d>;
				public static FASTForPointSet(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean, param4: number): void;
				public static matchGMS(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.DMatchVector): void;
				public static matchGMS(param0: org.bytedeco.javacpp.opencv_core.Size, param1: org.bytedeco.javacpp.opencv_core.Size, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.KeyPointVector, param4: org.bytedeco.javacpp.opencv_core.DMatchVector, param5: org.bytedeco.javacpp.opencv_core.DMatchVector, param6: boolean, param7: boolean, param8: number): void;
				public static FASTForPointSet(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean, param4: number): void;
				public static FASTForPointSet(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number): void;
				public static FASTForPointSet(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number, param3: boolean, param4: number): void;
				public static FASTForPointSet(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number): void;
				public static FASTForPointSet(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: number): void;
				public constructor();
			}
			export module opencv_xfeatures2d {
				export class AffineFeature2D extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.AffineFeature2D>;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public static create(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D): org.bytedeco.javacpp.opencv_xfeatures2d.AffineFeature2D;
					public detect(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: boolean): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: boolean): void;
					public static create(param0: org.bytedeco.javacpp.opencv_features2d.Feature2D, param1: org.bytedeco.javacpp.opencv_features2d.Feature2D): org.bytedeco.javacpp.opencv_xfeatures2d.AffineFeature2D;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: boolean): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: number);
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: boolean): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: boolean): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint): void;
					public detect(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector): void;
					public detectAndCompute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.KeyPointVector, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: boolean): void;
				}
				export class BoostDesc extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.BoostDesc>;
					public static BGM: number;
					public static BGM_HARD: number;
					public static BGM_BILINEAR: number;
					public static LBGM: number;
					public static BINBOOST_64: number;
					public static BINBOOST_128: number;
					public static BINBOOST_256: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.BoostDesc;
					public getUseScaleOrientation(): boolean;
					public getScaleFactor(): number;
					public constructor();
					public static create(param0: number, param1: boolean, param2: number): org.bytedeco.javacpp.opencv_xfeatures2d.BoostDesc;
					public setUseScaleOrientation(param0: boolean): void;
					public constructor(param0: number);
					public setScaleFactor(param0: number): void;
				}
				export class BriefDescriptorExtractor extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.BriefDescriptorExtractor>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public static create(param0: number, param1: boolean): org.bytedeco.javacpp.opencv_xfeatures2d.BriefDescriptorExtractor;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.BriefDescriptorExtractor;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_xfeatures2d.BriefDescriptorExtractor;
				}
				export class DAISY extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.DAISY>;
					public static NRM_NONE: number;
					public static NRM_PARTIAL: number;
					public static NRM_FULL: number;
					public static NRM_SIFT: number;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.Mat, param6: boolean, param7: boolean): org.bytedeco.javacpp.opencv_xfeatures2d.DAISY;
					public GetDescriptor(param0: number, param1: number, param2: number, param3: native.Array<number>, param4: native.Array<number>): boolean;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public GetUnnormalizedDescriptor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.FloatPointer, param4: org.bytedeco.javacpp.DoublePointer): boolean;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public GetUnnormalizedDescriptor(param0: number, param1: number, param2: number, param3: java.nio.FloatBuffer, param4: java.nio.DoubleBuffer): boolean;
					public GetDescriptor(param0: number, param1: number, param2: number, param3: native.Array<number>): void;
					public GetUnnormalizedDescriptor(param0: number, param1: number, param2: number, param3: native.Array<number>): void;
					public GetUnnormalizedDescriptor(param0: number, param1: number, param2: number, param3: native.Array<number>, param4: native.Array<number>): boolean;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.UMat, param6: boolean, param7: boolean): org.bytedeco.javacpp.opencv_xfeatures2d.DAISY;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: org.bytedeco.javacpp.opencv_core.GpuMat, param6: boolean, param7: boolean): org.bytedeco.javacpp.opencv_xfeatures2d.DAISY;
					public constructor();
					public compute(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.DAISY;
					public constructor(param0: number);
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public GetDescriptor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.FloatPointer, param4: org.bytedeco.javacpp.DoublePointer): boolean;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.GpuMatVector): void;
					public GetDescriptor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.FloatPointer): void;
					public GetDescriptor(param0: number, param1: number, param2: number, param3: java.nio.FloatBuffer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public GetUnnormalizedDescriptor(param0: number, param1: number, param2: number, param3: org.bytedeco.javacpp.FloatPointer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMatVector, param1: org.bytedeco.javacpp.opencv_core.KeyPointVectorVector, param2: org.bytedeco.javacpp.opencv_core.UMatVector): void;
					public GetDescriptor(param0: number, param1: number, param2: number, param3: java.nio.FloatBuffer, param4: java.nio.DoubleBuffer): boolean;
					public GetUnnormalizedDescriptor(param0: number, param1: number, param2: number, param3: java.nio.FloatBuffer): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.Rect, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.KeyPointVector, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public compute(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				}
				export class Elliptic_KeyPoint extends org.bytedeco.javacpp.opencv_core.KeyPoint {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public transf(): org.bytedeco.javacpp.FloatPointer;
					public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: number);
					public axes(): org.bytedeco.javacpp.opencv_core.Size2f;
					public axes(param0: org.bytedeco.javacpp.opencv_core.Size2f): org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint;
					public si(): number;
					public si(param0: number): org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint;
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: number, param2: number, param3: number, param4: number, param5: number);
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.Point2f, param1: number, param2: org.bytedeco.javacpp.opencv_core.Size, param3: number, param4: number);
					public constructor(param0: number, param1: number, param2: number);
					public constructor(param0: number);
					public transf(param0: org.bytedeco.javacpp.FloatPointer): org.bytedeco.javacpp.opencv_xfeatures2d.Elliptic_KeyPoint;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.KeyPoint;
				}
				export class FREAK extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.FREAK>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: boolean, param1: boolean, param2: number, param3: number, param4: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_xfeatures2d.FREAK;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public position(param0: number): org.bytedeco.javacpp.opencv_xfeatures2d.FREAK;
					public static NB_ORIENPAIRS(): number;
					public static create(param0: boolean, param1: boolean, param2: number, param3: number, param4: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_xfeatures2d.FREAK;
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.FREAK;
					public constructor();
					public static create(param0: boolean, param1: boolean, param2: number, param3: number, param4: native.Array<number>): org.bytedeco.javacpp.opencv_xfeatures2d.FREAK;
					public constructor(param0: number);
					public static NB_SCALES(): number;
					public static NB_PAIRS(): number;
				}
				export class HarrisLaplaceFeatureDetector extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.HarrisLaplaceFeatureDetector>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public position(param0: number): org.bytedeco.javacpp.opencv_xfeatures2d.HarrisLaplaceFeatureDetector;
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.HarrisLaplaceFeatureDetector;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public constructor(param0: number);
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_xfeatures2d.HarrisLaplaceFeatureDetector;
				}
				export class LATCH extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.LATCH>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_xfeatures2d.LATCH;
					public static create(param0: number, param1: boolean, param2: number, param3: number): org.bytedeco.javacpp.opencv_xfeatures2d.LATCH;
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.LATCH;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public constructor(param0: number);
				}
				export class LUCID extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.LUCID>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_xfeatures2d.LUCID;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public constructor(param0: number);
					public static create(param0: number, param1: number): org.bytedeco.javacpp.opencv_xfeatures2d.LUCID;
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.LUCID;
				}
				export class MSDDetector extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.MSDDetector>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.MSDDetector;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: boolean): org.bytedeco.javacpp.opencv_xfeatures2d.MSDDetector;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_xfeatures2d.MSDDetector;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public constructor(param0: number);
				}
				export class PCTSignatures extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.PCTSignatures>;
					public static L0_25: number;
					public static L0_5: number;
					public static L1: number;
					public static L2: number;
					public static L2SQUARED: number;
					public static L5: number;
					public static L_INFINITY: number;
					public static UNIFORM: number;
					public static REGULAR: number;
					public static NORMAL: number;
					public static MINUS: number;
					public static GAUSSIAN: number;
					public static HEURISTIC: number;
					public getWeightX(): number;
					public static drawSignature(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getIterationCount(): number;
					public setSamplingPoints(param0: org.bytedeco.javacpp.opencv_core.Point2fVector): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Point2fVector, param1: java.nio.IntBuffer): org.bytedeco.javacpp.opencv_xfeatures2d.PCTSignatures;
					public static generateInitPoints(param0: org.bytedeco.javacpp.opencv_core.Point2fVector, param1: number, param2: number): void;
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.PCTSignatures;
					public setWeights(param0: native.Array<number>): void;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Point2fVector, param1: org.bytedeco.javacpp.IntPointer): org.bytedeco.javacpp.opencv_xfeatures2d.PCTSignatures;
					public constructor();
					public getWeightA(): number;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Point2fVector, param1: number): org.bytedeco.javacpp.opencv_xfeatures2d.PCTSignatures;
					public getGrayscaleBits(): number;
					public setTranslations(param0: org.bytedeco.javacpp.FloatPointer): void;
					public setWeightContrast(param0: number): void;
					public setInitSeedIndexes(param0: native.Array<number>): void;
					public setWeights(param0: org.bytedeco.javacpp.FloatPointer): void;
					public static drawSignature(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setWeightL(param0: number): void;
					public static drawSignature(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
					public setWeightX(param0: number): void;
					public getInitSeedCount(): number;
					public setWeights(param0: java.nio.FloatBuffer): void;
					public setInitSeedIndexes(param0: org.bytedeco.javacpp.IntPointer): void;
					public getDistanceFunction(): number;
					public getInitSeedIndexes(): org.bytedeco.javacpp.IntPointer;
					public setWeightEntropy(param0: number): void;
					public computeSignature(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public static drawSignature(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
					public getWindowRadius(): number;
					public getClusterMinSize(): number;
					public getWeightEntropy(): number;
					public getJoiningDistance(): number;
					public setGrayscaleBits(param0: number): void;
					public static create(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_xfeatures2d.PCTSignatures;
					public setInitSeedIndexes(param0: java.nio.IntBuffer): void;
					public setJoiningDistance(param0: number): void;
					public setWindowRadius(param0: number): void;
					public static drawSignature(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
					public setWeightB(param0: number): void;
					public setIterationCount(param0: number): void;
					public setDropThreshold(param0: number): void;
					public setWeightY(param0: number): void;
					public getSampleCount(): number;
					public static create(param0: org.bytedeco.javacpp.opencv_core.Point2fVector, param1: native.Array<number>): org.bytedeco.javacpp.opencv_xfeatures2d.PCTSignatures;
					public getDropThreshold(): number;
					public setTranslations(param0: java.nio.FloatBuffer): void;
					public constructor(param0: number);
					public setMaxClustersCount(param0: number): void;
					public getWeightContrast(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getWeightL(): number;
					public setWeight(param0: number, param1: number): void;
					public setTranslation(param0: number, param1: number): void;
					public setClusterMinSize(param0: number): void;
					public getSamplingPoints(): org.bytedeco.javacpp.opencv_core.Point2fVector;
					public getWeightB(): number;
					public computeSignature(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setWeightA(param0: number): void;
					public getWeightY(): number;
					public setDistanceFunction(param0: number): void;
					public computeSignatures(param0: org.bytedeco.javacpp.opencv_core.MatVector, param1: org.bytedeco.javacpp.opencv_core.MatVector): void;
					public static drawSignature(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setTranslations(param0: native.Array<number>): void;
					public getMaxClustersCount(): number;
					public computeSignature(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
				export class PCTSignaturesSQFD extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.PCTSignaturesSQFD>;
					public computeQuadraticFormDistances(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: java.nio.FloatBuffer): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public computeQuadraticFormDistance(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
					public computeQuadraticFormDistances(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: org.bytedeco.javacpp.FloatPointer): void;
					public computeQuadraticFormDistance(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
					public computeQuadraticFormDistances(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.MatVector, param2: native.Array<number>): void;
					public constructor();
					public computeQuadraticFormDistance(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
					public static create(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_xfeatures2d.PCTSignaturesSQFD;
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.PCTSignaturesSQFD;
					public constructor(param0: number);
				}
				export class SIFT extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.SIFT>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_xfeatures2d.SIFT;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.SIFT;
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public position(param0: number): org.bytedeco.javacpp.opencv_xfeatures2d.SIFT;
					public constructor(param0: number);
				}
				export class SURF extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.SURF>;
					public setHessianThreshold(param0: number): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getHessianThreshold(): number;
					public static create(param0: number, param1: number, param2: number, param3: boolean, param4: boolean): org.bytedeco.javacpp.opencv_xfeatures2d.SURF;
					public getUpright(): boolean;
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.SURF;
					public getExtended(): boolean;
					public setNOctaves(param0: number): void;
					public setNOctaveLayers(param0: number): void;
					public getNOctaveLayers(): number;
					public constructor();
					public setExtended(param0: boolean): void;
					public constructor(param0: number);
					public getNOctaves(): number;
					public setUpright(param0: boolean): void;
				}
				export class StarDetector extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.StarDetector>;
					public position(param0: number): org.bytedeco.javacpp.opencv_features2d.Feature2D;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.StarDetector;
					public constructor();
					public position(param0: number): org.bytedeco.javacpp.opencv_core.Algorithm;
					public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_xfeatures2d.StarDetector;
					public constructor(param0: number);
					public position(param0: number): org.bytedeco.javacpp.opencv_xfeatures2d.StarDetector;
				}
				export class VGG extends org.bytedeco.javacpp.opencv_features2d.Feature2D {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xfeatures2d.VGG>;
					public static VGG_120: number;
					public static VGG_80: number;
					public static VGG_64: number;
					public static VGG_48: number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public static create(param0: number, param1: number, param2: boolean, param3: boolean, param4: number, param5: boolean): org.bytedeco.javacpp.opencv_xfeatures2d.VGG;
					public getSigma(): number;
					public setUseNormalizeImage(param0: boolean): void;
					public setScaleFactor(param0: number): void;
					public setSigma(param0: number): void;
					public getUseScaleOrientation(): boolean;
					public getScaleFactor(): number;
					public setUseNormalizeDescriptor(param0: boolean): void;
					public constructor();
					public getUseNormalizeImage(): boolean;
					public getUseNormalizeDescriptor(): boolean;
					public static create(): org.bytedeco.javacpp.opencv_xfeatures2d.VGG;
					public setUseScaleOrientation(param0: boolean): void;
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_ximgproc extends org.bytedeco.javacpp.presets.opencv_ximgproc {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc>;
				public static THINNING_ZHANGSUEN: number;
				public static THINNING_GUOHALL: number;
				public static BINARIZATION_NIBLACK: number;
				public static BINARIZATION_SAUVOLA: number;
				public static BINARIZATION_WOLF: number;
				public static BINARIZATION_NICK: number;
				public static DTF_NC: number;
				public static DTF_IC: number;
				public static DTF_RF: number;
				public static GUIDED_FILTER: number;
				public static AM_FILTER: number;
				public static ARO_0_45: number;
				public static ARO_45_90: number;
				public static ARO_90_135: number;
				public static ARO_315_0: number;
				public static ARO_315_45: number;
				public static ARO_45_135: number;
				public static ARO_315_135: number;
				public static ARO_CTR_HOR: number;
				public static ARO_CTR_VER: number;
				public static FHT_MIN: number;
				public static FHT_MAX: number;
				public static FHT_ADD: number;
				public static FHT_AVE: number;
				public static HDO_RAW: number;
				public static HDO_DESKEW: number;
				public static RO_STRICT: number;
				public static RO_IGNORE_BORDERS: number;
				public static SLIC: number;
				public static SLICO: number;
				public static MSLIC: number;
				public static thinning(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static niBlackThreshold(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static getDisparityVis(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static anisotropicDiffusion(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static createSuperpixelLSC(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelLSC;
				public static l0Smooth(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static dtFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static guidedFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number): void;
				public static createDTFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_ximgproc.DTFilter;
				public static createSuperpixelLSC(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelLSC;
				public static createDisparityWLSFilterGeneric(param0: boolean): org.bytedeco.javacpp.opencv_ximgproc.DisparityWLSFilter;
				public static createDTFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.DTFilter;
				public static readGT(param0: string, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static covarianceEstimation(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static fastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static createGraphSegmentation(param0: number, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.GraphSegmentation;
				public static readGT(param0: string, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static rollingGuidanceFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static createRightMatcher(param0: org.bytedeco.javacpp.opencv_calib3d.StereoMatcher): org.bytedeco.javacpp.opencv_calib3d.StereoMatcher;
				public static readGT(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.Mat): number;
				public static createSuperpixelSLIC(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelSLIC;
				public static amFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static jointBilateralFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number): void;
				public static createDisparityWLSFilter(param0: org.bytedeco.javacpp.opencv_calib3d.StereoMatcher): org.bytedeco.javacpp.opencv_ximgproc.DisparityWLSFilter;
				public static thinning(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static createSelectiveSearchSegmentationStrategyColor(): org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyColor;
				public static HoughPoint2Line(param0: org.bytedeco.javacpp.opencv_core.Point, param1: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.Scalar4i;
				public static guidedFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number): void;
				public static fastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number, param6: number): void;
				public static computeBadPixelPercent(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Rect): number;
				public static readGT(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static createStructuredEdgeDetection(param0: string, param1: org.bytedeco.javacpp.opencv_ximgproc.RFFeatureGetter): org.bytedeco.javacpp.opencv_ximgproc.StructuredEdgeDetection;
				public static createGuidedFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.GuidedFilter;
				public static jointBilateralFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number, param6: number): void;
				public static HoughPoint2Line(param0: org.bytedeco.javacpp.opencv_core.Point, param1: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_core.Scalar4i;
				public static HoughPoint2Line(param0: org.bytedeco.javacpp.opencv_core.Point, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.Scalar4i;
				public static computeMSE(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Rect): number;
				public static bilateralTextureFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static guidedFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number): void;
				public static dtFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static dtFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number, param6: number): void;
				public static rollingGuidanceFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static createFastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_ximgproc.FastGlobalSmootherFilter;
				public static HoughPoint2Line(param0: org.bytedeco.javacpp.opencv_core.Point, param1: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_core.Scalar4i;
				public static createFastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.bytedeco.javacpp.opencv_ximgproc.FastBilateralSolverFilter;
				public static createFastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.bytedeco.javacpp.opencv_ximgproc.FastBilateralSolverFilter;
				public static getDisparityVis(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static createSelectiveSearchSegmentationStrategyMultiple(param0: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy, param1: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy): org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyMultiple;
				public static niBlackThreshold(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static createAMFilter(param0: number, param1: number, param2: boolean): org.bytedeco.javacpp.opencv_ximgproc.AdaptiveManifoldFilter;
				public static createStructuredEdgeDetection(param0: string): org.bytedeco.javacpp.opencv_ximgproc.StructuredEdgeDetection;
				public static bilateralTextureFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static dtFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number, param6: number): void;
				public static createFastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_ximgproc.FastBilateralSolverFilter;
				public static createFastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.FastGlobalSmootherFilter;
				public static FastHoughTransform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static dtFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static amFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: boolean): void;
				public static dtFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number, param6: number): void;
				public static amFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: boolean): void;
				public static createSelectiveSearchSegmentationStrategyMultiple(param0: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy): org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyMultiple;
				public static createSuperpixelSLIC(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelSLIC;
				public static createGraphSegmentation(): org.bytedeco.javacpp.opencv_ximgproc.GraphSegmentation;
				public static createSuperpixelLSC(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelLSC;
				public static rollingGuidanceFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static createEdgeAwareInterpolator(): org.bytedeco.javacpp.opencv_ximgproc.EdgeAwareInterpolator;
				public static createStructuredEdgeDetection(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_ximgproc.RFFeatureGetter): org.bytedeco.javacpp.opencv_ximgproc.StructuredEdgeDetection;
				public static createSuperpixelSLIC(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelSLIC;
				public static amFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static fastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static niBlackThreshold(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static createDTFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.DTFilter;
				public static createFastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_ximgproc.FastGlobalSmootherFilter;
				public static HoughPoint2Line(param0: org.bytedeco.javacpp.opencv_core.Point, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.Scalar4i;
				public static l0Smooth(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static FastHoughTransform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static fastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number, param6: number): void;
				public static FastHoughTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number): void;
				public static getDisparityVis(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				public static createSelectiveSearchSegmentationStrategyTexture(): org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyTexture;
				public static getDisparityVis(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static createDTFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_ximgproc.DTFilter;
				public static computeBadPixelPercent(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Rect): number;
				public static guidedFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static createSuperpixelSLIC(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelSLIC;
				public static fastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static createSuperpixelSEEDS(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelSEEDS;
				public static createSuperpixelSLIC(param0: org.bytedeco.javacpp.opencv_core.GpuMat): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelSLIC;
				public static createFastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.FastGlobalSmootherFilter;
				public static createGuidedFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.GuidedFilter;
				public static fastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static createSelectiveSearchSegmentationStrategySize(): org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategySize;
				public constructor();
				public static l0Smooth(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static rollingGuidanceFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static thinning(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static createDTFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.DTFilter;
				public static fastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static FastHoughTransform(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number): void;
				public static guidedFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static readGT(param0: org.bytedeco.javacpp.BytePointer, param1: org.bytedeco.javacpp.opencv_core.GpuMat): number;
				public static computeMSE(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Rect): number;
				public static createFastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_ximgproc.FastBilateralSolverFilter;
				public static createFastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_ximgproc.FastBilateralSolverFilter;
				public static createStructuredEdgeDetection(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_ximgproc.StructuredEdgeDetection;
				public static createSelectiveSearchSegmentationStrategyMultiple(): org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyMultiple;
				public static FastHoughTransform(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
				public static l0Smooth(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static createSelectiveSearchSegmentationStrategyMultiple(param0: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy, param1: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy, param2: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy): org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyMultiple;
				public static createSuperpixelLSC(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelLSC;
				public static bilateralTextureFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number): void;
				public static createAMFilter(param0: number, param1: number): org.bytedeco.javacpp.opencv_ximgproc.AdaptiveManifoldFilter;
				public static computeBadPixelPercent(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.Rect, param3: number): number;
				public static createSuperpixelSLIC(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelSLIC;
				public static covarianceEstimation(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static fastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number, param6: number): void;
				public static bilateralTextureFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static createSelectiveSearchSegmentationStrategyFill(): org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyFill;
				public static jointBilateralFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number, param6: number): void;
				public static computeBadPixelPercent(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Rect): number;
				public static FastHoughTransform(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static createFastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.bytedeco.javacpp.opencv_ximgproc.FastBilateralSolverFilter;
				public static jointBilateralFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number): void;
				public static HoughPoint2Line(param0: org.bytedeco.javacpp.opencv_core.Point, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_core.Scalar4i;
				public static thinning(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static createDTFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_ximgproc.DTFilter;
				public static amFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static getDisparityVis(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static niBlackThreshold(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number): void;
				public static l0Smooth(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static niBlackThreshold(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number): void;
				public static getDisparityVis(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static fastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number): void;
				public static fastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number): void;
				public static covarianceEstimation(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static fastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static anisotropicDiffusion(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static createFastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.FastGlobalSmootherFilter;
				public static createSelectiveSearchSegmentationStrategyMultiple(param0: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy, param1: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy, param2: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy, param3: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy): org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyMultiple;
				public static createSuperpixelLSC(param0: org.bytedeco.javacpp.opencv_core.UMat): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelLSC;
				public static readGT(param0: string, param1: org.bytedeco.javacpp.opencv_core.UMat): number;
				public static bilateralTextureFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number): void;
				public static niBlackThreshold(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static rollingGuidanceFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static createSelectiveSearchSegmentation(): org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentation;
				public static createGuidedFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number, param2: number): org.bytedeco.javacpp.opencv_ximgproc.GuidedFilter;
				public static bilateralTextureFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static createRFFeatureGetter(): org.bytedeco.javacpp.opencv_ximgproc.RFFeatureGetter;
				public static jointBilateralFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number): void;
				public static l0Smooth(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static thinning(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static computeBadPixelPercent(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Rect, param3: number): number;
				public static amFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: boolean): void;
				public static jointBilateralFilter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number, param6: number): void;
				public static createSuperpixelLSC(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelLSC;
				public static anisotropicDiffusion(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static rollingGuidanceFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static thinning(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static computeBadPixelPercent(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.Rect, param3: number): number;
				public static computeMSE(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Rect): number;
				public static guidedFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number): void;
				public static createFastGlobalSmootherFilter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_ximgproc.FastGlobalSmootherFilter;
				public static fastBilateralSolverFilter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static createSuperpixelSEEDS(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: boolean): org.bytedeco.javacpp.opencv_ximgproc.SuperpixelSEEDS;
			}
			export module opencv_ximgproc {
				export class AdaptiveManifoldFilter extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.AdaptiveManifoldFilter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setSigmaS(param0: number): void;
					public setSigmaR(param0: number): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getTreeHeight(): number;
					public setTreeHeight(param0: number): void;
					public getAdjustOutliers(): boolean;
					public getUseRNG(): boolean;
					public getSigmaR(): number;
					public filter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public static create(): org.bytedeco.javacpp.opencv_ximgproc.AdaptiveManifoldFilter;
					public setUseRNG(param0: boolean): void;
					public getPCAIterations(): number;
					public filter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public filter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getSigmaS(): number;
					public filter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setPCAIterations(param0: number): void;
					public setAdjustOutliers(param0: boolean): void;
					public collectGarbage(): void;
					public constructor(param0: number);
				}
				export class DTFilter extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.DTFilter>;
					public filter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public filter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
					public filter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				}
				export class DisparityFilter extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.DisparityFilter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public filter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Rect, param5: org.bytedeco.javacpp.opencv_core.Mat): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.Rect, param5: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor();
					public filter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: number);
					public filter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.Rect, param5: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
				export class DisparityWLSFilter extends org.bytedeco.javacpp.opencv_ximgproc.DisparityFilter {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.DisparityWLSFilter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setLambda(param0: number): void;
					public setSigmaColor(param0: number): void;
					public getLambda(): number;
					public getLRCthresh(): number;
					public getDepthDiscontinuityRadius(): number;
					public setDepthDiscontinuityRadius(param0: number): void;
					public getConfidenceMap(): org.bytedeco.javacpp.opencv_core.Mat;
					public constructor();
					public getROI(): org.bytedeco.javacpp.opencv_core.Rect;
					public getSigmaColor(): number;
					public constructor(param0: number);
					public setLRCthresh(param0: number): void;
				}
				export class EdgeAwareInterpolator extends org.bytedeco.javacpp.opencv_ximgproc.SparseMatchInterpolator {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.EdgeAwareInterpolator>;
					public setUsePostProcessing(param0: boolean): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getUsePostProcessing(): boolean;
					public getFGSLambda(): number;
					public setLambda(param0: number): void;
					public setFGSLambda(param0: number): void;
					public setK(param0: number): void;
					public getSigma(): number;
					public getLambda(): number;
					public getFGSSigma(): number;
					public getK(): number;
					public setSigma(param0: number): void;
					public constructor();
					public setFGSSigma(param0: number): void;
					public constructor(param0: number);
				}
				export class FastBilateralSolverFilter extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.FastBilateralSolverFilter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public filter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: number);
				}
				export class FastGlobalSmootherFilter extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.FastGlobalSmootherFilter>;
					public filter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public filter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class GraphSegmentation extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.GraphSegmentation>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setSigma(param0: number): void;
					public getK(): number;
					public getMinSize(): number;
					public constructor();
					public setMinSize(param0: number): void;
					public processImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getSigma(): number;
					public setK(param0: number): void;
					public processImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
					public processImage(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				}
				export class GuidedFilter extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.GuidedFilter>;
					public filter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public filter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number): void;
					public filter(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
					public filter(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number): void;
				}
				export class RFFeatureGetter extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.RFFeatureGetter>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getFeatures(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
					public constructor();
					public constructor(param0: number);
				}
				export class SelectiveSearchSegmentation extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentation>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public switchToSingleStrategy(param0: number, param1: number): void;
					public clearGraphSegmentations(): void;
					public addStrategy(param0: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy): void;
					public switchToSingleStrategy(): void;
					public switchToSelectiveSearchQuality(): void;
					public clearImages(): void;
					public setBaseImage(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public addImage(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public setBaseImage(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public clearStrategies(): void;
					public addGraphSegmentation(param0: org.bytedeco.javacpp.opencv_ximgproc.GraphSegmentation): void;
					public switchToSelectiveSearchFast(param0: number, param1: number, param2: number): void;
					public switchToSelectiveSearchQuality(param0: number, param1: number, param2: number): void;
					public constructor();
					public switchToSelectiveSearchFast(): void;
					public addImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public addImage(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: number);
					public setBaseImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public process(param0: org.bytedeco.javacpp.opencv_core.RectVector): void;
				}
				export class SelectiveSearchSegmentationStrategy extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy>;
					public setImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setImage(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
					public setImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor();
					public setImage(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public merge(param0: number, param1: number): void;
					public setImage(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number): void;
					public constructor(param0: number);
					public setImage(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number): void;
					public get(param0: number, param1: number): number;
				}
				export class SelectiveSearchSegmentationStrategyColor extends org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyColor>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: number);
				}
				export class SelectiveSearchSegmentationStrategyFill extends org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyFill>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: number);
				}
				export class SelectiveSearchSegmentationStrategyMultiple extends org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyMultiple>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public addStrategy(param0: org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy, param1: number): void;
					public clearStrategies(): void;
					public constructor(param0: number);
				}
				export class SelectiveSearchSegmentationStrategySize extends org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategySize>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: number);
				}
				export class SelectiveSearchSegmentationStrategyTexture extends org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategy {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.SelectiveSearchSegmentationStrategyTexture>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public constructor(param0: number);
				}
				export class SparseMatchInterpolator extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.SparseMatchInterpolator>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public interpolate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: org.bytedeco.javacpp.opencv_core.UMat, param4: org.bytedeco.javacpp.opencv_core.UMat): void;
					public interpolate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: org.bytedeco.javacpp.opencv_core.GpuMat, param4: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor();
					public interpolate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: org.bytedeco.javacpp.opencv_core.Mat, param4: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class StructuredEdgeDetection extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.StructuredEdgeDetection>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public detectEdges(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public edgesNms(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number, param6: boolean): void;
					public edgesNms(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number, param6: boolean): void;
					public edgesNms(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public edgesNms(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
					public detectEdges(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public computeOrientation(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public computeOrientation(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public edgesNms(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number, param6: boolean): void;
					public constructor();
					public edgesNms(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
					public detectEdges(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public computeOrientation(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor(param0: number);
				}
				export class SuperpixelLSC extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.SuperpixelLSC>;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public enforceLabelConnectivity(param0: number): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public iterate(param0: number): void;
					public getLabels(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public enforceLabelConnectivity(): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean): void;
					public constructor();
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public iterate(): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getNumberOfSuperpixels(): number;
					public getLabels(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getLabels(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: number);
				}
				export class SuperpixelSEEDS extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.SuperpixelSEEDS>;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public iterate(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: number): void;
					public iterate(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public iterate(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: number): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getLabels(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public iterate(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: number): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean): void;
					public iterate(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public iterate(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor();
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getNumberOfSuperpixels(): number;
					public getLabels(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getLabels(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: number);
				}
				export class SuperpixelSLIC extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_ximgproc.SuperpixelSLIC>;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: boolean): void;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public enforceLabelConnectivity(param0: number): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public iterate(param0: number): void;
					public getLabels(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public enforceLabelConnectivity(): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: boolean): void;
					public constructor();
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.UMat): void;
					public iterate(): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: boolean): void;
					public getLabelContourMask(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public getNumberOfSuperpixels(): number;
					public getLabels(param0: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getLabels(param0: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export class opencv_xphoto extends org.bytedeco.javacpp.presets.opencv_xphoto {
				public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xphoto>;
				public static INPAINT_SHIFTMAP: number;
				public static HAAR: number;
				public static BM3D_STEPALL: number;
				public static BM3D_STEP1: number;
				public static BM3D_STEP2: number;
				public static applyChannelGains(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number): void;
				public static createTonemapDurand(param0: number, param1: number, param2: number, param3: number, param4: number): org.bytedeco.javacpp.opencv_xphoto.TonemapDurand;
				public static oilPainting(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static createLearningBasedWB(param0: string): org.bytedeco.javacpp.opencv_xphoto.LearningBasedWB;
				public constructor();
				public static createLearningBasedWB(param0: org.bytedeco.javacpp.BytePointer): org.bytedeco.javacpp.opencv_xphoto.LearningBasedWB;
				public static createGrayworldWB(): org.bytedeco.javacpp.opencv_xphoto.GrayworldWB;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static oilPainting(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number): void;
				public static createSimpleWB(): org.bytedeco.javacpp.opencv_xphoto.SimpleWB;
				public static dctDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number): void;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat): void;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static oilPainting(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static oilPainting(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number): void;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number): void;
				public static applyChannelGains(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: org.bytedeco.javacpp.opencv_core.UMat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static oilPainting(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number): void;
				public static applyChannelGains(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat, param2: number, param3: number, param4: number): void;
				public static createLearningBasedWB(): org.bytedeco.javacpp.opencv_xphoto.LearningBasedWB;
				public static bm3dDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number): void;
				public static createTonemapDurand(): org.bytedeco.javacpp.opencv_xphoto.TonemapDurand;
				public static inpaint(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: org.bytedeco.javacpp.opencv_core.Mat, param3: number): void;
				public static dctDenoising(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat, param2: number): void;
				public static oilPainting(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat, param2: number, param3: number, param4: number): void;
			}
			export module opencv_xphoto {
				export class GrayworldWB extends org.bytedeco.javacpp.opencv_xphoto.WhiteBalancer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xphoto.GrayworldWB>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public constructor();
					public setSaturationThreshold(param0: number): void;
					public constructor(param0: number);
					public getSaturationThreshold(): number;
				}
				export class LearningBasedWB extends org.bytedeco.javacpp.opencv_xphoto.WhiteBalancer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xphoto.LearningBasedWB>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public extractSimpleFeatures(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public getRangeMaxVal(): number;
					public constructor();
					public extractSimpleFeatures(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public setRangeMaxVal(param0: number): void;
					public getHistBinNum(): number;
					public setSaturationThreshold(param0: number): void;
					public extractSimpleFeatures(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public setHistBinNum(param0: number): void;
					public constructor(param0: number);
					public getSaturationThreshold(): number;
				}
				export class SimpleWB extends org.bytedeco.javacpp.opencv_xphoto.WhiteBalancer {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xphoto.SimpleWB>;
					public getInputMax(): number;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public getOutputMin(): number;
					public getInputMin(): number;
					public setP(param0: number): void;
					public getOutputMax(): number;
					public getP(): number;
					public setInputMin(param0: number): void;
					public setOutputMax(param0: number): void;
					public constructor();
					public setInputMax(param0: number): void;
					public constructor(param0: number);
					public setOutputMin(param0: number): void;
				}
				export class TonemapDurand extends org.bytedeco.javacpp.opencv_photo.Tonemap {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xphoto.TonemapDurand>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public setSaturation(param0: number): void;
					public getSigmaSpace(): number;
					public constructor();
					public getContrast(): number;
					public setSigmaSpace(param0: number): void;
					public setSigmaColor(param0: number): void;
					public getSaturation(): number;
					public setContrast(param0: number): void;
					public getSigmaColor(): number;
					public constructor(param0: number);
				}
				export class WhiteBalancer extends org.bytedeco.javacpp.opencv_core.Algorithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.opencv_xphoto.WhiteBalancer>;
					public constructor(param0: org.bytedeco.javacpp.Pointer);
					public balanceWhite(param0: org.bytedeco.javacpp.opencv_core.GpuMat, param1: org.bytedeco.javacpp.opencv_core.GpuMat): void;
					public balanceWhite(param0: org.bytedeco.javacpp.opencv_core.Mat, param1: org.bytedeco.javacpp.opencv_core.Mat): void;
					public constructor();
					public balanceWhite(param0: org.bytedeco.javacpp.opencv_core.UMat, param1: org.bytedeco.javacpp.opencv_core.UMat): void;
					public constructor(param0: number);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_aruco {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_aruco>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_bgsegm {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_bgsegm>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_bioinspired {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_bioinspired>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_calib3d {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_calib3d>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_core {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_core>;
					public init(param0: org.bytedeco.javacpp.ClassProperties): void;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
				export module opencv_core {
					export class Functor {
						public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_core.Functor>;
						public constructor();
						public constructor(param0: org.bytedeco.javacpp.Pointer);
						public call(param0: org.bytedeco.javacpp.Pointer): void;
					}
					export class Ptr {
						public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_core.Ptr>;
						/**
						 * Constructs a new instance of the org.bytedeco.javacpp.presets.opencv_core$Ptr interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
							value(): string;
						});
						public constructor();
						public value(): string;
					}
					export class Str {
						public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_core.Str>;
						/**
						 * Constructs a new instance of the org.bytedeco.javacpp.presets.opencv_core$Str interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
						 */
						public constructor(implementation: {
						});
						public constructor();
					}
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_cudaarithm {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_cudaarithm>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_cudafilters {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_cudafilters>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_cudaimgproc {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_cudaimgproc>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_cudaobjdetect {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_cudaobjdetect>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_cudaoptflow {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_cudaoptflow>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_cudawarping {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_cudawarping>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_dnn {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_dnn>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_face {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_face>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_features2d {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_features2d>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_flann {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_flann>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_highgui {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_highgui>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_img_hash {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_img_hash>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_imgcodecs {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_imgcodecs>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_imgproc {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_imgproc>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_ml {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_ml>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_objdetect {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_objdetect>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_optflow {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_optflow>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_phase_unwrapping {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_phase_unwrapping>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_photo {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_photo>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_plot {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_plot>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_saliency {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_saliency>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_shape {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_shape>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_stitching {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_stitching>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_structured_light {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_structured_light>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_superres {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_superres>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_text {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_text>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_tracking {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_tracking>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_video {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_video>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_videoio {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_videoio>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_videostab {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_videostab>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_xfeatures2d {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_xfeatures2d>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_ximgproc {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_ximgproc>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacpp {
			export module presets {
				export class opencv_xphoto {
					public static class: java.lang.Class<org.bytedeco.javacpp.presets.opencv_xphoto>;
					public constructor();
					public map(param0: org.bytedeco.javacpp.tools.InfoMap): void;
				}
			}
		}
	}
}

declare module org {
	export module opencv {
		export module android {
			export abstract class BaseLoaderCallback extends org.opencv.android.LoaderCallbackInterface {
				public static class: java.lang.Class<org.opencv.android.BaseLoaderCallback>;
				public mAppContext: globalAndroid.content.Context;
				public constructor(param0: globalAndroid.content.Context);
				public onPackageInstall(param0: number, param1: org.opencv.android.InstallCallbackInterface): void;
				public onManagerConnected(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module android {
			export class FpsMeter {
				public static class: java.lang.Class<org.opencv.android.FpsMeter>;
				public measure(): void;
				public draw(param0: globalAndroid.graphics.Canvas, param1: number, param2: number): void;
				public setResolution(param0: number, param1: number): void;
				public constructor();
				public init(): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module android {
			export class InstallCallbackInterface {
				public static class: java.lang.Class<org.opencv.android.InstallCallbackInterface>;
				/**
				 * Constructs a new instance of the org.opencv.android.InstallCallbackInterface interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					getPackageName(): string;
					install(): void;
					cancel(): void;
					wait_install(): void;
				});
				public constructor();
				public static NEW_INSTALLATION: number;
				public static INSTALLATION_PROGRESS: number;
				public wait_install(): void;
				public install(): void;
				public getPackageName(): string;
				public cancel(): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module android {
			export class LoaderCallbackInterface {
				public static class: java.lang.Class<org.opencv.android.LoaderCallbackInterface>;
				/**
				 * Constructs a new instance of the org.opencv.android.LoaderCallbackInterface interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					onManagerConnected(param0: number): void;
					onPackageInstall(param0: number, param1: org.opencv.android.InstallCallbackInterface): void;
				});
				public constructor();
				public static MARKET_ERROR: number;
				public static INCOMPATIBLE_MANAGER_VERSION: number;
				public static INIT_FAILED: number;
				public static SUCCESS: number;
				public static INSTALL_CANCELED: number;
				public onPackageInstall(param0: number, param1: org.opencv.android.InstallCallbackInterface): void;
				public onManagerConnected(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module android {
			export class StaticHelper {
				public static class: java.lang.Class<org.opencv.android.StaticHelper>;
				public static initOpenCV(param0: boolean): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module android {
			export class Utils {
				public static class: java.lang.Class<org.opencv.android.Utils>;
				public static loadResource(param0: globalAndroid.content.Context, param1: number, param2: number): org.opencv.core.Mat;
				public static bitmapToMat(param0: globalAndroid.graphics.Bitmap, param1: org.opencv.core.Mat, param2: boolean): void;
				public static bitmapToMat(param0: globalAndroid.graphics.Bitmap, param1: org.opencv.core.Mat): void;
				public static exportResource(param0: globalAndroid.content.Context, param1: number, param2: string): string;
				public static matToBitmap(param0: org.opencv.core.Mat, param1: globalAndroid.graphics.Bitmap, param2: boolean): void;
				public static exportResource(param0: globalAndroid.content.Context, param1: number): string;
				public constructor();
				public static loadResource(param0: globalAndroid.content.Context, param1: number): org.opencv.core.Mat;
				public static matToBitmap(param0: org.opencv.core.Mat, param1: globalAndroid.graphics.Bitmap): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module aruco {
			export class Aruco {
				public static class: java.lang.Class<org.opencv.aruco.Aruco>;
				public static CORNER_REFINE_NONE: number;
				public static CORNER_REFINE_SUBPIX: number;
				public static CORNER_REFINE_CONTOUR: number;
				public static CORNER_REFINE_APRILTAG: number;
				public static DICT_4X4_50: number;
				public static DICT_4X4_100: number;
				public static DICT_4X4_250: number;
				public static DICT_4X4_1000: number;
				public static DICT_5X5_50: number;
				public static DICT_5X5_100: number;
				public static DICT_5X5_250: number;
				public static DICT_5X5_1000: number;
				public static DICT_6X6_50: number;
				public static DICT_6X6_100: number;
				public static DICT_6X6_250: number;
				public static DICT_6X6_1000: number;
				public static DICT_7X7_50: number;
				public static DICT_7X7_100: number;
				public static DICT_7X7_250: number;
				public static DICT_7X7_1000: number;
				public static DICT_ARUCO_ORIGINAL: number;
				public static DICT_APRILTAG_16h5: number;
				public static DICT_APRILTAG_25h9: number;
				public static DICT_APRILTAG_36h10: number;
				public static DICT_APRILTAG_36h11: number;
				public static interpolateCornersCharuco(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.CharucoBoard, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): number;
				public static drawDetectedMarkers(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>): void;
				public static calibrateCameraCharuco(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.aruco.CharucoBoard, param3: org.opencv.core.Size, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: number, param9: org.opencv.core.TermCriteria): number;
				public static drawDetectedMarkers(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat, param3: org.opencv.core.Scalar): void;
				public static estimatePoseBoard(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.aruco.Board, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: boolean): number;
				public constructor();
				public static refineDetectedMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Board, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: java.util.List<org.opencv.core.Mat>, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: number, param8: number, param9: boolean, param10: org.opencv.core.Mat, param11: org.opencv.aruco.DetectorParameters): void;
				public static calibrateCameraCharuco(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.aruco.CharucoBoard, param3: org.opencv.core.Size, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): number;
				public static estimatePoseBoard(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.aruco.Board, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): number;
				public static calibrateCameraArucoExtended(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.Board, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: java.util.List<org.opencv.core.Mat>, param8: java.util.List<org.opencv.core.Mat>, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number): number;
				public static detectCharucoDiamond(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat, param3: number, param4: java.util.List<org.opencv.core.Mat>, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat): void;
				public static detectMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Dictionary, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.aruco.DetectorParameters, param5: java.util.List<org.opencv.core.Mat>): void;
				public static getPredefinedDictionary(param0: number): org.opencv.aruco.Dictionary;
				public static detectMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Dictionary, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat): void;
				public static drawDetectedDiamonds(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat): void;
				public static estimatePoseCharucoBoard(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.aruco.CharucoBoard, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: boolean): boolean;
				public static estimatePoseSingleMarkers(param0: java.util.List<org.opencv.core.Mat>, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): void;
				public static refineDetectedMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Board, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: java.util.List<org.opencv.core.Mat>, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: number, param8: number): void;
				public static drawAxis(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: number): void;
				public static drawDetectedDiamonds(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>): void;
				public static drawDetectedCornersCharuco(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Scalar): void;
				public static custom_dictionary_from(param0: number, param1: number, param2: org.opencv.aruco.Dictionary): org.opencv.aruco.Dictionary;
				public static custom_dictionary(param0: number, param1: number): org.opencv.aruco.Dictionary;
				public static detectCharucoDiamond(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat, param3: number, param4: java.util.List<org.opencv.core.Mat>, param5: org.opencv.core.Mat): void;
				public static drawMarker(param0: org.opencv.aruco.Dictionary, param1: number, param2: number, param3: org.opencv.core.Mat): void;
				public static refineDetectedMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Board, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: java.util.List<org.opencv.core.Mat>): void;
				public static interpolateCornersCharuco(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.CharucoBoard, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: number): number;
				public static interpolateCornersCharuco(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.CharucoBoard, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat): number;
				public static refineDetectedMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Board, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: java.util.List<org.opencv.core.Mat>, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: number, param8: number, param9: boolean, param10: org.opencv.core.Mat): void;
				public static custom_dictionary(param0: number, param1: number, param2: number): org.opencv.aruco.Dictionary;
				public static calibrateCameraArucoExtended(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.Board, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: java.util.List<org.opencv.core.Mat>, param8: java.util.List<org.opencv.core.Mat>, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat): number;
				public static calibrateCameraCharuco(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.aruco.CharucoBoard, param3: org.opencv.core.Size, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>): number;
				public static calibrateCameraAruco(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.Board, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: java.util.List<org.opencv.core.Mat>, param8: java.util.List<org.opencv.core.Mat>, param9: number): number;
				public static drawMarker(param0: org.opencv.aruco.Dictionary, param1: number, param2: number, param3: org.opencv.core.Mat, param4: number): void;
				public static estimatePoseCharucoBoard(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.aruco.CharucoBoard, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): boolean;
				public static calibrateCameraAruco(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.Board, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: java.util.List<org.opencv.core.Mat>): number;
				public static drawDetectedCornersCharuco(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static drawDetectedMarkers(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat): void;
				public static drawPlanarBoard(param0: org.opencv.aruco.Board, param1: org.opencv.core.Size, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static custom_dictionary_from(param0: number, param1: number, param2: org.opencv.aruco.Dictionary, param3: number): org.opencv.aruco.Dictionary;
				public static detectMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Dictionary, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.aruco.DetectorParameters): void;
				public static calibrateCameraAruco(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.Board, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: java.util.List<org.opencv.core.Mat>, param8: java.util.List<org.opencv.core.Mat>, param9: number, param10: org.opencv.core.TermCriteria): number;
				public static detectMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Dictionary, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.aruco.DetectorParameters, param5: java.util.List<org.opencv.core.Mat>, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat): void;
				public static refineDetectedMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Board, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: java.util.List<org.opencv.core.Mat>, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): void;
				public static calibrateCameraCharuco(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.aruco.CharucoBoard, param3: org.opencv.core.Size, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>): number;
				public static drawPlanarBoard(param0: org.opencv.aruco.Board, param1: org.opencv.core.Size, param2: org.opencv.core.Mat, param3: number): void;
				public static refineDetectedMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Board, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: java.util.List<org.opencv.core.Mat>, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: number, param8: number, param9: boolean): void;
				public static calibrateCameraAruco(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.Board, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): number;
				public static calibrateCameraCharucoExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.aruco.CharucoBoard, param3: org.opencv.core.Size, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: number, param12: org.opencv.core.TermCriteria): number;
				public static interpolateCornersCharuco(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.CharucoBoard, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): number;
				public static detectMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Dictionary, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.aruco.DetectorParameters, param5: java.util.List<org.opencv.core.Mat>, param6: org.opencv.core.Mat): void;
				public static drawDetectedDiamonds(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat, param3: org.opencv.core.Scalar): void;
				public static calibrateCameraCharuco(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.aruco.CharucoBoard, param3: org.opencv.core.Size, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: number): number;
				public static estimatePoseSingleMarkers(param0: java.util.List<org.opencv.core.Mat>, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): void;
				public static calibrateCameraArucoExtended(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.Board, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: java.util.List<org.opencv.core.Mat>, param8: java.util.List<org.opencv.core.Mat>, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number, param13: org.opencv.core.TermCriteria): number;
				public static detectCharucoDiamond(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat, param3: number, param4: java.util.List<org.opencv.core.Mat>, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): void;
				public static calibrateCameraCharucoExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.aruco.CharucoBoard, param3: org.opencv.core.Size, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat): number;
				public static calibrateCameraAruco(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.aruco.Board, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: java.util.List<org.opencv.core.Mat>, param8: java.util.List<org.opencv.core.Mat>): number;
				public static refineDetectedMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Board, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: java.util.List<org.opencv.core.Mat>, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: number): void;
				public static refineDetectedMarkers(param0: org.opencv.core.Mat, param1: org.opencv.aruco.Board, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: java.util.List<org.opencv.core.Mat>, param5: org.opencv.core.Mat): void;
				public static getBoardObjectAndImagePoints(param0: org.opencv.aruco.Board, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static drawDetectedCornersCharuco(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static calibrateCameraCharucoExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.aruco.CharucoBoard, param3: org.opencv.core.Size, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: number): number;
				public static drawPlanarBoard(param0: org.opencv.aruco.Board, param1: org.opencv.core.Size, param2: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module aruco {
			export class Board {
				public static class: java.lang.Class<org.opencv.aruco.Board>;
				public nativeObj: number;
				public static create(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.aruco.Dictionary, param2: org.opencv.core.Mat): org.opencv.aruco.Board;
				public get_dictionary(): org.opencv.aruco.Dictionary;
				public get_objPoints(): java.util.List<org.opencv.core.MatOfPoint3f>;
				public static __fromPtr__(param0: number): org.opencv.aruco.Board;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
				public get_ids(): org.opencv.core.MatOfInt;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module aruco {
			export class CharucoBoard extends org.opencv.aruco.Board {
				public static class: java.lang.Class<org.opencv.aruco.CharucoBoard>;
				public draw(param0: org.opencv.core.Size, param1: org.opencv.core.Mat): void;
				public getMarkerLength(): number;
				public get_chessboardCorners(): org.opencv.core.MatOfPoint3f;
				public finalize(): void;
				public draw(param0: org.opencv.core.Size, param1: org.opencv.core.Mat, param2: number): void;
				public getChessboardSize(): org.opencv.core.Size;
				public getSquareLength(): number;
				public static __fromPtr__(param0: number): org.opencv.aruco.CharucoBoard;
				public static create(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.aruco.Dictionary, param2: org.opencv.core.Mat): org.opencv.aruco.Board;
				public draw(param0: org.opencv.core.Size, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: org.opencv.aruco.Dictionary): org.opencv.aruco.CharucoBoard;
				public static __fromPtr__(param0: number): org.opencv.aruco.Board;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module aruco {
			export class DetectorParameters {
				public static class: java.lang.Class<org.opencv.aruco.DetectorParameters>;
				public nativeObj: number;
				public get_adaptiveThreshConstant(): number;
				public set_aprilTagMaxLineFitMse(param0: number): void;
				public get_perspectiveRemoveIgnoredMarginPerCell(): number;
				public set_cornerRefinementWinSize(param0: number): void;
				public set_aprilTagCriticalRad(param0: number): void;
				public get_cornerRefinementMaxIterations(): number;
				public set_errorCorrectionRate(param0: number): void;
				public get_maxErroneousBitsInBorderRate(): number;
				public static __fromPtr__(param0: number): org.opencv.aruco.DetectorParameters;
				public set_polygonalApproxAccuracyRate(param0: number): void;
				public get_minOtsuStdDev(): number;
				public get_aprilTagMaxNmaxima(): number;
				public set_perspectiveRemoveIgnoredMarginPerCell(param0: number): void;
				public set_minCornerDistanceRate(param0: number): void;
				public set_adaptiveThreshWinSizeMin(param0: number): void;
				public get_errorCorrectionRate(): number;
				public set_adaptiveThreshConstant(param0: number): void;
				public get_cornerRefinementMethod(): number;
				public get_polygonalApproxAccuracyRate(): number;
				public get_minMarkerDistanceRate(): number;
				public get_perspectiveRemovePixelPerCell(): number;
				public get_aprilTagQuadDecimate(): number;
				public set_aprilTagQuadDecimate(param0: number): void;
				public static create(): org.opencv.aruco.DetectorParameters;
				public set_adaptiveThreshWinSizeStep(param0: number): void;
				public get_aprilTagQuadSigma(): number;
				public set_aprilTagMinClusterPixels(param0: number): void;
				public get_cornerRefinementWinSize(): number;
				public get_adaptiveThreshWinSizeMin(): number;
				public get_adaptiveThreshWinSizeMax(): number;
				public set_minMarkerDistanceRate(param0: number): void;
				public get_cornerRefinementMinAccuracy(): number;
				public get_markerBorderBits(): number;
				public get_maxMarkerPerimeterRate(): number;
				public get_minMarkerPerimeterRate(): number;
				public set_minMarkerPerimeterRate(param0: number): void;
				public finalize(): void;
				public set_minDistanceToBorder(param0: number): void;
				public set_aprilTagMaxNmaxima(param0: number): void;
				public get_adaptiveThreshWinSizeStep(): number;
				public set_cornerRefinementMinAccuracy(param0: number): void;
				public set_cornerRefinementMethod(param0: number): void;
				public set_aprilTagDeglitch(param0: number): void;
				public set_adaptiveThreshWinSizeMax(param0: number): void;
				public set_markerBorderBits(param0: number): void;
				public get_minDistanceToBorder(): number;
				public set_perspectiveRemovePixelPerCell(param0: number): void;
				public get_aprilTagMaxLineFitMse(): number;
				public getNativeObjAddr(): number;
				public set_aprilTagQuadSigma(param0: number): void;
				public set_maxErroneousBitsInBorderRate(param0: number): void;
				public get_aprilTagCriticalRad(): number;
				public set_maxMarkerPerimeterRate(param0: number): void;
				public set_cornerRefinementMaxIterations(param0: number): void;
				public get_aprilTagDeglitch(): number;
				public get_minCornerDistanceRate(): number;
				public constructor(param0: number);
				public get_aprilTagMinClusterPixels(): number;
				public set_aprilTagMinWhiteBlackDiff(param0: number): void;
				public set_minOtsuStdDev(param0: number): void;
				public get_aprilTagMinWhiteBlackDiff(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module aruco {
			export class Dictionary {
				public static class: java.lang.Class<org.opencv.aruco.Dictionary>;
				public nativeObj: number;
				public drawMarker(param0: number, param1: number, param2: org.opencv.core.Mat, param3: number): void;
				public get_bytesList(): org.opencv.core.Mat;
				public set_bytesList(param0: org.opencv.core.Mat): void;
				public get_maxCorrectionBits(): number;
				public finalize(): void;
				public getNativeObjAddr(): number;
				public static getBitsFromByteList(param0: org.opencv.core.Mat, param1: number): org.opencv.core.Mat;
				public static create(param0: number, param1: number, param2: number): org.opencv.aruco.Dictionary;
				public static create(param0: number, param1: number): org.opencv.aruco.Dictionary;
				public set_maxCorrectionBits(param0: number): void;
				public static create_from(param0: number, param1: number, param2: org.opencv.aruco.Dictionary): org.opencv.aruco.Dictionary;
				public constructor(param0: number);
				public drawMarker(param0: number, param1: number, param2: org.opencv.core.Mat): void;
				public static getByteListFromBits(param0: org.opencv.core.Mat): org.opencv.core.Mat;
				public static __fromPtr__(param0: number): org.opencv.aruco.Dictionary;
				public static get(param0: number): org.opencv.aruco.Dictionary;
				public get_markerSize(): number;
				public set_markerSize(param0: number): void;
				public static create_from(param0: number, param1: number, param2: org.opencv.aruco.Dictionary, param3: number): org.opencv.aruco.Dictionary;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module aruco {
			export class GridBoard extends org.opencv.aruco.Board {
				public static class: java.lang.Class<org.opencv.aruco.GridBoard>;
				public draw(param0: org.opencv.core.Size, param1: org.opencv.core.Mat): void;
				public getMarkerLength(): number;
				public finalize(): void;
				public draw(param0: org.opencv.core.Size, param1: org.opencv.core.Mat, param2: number): void;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: org.opencv.aruco.Dictionary): org.opencv.aruco.GridBoard;
				public getGridSize(): org.opencv.core.Size;
				public getMarkerSeparation(): number;
				public static create(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.aruco.Dictionary, param2: org.opencv.core.Mat): org.opencv.aruco.Board;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: org.opencv.aruco.Dictionary, param5: number): org.opencv.aruco.GridBoard;
				public draw(param0: org.opencv.core.Size, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static __fromPtr__(param0: number): org.opencv.aruco.Board;
				public static __fromPtr__(param0: number): org.opencv.aruco.GridBoard;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bgsegm {
			export class BackgroundSubtractorCNT extends org.opencv.video.BackgroundSubtractor {
				public static class: java.lang.Class<org.opencv.bgsegm.BackgroundSubtractorCNT>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public setUseHistory(param0: boolean): void;
				public getMinPixelStability(): number;
				public getMaxPixelStability(): number;
				public setMaxPixelStability(param0: number): void;
				public setMinPixelStability(param0: number): void;
				public getBackgroundImage(param0: org.opencv.core.Mat): void;
				public apply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static __fromPtr__(param0: number): org.opencv.video.BackgroundSubtractor;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.bgsegm.BackgroundSubtractorCNT;
				public setIsParallel(param0: boolean): void;
				public getIsParallel(): boolean;
				public getUseHistory(): boolean;
				public apply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bgsegm {
			export class BackgroundSubtractorGMG extends org.opencv.video.BackgroundSubtractor {
				public static class: java.lang.Class<org.opencv.bgsegm.BackgroundSubtractorGMG>;
				public getMaxVal(): number;
				public setUpdateBackgroundModel(param0: boolean): void;
				public setNumFrames(param0: number): void;
				public setSmoothingRadius(param0: number): void;
				public getBackgroundPrior(): number;
				public finalize(): void;
				public setDecisionThreshold(param0: number): void;
				public getSmoothingRadius(): number;
				public getMaxFeatures(): number;
				public static __fromPtr__(param0: number): org.opencv.bgsegm.BackgroundSubtractorGMG;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setMinVal(param0: number): void;
				public setMaxFeatures(param0: number): void;
				public setDefaultLearningRate(param0: number): void;
				public getUpdateBackgroundModel(): boolean;
				public getNumFrames(): number;
				public setBackgroundPrior(param0: number): void;
				public getDefaultLearningRate(): number;
				public getMinVal(): number;
				public static __fromPtr__(param0: number): org.opencv.video.BackgroundSubtractor;
				public getDecisionThreshold(): number;
				public setMaxVal(param0: number): void;
				public constructor(param0: number);
				public setQuantizationLevels(param0: number): void;
				public getQuantizationLevels(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bgsegm {
			export class BackgroundSubtractorGSOC extends org.opencv.video.BackgroundSubtractor {
				public static class: java.lang.Class<org.opencv.bgsegm.BackgroundSubtractorGSOC>;
				public getBackgroundImage(param0: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public apply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static __fromPtr__(param0: number): org.opencv.video.BackgroundSubtractor;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public apply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bgsegm {
			export class BackgroundSubtractorLSBP extends org.opencv.video.BackgroundSubtractor {
				public static class: java.lang.Class<org.opencv.bgsegm.BackgroundSubtractorLSBP>;
				public static __fromPtr__(param0: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public getBackgroundImage(param0: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public apply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static __fromPtr__(param0: number): org.opencv.video.BackgroundSubtractor;
				public finalize(): void;
				public constructor(param0: number);
				public apply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bgsegm {
			export class BackgroundSubtractorLSBPDesc {
				public static class: java.lang.Class<org.opencv.bgsegm.BackgroundSubtractorLSBPDesc>;
				public nativeObj: number;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
				public static __fromPtr__(param0: number): org.opencv.bgsegm.BackgroundSubtractorLSBPDesc;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bgsegm {
			export class BackgroundSubtractorMOG extends org.opencv.video.BackgroundSubtractor {
				public static class: java.lang.Class<org.opencv.bgsegm.BackgroundSubtractorMOG>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getNoiseSigma(): number;
				public finalize(): void;
				public getHistory(): number;
				public static __fromPtr__(param0: number): org.opencv.bgsegm.BackgroundSubtractorMOG;
				public getNMixtures(): number;
				public static __fromPtr__(param0: number): org.opencv.video.BackgroundSubtractor;
				public getBackgroundRatio(): number;
				public setHistory(param0: number): void;
				public constructor(param0: number);
				public setNoiseSigma(param0: number): void;
				public setBackgroundRatio(param0: number): void;
				public setNMixtures(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bgsegm {
			export class Bgsegm {
				public static class: java.lang.Class<org.opencv.bgsegm.Bgsegm>;
				public static LSBP_CAMERA_MOTION_COMPENSATION_NONE: number;
				public static LSBP_CAMERA_MOTION_COMPENSATION_LK: number;
				public static createBackgroundSubtractorGSOC(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public static createBackgroundSubtractorMOG(param0: number): org.opencv.bgsegm.BackgroundSubtractorMOG;
				public static createSyntheticSequenceGenerator(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): org.opencv.bgsegm.SyntheticSequenceGenerator;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorGSOC(param0: number, param1: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public static createBackgroundSubtractorMOG(): org.opencv.bgsegm.BackgroundSubtractorMOG;
				public static createBackgroundSubtractorGSOC(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public static createBackgroundSubtractorGSOC(param0: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public static createBackgroundSubtractorLSBP(param0: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public constructor();
				public static createSyntheticSequenceGenerator(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): org.opencv.bgsegm.SyntheticSequenceGenerator;
				public static createBackgroundSubtractorGSOC(param0: number, param1: number, param2: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public static createSyntheticSequenceGenerator(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.bgsegm.SyntheticSequenceGenerator;
				public static createBackgroundSubtractorLSBP(): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorCNT(param0: number): org.opencv.bgsegm.BackgroundSubtractorCNT;
				public static createBackgroundSubtractorGMG(): org.opencv.bgsegm.BackgroundSubtractorGMG;
				public static createBackgroundSubtractorMOG(param0: number, param1: number, param2: number, param3: number): org.opencv.bgsegm.BackgroundSubtractorMOG;
				public static createBackgroundSubtractorCNT(param0: number, param1: boolean, param2: number): org.opencv.bgsegm.BackgroundSubtractorCNT;
				public static createBackgroundSubtractorGSOC(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number, param3: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorMOG(param0: number, param1: number, param2: number): org.opencv.bgsegm.BackgroundSubtractorMOG;
				public static createBackgroundSubtractorGSOC(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public static createBackgroundSubtractorGMG(param0: number, param1: number): org.opencv.bgsegm.BackgroundSubtractorGMG;
				public static createBackgroundSubtractorGMG(param0: number): org.opencv.bgsegm.BackgroundSubtractorGMG;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorMOG(param0: number, param1: number): org.opencv.bgsegm.BackgroundSubtractorMOG;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorGSOC(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createSyntheticSequenceGenerator(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): org.opencv.bgsegm.SyntheticSequenceGenerator;
				public static createBackgroundSubtractorCNT(param0: number, param1: boolean): org.opencv.bgsegm.BackgroundSubtractorCNT;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createSyntheticSequenceGenerator(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): org.opencv.bgsegm.SyntheticSequenceGenerator;
				public static createBackgroundSubtractorCNT(): org.opencv.bgsegm.BackgroundSubtractorCNT;
				public static createBackgroundSubtractorGSOC(): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorGSOC(param0: number, param1: number, param2: number, param3: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public static createBackgroundSubtractorGSOC(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorCNT(param0: number, param1: boolean, param2: number, param3: boolean): org.opencv.bgsegm.BackgroundSubtractorCNT;
				public static createBackgroundSubtractorLSBP(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number): org.opencv.bgsegm.BackgroundSubtractorLSBP;
				public static createBackgroundSubtractorGSOC(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.bgsegm.BackgroundSubtractorGSOC;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bgsegm {
			export class SyntheticSequenceGenerator extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.bgsegm.SyntheticSequenceGenerator>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.bgsegm.SyntheticSequenceGenerator;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number);
				public getNextFrame(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bioinspired {
			export class Bioinspired {
				public static class: java.lang.Class<org.opencv.bioinspired.Bioinspired>;
				public static RETINA_COLOR_RANDOM: number;
				public static RETINA_COLOR_DIAGONAL: number;
				public static RETINA_COLOR_BAYER: number;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bioinspired {
			export class Retina extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.bioinspired.Retina>;
				public static create(param0: org.opencv.core.Size, param1: boolean): org.opencv.bioinspired.Retina;
				public setupOPLandIPLParvoChannel(param0: boolean, param1: boolean, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public setupOPLandIPLParvoChannel(param0: boolean): void;
				public setupIPLMagnoChannel(param0: boolean, param1: number, param2: number, param3: number, param4: number, param5: number): void;
				public setupOPLandIPLParvoChannel(param0: boolean, param1: boolean, param2: number, param3: number): void;
				public static create(param0: org.opencv.core.Size): org.opencv.bioinspired.Retina;
				public clearBuffers(): void;
				public applyFastToneMapping(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static create(param0: org.opencv.core.Size, param1: boolean, param2: number): org.opencv.bioinspired.Retina;
				public setupOPLandIPLParvoChannel(param0: boolean, param1: boolean, param2: number, param3: number, param4: number): void;
				public getMagno(param0: org.opencv.core.Mat): void;
				public setup(): void;
				public setup(param0: string): void;
				public setupOPLandIPLParvoChannel(param0: boolean, param1: boolean, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public setupOPLandIPLParvoChannel(param0: boolean, param1: boolean, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public setupOPLandIPLParvoChannel(): void;
				public static create(param0: org.opencv.core.Size, param1: boolean, param2: number, param3: boolean, param4: number): org.opencv.bioinspired.Retina;
				public static create(param0: org.opencv.core.Size, param1: boolean, param2: number, param3: boolean, param4: number, param5: number): org.opencv.bioinspired.Retina;
				public printSetup(): string;
				public setupIPLMagnoChannel(param0: boolean, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public getParvoRAW(param0: org.opencv.core.Mat): void;
				public setupIPLMagnoChannel(param0: boolean, param1: number): void;
				public setupIPLMagnoChannel(): void;
				public static create(param0: org.opencv.core.Size, param1: boolean, param2: number, param3: boolean): org.opencv.bioinspired.Retina;
				public setColorSaturation(): void;
				public setupIPLMagnoChannel(param0: boolean): void;
				public setupIPLMagnoChannel(param0: boolean, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public run(param0: org.opencv.core.Mat): void;
				public write(param0: string): void;
				public finalize(): void;
				public getMagnoRAW(): org.opencv.core.Mat;
				public setupIPLMagnoChannel(param0: boolean, param1: number, param2: number): void;
				public setupOPLandIPLParvoChannel(param0: boolean, param1: boolean): void;
				public setColorSaturation(param0: boolean): void;
				public getMagnoRAW(param0: org.opencv.core.Mat): void;
				public getParvoRAW(): org.opencv.core.Mat;
				public getParvo(param0: org.opencv.core.Mat): void;
				public setupOPLandIPLParvoChannel(param0: boolean, param1: boolean, param2: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setupOPLandIPLParvoChannel(param0: boolean, param1: boolean, param2: number, param3: number, param4: number, param5: number): void;
				public setupIPLMagnoChannel(param0: boolean, param1: number, param2: number, param3: number): void;
				public setColorSaturation(param0: boolean, param1: number): void;
				public setupIPLMagnoChannel(param0: boolean, param1: number, param2: number, param3: number, param4: number): void;
				public setup(param0: string, param1: boolean): void;
				public activateContoursProcessing(param0: boolean): void;
				public static __fromPtr__(param0: number): org.opencv.bioinspired.Retina;
				public getInputSize(): org.opencv.core.Size;
				public activateMovingContoursProcessing(param0: boolean): void;
				public constructor(param0: number);
				public getOutputSize(): org.opencv.core.Size;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bioinspired {
			export class RetinaFastToneMapping extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.bioinspired.RetinaFastToneMapping>;
				public setup(param0: number, param1: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.bioinspired.RetinaFastToneMapping;
				public setup(): void;
				public setup(param0: number, param1: number, param2: number): void;
				public setup(param0: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public applyFastToneMapping(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static create(param0: org.opencv.core.Size): org.opencv.bioinspired.RetinaFastToneMapping;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module bioinspired {
			export class TransientAreasSegmentationModule extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.bioinspired.TransientAreasSegmentationModule>;
				public static __fromPtr__(param0: number): org.opencv.bioinspired.TransientAreasSegmentationModule;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: org.opencv.core.Size): org.opencv.bioinspired.TransientAreasSegmentationModule;
				public finalize(): void;
				public printSetup(): string;
				public setup(param0: string, param1: boolean): void;
				public getSegmentationPicture(param0: org.opencv.core.Mat): void;
				public getSize(): org.opencv.core.Size;
				public setup(): void;
				public setup(param0: string): void;
				public constructor(param0: number);
				public clearAllBuffers(): void;
				public run(param0: org.opencv.core.Mat, param1: number): void;
				public run(param0: org.opencv.core.Mat): void;
				public write(param0: string): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module calib3d {
			export class Calib3d {
				public static class: java.lang.Class<org.opencv.calib3d.Calib3d>;
				public static PROJ_SPHERICAL_ORTHO: number;
				public static PROJ_SPHERICAL_EQRECT: number;
				public static CALIB_USE_INTRINSIC_GUESS: number;
				public static CALIB_RECOMPUTE_EXTRINSIC: number;
				public static CALIB_CHECK_COND: number;
				public static CALIB_FIX_SKEW: number;
				public static CALIB_FIX_K1: number;
				public static CALIB_FIX_K2: number;
				public static CALIB_FIX_K3: number;
				public static CALIB_FIX_K4: number;
				public static CALIB_FIX_INTRINSIC: number;
				public static CV_ITERATIVE: number;
				public static CV_EPNP: number;
				public static CV_P3P: number;
				public static CV_DLS: number;
				public static CvLevMarq_DONE: number;
				public static CvLevMarq_STARTED: number;
				public static CvLevMarq_CALC_J: number;
				public static CvLevMarq_CHECK_ERR: number;
				public static LMEDS: number;
				public static RANSAC: number;
				public static RHO: number;
				public static SOLVEPNP_ITERATIVE: number;
				public static SOLVEPNP_EPNP: number;
				public static SOLVEPNP_P3P: number;
				public static SOLVEPNP_DLS: number;
				public static SOLVEPNP_UPNP: number;
				public static SOLVEPNP_AP3P: number;
				public static SOLVEPNP_MAX_COUNT: number;
				public static CALIB_CB_ADAPTIVE_THRESH: number;
				public static CALIB_CB_NORMALIZE_IMAGE: number;
				public static CALIB_CB_FILTER_QUADS: number;
				public static CALIB_CB_FAST_CHECK: number;
				public static CALIB_CB_EXHAUSTIVE: number;
				public static CALIB_CB_ACCURACY: number;
				public static CALIB_CB_SYMMETRIC_GRID: number;
				public static CALIB_CB_ASYMMETRIC_GRID: number;
				public static CALIB_CB_CLUSTERING: number;
				public static CALIB_NINTRINSIC: number;
				public static CALIB_FIX_ASPECT_RATIO: number;
				public static CALIB_FIX_PRINCIPAL_POINT: number;
				public static CALIB_ZERO_TANGENT_DIST: number;
				public static CALIB_FIX_FOCAL_LENGTH: number;
				public static CALIB_FIX_K5: number;
				public static CALIB_FIX_K6: number;
				public static CALIB_RATIONAL_MODEL: number;
				public static CALIB_THIN_PRISM_MODEL: number;
				public static CALIB_FIX_S1_S2_S3_S4: number;
				public static CALIB_TILTED_MODEL: number;
				public static CALIB_FIX_TAUX_TAUY: number;
				public static CALIB_USE_QR: number;
				public static CALIB_FIX_TANGENT_DIST: number;
				public static CALIB_SAME_FOCAL_LENGTH: number;
				public static CALIB_ZERO_DISPARITY: number;
				public static CALIB_USE_LU: number;
				public static CALIB_USE_EXTRINSIC_GUESS: number;
				public static FM_7POINT: number;
				public static FM_8POINT: number;
				public static FM_LMEDS: number;
				public static FM_RANSAC: number;
				public static fisheye_CALIB_USE_INTRINSIC_GUESS: number;
				public static fisheye_CALIB_RECOMPUTE_EXTRINSIC: number;
				public static fisheye_CALIB_CHECK_COND: number;
				public static fisheye_CALIB_FIX_SKEW: number;
				public static fisheye_CALIB_FIX_K1: number;
				public static fisheye_CALIB_FIX_K2: number;
				public static fisheye_CALIB_FIX_K3: number;
				public static fisheye_CALIB_FIX_K4: number;
				public static fisheye_CALIB_FIX_INTRINSIC: number;
				public static fisheye_CALIB_FIX_PRINCIPAL_POINT: number;
				public static CirclesGridFinderParameters_SYMMETRIC_GRID: number;
				public static CirclesGridFinderParameters_ASYMMETRIC_GRID: number;
				public static RQDecomp3x3(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): native.Array<number>;
				public static validateDisparity(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static calibrateCameraROExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: number, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: org.opencv.core.Mat, param13: number): number;
				public static findHomography(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: number, param3: number, param4: org.opencv.core.Mat): org.opencv.core.Mat;
				public static decomposeProjectionMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat): void;
				public static fisheye_projectPoints(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: number): void;
				public static findFundamentalMat(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: number, param3: number): org.opencv.core.Mat;
				public static findChessboardCorners(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: org.opencv.core.MatOfPoint2f, param3: number): boolean;
				public static calibrateCameraRO(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: number, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: org.opencv.core.Mat, param9: number, param10: org.opencv.core.TermCriteria): number;
				public static recoverPose(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: number): number;
				public static fisheye_undistortImage(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static stereoRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number, param13: number, param14: org.opencv.core.Size, param15: org.opencv.core.Rect): void;
				public static estimateAffinePartial2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): org.opencv.core.Mat;
				public static fisheye_stereoCalibrate(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Size, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: number): number;
				public static fisheye_initUndistortRectifyMap(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: number, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat): void;
				public static fisheye_undistortImage(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Size): void;
				public static recoverPose(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): number;
				public static stereoCalibrate(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Size, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat): number;
				public static projectPoints(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.MatOfDouble, param5: org.opencv.core.MatOfPoint2f): void;
				public static findCirclesGrid(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: org.opencv.core.Mat, param3: number): boolean;
				public static estimateAffine2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): org.opencv.core.Mat;
				public static recoverPose(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: number, param6: org.opencv.core.Point, param7: org.opencv.core.Mat): number;
				public static estimateAffine2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): org.opencv.core.Mat;
				public static findHomography(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: number): org.opencv.core.Mat;
				public static solvePnPRansac(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfDouble, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: boolean, param7: number, param8: number, param9: number): boolean;
				public static composeRT(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat): void;
				public static getDefaultNewCameraMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Size): org.opencv.core.Mat;
				public static triangulatePoints(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static fisheye_stereoCalibrate(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Size, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat): number;
				public static fisheye_distortPoints(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static estimateAffinePartial2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.core.Mat;
				public static fisheye_stereoCalibrate(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Size, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: number, param11: org.opencv.core.TermCriteria): number;
				public static rectify3Collinear(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: org.opencv.core.Size, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: org.opencv.core.Mat, param13: org.opencv.core.Mat, param14: org.opencv.core.Mat, param15: org.opencv.core.Mat, param16: org.opencv.core.Mat, param17: org.opencv.core.Mat, param18: org.opencv.core.Mat, param19: org.opencv.core.Mat, param20: number, param21: org.opencv.core.Size, param22: org.opencv.core.Rect, param23: org.opencv.core.Rect, param24: number): number;
				public static drawFrameAxes(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: number): void;
				public static findCirclesGrid(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: org.opencv.core.Mat): boolean;
				public static composeRT(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: org.opencv.core.Mat): void;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Point): org.opencv.core.Mat;
				public static decomposeProjectionMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static initUndistortRectifyMap(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: number, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat): void;
				public static fisheye_undistortPoints(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static getOptimalNewCameraMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number, param4: org.opencv.core.Size, param5: org.opencv.core.Rect): org.opencv.core.Mat;
				public static findHomography(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: number, param3: number, param4: org.opencv.core.Mat, param5: number, param6: number): org.opencv.core.Mat;
				public static calibrateCamera(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: java.util.List<org.opencv.core.Mat>, param6: java.util.List<org.opencv.core.Mat>): number;
				public static filterSpeckles(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number): void;
				public static findFundamentalMat(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: number, param3: number, param4: number, param5: org.opencv.core.Mat): org.opencv.core.Mat;
				public static recoverPose(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: number, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat): number;
				public static estimateAffine3D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): number;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): org.opencv.core.Mat;
				public static composeRT(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat): void;
				public static convertPointsFromHomogeneous(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static estimateAffine2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): org.opencv.core.Mat;
				public static RQDecomp3x3(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): native.Array<number>;
				public static initCameraMatrix2D(param0: java.util.List<org.opencv.core.MatOfPoint3f>, param1: java.util.List<org.opencv.core.MatOfPoint2f>, param2: org.opencv.core.Size, param3: number): org.opencv.core.Mat;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Point, param4: number, param5: number, param6: number, param7: org.opencv.core.Mat): org.opencv.core.Mat;
				public static solvePnPRansac(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfDouble, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: boolean): boolean;
				public static computeCorrespondEpilines(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static composeRT(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): void;
				public static fisheye_estimateNewCameraMatrixForUndistortRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: number): void;
				public static calibrateCameraROExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: number, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: org.opencv.core.Mat, param13: number, param14: org.opencv.core.TermCriteria): number;
				public static validateDisparity(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: org.opencv.core.Mat): org.opencv.core.Mat;
				public static estimateAffine2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number): org.opencv.core.Mat;
				public static calibrateCameraRO(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: number, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: org.opencv.core.Mat, param9: number): number;
				public static stereoCalibrate(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Size, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number, param13: org.opencv.core.TermCriteria): number;
				public static fisheye_projectPoints(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: number, param7: org.opencv.core.Mat): void;
				public static stereoRectifyUncalibrated(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: number): boolean;
				public static stereoRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number): void;
				public static RQDecomp3x3(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): native.Array<number>;
				public static correctMatches(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static initCameraMatrix2D(param0: java.util.List<org.opencv.core.MatOfPoint3f>, param1: java.util.List<org.opencv.core.MatOfPoint2f>, param2: org.opencv.core.Size): org.opencv.core.Mat;
				public static calibrateCameraExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: java.util.List<org.opencv.core.Mat>, param6: java.util.List<org.opencv.core.Mat>, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: number): number;
				public static composeRT(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: org.opencv.core.Mat, param13: org.opencv.core.Mat): void;
				public static fisheye_calibrate(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: java.util.List<org.opencv.core.Mat>, param6: java.util.List<org.opencv.core.Mat>, param7: number, param8: org.opencv.core.TermCriteria): number;
				public static composeRT(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat): void;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Point, param4: number): org.opencv.core.Mat;
				public static fisheye_stereoRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number, param13: org.opencv.core.Size, param14: number): void;
				public static estimateAffine3D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number): number;
				public static getDefaultNewCameraMatrix(param0: org.opencv.core.Mat): org.opencv.core.Mat;
				public static stereoRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat): void;
				public static filterHomographyDecompByVisibleRefpoints(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): org.opencv.core.Mat;
				public static stereoRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number, param13: number, param14: org.opencv.core.Size, param15: org.opencv.core.Rect, param16: org.opencv.core.Rect): void;
				public static stereoCalibrate(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Size, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number): number;
				public static calibrateCameraRO(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: number, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: org.opencv.core.Mat): number;
				public static stereoRectifyUncalibrated(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): boolean;
				public static estimateAffinePartial2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): org.opencv.core.Mat;
				public static filterSpeckles(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number, param4: org.opencv.core.Mat): void;
				public static undistortPoints(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static drawFrameAxes(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: number, param6: number): void;
				public static getOptimalNewCameraMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number): org.opencv.core.Mat;
				public static stereoCalibrateExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Size, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: org.opencv.core.Mat, param13: number, param14: org.opencv.core.TermCriteria): number;
				public static findChessboardCornersSB(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: org.opencv.core.Mat, param3: number): boolean;
				public static reprojectImageTo3D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: boolean, param4: number): void;
				public static fisheye_stereoRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number, param13: org.opencv.core.Size, param14: number, param15: number): void;
				public static composeRT(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat): void;
				public static estimateAffinePartial2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): org.opencv.core.Mat;
				public static reprojectImageTo3D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static recoverPose(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: number, param6: org.opencv.core.Point): number;
				public constructor();
				public static findChessboardCorners(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: org.opencv.core.MatOfPoint2f): boolean;
				public static filterHomographyDecompByVisibleRefpoints(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): void;
				public static reprojectImageTo3D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: boolean): void;
				public static findFundamentalMat(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f): org.opencv.core.Mat;
				public static estimateAffine3D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): number;
				public static estimateAffine2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): org.opencv.core.Mat;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): org.opencv.core.Mat;
				public static calibrateCameraExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: java.util.List<org.opencv.core.Mat>, param6: java.util.List<org.opencv.core.Mat>, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat): number;
				public static fisheye_estimateNewCameraMatrixForUndistortRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: number, param6: org.opencv.core.Size, param7: number): void;
				public static decomposeProjectionMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static fisheye_undistortImage(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static recoverPose(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): number;
				public static calibrateCamera(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: java.util.List<org.opencv.core.Mat>, param6: java.util.List<org.opencv.core.Mat>, param7: number, param8: org.opencv.core.TermCriteria): number;
				public static projectPoints(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.MatOfDouble, param5: org.opencv.core.MatOfPoint2f, param6: org.opencv.core.Mat): void;
				public static decomposeHomographyMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.Mat>, param3: java.util.List<org.opencv.core.Mat>, param4: java.util.List<org.opencv.core.Mat>): number;
				public static estimateAffinePartial2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number): org.opencv.core.Mat;
				public static findHomography(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: number, param3: number): org.opencv.core.Mat;
				public static composeRT(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): void;
				public static recoverPose(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): number;
				public static stereoRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number, param13: number, param14: org.opencv.core.Size): void;
				public static solveP3P(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: java.util.List<org.opencv.core.Mat>, param5: java.util.List<org.opencv.core.Mat>, param6: number): number;
				public static fisheye_stereoRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number): void;
				public static findFundamentalMat(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: number): org.opencv.core.Mat;
				public static solvePnPRansac(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfDouble, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: boolean, param7: number, param8: number, param9: number, param10: org.opencv.core.Mat): boolean;
				public static calibrateCameraROExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: number, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: java.util.List<org.opencv.core.Mat>, param7: java.util.List<org.opencv.core.Mat>, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: org.opencv.core.Mat): number;
				public static undistort(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static stereoCalibrateExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Size, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: org.opencv.core.Mat, param13: number): number;
				public static Rodrigues(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static composeRT(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat): void;
				public static fisheye_calibrate(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: java.util.List<org.opencv.core.Mat>, param6: java.util.List<org.opencv.core.Mat>, param7: number): number;
				public static checkChessboard(param0: org.opencv.core.Mat, param1: org.opencv.core.Size): boolean;
				public static drawChessboardCorners(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: org.opencv.core.MatOfPoint2f, param3: boolean): void;
				public static undistort(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static undistortPoints(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static matMulDeriv(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): org.opencv.core.Mat;
				public static getValidDisparityROI(param0: org.opencv.core.Rect, param1: org.opencv.core.Rect, param2: number, param3: number, param4: number): org.opencv.core.Rect;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Point, param4: number, param5: number, param6: number): org.opencv.core.Mat;
				public static undistortPoints(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): void;
				public static fisheye_projectPoints(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): void;
				public static getDefaultNewCameraMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: boolean): org.opencv.core.Mat;
				public static convertPointsToHomogeneous(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static fisheye_calibrate(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: java.util.List<org.opencv.core.Mat>, param6: java.util.List<org.opencv.core.Mat>): number;
				public static RQDecomp3x3(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): native.Array<number>;
				public static estimateAffinePartial2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): org.opencv.core.Mat;
				public static findChessboardCornersSB(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: org.opencv.core.Mat): boolean;
				public static solvePnP(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfDouble, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: boolean, param7: number): boolean;
				public static fisheye_undistortPoints(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static solvePnPRansac(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfDouble, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: boolean, param7: number, param8: number, param9: number, param10: org.opencv.core.Mat, param11: number): boolean;
				public static recoverPose(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: number): number;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.core.Mat;
				public static solvePnPRansac(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfDouble, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): boolean;
				public static calibrationMatrixValues(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: number, param3: number, param4: native.Array<number>, param5: native.Array<number>, param6: native.Array<number>, param7: org.opencv.core.Point, param8: native.Array<number>): void;
				public static decomposeProjectionMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): void;
				public static stereoCalibrateExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: java.util.List<org.opencv.core.Mat>, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Size, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: org.opencv.core.Mat): number;
				public static fisheye_undistortPoints(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): void;
				public static findFundamentalMat(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: number, param3: number, param4: number): org.opencv.core.Mat;
				public static getOptimalNewCameraMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number, param4: org.opencv.core.Size, param5: org.opencv.core.Rect, param6: boolean): org.opencv.core.Mat;
				public static solvePnPRansac(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfDouble, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: boolean, param7: number): boolean;
				public static undistortPointsIter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.TermCriteria): void;
				public static fisheye_stereoRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number, param13: org.opencv.core.Size): void;
				public static findHomography(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: number, param3: number, param4: org.opencv.core.Mat, param5: number): org.opencv.core.Mat;
				public static projectPoints(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.MatOfDouble, param5: org.opencv.core.MatOfPoint2f, param6: org.opencv.core.Mat, param7: number): void;
				public static solvePnP(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfDouble, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: boolean): boolean;
				public static decomposeProjectionMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): void;
				public static recoverPose(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: number, param7: org.opencv.core.Mat): number;
				public static fisheye_distortPoints(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): void;
				public static decomposeEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static calibrateCamera(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: java.util.List<org.opencv.core.Mat>, param6: java.util.List<org.opencv.core.Mat>, param7: number): number;
				public static stereoRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Size, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: org.opencv.core.Mat, param11: org.opencv.core.Mat, param12: number, param13: number): void;
				public static solvePnP(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfDouble, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): boolean;
				public static Rodrigues(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static fisheye_estimateNewCameraMatrixForUndistortRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: number, param6: org.opencv.core.Size): void;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Point, param4: number, param5: number): org.opencv.core.Mat;
				public static solvePnPRansac(param0: org.opencv.core.MatOfPoint3f, param1: org.opencv.core.MatOfPoint2f, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfDouble, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: boolean, param7: number, param8: number): boolean;
				public static estimateAffine2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number): org.opencv.core.Mat;
				public static estimateAffine2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.core.Mat;
				public static fisheye_estimateNewCameraMatrixForUndistortRectify(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static estimateAffinePartial2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number): org.opencv.core.Mat;
				public static findHomography(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f): org.opencv.core.Mat;
				public static findEssentialMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): org.opencv.core.Mat;
				public static calibrateCameraExtended(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: java.util.List<org.opencv.core.Mat>, param6: java.util.List<org.opencv.core.Mat>, param7: org.opencv.core.Mat, param8: org.opencv.core.Mat, param9: org.opencv.core.Mat, param10: number, param11: org.opencv.core.TermCriteria): number;
				public static sampsonDistance(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): number;
				public static getOptimalNewCameraMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number, param4: org.opencv.core.Size): org.opencv.core.Mat;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module calib3d {
			export class StereoBM extends org.opencv.calib3d.StereoMatcher {
				public static class: java.lang.Class<org.opencv.calib3d.StereoBM>;
				public static PREFILTER_NORMALIZED_RESPONSE: number;
				public static PREFILTER_XSOBEL: number;
				public setSmallerBlockSize(param0: number): void;
				public setTextureThreshold(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getPreFilterCap(): number;
				public getTextureThreshold(): number;
				public setPreFilterCap(param0: number): void;
				public finalize(): void;
				public static create(): org.opencv.calib3d.StereoBM;
				public setROI2(param0: org.opencv.core.Rect): void;
				public setPreFilterSize(param0: number): void;
				public static create(param0: number, param1: number): org.opencv.calib3d.StereoBM;
				public setUniquenessRatio(param0: number): void;
				public getUniquenessRatio(): number;
				public getROI2(): org.opencv.core.Rect;
				public getSmallerBlockSize(): number;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.calib3d.StereoMatcher;
				public static create(param0: number): org.opencv.calib3d.StereoBM;
				public setPreFilterType(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.calib3d.StereoBM;
				public getPreFilterType(): number;
				public setROI1(param0: org.opencv.core.Rect): void;
				public getROI1(): org.opencv.core.Rect;
				public getPreFilterSize(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module calib3d {
			export class StereoMatcher extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.calib3d.StereoMatcher>;
				public static DISP_SHIFT: number;
				public static DISP_SCALE: number;
				public setMinDisparity(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getSpeckleRange(): number;
				public getNumDisparities(): number;
				public getDisp12MaxDiff(): number;
				public finalize(): void;
				public compute(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public getBlockSize(): number;
				public setBlockSize(param0: number): void;
				public setDisp12MaxDiff(param0: number): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.calib3d.StereoMatcher;
				public getSpeckleWindowSize(): number;
				public setNumDisparities(param0: number): void;
				public getMinDisparity(): number;
				public setSpeckleRange(param0: number): void;
				public setSpeckleWindowSize(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module calib3d {
			export class StereoSGBM extends org.opencv.calib3d.StereoMatcher {
				public static class: java.lang.Class<org.opencv.calib3d.StereoSGBM>;
				public static MODE_SGBM: number;
				public static MODE_HH: number;
				public static MODE_SGBM_3WAY: number;
				public static MODE_HH4: number;
				public getMode(): number;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.calib3d.StereoSGBM;
				public setPreFilterCap(param0: number): void;
				public finalize(): void;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): org.opencv.calib3d.StereoSGBM;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): org.opencv.calib3d.StereoSGBM;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.calib3d.StereoSGBM;
				public getP1(): number;
				public static create(param0: number, param1: number): org.opencv.calib3d.StereoSGBM;
				public getP2(): number;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number): org.opencv.calib3d.StereoSGBM;
				public setP2(param0: number): void;
				public static create(param0: number): org.opencv.calib3d.StereoSGBM;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getPreFilterCap(): number;
				public static create(): org.opencv.calib3d.StereoSGBM;
				public static create(param0: number, param1: number, param2: number, param3: number): org.opencv.calib3d.StereoSGBM;
				public static create(param0: number, param1: number, param2: number): org.opencv.calib3d.StereoSGBM;
				public setP1(param0: number): void;
				public setMode(param0: number): void;
				public setUniquenessRatio(param0: number): void;
				public getUniquenessRatio(): number;
				public static __fromPtr__(param0: number): org.opencv.calib3d.StereoSGBM;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.calib3d.StereoMatcher;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.calib3d.StereoSGBM;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): org.opencv.calib3d.StereoSGBM;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class Algorithm {
				public static class: java.lang.Class<org.opencv.core.Algorithm>;
				public nativeObj: number;
				public getDefaultName(): string;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public clear(): void;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
				public save(param0: string): void;
				public empty(): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class Core {
				public static class: java.lang.Class<org.opencv.core.Core>;
				public static VERSION: string;
				public static NATIVE_LIBRARY_NAME: string;
				public static VERSION_MAJOR: number;
				public static VERSION_MINOR: number;
				public static VERSION_REVISION: number;
				public static VERSION_STATUS: string;
				public static DECOMP_LU: number;
				public static DECOMP_SVD: number;
				public static DECOMP_EIG: number;
				public static DECOMP_CHOLESKY: number;
				public static DECOMP_QR: number;
				public static DECOMP_NORMAL: number;
				public static BORDER_CONSTANT: number;
				public static BORDER_REPLICATE: number;
				public static BORDER_REFLECT: number;
				public static BORDER_WRAP: number;
				public static BORDER_REFLECT_101: number;
				public static BORDER_TRANSPARENT: number;
				public static BORDER_REFLECT101: number;
				public static BORDER_DEFAULT: number;
				public static BORDER_ISOLATED: number;
				public static GEMM_1_T: number;
				public static GEMM_2_T: number;
				public static GEMM_3_T: number;
				public static KMEANS_RANDOM_CENTERS: number;
				public static KMEANS_PP_CENTERS: number;
				public static KMEANS_USE_INITIAL_LABELS: number;
				public static CMP_EQ: number;
				public static CMP_GT: number;
				public static CMP_GE: number;
				public static CMP_LT: number;
				public static CMP_LE: number;
				public static CMP_NE: number;
				public static PCA_DATA_AS_ROW: number;
				public static PCA_DATA_AS_COL: number;
				public static PCA_USE_AVG: number;
				public static DFT_INVERSE: number;
				public static DFT_SCALE: number;
				public static DFT_ROWS: number;
				public static DFT_COMPLEX_OUTPUT: number;
				public static DFT_REAL_OUTPUT: number;
				public static DFT_COMPLEX_INPUT: number;
				public static DCT_INVERSE: number;
				public static DCT_ROWS: number;
				public static SVD_MODIFY_A: number;
				public static SVD_NO_UV: number;
				public static SVD_FULL_UV: number;
				public static FILLED: number;
				public static REDUCE_SUM: number;
				public static REDUCE_AVG: number;
				public static REDUCE_MAX: number;
				public static REDUCE_MIN: number;
				public static RNG_UNIFORM: number;
				public static RNG_NORMAL: number;
				public static IMPL_PLAIN: number;
				public static IMPL_IPP: number;
				public static IMPL_OPENCL: number;
				public static FLAGS_NONE: number;
				public static FLAGS_MAPPING: number;
				public static FLAGS_EXPAND_SAME_NAMES: number;
				public static TYPE_GENERAL: number;
				public static TYPE_MARKER: number;
				public static TYPE_WRAPPER: number;
				public static TYPE_FUN: number;
				public static Formatter_FMT_DEFAULT: number;
				public static Formatter_FMT_MATLAB: number;
				public static Formatter_FMT_CSV: number;
				public static Formatter_FMT_PYTHON: number;
				public static Formatter_FMT_NUMPY: number;
				public static Formatter_FMT_C: number;
				public static SORT_EVERY_ROW: number;
				public static SORT_EVERY_COLUMN: number;
				public static SORT_ASCENDING: number;
				public static SORT_DESCENDING: number;
				public static COVAR_SCRAMBLED: number;
				public static COVAR_NORMAL: number;
				public static COVAR_USE_AVG: number;
				public static COVAR_SCALE: number;
				public static COVAR_ROWS: number;
				public static COVAR_COLS: number;
				public static Param_INT: number;
				public static Param_BOOLEAN: number;
				public static Param_REAL: number;
				public static Param_STRING: number;
				public static Param_MAT: number;
				public static Param_MAT_VECTOR: number;
				public static Param_ALGORITHM: number;
				public static Param_FLOAT: number;
				public static Param_UNSIGNED_INT: number;
				public static Param_UINT64: number;
				public static Param_UCHAR: number;
				public static Param_SCALAR: number;
				public static NORM_INF: number;
				public static NORM_L1: number;
				public static NORM_L2: number;
				public static NORM_L2SQR: number;
				public static NORM_HAMMING: number;
				public static NORM_HAMMING2: number;
				public static NORM_TYPE_MASK: number;
				public static NORM_RELATIVE: number;
				public static NORM_MINMAX: number;
				public static ROTATE_90_CLOCKWISE: number;
				public static ROTATE_180: number;
				public static ROTATE_90_COUNTERCLOCKWISE: number;
				public static StsOk: number;
				public static StsBackTrace: number;
				public static StsError: number;
				public static StsInternal: number;
				public static StsNoMem: number;
				public static StsBadArg: number;
				public static StsBadFunc: number;
				public static StsNoConv: number;
				public static StsAutoTrace: number;
				public static HeaderIsNull: number;
				public static BadImageSize: number;
				public static BadOffset: number;
				public static BadDataPtr: number;
				public static BadStep: number;
				public static BadModelOrChSeq: number;
				public static BadNumChannels: number;
				public static BadNumChannel1U: number;
				public static BadDepth: number;
				public static BadAlphaChannel: number;
				public static BadOrder: number;
				public static BadOrigin: number;
				public static BadAlign: number;
				public static BadCallBack: number;
				public static BadTileSize: number;
				public static BadCOI: number;
				public static BadROISize: number;
				public static MaskIsTiled: number;
				public static StsNullPtr: number;
				public static StsVecLengthErr: number;
				public static StsFilterStructContentErr: number;
				public static StsKernelStructContentErr: number;
				public static StsFilterOffsetErr: number;
				public static StsBadSize: number;
				public static StsDivByZero: number;
				public static StsInplaceNotSupported: number;
				public static StsObjectNotFound: number;
				public static StsUnmatchedFormats: number;
				public static StsBadFlag: number;
				public static StsBadPoint: number;
				public static StsBadMask: number;
				public static StsUnmatchedSizes: number;
				public static StsUnsupportedFormat: number;
				public static StsOutOfRange: number;
				public static StsParseError: number;
				public static StsNotImplemented: number;
				public static StsBadMemBlock: number;
				public static StsAssert: number;
				public static GpuNotSupported: number;
				public static GpuApiCallError: number;
				public static OpenGlNotSupported: number;
				public static OpenGlApiCallError: number;
				public static OpenCLApiCallError: number;
				public static OpenCLDoubleNotSupported: number;
				public static OpenCLInitError: number;
				public static OpenCLNoAMDBlasFft: number;
				public static LUT(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static solveCubic(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
				public static SVDecomp(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): void;
				public static batchDistance(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.core.Mat): void;
				public static rotate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static cartToPolar(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static subtract(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): void;
				public static getTickFrequency(): number;
				public static SVDecomp(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static batchDistance(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.core.Mat, param5: number, param6: number, param7: org.opencv.core.Mat): void;
				public static borderInterpolate(param0: number, param1: number, param2: number): number;
				public static convertScaleAbs(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static sort(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static bitwise_or(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static calcCovarMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static subtract(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static bitwise_xor(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static findFile(param0: string, param1: boolean): string;
				public static extractChannel(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static mulTransposed(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: boolean): void;
				public static dft(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static subtract(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static gemm(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: number, param5: org.opencv.core.Mat): void;
				public static setNumThreads(param0: number): void;
				public static getVersionRevision(): number;
				public static transpose(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static convertFp16(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static minMaxLoc(param0: org.opencv.core.Mat): org.opencv.core.Core.MinMaxLocResult;
				public static PSNR(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
				public static idct(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static PCABackProject(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static insertChannel(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static compare(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static dct(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static getVersionMajor(): number;
				public static normalize(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static convertScaleAbs(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static flip(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static min(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static add(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static multiply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static countNonZero(param0: org.opencv.core.Mat): number;
				public static batchDistance(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.core.Mat, param5: number, param6: number, param7: org.opencv.core.Mat, param8: number): void;
				public static norm(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
				public static reduce(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static batchDistance(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.core.Mat, param5: number, param6: number): void;
				public static findFileOrKeep(param0: string): string;
				public static split(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>): void;
				public static kmeans(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.TermCriteria, param4: number, param5: number, param6: org.opencv.core.Mat): number;
				public static polarToCart(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: boolean): void;
				public static getVersionMinor(): number;
				public static perspectiveTransform(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static getHardwareFeatureName(param0: number): string;
				public static multiply(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat): void;
				public static divide(param0: number, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static randShuffle(param0: org.opencv.core.Mat): void;
				public static PCACompute2(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): void;
				public static patchNaNs(param0: org.opencv.core.Mat, param1: number): void;
				public static mulTransposed(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: boolean, param3: org.opencv.core.Mat): void;
				public static cartToPolar(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: boolean): void;
				public static divide(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static invert(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): number;
				public static copyMakeBorder(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static gemm(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: number, param5: org.opencv.core.Mat, param6: number): void;
				public static patchNaNs(param0: org.opencv.core.Mat): void;
				public static fastAtan2(param0: number, param1: number): number;
				public static idft(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static sqrt(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static setErrorVerbosity(param0: boolean): void;
				public static getCPUTickCount(): number;
				public static bitwise_or(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static transform(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static completeSymm(param0: org.opencv.core.Mat, param1: boolean): void;
				public static repeat(param0: org.opencv.core.Mat, param1: number, param2: number, param3: org.opencv.core.Mat): void;
				public static invert(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
				public static norm(param0: org.opencv.core.Mat): number;
				public static Mahalanobis(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): number;
				public static batchDistance(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.core.Mat, param5: number, param6: number, param7: org.opencv.core.Mat, param8: number, param9: boolean): void;
				public static mulSpectrums(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: boolean): void;
				public static solvePoly(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
				public static multiply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static norm(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat): number;
				public static getBuildInformation(): string;
				public static divide(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static inRange(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Scalar, param3: org.opencv.core.Mat): void;
				public static eigenNonSymmetric(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static divide(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat, param3: number): void;
				public static subtract(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): void;
				public static findFile(param0: string): string;
				public static mean(param0: org.opencv.core.Mat): org.opencv.core.Scalar;
				public static bitwise_not(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static findFile(param0: string, param1: boolean, param2: boolean): string;
				public static eigen(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): boolean;
				public static convertScaleAbs(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static solve(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): boolean;
				public static mulSpectrums(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static multiply(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static determinant(param0: org.opencv.core.Mat): number;
				public static solvePoly(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): number;
				public static multiply(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat, param3: number): void;
				public static add(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static magnitude(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static bitwise_not(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static divide(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static min(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat): void;
				public static setIdentity(param0: org.opencv.core.Mat): void;
				public static copyMakeBorder(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: org.opencv.core.Scalar): void;
				public static bitwise_xor(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static dft(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static getNumThreads(): number;
				public static normalize(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static addSamplesDataSearchSubDirectory(param0: string): void;
				public static exp(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static addWeighted(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: number, param4: number, param5: org.opencv.core.Mat, param6: number): void;
				public static hconcat(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat): void;
				public static normalize(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static normalize(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static norm(param0: org.opencv.core.Mat, param1: number): number;
				public static dct(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static mixChannels(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.MatOfInt): void;
				public static phase(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: boolean): void;
				public static sumElems(param0: org.opencv.core.Mat): org.opencv.core.Scalar;
				public static eigen(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): boolean;
				public static getNumberOfCPUs(): number;
				public static absdiff(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat): void;
				public static max(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static absdiff(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static addSamplesDataSearchPath(param0: string): void;
				public static calcCovarMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static minMaxLoc(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.core.Core.MinMaxLocResult;
				public static getIppVersion(): string;
				public static checkRange(param0: org.opencv.core.Mat, param1: boolean, param2: number, param3: number): boolean;
				public static findNonZero(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static add(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat): void;
				public static divide(param0: number, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static findFileOrKeep(param0: string, param1: boolean): string;
				public static compare(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat, param3: number): void;
				public static useIPP(): boolean;
				public static PCAProject(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static scaleAdd(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static getThreadNum(): number;
				public static solve(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): boolean;
				public static idft(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static checkRange(param0: org.opencv.core.Mat, param1: boolean): boolean;
				public static getOptimalDFTSize(param0: number): number;
				public static PCACompute2(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static SVBackSubst(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static subtract(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat): void;
				public static addWeighted(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: number, param4: number, param5: org.opencv.core.Mat): void;
				public static idft(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static reduce(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static PCACompute(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static randShuffle(param0: org.opencv.core.Mat, param1: number): void;
				public static phase(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static getVersionString(): string;
				public static multiply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static setRNGSeed(param0: number): void;
				public static log(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static kmeans(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.TermCriteria, param4: number, param5: number): number;
				public static cubeRoot(param0: number): number;
				public static sortIdx(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public constructor();
				public static idct(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static pow(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat): void;
				public static divide(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat): void;
				public static randu(param0: org.opencv.core.Mat, param1: number, param2: number): void;
				public static mean(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.core.Scalar;
				public static normalize(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static copyTo(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static bitwise_and(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static mulTransposed(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: boolean, param3: org.opencv.core.Mat, param4: number): void;
				public static getTickCount(): number;
				public static bitwise_and(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static meanStdDev(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfDouble, param2: org.opencv.core.MatOfDouble): void;
				public static checkRange(param0: org.opencv.core.Mat, param1: boolean, param2: number): boolean;
				public static PCACompute(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static mulTransposed(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: boolean, param3: org.opencv.core.Mat, param4: number, param5: number): void;
				public static PSNR(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): number;
				public static add(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): void;
				public static useIPP_NotExact(): boolean;
				public static setUseIPP(param0: boolean): void;
				public static vconcat(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat): void;
				public static polarToCart(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static dft(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static norm(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): number;
				public static norm(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat): number;
				public static meanStdDev(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfDouble, param2: org.opencv.core.MatOfDouble, param3: org.opencv.core.Mat): void;
				public static setIdentity(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar): void;
				public static trace(param0: org.opencv.core.Mat): org.opencv.core.Scalar;
				public static completeSymm(param0: org.opencv.core.Mat): void;
				public static max(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat): void;
				public static add(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): void;
				public static normalize(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: org.opencv.core.Mat): void;
				public static randn(param0: org.opencv.core.Mat, param1: number, param2: number): void;
				public static subtract(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static batchDistance(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.core.Mat, param5: number): void;
				public static merge(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat): void;
				public static setUseIPP_NotExact(param0: boolean): void;
				public static add(param0: org.opencv.core.Mat, param1: org.opencv.core.Scalar, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static checkRange(param0: org.opencv.core.Mat): boolean;
				public static divide(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
			}
			export module Core {
				export class MinMaxLocResult {
					public static class: java.lang.Class<org.opencv.core.Core.MinMaxLocResult>;
					public minVal: number;
					public maxVal: number;
					public minLoc: org.opencv.core.Point;
					public maxLoc: org.opencv.core.Point;
					public constructor();
				}
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class CvException {
				public static class: java.lang.Class<org.opencv.core.CvException>;
				public toString(): string;
				public constructor(param0: string);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class CvType {
				public static class: java.lang.Class<org.opencv.core.CvType>;
				public static CV_8U: number;
				public static CV_8S: number;
				public static CV_16U: number;
				public static CV_16S: number;
				public static CV_32S: number;
				public static CV_32F: number;
				public static CV_64F: number;
				public static CV_USRTYPE1: number;
				public static CV_8UC1: number;
				public static CV_8UC2: number;
				public static CV_8UC3: number;
				public static CV_8UC4: number;
				public static CV_8SC1: number;
				public static CV_8SC2: number;
				public static CV_8SC3: number;
				public static CV_8SC4: number;
				public static CV_16UC1: number;
				public static CV_16UC2: number;
				public static CV_16UC3: number;
				public static CV_16UC4: number;
				public static CV_16SC1: number;
				public static CV_16SC2: number;
				public static CV_16SC3: number;
				public static CV_16SC4: number;
				public static CV_32SC1: number;
				public static CV_32SC2: number;
				public static CV_32SC3: number;
				public static CV_32SC4: number;
				public static CV_32FC1: number;
				public static CV_32FC2: number;
				public static CV_32FC3: number;
				public static CV_32FC4: number;
				public static CV_64FC1: number;
				public static CV_64FC2: number;
				public static CV_64FC3: number;
				public static CV_64FC4: number;
				public static CV_32FC(param0: number): number;
				public static depth(param0: number): number;
				public static CV_16SC(param0: number): number;
				public static makeType(param0: number, param1: number): number;
				public static CV_16UC(param0: number): number;
				public static channels(param0: number): number;
				public constructor();
				public static CV_64FC(param0: number): number;
				public static CV_32SC(param0: number): number;
				public static CV_8SC(param0: number): number;
				public static CV_8UC(param0: number): number;
				public static isInteger(param0: number): boolean;
				public static ELEM_SIZE(param0: number): number;
				public static typeToString(param0: number): string;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class DMatch {
				public static class: java.lang.Class<org.opencv.core.DMatch>;
				public queryIdx: number;
				public trainIdx: number;
				public imgIdx: number;
				public distance: number;
				public constructor(param0: number, param1: number, param2: number);
				public lessThan(param0: org.opencv.core.DMatch): boolean;
				public constructor(param0: number, param1: number, param2: number, param3: number);
				public toString(): string;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class KeyPoint {
				public static class: java.lang.Class<org.opencv.core.KeyPoint>;
				public pt: org.opencv.core.Point;
				public size: number;
				public angle: number;
				public response: number;
				public octave: number;
				public class_id: number;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: number, param1: number, param2: number, param3: number, param4: number);
				public constructor(param0: number, param1: number, param2: number, param3: number);
				public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number);
				public toString(): string;
				public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number);
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class Mat {
				public static class: java.lang.Class<org.opencv.core.Mat>;
				public nativeObj: number;
				public checkVector(param0: number, param1: number, param2: boolean): number;
				public dot(param0: org.opencv.core.Mat): number;
				public static zeros(param0: number, param1: number, param2: number): org.opencv.core.Mat;
				public height(): number;
				public copyTo(param0: org.opencv.core.Mat): void;
				public convertTo(param0: org.opencv.core.Mat, param1: number, param2: number): void;
				public setTo(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.core.Mat;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public diag(): org.opencv.core.Mat;
				public mul(param0: org.opencv.core.Mat): org.opencv.core.Mat;
				public reshape(param0: number, param1: native.Array<number>): org.opencv.core.Mat;
				public width(): number;
				public convertTo(param0: org.opencv.core.Mat, param1: number): void;
				public static ones(param0: number, param1: number, param2: number): org.opencv.core.Mat;
				public constructor(param0: org.opencv.core.Size, param1: number);
				public size(param0: number): number;
				public isSubmatrix(): boolean;
				public submat(param0: org.opencv.core.Rect): org.opencv.core.Mat;
				public dataAddr(): number;
				public checkVector(param0: number, param1: number): number;
				public step1(param0: number): number;
				public cols(): number;
				public col(param0: number): org.opencv.core.Mat;
				public setTo(param0: org.opencv.core.Scalar, param1: org.opencv.core.Mat): org.opencv.core.Mat;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public rowRange(param0: number, param1: number): org.opencv.core.Mat;
				public rowRange(param0: org.opencv.core.Range): org.opencv.core.Mat;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public toString(): string;
				public dump(): string;
				public put(param0: number, param1: number, param2: native.Array<number>, param3: number, param4: number): number;
				public isContinuous(): boolean;
				public static zeros(param0: org.opencv.core.Size, param1: number): org.opencv.core.Mat;
				public diag(param0: number): org.opencv.core.Mat;
				public static eye(param0: org.opencv.core.Size, param1: number): org.opencv.core.Mat;
				public total(): number;
				public get(param0: number, param1: number, param2: native.Array<number>): number;
				public locateROI(param0: org.opencv.core.Size, param1: org.opencv.core.Point): void;
				public t(): org.opencv.core.Mat;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public cross(param0: org.opencv.core.Mat): org.opencv.core.Mat;
				public reshape(param0: number, param1: number): org.opencv.core.Mat;
				public colRange(param0: org.opencv.core.Range): org.opencv.core.Mat;
				public assignTo(param0: org.opencv.core.Mat): void;
				public step1(): number;
				public finalize(): void;
				public inv(): org.opencv.core.Mat;
				public row(param0: number): org.opencv.core.Mat;
				public setTo(param0: org.opencv.core.Mat): org.opencv.core.Mat;
				public convertTo(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number): void;
				public depth(): number;
				public elemSize(): number;
				public get(param0: number, param1: number): native.Array<number>;
				public size(): org.opencv.core.Size;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public adjustROI(param0: number, param1: number, param2: number, param3: number): org.opencv.core.Mat;
				public dims(): number;
				public reshape(param0: number): org.opencv.core.Mat;
				public create(param0: number, param1: number, param2: number): void;
				public put(param0: number, param1: number, param2: native.Array<number>): number;
				public submat(param0: org.opencv.core.Range, param1: org.opencv.core.Range): org.opencv.core.Mat;
				public copyTo(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static eye(param0: number, param1: number, param2: number): org.opencv.core.Mat;
				public static ones(param0: org.opencv.core.Size, param1: number): org.opencv.core.Mat;
				public empty(): boolean;
				public mul(param0: org.opencv.core.Mat, param1: number): org.opencv.core.Mat;
				public inv(param0: number): org.opencv.core.Mat;
				public release(): void;
				public static diag(param0: org.opencv.core.Mat): org.opencv.core.Mat;
				public checkVector(param0: number): number;
				public clone(): org.opencv.core.Mat;
				public submat(param0: number, param1: number, param2: number, param3: number): org.opencv.core.Mat;
				public getNativeObjAddr(): number;
				public push_back(param0: org.opencv.core.Mat): void;
				public assignTo(param0: org.opencv.core.Mat, param1: number): void;
				public type(): number;
				public setTo(param0: org.opencv.core.Scalar): org.opencv.core.Mat;
				public create(param0: org.opencv.core.Size, param1: number): void;
				public channels(): number;
				public elemSize1(): number;
				public constructor(param0: number);
				public rows(): number;
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
				public colRange(param0: number, param1: number): org.opencv.core.Mat;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfByte extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfByte>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public fromArray(param0: native.Array<number>): void;
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public toList(): java.util.List<java.lang.Byte>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public constructor(param0: number, param1: number, param2: native.Array<number>);
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public fromArray(param0: number, param1: number, param2: native.Array<number>): void;
				public alloc(param0: number): void;
				public toArray(): native.Array<number>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public constructor(param0: native.Array<number>);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public fromList(param0: java.util.List<java.lang.Byte>): void;
				public constructor(param0: number);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfByte;
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfDMatch extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfDMatch>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public fromArray(param0: native.Array<org.opencv.core.DMatch>): void;
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public toList(): java.util.List<org.opencv.core.DMatch>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public fromList(param0: java.util.List<org.opencv.core.DMatch>): void;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public alloc(param0: number): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfDMatch;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public constructor(param0: number);
				public constructor(param0: native.Array<org.opencv.core.DMatch>);
				public toArray(): native.Array<org.opencv.core.DMatch>;
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfDouble extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfDouble>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public fromArray(param0: native.Array<number>): void;
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public toList(): java.util.List<java.lang.Double>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public fromList(param0: java.util.List<java.lang.Double>): void;
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfDouble;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public alloc(param0: number): void;
				public toArray(): native.Array<number>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public constructor(param0: native.Array<number>);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public constructor(param0: number);
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfFloat extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfFloat>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public fromArray(param0: native.Array<number>): void;
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public fromList(param0: java.util.List<java.lang.Float>): void;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public alloc(param0: number): void;
				public toArray(): native.Array<number>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfFloat;
				public constructor(param0: native.Array<number>);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public constructor(param0: number);
				public toList(): java.util.List<java.lang.Float>;
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfFloat4 extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfFloat4>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public fromArray(param0: native.Array<number>): void;
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public fromList(param0: java.util.List<java.lang.Float>): void;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public alloc(param0: number): void;
				public toArray(): native.Array<number>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public constructor(param0: native.Array<number>);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfFloat4;
				public constructor(param0: number);
				public toList(): java.util.List<java.lang.Float>;
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfFloat6 extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfFloat6>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public fromArray(param0: native.Array<number>): void;
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public fromList(param0: java.util.List<java.lang.Float>): void;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public alloc(param0: number): void;
				public toArray(): native.Array<number>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public constructor(param0: native.Array<number>);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public constructor(param0: number);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfFloat6;
				public toList(): java.util.List<java.lang.Float>;
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfInt extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfInt>;
				public toList(): java.util.List<java.lang.Integer>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public fromArray(param0: native.Array<number>): void;
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public fromList(param0: java.util.List<java.lang.Integer>): void;
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfInt;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public alloc(param0: number): void;
				public toArray(): native.Array<number>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public constructor(param0: native.Array<number>);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public constructor(param0: number);
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfInt4 extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfInt4>;
				public toList(): java.util.List<java.lang.Integer>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public fromArray(param0: native.Array<number>): void;
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public fromList(param0: java.util.List<java.lang.Integer>): void;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public alloc(param0: number): void;
				public toArray(): native.Array<number>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public constructor(param0: native.Array<number>);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfInt4;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public constructor(param0: number);
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfKeyPoint extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfKeyPoint>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfKeyPoint;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public alloc(param0: number): void;
				public fromList(param0: java.util.List<org.opencv.core.KeyPoint>): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public constructor(param0: native.Array<org.opencv.core.KeyPoint>);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public fromArray(param0: native.Array<org.opencv.core.KeyPoint>): void;
				public toArray(): native.Array<org.opencv.core.KeyPoint>;
				public toList(): java.util.List<org.opencv.core.KeyPoint>;
				public constructor(param0: number);
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfPoint extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfPoint>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public toArray(): native.Array<org.opencv.core.Point>;
				public toList(): java.util.List<org.opencv.core.Point>;
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public constructor(param0: native.Array<org.opencv.core.Point>);
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public fromList(param0: java.util.List<org.opencv.core.Point>): void;
				public alloc(param0: number): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfPoint;
				public constructor();
				public fromArray(param0: native.Array<org.opencv.core.Point>): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public constructor(param0: number);
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfPoint2f extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfPoint2f>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public toArray(): native.Array<org.opencv.core.Point>;
				public toList(): java.util.List<org.opencv.core.Point>;
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public constructor(param0: native.Array<org.opencv.core.Point>);
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfPoint2f;
				public fromList(param0: java.util.List<org.opencv.core.Point>): void;
				public alloc(param0: number): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public fromArray(param0: native.Array<org.opencv.core.Point>): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public constructor(param0: number);
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfPoint3 extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfPoint3>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public toList(): java.util.List<org.opencv.core.Point3>;
				public alloc(param0: number): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public fromList(param0: java.util.List<org.opencv.core.Point3>): void;
				public constructor(param0: native.Array<org.opencv.core.Point3>);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfPoint3;
				public constructor(param0: number);
				public fromArray(param0: native.Array<org.opencv.core.Point3>): void;
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
				public toArray(): native.Array<org.opencv.core.Point3>;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfPoint3f extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfPoint3f>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfPoint3f;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public toList(): java.util.List<org.opencv.core.Point3>;
				public alloc(param0: number): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public fromList(param0: java.util.List<org.opencv.core.Point3>): void;
				public constructor(param0: native.Array<org.opencv.core.Point3>);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public constructor(param0: number);
				public fromArray(param0: native.Array<org.opencv.core.Point3>): void;
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
				public toArray(): native.Array<org.opencv.core.Point3>;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfRect extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfRect>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public toList(): java.util.List<org.opencv.core.Rect>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public fromArray(param0: native.Array<org.opencv.core.Rect>): void;
				public constructor(param0: native.Array<org.opencv.core.Rect>);
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public alloc(param0: number): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public toArray(): native.Array<org.opencv.core.Rect>;
				public constructor(param0: number);
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfRect;
				public fromList(param0: java.util.List<org.opencv.core.Rect>): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfRect2d extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfRect2d>;
				public toList(): java.util.List<org.opencv.core.Rect2d>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public fromArray(param0: native.Array<org.opencv.core.Rect2d>): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public fromList(param0: java.util.List<org.opencv.core.Rect2d>): void;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public alloc(param0: number): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public constructor();
				public toArray(): native.Array<org.opencv.core.Rect2d>;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: native.Array<org.opencv.core.Rect2d>);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public constructor(param0: number);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfRect2d;
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class MatOfRotatedRect extends org.opencv.core.Mat {
				public static class: java.lang.Class<org.opencv.core.MatOfRotatedRect>;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: org.opencv.core.Mat);
				public toList(): java.util.List<org.opencv.core.RotatedRect>;
				public constructor(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.Scalar);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect);
				public toArray(): native.Array<org.opencv.core.RotatedRect>;
				public constructor(param0: number, param1: number, param2: number, param3: java.nio.ByteBuffer);
				public alloc(param0: number): void;
				public fromArray(param0: native.Array<org.opencv.core.RotatedRect>): void;
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range, param2: org.opencv.core.Range);
				public fromList(param0: java.util.List<org.opencv.core.RotatedRect>): void;
				public constructor();
				public constructor(param0: native.Array<org.opencv.core.RotatedRect>);
				public constructor(param0: org.opencv.core.Mat, param1: org.opencv.core.Range);
				public constructor(param0: org.opencv.core.Size, param1: number);
				public constructor(param0: number);
				public static fromNativeAddr(param0: number): org.opencv.core.MatOfRotatedRect;
				public constructor(param0: number, param1: number, param2: number, param3: org.opencv.core.Scalar);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class Point {
				public static class: java.lang.Class<org.opencv.core.Point>;
				public x: number;
				public y: number;
				public constructor(param0: number, param1: number);
				public constructor(param0: native.Array<number>);
				public hashCode(): number;
				public clone(): org.opencv.core.Point;
				public equals(param0: any): boolean;
				public set(param0: native.Array<number>): void;
				public inside(param0: org.opencv.core.Rect): boolean;
				public toString(): string;
				public dot(param0: org.opencv.core.Point): number;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class Point3 {
				public static class: java.lang.Class<org.opencv.core.Point3>;
				public x: number;
				public y: number;
				public z: number;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: native.Array<number>);
				public cross(param0: org.opencv.core.Point3): org.opencv.core.Point3;
				public hashCode(): number;
				public constructor(param0: org.opencv.core.Point);
				public equals(param0: any): boolean;
				public set(param0: native.Array<number>): void;
				public clone(): org.opencv.core.Point3;
				public toString(): string;
				public dot(param0: org.opencv.core.Point3): number;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class Range {
				public static class: java.lang.Class<org.opencv.core.Range>;
				public start: number;
				public end: number;
				public constructor(param0: number, param1: number);
				public shift(param0: number): org.opencv.core.Range;
				public toString(): string;
				public constructor();
				public size(): number;
				public constructor(param0: native.Array<number>);
				public hashCode(): number;
				public equals(param0: any): boolean;
				public set(param0: native.Array<number>): void;
				public static all(): org.opencv.core.Range;
				public intersection(param0: org.opencv.core.Range): org.opencv.core.Range;
				public clone(): org.opencv.core.Range;
				public empty(): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class Rect {
				public static class: java.lang.Class<org.opencv.core.Rect>;
				public x: number;
				public y: number;
				public width: number;
				public height: number;
				public clone(): org.opencv.core.Rect;
				public contains(param0: org.opencv.core.Point): boolean;
				public constructor(param0: org.opencv.core.Point, param1: org.opencv.core.Point);
				public toString(): string;
				public br(): org.opencv.core.Point;
				public constructor();
				public constructor(param0: native.Array<number>);
				public tl(): org.opencv.core.Point;
				public size(): org.opencv.core.Size;
				public area(): number;
				public constructor(param0: number, param1: number, param2: number, param3: number);
				public hashCode(): number;
				public equals(param0: any): boolean;
				public set(param0: native.Array<number>): void;
				public constructor(param0: org.opencv.core.Point, param1: org.opencv.core.Size);
				public empty(): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class Rect2d {
				public static class: java.lang.Class<org.opencv.core.Rect2d>;
				public x: number;
				public y: number;
				public width: number;
				public height: number;
				public contains(param0: org.opencv.core.Point): boolean;
				public constructor(param0: org.opencv.core.Point, param1: org.opencv.core.Point);
				public toString(): string;
				public br(): org.opencv.core.Point;
				public constructor();
				public constructor(param0: native.Array<number>);
				public tl(): org.opencv.core.Point;
				public size(): org.opencv.core.Size;
				public area(): number;
				public constructor(param0: number, param1: number, param2: number, param3: number);
				public hashCode(): number;
				public equals(param0: any): boolean;
				public clone(): org.opencv.core.Rect2d;
				public set(param0: native.Array<number>): void;
				public constructor(param0: org.opencv.core.Point, param1: org.opencv.core.Size);
				public empty(): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class RotatedRect {
				public static class: java.lang.Class<org.opencv.core.RotatedRect>;
				public center: org.opencv.core.Point;
				public size: org.opencv.core.Size;
				public angle: number;
				public constructor(param0: native.Array<number>);
				public boundingRect(): org.opencv.core.Rect;
				public constructor(param0: org.opencv.core.Point, param1: org.opencv.core.Size, param2: number);
				public hashCode(): number;
				public equals(param0: any): boolean;
				public points(param0: native.Array<org.opencv.core.Point>): void;
				public set(param0: native.Array<number>): void;
				public toString(): string;
				public clone(): org.opencv.core.RotatedRect;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class Scalar {
				public static class: java.lang.Class<org.opencv.core.Scalar>;
				public val: native.Array<number>;
				public constructor(param0: number, param1: number);
				public constructor(param0: number, param1: number, param2: number);
				public toString(): string;
				public mul(param0: org.opencv.core.Scalar): org.opencv.core.Scalar;
				public mul(param0: org.opencv.core.Scalar, param1: number): org.opencv.core.Scalar;
				public constructor(param0: native.Array<number>);
				public isReal(): boolean;
				public constructor(param0: number, param1: number, param2: number, param3: number);
				public hashCode(): number;
				public equals(param0: any): boolean;
				public constructor(param0: number);
				public static all(param0: number): org.opencv.core.Scalar;
				public conj(): org.opencv.core.Scalar;
				public set(param0: native.Array<number>): void;
				public clone(): org.opencv.core.Scalar;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class Size {
				public static class: java.lang.Class<org.opencv.core.Size>;
				public width: number;
				public height: number;
				public constructor(param0: number, param1: number);
				public constructor(param0: native.Array<number>);
				public area(): number;
				public hashCode(): number;
				public clone(): org.opencv.core.Size;
				public constructor(param0: org.opencv.core.Point);
				public equals(param0: any): boolean;
				public set(param0: native.Array<number>): void;
				public toString(): string;
				public constructor();
				public empty(): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class TermCriteria {
				public static class: java.lang.Class<org.opencv.core.TermCriteria>;
				public static COUNT: number;
				public static MAX_ITER: number;
				public static EPS: number;
				public type: number;
				public maxCount: number;
				public epsilon: number;
				public constructor(param0: number, param1: number, param2: number);
				public constructor(param0: native.Array<number>);
				public hashCode(): number;
				public equals(param0: any): boolean;
				public clone(): org.opencv.core.TermCriteria;
				public set(param0: native.Array<number>): void;
				public toString(): string;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module core {
			export class TickMeter {
				public static class: java.lang.Class<org.opencv.core.TickMeter>;
				public nativeObj: number;
				public getTimeSec(): number;
				public static __fromPtr__(param0: number): org.opencv.core.TickMeter;
				public finalize(): void;
				public getNativeObjAddr(): number;
				public constructor();
				public reset(): void;
				public stop(): void;
				public getTimeMilli(): number;
				public start(): void;
				public constructor(param0: number);
				public getCounter(): number;
				public getTimeMicro(): number;
				public getTimeTicks(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module dnn {
			export class DictValue {
				public static class: java.lang.Class<org.opencv.dnn.DictValue>;
				public nativeObj: number;
				public getStringValue(param0: number): string;
				public getIntValue(): number;
				public getRealValue(param0: number): number;
				public finalize(): void;
				public getNativeObjAddr(): number;
				public constructor(param0: string);
				public getRealValue(): number;
				public getStringValue(): string;
				public isReal(): boolean;
				public isString(): boolean;
				public constructor(param0: number);
				public isInt(): boolean;
				public static __fromPtr__(param0: number): org.opencv.dnn.DictValue;
				public getIntValue(param0: number): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module dnn {
			export class Dnn {
				public static class: java.lang.Class<org.opencv.dnn.Dnn>;
				public static DNN_BACKEND_DEFAULT: number;
				public static DNN_BACKEND_HALIDE: number;
				public static DNN_BACKEND_INFERENCE_ENGINE: number;
				public static DNN_BACKEND_OPENCV: number;
				public static DNN_BACKEND_VKCOM: number;
				public static DNN_TARGET_CPU: number;
				public static DNN_TARGET_OPENCL: number;
				public static DNN_TARGET_OPENCL_FP16: number;
				public static DNN_TARGET_MYRIAD: number;
				public static DNN_TARGET_VULKAN: number;
				public static DNN_TARGET_FPGA: number;
				public static blobFromImages(param0: java.util.List<org.opencv.core.Mat>, param1: number, param2: org.opencv.core.Size, param3: org.opencv.core.Scalar, param4: boolean, param5: boolean, param6: number): org.opencv.core.Mat;
				public static blobFromImages(param0: java.util.List<org.opencv.core.Mat>, param1: number): org.opencv.core.Mat;
				public static readNet(param0: string, param1: org.opencv.core.MatOfByte, param2: org.opencv.core.MatOfByte): org.opencv.dnn.Net;
				public static readNetFromCaffe(param0: org.opencv.core.MatOfByte, param1: org.opencv.core.MatOfByte): org.opencv.dnn.Net;
				public static blobFromImage(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Size, param3: org.opencv.core.Scalar, param4: boolean, param5: boolean, param6: number): org.opencv.core.Mat;
				public static readNetFromONNX(param0: string): org.opencv.dnn.Net;
				public static NMSBoxesRotated(param0: org.opencv.core.MatOfRotatedRect, param1: org.opencv.core.MatOfFloat, param2: number, param3: number, param4: org.opencv.core.MatOfInt): void;
				public static readTorchBlob(param0: string): org.opencv.core.Mat;
				public constructor();
				public static readNetFromDarknet(param0: org.opencv.core.MatOfByte): org.opencv.dnn.Net;
				public static blobFromImage(param0: org.opencv.core.Mat, param1: number): org.opencv.core.Mat;
				public static readNetFromTensorflow(param0: org.opencv.core.MatOfByte): org.opencv.dnn.Net;
				public static NMSBoxes(param0: org.opencv.core.MatOfRect2d, param1: org.opencv.core.MatOfFloat, param2: number, param3: number, param4: org.opencv.core.MatOfInt): void;
				public static shrinkCaffeModel(param0: string, param1: string, param2: java.util.List<string>): void;
				public static readNetFromCaffe(param0: org.opencv.core.MatOfByte): org.opencv.dnn.Net;
				public static readTorchBlob(param0: string, param1: boolean): org.opencv.core.Mat;
				public static readNetFromTorch(param0: string): org.opencv.dnn.Net;
				public static readNetFromCaffe(param0: string): org.opencv.dnn.Net;
				public static NMSBoxes(param0: org.opencv.core.MatOfRect2d, param1: org.opencv.core.MatOfFloat, param2: number, param3: number, param4: org.opencv.core.MatOfInt, param5: number, param6: number): void;
				public static readNet(param0: string, param1: string): org.opencv.dnn.Net;
				public static blobFromImage(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Size, param3: org.opencv.core.Scalar, param4: boolean): org.opencv.core.Mat;
				public static NMSBoxes(param0: org.opencv.core.MatOfRect, param1: org.opencv.core.MatOfFloat, param2: number, param3: number, param4: org.opencv.core.MatOfInt): void;
				public static blobFromImages(param0: java.util.List<org.opencv.core.Mat>, param1: number, param2: org.opencv.core.Size): org.opencv.core.Mat;
				public static blobFromImage(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Size, param3: org.opencv.core.Scalar, param4: boolean, param5: boolean): org.opencv.core.Mat;
				public static readNetFromDarknet(param0: string): org.opencv.dnn.Net;
				public static readNetFromTorch(param0: string, param1: boolean): org.opencv.dnn.Net;
				public static blobFromImages(param0: java.util.List<org.opencv.core.Mat>): org.opencv.core.Mat;
				public static NMSBoxesRotated(param0: org.opencv.core.MatOfRotatedRect, param1: org.opencv.core.MatOfFloat, param2: number, param3: number, param4: org.opencv.core.MatOfInt, param5: number, param6: number): void;
				public static imagesFromBlob(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>): void;
				public static writeTextGraph(param0: string, param1: string): void;
				public static shrinkCaffeModel(param0: string, param1: string): void;
				public static readNetFromDarknet(param0: org.opencv.core.MatOfByte, param1: org.opencv.core.MatOfByte): org.opencv.dnn.Net;
				public static blobFromImage(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Size, param3: org.opencv.core.Scalar): org.opencv.core.Mat;
				public static blobFromImages(param0: java.util.List<org.opencv.core.Mat>, param1: number, param2: org.opencv.core.Size, param3: org.opencv.core.Scalar): org.opencv.core.Mat;
				public static readTensorFromONNX(param0: string): org.opencv.core.Mat;
				public static blobFromImages(param0: java.util.List<org.opencv.core.Mat>, param1: number, param2: org.opencv.core.Size, param3: org.opencv.core.Scalar, param4: boolean, param5: boolean): org.opencv.core.Mat;
				public static readNetFromTorch(param0: string, param1: boolean, param2: boolean): org.opencv.dnn.Net;
				public static readNetFromTensorflow(param0: org.opencv.core.MatOfByte, param1: org.opencv.core.MatOfByte): org.opencv.dnn.Net;
				public static NMSBoxes(param0: org.opencv.core.MatOfRect, param1: org.opencv.core.MatOfFloat, param2: number, param3: number, param4: org.opencv.core.MatOfInt, param5: number): void;
				public static NMSBoxes(param0: org.opencv.core.MatOfRect, param1: org.opencv.core.MatOfFloat, param2: number, param3: number, param4: org.opencv.core.MatOfInt, param5: number, param6: number): void;
				public static readNetFromCaffe(param0: string, param1: string): org.opencv.dnn.Net;
				public static blobFromImage(param0: org.opencv.core.Mat): org.opencv.core.Mat;
				public static NMSBoxesRotated(param0: org.opencv.core.MatOfRotatedRect, param1: org.opencv.core.MatOfFloat, param2: number, param3: number, param4: org.opencv.core.MatOfInt, param5: number): void;
				public static readNet(param0: string, param1: org.opencv.core.MatOfByte): org.opencv.dnn.Net;
				public static blobFromImages(param0: java.util.List<org.opencv.core.Mat>, param1: number, param2: org.opencv.core.Size, param3: org.opencv.core.Scalar, param4: boolean): org.opencv.core.Mat;
				public static readNet(param0: string): org.opencv.dnn.Net;
				public static resetMyriadDevice(): void;
				public static readNetFromTensorflow(param0: string, param1: string): org.opencv.dnn.Net;
				public static readNetFromModelOptimizer(param0: string, param1: string): org.opencv.dnn.Net;
				public static readNetFromTensorflow(param0: string): org.opencv.dnn.Net;
				public static blobFromImage(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Size): org.opencv.core.Mat;
				public static readNet(param0: string, param1: string, param2: string): org.opencv.dnn.Net;
				public static NMSBoxes(param0: org.opencv.core.MatOfRect2d, param1: org.opencv.core.MatOfFloat, param2: number, param3: number, param4: org.opencv.core.MatOfInt, param5: number): void;
				public static readNetFromDarknet(param0: string, param1: string): org.opencv.dnn.Net;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module dnn {
			export class Layer extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.dnn.Layer>;
				public static __fromPtr__(param0: number): org.opencv.dnn.Layer;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public outputNameToIndex(param0: string): number;
				public get_name(): string;
				public finalize(): void;
				public get_blobs(): java.util.List<org.opencv.core.Mat>;
				public constructor(param0: number);
				public set_blobs(param0: java.util.List<org.opencv.core.Mat>): void;
				public get_preferableTarget(): number;
				public finalize(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>): void;
				public get_type(): string;
				public run(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: java.util.List<org.opencv.core.Mat>): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module dnn {
			export class Net {
				public static class: java.lang.Class<org.opencv.dnn.Net>;
				public nativeObj: number;
				public connect(param0: string, param1: string): void;
				public getFLOPS(param0: org.opencv.core.MatOfInt): number;
				public forward(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<string>): void;
				public getParam(param0: org.opencv.dnn.DictValue): org.opencv.core.Mat;
				public getMemoryConsumption(param0: number, param1: org.opencv.core.MatOfInt, param2: native.Array<number>, param3: native.Array<number>): void;
				public getPerfProfile(param0: org.opencv.core.MatOfDouble): number;
				public setInputsNames(param0: java.util.List<string>): void;
				public getLayerNames(): java.util.List<string>;
				public getUnconnectedOutLayersNames(): java.util.List<string>;
				public finalize(): void;
				public static readFromModelOptimizer(param0: string, param1: string): org.opencv.dnn.Net;
				public forward(param0: java.util.List<org.opencv.core.Mat>): void;
				public setInput(param0: org.opencv.core.Mat): void;
				public getParam(param0: org.opencv.dnn.DictValue, param1: number): org.opencv.core.Mat;
				public constructor();
				public getLayersCount(param0: string): number;
				public setHalideScheduler(param0: string): void;
				public getFLOPS(param0: java.util.List<org.opencv.core.MatOfInt>): number;
				public getLayerTypes(param0: java.util.List<string>): void;
				public getUnconnectedOutLayers(): org.opencv.core.MatOfInt;
				public getFLOPS(param0: number, param1: org.opencv.core.MatOfInt): number;
				public getMemoryConsumption(param0: number, param1: java.util.List<org.opencv.core.MatOfInt>, param2: native.Array<number>, param3: native.Array<number>): void;
				public static __fromPtr__(param0: number): org.opencv.dnn.Net;
				public getLayerId(param0: string): number;
				public enableFusion(param0: boolean): void;
				public empty(): boolean;
				public setInput(param0: org.opencv.core.Mat, param1: string): void;
				public getLayer(param0: org.opencv.dnn.DictValue): org.opencv.dnn.Layer;
				public setInput(param0: org.opencv.core.Mat, param1: string, param2: number, param3: org.opencv.core.Scalar): void;
				public forward(param0: string): org.opencv.core.Mat;
				public getMemoryConsumption(param0: org.opencv.core.MatOfInt, param1: native.Array<number>, param2: native.Array<number>): void;
				public getNativeObjAddr(): number;
				public getFLOPS(param0: number, param1: java.util.List<org.opencv.core.MatOfInt>): number;
				public forward(): org.opencv.core.Mat;
				public forward(param0: java.util.List<org.opencv.core.Mat>, param1: string): void;
				public setInput(param0: org.opencv.core.Mat, param1: string, param2: number): void;
				public setParam(param0: org.opencv.dnn.DictValue, param1: number, param2: org.opencv.core.Mat): void;
				public setPreferableBackend(param0: number): void;
				public constructor(param0: number);
				public setPreferableTarget(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class BIF extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.face.BIF>;
				public compute(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getNumRotations(): number;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.face.BIF;
				public static create(): org.opencv.face.BIF;
				public getNumBands(): number;
				public static create(param0: number): org.opencv.face.BIF;
				public static create(param0: number, param1: number): org.opencv.face.BIF;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class BasicFaceRecognizer extends org.opencv.face.FaceRecognizer {
				public static class: java.lang.Class<org.opencv.face.BasicFaceRecognizer>;
				public getMean(): org.opencv.core.Mat;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getThreshold(): number;
				public finalize(): void;
				public setNumComponents(param0: number): void;
				public getEigenValues(): org.opencv.core.Mat;
				public static __fromPtr__(param0: number): org.opencv.face.BasicFaceRecognizer;
				public getProjections(): java.util.List<org.opencv.core.Mat>;
				public setThreshold(param0: number): void;
				public getNumComponents(): number;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.face.FaceRecognizer;
				public getEigenVectors(): org.opencv.core.Mat;
				public getLabels(): org.opencv.core.Mat;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class EigenFaceRecognizer extends org.opencv.face.BasicFaceRecognizer {
				public static class: java.lang.Class<org.opencv.face.EigenFaceRecognizer>;
				public static create(): org.opencv.face.EigenFaceRecognizer;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static create(param0: number, param1: number): org.opencv.face.EigenFaceRecognizer;
				public static create(param0: number): org.opencv.face.EigenFaceRecognizer;
				public static __fromPtr__(param0: number): org.opencv.face.BasicFaceRecognizer;
				public static __fromPtr__(param0: number): org.opencv.face.FaceRecognizer;
				public static __fromPtr__(param0: number): org.opencv.face.EigenFaceRecognizer;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class Face {
				public static class: java.lang.Class<org.opencv.face.Face>;
				public static loadTrainingData(param0: string, param1: string, param2: java.util.List<string>, param3: org.opencv.core.Mat): boolean;
				public static loadFacePoints(param0: string, param1: org.opencv.core.Mat, param2: number): boolean;
				public static createFacemarkKazemi(): org.opencv.face.Facemark;
				public static loadDatasetList(param0: string, param1: string, param2: java.util.List<string>, param3: java.util.List<string>): boolean;
				public static loadTrainingData(param0: java.util.List<string>, param1: java.util.List<org.opencv.core.MatOfPoint2f>, param2: java.util.List<string>): boolean;
				public static loadTrainingData(param0: string, param1: string, param2: java.util.List<string>, param3: org.opencv.core.Mat, param4: number): boolean;
				public static loadTrainingData(param0: string, param1: java.util.List<string>, param2: org.opencv.core.Mat): boolean;
				public static loadTrainingData(param0: string, param1: java.util.List<string>, param2: org.opencv.core.Mat, param3: string): boolean;
				public static drawFacemarks(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public constructor();
				public static loadTrainingData(param0: string, param1: java.util.List<string>, param2: org.opencv.core.Mat, param3: string, param4: number): boolean;
				public static getFacesHAAR(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: string): boolean;
				public static loadFacePoints(param0: string, param1: org.opencv.core.Mat): boolean;
				public static createFacemarkLBF(): org.opencv.face.Facemark;
				public static drawFacemarks(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Scalar): void;
				public static createFacemarkAAM(): org.opencv.face.Facemark;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class FaceRecognizer extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.face.FaceRecognizer>;
				public getLabelInfo(param0: number): string;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getLabelsByString(param0: string): org.opencv.core.MatOfInt;
				public predict_collect(param0: org.opencv.core.Mat, param1: org.opencv.face.PredictCollector): void;
				public finalize(): void;
				public train(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat): void;
				public setLabelInfo(param0: number, param1: string): void;
				public update(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat): void;
				public read(param0: string): void;
				public constructor(param0: number);
				public predict_label(param0: org.opencv.core.Mat): number;
				public predict(param0: org.opencv.core.Mat, param1: native.Array<number>, param2: native.Array<number>): void;
				public static __fromPtr__(param0: number): org.opencv.face.FaceRecognizer;
				public write(param0: string): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class Facemark extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.face.Facemark>;
				public fit(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: java.util.List<org.opencv.core.MatOfPoint2f>): boolean;
				public static __fromPtr__(param0: number): org.opencv.face.Facemark;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public loadModel(param0: string): void;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class FacemarkAAM extends org.opencv.face.FacemarkTrain {
				public static class: java.lang.Class<org.opencv.face.FacemarkAAM>;
				public static __fromPtr__(param0: number): org.opencv.face.Facemark;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.face.FacemarkAAM;
				public static __fromPtr__(param0: number): org.opencv.face.FacemarkTrain;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class FacemarkKazemi extends org.opencv.face.Facemark {
				public static class: java.lang.Class<org.opencv.face.FacemarkKazemi>;
				public static __fromPtr__(param0: number): org.opencv.face.FacemarkKazemi;
				public static __fromPtr__(param0: number): org.opencv.face.Facemark;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class FacemarkLBF extends org.opencv.face.FacemarkTrain {
				public static class: java.lang.Class<org.opencv.face.FacemarkLBF>;
				public static __fromPtr__(param0: number): org.opencv.face.Facemark;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.face.FacemarkTrain;
				public static __fromPtr__(param0: number): org.opencv.face.FacemarkLBF;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class FacemarkTrain extends org.opencv.face.Facemark {
				public static class: java.lang.Class<org.opencv.face.FacemarkTrain>;
				public static __fromPtr__(param0: number): org.opencv.face.Facemark;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.face.FacemarkTrain;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class FisherFaceRecognizer extends org.opencv.face.BasicFaceRecognizer {
				public static class: java.lang.Class<org.opencv.face.FisherFaceRecognizer>;
				public static create(): org.opencv.face.FisherFaceRecognizer;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number, param1: number): org.opencv.face.FisherFaceRecognizer;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.face.FisherFaceRecognizer;
				public static create(param0: number): org.opencv.face.FisherFaceRecognizer;
				public static __fromPtr__(param0: number): org.opencv.face.BasicFaceRecognizer;
				public static __fromPtr__(param0: number): org.opencv.face.FaceRecognizer;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class LBPHFaceRecognizer extends org.opencv.face.FaceRecognizer {
				public static class: java.lang.Class<org.opencv.face.LBPHFaceRecognizer>;
				public getGridX(): number;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number, param1: number): org.opencv.face.LBPHFaceRecognizer;
				public getThreshold(): number;
				public static __fromPtr__(param0: number): org.opencv.face.LBPHFaceRecognizer;
				public static create(): org.opencv.face.LBPHFaceRecognizer;
				public finalize(): void;
				public setGridX(param0: number): void;
				public setGridY(param0: number): void;
				public getRadius(): number;
				public static create(param0: number): org.opencv.face.LBPHFaceRecognizer;
				public setNeighbors(param0: number): void;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.face.LBPHFaceRecognizer;
				public static create(param0: number, param1: number, param2: number, param3: number): org.opencv.face.LBPHFaceRecognizer;
				public setThreshold(param0: number): void;
				public constructor(param0: number);
				public getHistograms(): java.util.List<org.opencv.core.Mat>;
				public getGridY(): number;
				public static create(param0: number, param1: number, param2: number): org.opencv.face.LBPHFaceRecognizer;
				public getNeighbors(): number;
				public static __fromPtr__(param0: number): org.opencv.face.FaceRecognizer;
				public setRadius(param0: number): void;
				public getLabels(): org.opencv.core.Mat;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class MACE extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.face.MACE>;
				public static __fromPtr__(param0: number): org.opencv.face.MACE;
				public static create(): org.opencv.face.MACE;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public train(param0: java.util.List<org.opencv.core.Mat>): void;
				public finalize(): void;
				public constructor(param0: number);
				public static create(param0: number): org.opencv.face.MACE;
				public static load(param0: string): org.opencv.face.MACE;
				public static load(param0: string, param1: string): org.opencv.face.MACE;
				public same(param0: org.opencv.core.Mat): boolean;
				public salt(param0: string): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class PredictCollector {
				public static class: java.lang.Class<org.opencv.face.PredictCollector>;
				public nativeObj: number;
				public static __fromPtr__(param0: number): org.opencv.face.PredictCollector;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module face {
			export class StandardCollector extends org.opencv.face.PredictCollector {
				public static class: java.lang.Class<org.opencv.face.StandardCollector>;
				public static __fromPtr__(param0: number): org.opencv.face.PredictCollector;
				public getMinDist(): number;
				public static create(param0: number): org.opencv.face.StandardCollector;
				public getMinLabel(): number;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.face.StandardCollector;
				public static create(): org.opencv.face.StandardCollector;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class AKAZE extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.features2d.AKAZE>;
				public static DESCRIPTOR_KAZE_UPRIGHT: number;
				public static DESCRIPTOR_KAZE: number;
				public static DESCRIPTOR_MLDB_UPRIGHT: number;
				public static DESCRIPTOR_MLDB: number;
				public getDescriptorChannels(): number;
				public getNOctaves(): number;
				public finalize(): void;
				public setDescriptorType(param0: number): void;
				public getDiffusivity(): number;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static create(param0: number, param1: number, param2: number, param3: number): org.opencv.features2d.AKAZE;
				public static create(): org.opencv.features2d.AKAZE;
				public setNOctaves(param0: number): void;
				public setDiffusivity(param0: number): void;
				public static create(param0: number): org.opencv.features2d.AKAZE;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.features2d.AKAZE;
				public static create(param0: number, param1: number, param2: number): org.opencv.features2d.AKAZE;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.features2d.AKAZE;
				public getDefaultName(): string;
				public static create(param0: number, param1: number): org.opencv.features2d.AKAZE;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setDescriptorSize(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.features2d.AKAZE;
				public getThreshold(): number;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.features2d.AKAZE;
				public setNOctaveLayers(param0: number): void;
				public setThreshold(param0: number): void;
				public setDescriptorChannels(param0: number): void;
				public constructor(param0: number);
				public getDescriptorType(): number;
				public getDescriptorSize(): number;
				public getNOctaveLayers(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class AgastFeatureDetector extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.features2d.AgastFeatureDetector>;
				public static THRESHOLD: number;
				public static NONMAX_SUPPRESSION: number;
				public static AGAST_5_8: number;
				public static AGAST_7_12d: number;
				public static AGAST_7_12s: number;
				public static OAST_9_16: number;
				public getDefaultName(): string;
				public setType(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getNonmaxSuppression(): boolean;
				public getType(): number;
				public static create(): org.opencv.features2d.AgastFeatureDetector;
				public getThreshold(): number;
				public static create(param0: number): org.opencv.features2d.AgastFeatureDetector;
				public finalize(): void;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static create(param0: number, param1: boolean, param2: number): org.opencv.features2d.AgastFeatureDetector;
				public setThreshold(param0: number): void;
				public constructor(param0: number);
				public static create(param0: number, param1: boolean): org.opencv.features2d.AgastFeatureDetector;
				public static __fromPtr__(param0: number): org.opencv.features2d.AgastFeatureDetector;
				public setNonmaxSuppression(param0: boolean): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class BFMatcher extends org.opencv.features2d.DescriptorMatcher {
				public static class: java.lang.Class<org.opencv.features2d.BFMatcher>;
				public static create(param0: number, param1: boolean): org.opencv.features2d.BFMatcher;
				public static create(): org.opencv.features2d.BFMatcher;
				public static __fromPtr__(param0: number): org.opencv.features2d.BFMatcher;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public constructor(param0: number, param1: boolean);
				public static create(param0: string): org.opencv.features2d.DescriptorMatcher;
				public static __fromPtr__(param0: number): org.opencv.features2d.DescriptorMatcher;
				public static create(param0: number): org.opencv.features2d.DescriptorMatcher;
				public constructor();
				public static create(param0: number): org.opencv.features2d.BFMatcher;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class BOWImgDescriptorExtractor {
				public static class: java.lang.Class<org.opencv.features2d.BOWImgDescriptorExtractor>;
				public nativeObj: number;
				public static __fromPtr__(param0: number): org.opencv.features2d.BOWImgDescriptorExtractor;
				public setVocabulary(param0: org.opencv.core.Mat): void;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
				public getVocabulary(): org.opencv.core.Mat;
				public descriptorSize(): number;
				public descriptorType(): number;
				public compute(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class BOWKMeansTrainer extends org.opencv.features2d.BOWTrainer {
				public static class: java.lang.Class<org.opencv.features2d.BOWKMeansTrainer>;
				public constructor(param0: number, param1: org.opencv.core.TermCriteria, param2: number, param3: number);
				public static __fromPtr__(param0: number): org.opencv.features2d.BOWTrainer;
				public cluster(param0: org.opencv.core.Mat): org.opencv.core.Mat;
				public finalize(): void;
				public constructor(param0: number);
				public constructor(param0: number, param1: org.opencv.core.TermCriteria);
				public static __fromPtr__(param0: number): org.opencv.features2d.BOWKMeansTrainer;
				public constructor(param0: number, param1: org.opencv.core.TermCriteria, param2: number);
				public cluster(): org.opencv.core.Mat;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class BOWTrainer {
				public static class: java.lang.Class<org.opencv.features2d.BOWTrainer>;
				public nativeObj: number;
				public static __fromPtr__(param0: number): org.opencv.features2d.BOWTrainer;
				public cluster(param0: org.opencv.core.Mat): org.opencv.core.Mat;
				public clear(): void;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
				public add(param0: org.opencv.core.Mat): void;
				public getDescriptors(): java.util.List<org.opencv.core.Mat>;
				public cluster(): org.opencv.core.Mat;
				public descriptorsCount(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class BRISK extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.features2d.BRISK>;
				public getDefaultName(): string;
				public static create(param0: number, param1: number, param2: org.opencv.core.MatOfFloat, param3: org.opencv.core.MatOfInt, param4: number): org.opencv.features2d.BRISK;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.features2d.BRISK;
				public static create(param0: org.opencv.core.MatOfFloat, param1: org.opencv.core.MatOfInt, param2: number, param3: number): org.opencv.features2d.BRISK;
				public getThreshold(): number;
				public finalize(): void;
				public static create(param0: org.opencv.core.MatOfFloat, param1: org.opencv.core.MatOfInt, param2: number): org.opencv.features2d.BRISK;
				public setOctaves(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public getOctaves(): number;
				public static create(param0: number, param1: number, param2: org.opencv.core.MatOfFloat, param3: org.opencv.core.MatOfInt): org.opencv.features2d.BRISK;
				public static create(param0: number, param1: number, param2: number): org.opencv.features2d.BRISK;
				public static create(): org.opencv.features2d.BRISK;
				public static create(param0: number, param1: number, param2: org.opencv.core.MatOfFloat, param3: org.opencv.core.MatOfInt, param4: number, param5: number, param6: org.opencv.core.MatOfInt): org.opencv.features2d.BRISK;
				public static create(param0: number, param1: number): org.opencv.features2d.BRISK;
				public static create(param0: number): org.opencv.features2d.BRISK;
				public static create(param0: org.opencv.core.MatOfFloat, param1: org.opencv.core.MatOfInt, param2: number, param3: number, param4: org.opencv.core.MatOfInt): org.opencv.features2d.BRISK;
				public setThreshold(param0: number): void;
				public static create(param0: number, param1: number, param2: org.opencv.core.MatOfFloat, param3: org.opencv.core.MatOfInt, param4: number, param5: number): org.opencv.features2d.BRISK;
				public constructor(param0: number);
				public static create(param0: org.opencv.core.MatOfFloat, param1: org.opencv.core.MatOfInt): org.opencv.features2d.BRISK;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class DescriptorMatcher extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.features2d.DescriptorMatcher>;
				public static FLANNBASED: number;
				public static BRUTEFORCE: number;
				public static BRUTEFORCE_L1: number;
				public static BRUTEFORCE_HAMMING: number;
				public static BRUTEFORCE_HAMMINGLUT: number;
				public static BRUTEFORCE_SL2: number;
				public radiusMatch(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfDMatch>, param2: number, param3: java.util.List<org.opencv.core.Mat>, param4: boolean): void;
				public knnMatch(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.MatOfDMatch>, param3: number): void;
				public isMaskSupported(): boolean;
				public match(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfDMatch): void;
				public finalize(): void;
				public knnMatch(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfDMatch>, param2: number, param3: java.util.List<org.opencv.core.Mat>): void;
				public knnMatch(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.MatOfDMatch>, param3: number, param4: org.opencv.core.Mat, param5: boolean): void;
				public knnMatch(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfDMatch>, param2: number, param3: java.util.List<org.opencv.core.Mat>, param4: boolean): void;
				public knnMatch(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.MatOfDMatch>, param3: number, param4: org.opencv.core.Mat): void;
				public clear(): void;
				public radiusMatch(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.MatOfDMatch>, param3: number, param4: org.opencv.core.Mat, param5: boolean): void;
				public static __fromPtr__(param0: number): org.opencv.features2d.DescriptorMatcher;
				public getTrainDescriptors(): java.util.List<org.opencv.core.Mat>;
				public empty(): boolean;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public match(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfDMatch, param2: java.util.List<org.opencv.core.Mat>): void;
				public static create(param0: string): org.opencv.features2d.DescriptorMatcher;
				public clone(param0: boolean): org.opencv.features2d.DescriptorMatcher;
				public clone(): org.opencv.features2d.DescriptorMatcher;
				public static create(param0: number): org.opencv.features2d.DescriptorMatcher;
				public radiusMatch(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfDMatch>, param2: number, param3: java.util.List<org.opencv.core.Mat>): void;
				public match(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfDMatch, param3: org.opencv.core.Mat): void;
				public radiusMatch(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfDMatch>, param2: number): void;
				public radiusMatch(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.MatOfDMatch>, param3: number, param4: org.opencv.core.Mat): void;
				public knnMatch(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfDMatch>, param2: number): void;
				public read(param0: string): void;
				public train(): void;
				public add(param0: java.util.List<org.opencv.core.Mat>): void;
				public constructor(param0: number);
				public radiusMatch(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.MatOfDMatch>, param3: number): void;
				public match(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfDMatch): void;
				public write(param0: string): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class FastFeatureDetector extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.features2d.FastFeatureDetector>;
				public static TYPE_5_8: number;
				public static TYPE_7_12: number;
				public static TYPE_9_16: number;
				public static THRESHOLD: number;
				public static NONMAX_SUPPRESSION: number;
				public static FAST_N: number;
				public getDefaultName(): string;
				public setType(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getNonmaxSuppression(): boolean;
				public getType(): number;
				public static create(): org.opencv.features2d.FastFeatureDetector;
				public getThreshold(): number;
				public finalize(): void;
				public static create(param0: number, param1: boolean): org.opencv.features2d.FastFeatureDetector;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static __fromPtr__(param0: number): org.opencv.features2d.FastFeatureDetector;
				public static create(param0: number, param1: boolean, param2: number): org.opencv.features2d.FastFeatureDetector;
				public setThreshold(param0: number): void;
				public static create(param0: number): org.opencv.features2d.FastFeatureDetector;
				public constructor(param0: number);
				public setNonmaxSuppression(param0: boolean): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class Feature2D extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.features2d.Feature2D>;
				public getDefaultName(): string;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public compute(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.MatOfKeyPoint>, param2: java.util.List<org.opencv.core.Mat>): void;
				public detect(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.MatOfKeyPoint>): void;
				public defaultNorm(): number;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat): void;
				public detectAndCompute(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfKeyPoint, param3: org.opencv.core.Mat): void;
				public detect(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.MatOfKeyPoint>, param2: java.util.List<org.opencv.core.Mat>): void;
				public read(param0: string): void;
				public constructor(param0: number);
				public descriptorSize(): number;
				public detectAndCompute(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfKeyPoint, param3: org.opencv.core.Mat, param4: boolean): void;
				public descriptorType(): number;
				public compute(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat): void;
				public empty(): boolean;
				public write(param0: string): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class Features2d {
				public static class: java.lang.Class<org.opencv.features2d.Features2d>;
				public static DrawMatchesFlags_DEFAULT: number;
				public static DrawMatchesFlags_DRAW_OVER_OUTIMG: number;
				public static DrawMatchesFlags_NOT_DRAW_SINGLE_POINTS: number;
				public static DrawMatchesFlags_DRAW_RICH_KEYPOINTS: number;
				public static drawKeypoints(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat): void;
				public static drawMatches(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfKeyPoint, param4: org.opencv.core.MatOfDMatch, param5: org.opencv.core.Mat, param6: org.opencv.core.Scalar, param7: org.opencv.core.Scalar, param8: org.opencv.core.MatOfByte): void;
				public static drawKeypoints(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.Scalar, param4: number): void;
				public static drawMatches(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfKeyPoint, param4: org.opencv.core.MatOfDMatch, param5: org.opencv.core.Mat, param6: org.opencv.core.Scalar, param7: org.opencv.core.Scalar): void;
				public static drawMatches(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfKeyPoint, param4: org.opencv.core.MatOfDMatch, param5: org.opencv.core.Mat, param6: org.opencv.core.Scalar): void;
				public static drawMatchesKnn(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfKeyPoint, param4: java.util.List<org.opencv.core.MatOfDMatch>, param5: org.opencv.core.Mat, param6: org.opencv.core.Scalar, param7: org.opencv.core.Scalar, param8: java.util.List<org.opencv.core.MatOfByte>, param9: number): void;
				public static drawMatchesKnn(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfKeyPoint, param4: java.util.List<org.opencv.core.MatOfDMatch>, param5: org.opencv.core.Mat, param6: org.opencv.core.Scalar, param7: org.opencv.core.Scalar, param8: java.util.List<org.opencv.core.MatOfByte>): void;
				public constructor();
				public static drawMatchesKnn(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfKeyPoint, param4: java.util.List<org.opencv.core.MatOfDMatch>, param5: org.opencv.core.Mat, param6: org.opencv.core.Scalar): void;
				public static drawMatchesKnn(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfKeyPoint, param4: java.util.List<org.opencv.core.MatOfDMatch>, param5: org.opencv.core.Mat, param6: org.opencv.core.Scalar, param7: org.opencv.core.Scalar): void;
				public static drawMatchesKnn(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfKeyPoint, param4: java.util.List<org.opencv.core.MatOfDMatch>, param5: org.opencv.core.Mat): void;
				public static drawKeypoints(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.Scalar): void;
				public static drawMatches(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfKeyPoint, param4: org.opencv.core.MatOfDMatch, param5: org.opencv.core.Mat, param6: org.opencv.core.Scalar, param7: org.opencv.core.Scalar, param8: org.opencv.core.MatOfByte, param9: number): void;
				public static drawMatches(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfKeyPoint, param2: org.opencv.core.Mat, param3: org.opencv.core.MatOfKeyPoint, param4: org.opencv.core.MatOfDMatch, param5: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class FlannBasedMatcher extends org.opencv.features2d.DescriptorMatcher {
				public static class: java.lang.Class<org.opencv.features2d.FlannBasedMatcher>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.features2d.FlannBasedMatcher;
				public static create(): org.opencv.features2d.FlannBasedMatcher;
				public finalize(): void;
				public constructor(param0: number);
				public static create(param0: string): org.opencv.features2d.DescriptorMatcher;
				public static __fromPtr__(param0: number): org.opencv.features2d.DescriptorMatcher;
				public static create(param0: number): org.opencv.features2d.DescriptorMatcher;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class GFTTDetector extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.features2d.GFTTDetector>;
				public getK(): number;
				public static create(param0: number, param1: number): org.opencv.features2d.GFTTDetector;
				public static __fromPtr__(param0: number): org.opencv.features2d.GFTTDetector;
				public finalize(): void;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static create(): org.opencv.features2d.GFTTDetector;
				public static create(param0: number, param1: number, param2: number, param3: number): org.opencv.features2d.GFTTDetector;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: boolean): org.opencv.features2d.GFTTDetector;
				public setMinDistance(param0: number): void;
				public setK(param0: number): void;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.features2d.GFTTDetector;
				public static create(param0: number): org.opencv.features2d.GFTTDetector;
				public getHarrisDetector(): boolean;
				public getMaxFeatures(): number;
				public getDefaultName(): string;
				public getQualityLevel(): number;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: boolean, param6: number): org.opencv.features2d.GFTTDetector;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: boolean, param5: number): org.opencv.features2d.GFTTDetector;
				public setMaxFeatures(param0: number): void;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: boolean): org.opencv.features2d.GFTTDetector;
				public getBlockSize(): number;
				public setQualityLevel(param0: number): void;
				public setBlockSize(param0: number): void;
				public getMinDistance(): number;
				public setHarrisDetector(param0: boolean): void;
				public constructor(param0: number);
				public static create(param0: number, param1: number, param2: number): org.opencv.features2d.GFTTDetector;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class KAZE extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.features2d.KAZE>;
				public static DIFF_PM_G1: number;
				public static DIFF_PM_G2: number;
				public static DIFF_WEICKERT: number;
				public static DIFF_CHARBONNIER: number;
				public getNOctaves(): number;
				public setExtended(param0: boolean): void;
				public finalize(): void;
				public getExtended(): boolean;
				public setUpright(param0: boolean): void;
				public getDiffusivity(): number;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static create(param0: boolean, param1: boolean, param2: number, param3: number, param4: number): org.opencv.features2d.KAZE;
				public setNOctaves(param0: number): void;
				public setDiffusivity(param0: number): void;
				public static create(param0: boolean, param1: boolean, param2: number, param3: number): org.opencv.features2d.KAZE;
				public getDefaultName(): string;
				public static __fromPtr__(param0: number): org.opencv.features2d.KAZE;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: boolean, param1: boolean, param2: number, param3: number, param4: number, param5: number): org.opencv.features2d.KAZE;
				public getUpright(): boolean;
				public getThreshold(): number;
				public setNOctaveLayers(param0: number): void;
				public static create(): org.opencv.features2d.KAZE;
				public static create(param0: boolean, param1: boolean): org.opencv.features2d.KAZE;
				public setThreshold(param0: number): void;
				public constructor(param0: number);
				public static create(param0: boolean, param1: boolean, param2: number): org.opencv.features2d.KAZE;
				public static create(param0: boolean): org.opencv.features2d.KAZE;
				public getNOctaveLayers(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class MSER extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.features2d.MSER>;
				public finalize(): void;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public getPass2Only(): boolean;
				public setMaxArea(param0: number): void;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.features2d.MSER;
				public static create(param0: number, param1: number, param2: number, param3: number): org.opencv.features2d.MSER;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): org.opencv.features2d.MSER;
				public setDelta(param0: number): void;
				public setPass2Only(param0: boolean): void;
				public getDelta(): number;
				public detectRegions(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: org.opencv.core.MatOfRect): void;
				public getDefaultName(): string;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): org.opencv.features2d.MSER;
				public static create(): org.opencv.features2d.MSER;
				public static create(param0: number, param1: number): org.opencv.features2d.MSER;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.features2d.MSER;
				public setMinArea(param0: number): void;
				public getMaxArea(): number;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.features2d.MSER;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.features2d.MSER;
				public static create(param0: number, param1: number, param2: number): org.opencv.features2d.MSER;
				public static create(param0: number): org.opencv.features2d.MSER;
				public getMinArea(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class ORB extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.features2d.ORB>;
				public static HARRIS_SCORE: number;
				public static FAST_SCORE: number;
				public static create(): org.opencv.features2d.ORB;
				public setFastThreshold(param0: number): void;
				public setNLevels(param0: number): void;
				public finalize(): void;
				public getScoreType(): number;
				public getEdgeThreshold(): number;
				public getFastThreshold(): number;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.features2d.ORB;
				public setWTA_K(param0: number): void;
				public setEdgeThreshold(param0: number): void;
				public static create(param0: number, param1: number): org.opencv.features2d.ORB;
				public getFirstLevel(): number;
				public static create(param0: number, param1: number, param2: number, param3: number): org.opencv.features2d.ORB;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): org.opencv.features2d.ORB;
				public getWTA_K(): number;
				public setFirstLevel(param0: number): void;
				public getMaxFeatures(): number;
				public getPatchSize(): number;
				public setScoreType(param0: number): void;
				public getDefaultName(): string;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number): org.opencv.features2d.ORB;
				public setScaleFactor(param0: number): void;
				public static create(param0: number, param1: number, param2: number): org.opencv.features2d.ORB;
				public setMaxFeatures(param0: number): void;
				public getNLevels(): number;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): org.opencv.features2d.ORB;
				public getScaleFactor(): number;
				public setPatchSize(param0: number): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.features2d.ORB;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.features2d.ORB;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.features2d.ORB;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module features2d {
			export class Params {
				public static class: java.lang.Class<org.opencv.features2d.Params>;
				public nativeObj: number;
				public set_filterByCircularity(param0: boolean): void;
				public set_maxArea(param0: number): void;
				public get_filterByColor(): boolean;
				public get_maxInertiaRatio(): number;
				public finalize(): void;
				public get_maxThreshold(): number;
				public set_minArea(param0: number): void;
				public set_maxConvexity(param0: number): void;
				public constructor();
				public get_minConvexity(): number;
				public get_filterByArea(): boolean;
				public set_filterByInertia(param0: boolean): void;
				public set_minInertiaRatio(param0: number): void;
				public set_filterByConvexity(param0: boolean): void;
				public set_filterByColor(param0: boolean): void;
				public get_minRepeatability(): number;
				public set_minDistBetweenBlobs(param0: number): void;
				public set_maxInertiaRatio(param0: number): void;
				public get_maxConvexity(): number;
				public set_filterByArea(param0: boolean): void;
				public get_minArea(): number;
				public get_minCircularity(): number;
				public set_minCircularity(param0: number): void;
				public getNativeObjAddr(): number;
				public get_filterByInertia(): boolean;
				public set_thresholdStep(param0: number): void;
				public set_minRepeatability(param0: number): void;
				public get_minDistBetweenBlobs(): number;
				public get_thresholdStep(): number;
				public get_maxCircularity(): number;
				public set_minConvexity(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.features2d.Params;
				public get_filterByConvexity(): boolean;
				public set_minThreshold(param0: number): void;
				public get_minThreshold(): number;
				public set_maxThreshold(param0: number): void;
				public get_filterByCircularity(): boolean;
				public set_maxCircularity(param0: number): void;
				public get_maxArea(): number;
				public constructor(param0: number);
				public get_minInertiaRatio(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module highgui {
			export class HighGui {
				public static class: java.lang.Class<org.opencv.highgui.HighGui>;
				public static WINDOW_NORMAL: number;
				public static WINDOW_AUTOSIZE: number;
				public static n_closed_windows: number;
				public static pressedKey: number;
				public static latch: java.util.concurrent.CountDownLatch;
				public static windows: java.util.Map<string,org.opencv.highgui.ImageWindow>;
				public static destroyAllWindows(): void;
				public static namedWindow(param0: string): void;
				public static imshow(param0: string, param1: org.opencv.core.Mat): void;
				public static waitKey(param0: number): number;
				public static moveWindow(param0: string, param1: number, param2: number): void;
				public static destroyWindow(param0: string): void;
				public static resizeWindow(param0: string, param1: number, param2: number): void;
				public static toBufferedImage(param0: org.opencv.core.Mat): any;
				public constructor();
				public static namedWindow(param0: string, param1: number): void;
				public static createJFrame(param0: string, param1: number): any;
				public static waitKey(): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module highgui {
			export class ImageWindow {
				public static class: java.lang.Class<org.opencv.highgui.ImageWindow>;
				public static WINDOW_NORMAL: number;
				public static WINDOW_AUTOSIZE: number;
				public name: string;
				public img: org.opencv.core.Mat;
				public alreadyUsed: java.lang.Boolean;
				public imgToBeResized: java.lang.Boolean;
				public windowToBeResized: java.lang.Boolean;
				public positionToBeChanged: java.lang.Boolean;
				public frame: any;
				public lbl: any;
				public flag: number;
				public x: number;
				public y: number;
				public width: number;
				public height: number;
				public constructor(param0: string, param1: org.opencv.core.Mat);
				public setMat(param0: org.opencv.core.Mat): void;
				public constructor(param0: string, param1: number);
				public setNewDimension(param0: number, param1: number): void;
				public static keepAspectRatioSize(param0: number, param1: number, param2: number, param3: number): org.opencv.core.Size;
				public setNewPosition(param0: number, param1: number): void;
				public setFrameLabelVisible(param0: any, param1: any): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module img_hash {
			export class AverageHash extends org.opencv.img_hash.ImgHashBase {
				public static class: java.lang.Class<org.opencv.img_hash.AverageHash>;
				public static create(): org.opencv.img_hash.AverageHash;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.img_hash.AverageHash;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.img_hash.ImgHashBase;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module img_hash {
			export class BlockMeanHash extends org.opencv.img_hash.ImgHashBase {
				public static class: java.lang.Class<org.opencv.img_hash.BlockMeanHash>;
				public static create(param0: number): org.opencv.img_hash.BlockMeanHash;
				public setMode(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getMean(): org.opencv.core.MatOfDouble;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.img_hash.ImgHashBase;
				public static __fromPtr__(param0: number): org.opencv.img_hash.BlockMeanHash;
				public static create(): org.opencv.img_hash.BlockMeanHash;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module img_hash {
			export class ColorMomentHash extends org.opencv.img_hash.ImgHashBase {
				public static class: java.lang.Class<org.opencv.img_hash.ColorMomentHash>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.img_hash.ColorMomentHash;
				public finalize(): void;
				public constructor(param0: number);
				public static create(): org.opencv.img_hash.ColorMomentHash;
				public static __fromPtr__(param0: number): org.opencv.img_hash.ImgHashBase;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module img_hash {
			export class ImgHashBase extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.img_hash.ImgHashBase>;
				public compare(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
				public compute(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.img_hash.ImgHashBase;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module img_hash {
			export class Img_hash {
				public static class: java.lang.Class<org.opencv.img_hash.Img_hash>;
				public static BLOCK_MEAN_HASH_MODE_0: number;
				public static BLOCK_MEAN_HASH_MODE_1: number;
				public static colorMomentHash(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static radialVarianceHash(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static radialVarianceHash(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static blockMeanHash(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static blockMeanHash(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static radialVarianceHash(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static marrHildrethHash(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static pHash(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static averageHash(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static marrHildrethHash(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static marrHildrethHash(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module img_hash {
			export class MarrHildrethHash extends org.opencv.img_hash.ImgHashBase {
				public static class: java.lang.Class<org.opencv.img_hash.MarrHildrethHash>;
				public static create(param0: number, param1: number): org.opencv.img_hash.MarrHildrethHash;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getScale(): number;
				public static create(param0: number): org.opencv.img_hash.MarrHildrethHash;
				public static __fromPtr__(param0: number): org.opencv.img_hash.MarrHildrethHash;
				public setKernelParam(param0: number, param1: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public getAlpha(): number;
				public static create(): org.opencv.img_hash.MarrHildrethHash;
				public static __fromPtr__(param0: number): org.opencv.img_hash.ImgHashBase;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module img_hash {
			export class PHash extends org.opencv.img_hash.ImgHashBase {
				public static class: java.lang.Class<org.opencv.img_hash.PHash>;
				public static __fromPtr__(param0: number): org.opencv.img_hash.PHash;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.img_hash.ImgHashBase;
				public static create(): org.opencv.img_hash.PHash;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module img_hash {
			export class RadialVarianceHash extends org.opencv.img_hash.ImgHashBase {
				public static class: java.lang.Class<org.opencv.img_hash.RadialVarianceHash>;
				public static create(param0: number): org.opencv.img_hash.RadialVarianceHash;
				public getSigma(): number;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number, param1: number): org.opencv.img_hash.RadialVarianceHash;
				public getNumOfAngleLine(): number;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.img_hash.RadialVarianceHash;
				public setSigma(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.img_hash.ImgHashBase;
				public static create(): org.opencv.img_hash.RadialVarianceHash;
				public setNumOfAngleLine(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module imgcodecs {
			export class Imgcodecs {
				public static class: java.lang.Class<org.opencv.imgcodecs.Imgcodecs>;
				public static IMWRITE_JPEG_QUALITY: number;
				public static IMWRITE_JPEG_PROGRESSIVE: number;
				public static IMWRITE_JPEG_OPTIMIZE: number;
				public static IMWRITE_JPEG_RST_INTERVAL: number;
				public static IMWRITE_JPEG_LUMA_QUALITY: number;
				public static IMWRITE_JPEG_CHROMA_QUALITY: number;
				public static IMWRITE_PNG_COMPRESSION: number;
				public static IMWRITE_PNG_STRATEGY: number;
				public static IMWRITE_PNG_BILEVEL: number;
				public static IMWRITE_PXM_BINARY: number;
				public static IMWRITE_EXR_TYPE: number;
				public static IMWRITE_WEBP_QUALITY: number;
				public static IMWRITE_PAM_TUPLETYPE: number;
				public static IMWRITE_TIFF_RESUNIT: number;
				public static IMWRITE_TIFF_XDPI: number;
				public static IMWRITE_TIFF_YDPI: number;
				public static IMREAD_UNCHANGED: number;
				public static IMREAD_GRAYSCALE: number;
				public static IMREAD_COLOR: number;
				public static IMREAD_ANYDEPTH: number;
				public static IMREAD_ANYCOLOR: number;
				public static IMREAD_LOAD_GDAL: number;
				public static IMREAD_REDUCED_GRAYSCALE_2: number;
				public static IMREAD_REDUCED_COLOR_2: number;
				public static IMREAD_REDUCED_GRAYSCALE_4: number;
				public static IMREAD_REDUCED_COLOR_4: number;
				public static IMREAD_REDUCED_GRAYSCALE_8: number;
				public static IMREAD_REDUCED_COLOR_8: number;
				public static IMREAD_IGNORE_ORIENTATION: number;
				public static IMWRITE_PAM_FORMAT_NULL: number;
				public static IMWRITE_PAM_FORMAT_BLACKANDWHITE: number;
				public static IMWRITE_PAM_FORMAT_GRAYSCALE: number;
				public static IMWRITE_PAM_FORMAT_GRAYSCALE_ALPHA: number;
				public static IMWRITE_PAM_FORMAT_RGB: number;
				public static IMWRITE_PAM_FORMAT_RGB_ALPHA: number;
				public static IMWRITE_EXR_TYPE_HALF: number;
				public static IMWRITE_EXR_TYPE_FLOAT: number;
				public static IMWRITE_PNG_STRATEGY_DEFAULT: number;
				public static IMWRITE_PNG_STRATEGY_FILTERED: number;
				public static IMWRITE_PNG_STRATEGY_HUFFMAN_ONLY: number;
				public static IMWRITE_PNG_STRATEGY_RLE: number;
				public static IMWRITE_PNG_STRATEGY_FIXED: number;
				public static imwrite(param0: string, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfInt): boolean;
				public static imdecode(param0: org.opencv.core.Mat, param1: number): org.opencv.core.Mat;
				public static imread(param0: string): org.opencv.core.Mat;
				public static imreadmulti(param0: string, param1: java.util.List<org.opencv.core.Mat>, param2: number): boolean;
				public static imread(param0: string, param1: number): org.opencv.core.Mat;
				public static haveImageWriter(param0: string): boolean;
				public static imencode(param0: string, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfByte, param3: org.opencv.core.MatOfInt): boolean;
				public static imreadmulti(param0: string, param1: java.util.List<org.opencv.core.Mat>): boolean;
				public static imwrite(param0: string, param1: org.opencv.core.Mat): boolean;
				public static haveImageReader(param0: string): boolean;
				public static imencode(param0: string, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfByte): boolean;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module imgproc {
			export class CLAHE extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.imgproc.CLAHE>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public collectGarbage(): void;
				public getClipLimit(): number;
				public finalize(): void;
				public constructor(param0: number);
				public getTilesGridSize(): org.opencv.core.Size;
				public setTilesGridSize(param0: org.opencv.core.Size): void;
				public setClipLimit(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.imgproc.CLAHE;
				public apply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module imgproc {
			export class GeneralizedHough extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.imgproc.GeneralizedHough>;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public getMinDist(): number;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setTemplate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Point): void;
				public getCannyLowThresh(): number;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public setTemplate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public setMinDist(param0: number): void;
				public finalize(): void;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public setTemplate(param0: org.opencv.core.Mat, param1: org.opencv.core.Point): void;
				public getMaxBufferSize(): number;
				public setDp(param0: number): void;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public setTemplate(param0: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.imgproc.GeneralizedHough;
				public getCannyHighThresh(): number;
				public setCannyLowThresh(param0: number): void;
				public constructor(param0: number);
				public getDp(): number;
				public setCannyHighThresh(param0: number): void;
				public setMaxBufferSize(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module imgproc {
			export class GeneralizedHoughBallard extends org.opencv.imgproc.GeneralizedHough {
				public static class: java.lang.Class<org.opencv.imgproc.GeneralizedHoughBallard>;
				public static __fromPtr__(param0: number): org.opencv.imgproc.GeneralizedHough;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setLevels(param0: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public getVotesThreshold(): number;
				public setVotesThreshold(param0: number): void;
				public getLevels(): number;
				public static __fromPtr__(param0: number): org.opencv.imgproc.GeneralizedHoughBallard;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module imgproc {
			export class GeneralizedHoughGuil extends org.opencv.imgproc.GeneralizedHough {
				public static class: java.lang.Class<org.opencv.imgproc.GeneralizedHoughGuil>;
				public static __fromPtr__(param0: number): org.opencv.imgproc.GeneralizedHough;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.imgproc.GeneralizedHoughGuil;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module imgproc {
			export class Imgproc {
				public static class: java.lang.Class<org.opencv.imgproc.Imgproc>;
				public static FONT_HERSHEY_SIMPLEX: number;
				public static FONT_HERSHEY_PLAIN: number;
				public static FONT_HERSHEY_DUPLEX: number;
				public static FONT_HERSHEY_COMPLEX: number;
				public static FONT_HERSHEY_TRIPLEX: number;
				public static FONT_HERSHEY_COMPLEX_SMALL: number;
				public static FONT_HERSHEY_SCRIPT_SIMPLEX: number;
				public static FONT_HERSHEY_SCRIPT_COMPLEX: number;
				public static FONT_ITALIC: number;
				public static INTER_BITS: number;
				public static INTER_BITS2: number;
				public static INTER_TAB_SIZE: number;
				public static INTER_TAB_SIZE2: number;
				public static MORPH_ERODE: number;
				public static MORPH_DILATE: number;
				public static MORPH_OPEN: number;
				public static MORPH_CLOSE: number;
				public static MORPH_GRADIENT: number;
				public static MORPH_TOPHAT: number;
				public static MORPH_BLACKHAT: number;
				public static MORPH_HITMISS: number;
				public static FLOODFILL_FIXED_RANGE: number;
				public static FLOODFILL_MASK_ONLY: number;
				public static HOUGH_STANDARD: number;
				public static HOUGH_PROBABILISTIC: number;
				public static HOUGH_MULTI_SCALE: number;
				public static HOUGH_GRADIENT: number;
				public static CCL_WU: number;
				public static CCL_DEFAULT: number;
				public static CCL_GRANA: number;
				public static RETR_EXTERNAL: number;
				public static RETR_LIST: number;
				public static RETR_CCOMP: number;
				public static RETR_TREE: number;
				public static RETR_FLOODFILL: number;
				public static GC_BGD: number;
				public static GC_FGD: number;
				public static GC_PR_BGD: number;
				public static GC_PR_FGD: number;
				public static COLORMAP_AUTUMN: number;
				public static COLORMAP_BONE: number;
				public static COLORMAP_JET: number;
				public static COLORMAP_WINTER: number;
				public static COLORMAP_RAINBOW: number;
				public static COLORMAP_OCEAN: number;
				public static COLORMAP_SUMMER: number;
				public static COLORMAP_SPRING: number;
				public static COLORMAP_COOL: number;
				public static COLORMAP_HSV: number;
				public static COLORMAP_PINK: number;
				public static COLORMAP_HOT: number;
				public static COLORMAP_PARULA: number;
				public static HISTCMP_CORREL: number;
				public static HISTCMP_CHISQR: number;
				public static HISTCMP_INTERSECT: number;
				public static HISTCMP_BHATTACHARYYA: number;
				public static HISTCMP_HELLINGER: number;
				public static HISTCMP_CHISQR_ALT: number;
				public static HISTCMP_KL_DIV: number;
				public static FILLED: number;
				public static LINE_4: number;
				public static LINE_8: number;
				public static LINE_AA: number;
				public static INTER_NEAREST: number;
				public static INTER_LINEAR: number;
				public static INTER_CUBIC: number;
				public static INTER_AREA: number;
				public static INTER_LANCZOS4: number;
				public static INTER_LINEAR_EXACT: number;
				public static INTER_MAX: number;
				public static WARP_FILL_OUTLIERS: number;
				public static WARP_INVERSE_MAP: number;
				public static FILTER_SCHARR: number;
				public static CHAIN_APPROX_NONE: number;
				public static CHAIN_APPROX_SIMPLE: number;
				public static CHAIN_APPROX_TC89_L1: number;
				public static CHAIN_APPROX_TC89_KCOS: number;
				public static INTERSECT_NONE: number;
				public static INTERSECT_PARTIAL: number;
				public static INTERSECT_FULL: number;
				public static CV_GAUSSIAN_5x5: number;
				public static CV_SCHARR: number;
				public static CV_MAX_SOBEL_KSIZE: number;
				public static CV_RGBA2mRGBA: number;
				public static CV_mRGBA2RGBA: number;
				public static CV_WARP_FILL_OUTLIERS: number;
				public static CV_WARP_INVERSE_MAP: number;
				public static CV_CHAIN_CODE: number;
				public static CV_LINK_RUNS: number;
				public static CV_POLY_APPROX_DP: number;
				public static CV_CONTOURS_MATCH_I1: number;
				public static CV_CONTOURS_MATCH_I2: number;
				public static CV_CONTOURS_MATCH_I3: number;
				public static CV_CLOCKWISE: number;
				public static CV_COUNTER_CLOCKWISE: number;
				public static CV_COMP_CORREL: number;
				public static CV_COMP_CHISQR: number;
				public static CV_COMP_INTERSECT: number;
				public static CV_COMP_BHATTACHARYYA: number;
				public static CV_COMP_HELLINGER: number;
				public static CV_COMP_CHISQR_ALT: number;
				public static CV_COMP_KL_DIV: number;
				public static CV_DIST_MASK_3: number;
				public static CV_DIST_MASK_5: number;
				public static CV_DIST_MASK_PRECISE: number;
				public static CV_DIST_LABEL_CCOMP: number;
				public static CV_DIST_LABEL_PIXEL: number;
				public static CV_DIST_USER: number;
				public static CV_DIST_L1: number;
				public static CV_DIST_L2: number;
				public static CV_DIST_C: number;
				public static CV_DIST_L12: number;
				public static CV_DIST_FAIR: number;
				public static CV_DIST_WELSCH: number;
				public static CV_DIST_HUBER: number;
				public static CV_CANNY_L2_GRADIENT: number;
				public static CV_HOUGH_STANDARD: number;
				public static CV_HOUGH_PROBABILISTIC: number;
				public static CV_HOUGH_MULTI_SCALE: number;
				public static CV_HOUGH_GRADIENT: number;
				public static CONTOURS_MATCH_I1: number;
				public static CONTOURS_MATCH_I2: number;
				public static CONTOURS_MATCH_I3: number;
				public static WARP_POLAR_LINEAR: number;
				public static WARP_POLAR_LOG: number;
				public static COLOR_BGR2BGRA: number;
				public static COLOR_RGB2RGBA: number;
				public static COLOR_BGRA2BGR: number;
				public static COLOR_RGBA2RGB: number;
				public static COLOR_BGR2RGBA: number;
				public static COLOR_RGB2BGRA: number;
				public static COLOR_RGBA2BGR: number;
				public static COLOR_BGRA2RGB: number;
				public static COLOR_BGR2RGB: number;
				public static COLOR_RGB2BGR: number;
				public static COLOR_BGRA2RGBA: number;
				public static COLOR_RGBA2BGRA: number;
				public static COLOR_BGR2GRAY: number;
				public static COLOR_RGB2GRAY: number;
				public static COLOR_GRAY2BGR: number;
				public static COLOR_GRAY2RGB: number;
				public static COLOR_GRAY2BGRA: number;
				public static COLOR_GRAY2RGBA: number;
				public static COLOR_BGRA2GRAY: number;
				public static COLOR_RGBA2GRAY: number;
				public static COLOR_BGR2BGR565: number;
				public static COLOR_RGB2BGR565: number;
				public static COLOR_BGR5652BGR: number;
				public static COLOR_BGR5652RGB: number;
				public static COLOR_BGRA2BGR565: number;
				public static COLOR_RGBA2BGR565: number;
				public static COLOR_BGR5652BGRA: number;
				public static COLOR_BGR5652RGBA: number;
				public static COLOR_GRAY2BGR565: number;
				public static COLOR_BGR5652GRAY: number;
				public static COLOR_BGR2BGR555: number;
				public static COLOR_RGB2BGR555: number;
				public static COLOR_BGR5552BGR: number;
				public static COLOR_BGR5552RGB: number;
				public static COLOR_BGRA2BGR555: number;
				public static COLOR_RGBA2BGR555: number;
				public static COLOR_BGR5552BGRA: number;
				public static COLOR_BGR5552RGBA: number;
				public static COLOR_GRAY2BGR555: number;
				public static COLOR_BGR5552GRAY: number;
				public static COLOR_BGR2XYZ: number;
				public static COLOR_RGB2XYZ: number;
				public static COLOR_XYZ2BGR: number;
				public static COLOR_XYZ2RGB: number;
				public static COLOR_BGR2YCrCb: number;
				public static COLOR_RGB2YCrCb: number;
				public static COLOR_YCrCb2BGR: number;
				public static COLOR_YCrCb2RGB: number;
				public static COLOR_BGR2HSV: number;
				public static COLOR_RGB2HSV: number;
				public static COLOR_BGR2Lab: number;
				public static COLOR_RGB2Lab: number;
				public static COLOR_BGR2Luv: number;
				public static COLOR_RGB2Luv: number;
				public static COLOR_BGR2HLS: number;
				public static COLOR_RGB2HLS: number;
				public static COLOR_HSV2BGR: number;
				public static COLOR_HSV2RGB: number;
				public static COLOR_Lab2BGR: number;
				public static COLOR_Lab2RGB: number;
				public static COLOR_Luv2BGR: number;
				public static COLOR_Luv2RGB: number;
				public static COLOR_HLS2BGR: number;
				public static COLOR_HLS2RGB: number;
				public static COLOR_BGR2HSV_FULL: number;
				public static COLOR_RGB2HSV_FULL: number;
				public static COLOR_BGR2HLS_FULL: number;
				public static COLOR_RGB2HLS_FULL: number;
				public static COLOR_HSV2BGR_FULL: number;
				public static COLOR_HSV2RGB_FULL: number;
				public static COLOR_HLS2BGR_FULL: number;
				public static COLOR_HLS2RGB_FULL: number;
				public static COLOR_LBGR2Lab: number;
				public static COLOR_LRGB2Lab: number;
				public static COLOR_LBGR2Luv: number;
				public static COLOR_LRGB2Luv: number;
				public static COLOR_Lab2LBGR: number;
				public static COLOR_Lab2LRGB: number;
				public static COLOR_Luv2LBGR: number;
				public static COLOR_Luv2LRGB: number;
				public static COLOR_BGR2YUV: number;
				public static COLOR_RGB2YUV: number;
				public static COLOR_YUV2BGR: number;
				public static COLOR_YUV2RGB: number;
				public static COLOR_YUV2RGB_NV12: number;
				public static COLOR_YUV2BGR_NV12: number;
				public static COLOR_YUV2RGB_NV21: number;
				public static COLOR_YUV2BGR_NV21: number;
				public static COLOR_YUV420sp2RGB: number;
				public static COLOR_YUV420sp2BGR: number;
				public static COLOR_YUV2RGBA_NV12: number;
				public static COLOR_YUV2BGRA_NV12: number;
				public static COLOR_YUV2RGBA_NV21: number;
				public static COLOR_YUV2BGRA_NV21: number;
				public static COLOR_YUV420sp2RGBA: number;
				public static COLOR_YUV420sp2BGRA: number;
				public static COLOR_YUV2RGB_YV12: number;
				public static COLOR_YUV2BGR_YV12: number;
				public static COLOR_YUV2RGB_IYUV: number;
				public static COLOR_YUV2BGR_IYUV: number;
				public static COLOR_YUV2RGB_I420: number;
				public static COLOR_YUV2BGR_I420: number;
				public static COLOR_YUV420p2RGB: number;
				public static COLOR_YUV420p2BGR: number;
				public static COLOR_YUV2RGBA_YV12: number;
				public static COLOR_YUV2BGRA_YV12: number;
				public static COLOR_YUV2RGBA_IYUV: number;
				public static COLOR_YUV2BGRA_IYUV: number;
				public static COLOR_YUV2RGBA_I420: number;
				public static COLOR_YUV2BGRA_I420: number;
				public static COLOR_YUV420p2RGBA: number;
				public static COLOR_YUV420p2BGRA: number;
				public static COLOR_YUV2GRAY_420: number;
				public static COLOR_YUV2GRAY_NV21: number;
				public static COLOR_YUV2GRAY_NV12: number;
				public static COLOR_YUV2GRAY_YV12: number;
				public static COLOR_YUV2GRAY_IYUV: number;
				public static COLOR_YUV2GRAY_I420: number;
				public static COLOR_YUV420sp2GRAY: number;
				public static COLOR_YUV420p2GRAY: number;
				public static COLOR_YUV2RGB_UYVY: number;
				public static COLOR_YUV2BGR_UYVY: number;
				public static COLOR_YUV2RGB_Y422: number;
				public static COLOR_YUV2BGR_Y422: number;
				public static COLOR_YUV2RGB_UYNV: number;
				public static COLOR_YUV2BGR_UYNV: number;
				public static COLOR_YUV2RGBA_UYVY: number;
				public static COLOR_YUV2BGRA_UYVY: number;
				public static COLOR_YUV2RGBA_Y422: number;
				public static COLOR_YUV2BGRA_Y422: number;
				public static COLOR_YUV2RGBA_UYNV: number;
				public static COLOR_YUV2BGRA_UYNV: number;
				public static COLOR_YUV2RGB_YUY2: number;
				public static COLOR_YUV2BGR_YUY2: number;
				public static COLOR_YUV2RGB_YVYU: number;
				public static COLOR_YUV2BGR_YVYU: number;
				public static COLOR_YUV2RGB_YUYV: number;
				public static COLOR_YUV2BGR_YUYV: number;
				public static COLOR_YUV2RGB_YUNV: number;
				public static COLOR_YUV2BGR_YUNV: number;
				public static COLOR_YUV2RGBA_YUY2: number;
				public static COLOR_YUV2BGRA_YUY2: number;
				public static COLOR_YUV2RGBA_YVYU: number;
				public static COLOR_YUV2BGRA_YVYU: number;
				public static COLOR_YUV2RGBA_YUYV: number;
				public static COLOR_YUV2BGRA_YUYV: number;
				public static COLOR_YUV2RGBA_YUNV: number;
				public static COLOR_YUV2BGRA_YUNV: number;
				public static COLOR_YUV2GRAY_UYVY: number;
				public static COLOR_YUV2GRAY_YUY2: number;
				public static COLOR_YUV2GRAY_Y422: number;
				public static COLOR_YUV2GRAY_UYNV: number;
				public static COLOR_YUV2GRAY_YVYU: number;
				public static COLOR_YUV2GRAY_YUYV: number;
				public static COLOR_YUV2GRAY_YUNV: number;
				public static COLOR_RGBA2mRGBA: number;
				public static COLOR_mRGBA2RGBA: number;
				public static COLOR_RGB2YUV_I420: number;
				public static COLOR_BGR2YUV_I420: number;
				public static COLOR_RGB2YUV_IYUV: number;
				public static COLOR_BGR2YUV_IYUV: number;
				public static COLOR_RGBA2YUV_I420: number;
				public static COLOR_BGRA2YUV_I420: number;
				public static COLOR_RGBA2YUV_IYUV: number;
				public static COLOR_BGRA2YUV_IYUV: number;
				public static COLOR_RGB2YUV_YV12: number;
				public static COLOR_BGR2YUV_YV12: number;
				public static COLOR_RGBA2YUV_YV12: number;
				public static COLOR_BGRA2YUV_YV12: number;
				public static COLOR_BayerBG2BGR: number;
				public static COLOR_BayerGB2BGR: number;
				public static COLOR_BayerRG2BGR: number;
				public static COLOR_BayerGR2BGR: number;
				public static COLOR_BayerBG2RGB: number;
				public static COLOR_BayerGB2RGB: number;
				public static COLOR_BayerRG2RGB: number;
				public static COLOR_BayerGR2RGB: number;
				public static COLOR_BayerBG2GRAY: number;
				public static COLOR_BayerGB2GRAY: number;
				public static COLOR_BayerRG2GRAY: number;
				public static COLOR_BayerGR2GRAY: number;
				public static COLOR_BayerBG2BGR_VNG: number;
				public static COLOR_BayerGB2BGR_VNG: number;
				public static COLOR_BayerRG2BGR_VNG: number;
				public static COLOR_BayerGR2BGR_VNG: number;
				public static COLOR_BayerBG2RGB_VNG: number;
				public static COLOR_BayerGB2RGB_VNG: number;
				public static COLOR_BayerRG2RGB_VNG: number;
				public static COLOR_BayerGR2RGB_VNG: number;
				public static COLOR_BayerBG2BGR_EA: number;
				public static COLOR_BayerGB2BGR_EA: number;
				public static COLOR_BayerRG2BGR_EA: number;
				public static COLOR_BayerGR2BGR_EA: number;
				public static COLOR_BayerBG2RGB_EA: number;
				public static COLOR_BayerGB2RGB_EA: number;
				public static COLOR_BayerRG2RGB_EA: number;
				public static COLOR_BayerGR2RGB_EA: number;
				public static COLOR_BayerBG2BGRA: number;
				public static COLOR_BayerGB2BGRA: number;
				public static COLOR_BayerRG2BGRA: number;
				public static COLOR_BayerGR2BGRA: number;
				public static COLOR_BayerBG2RGBA: number;
				public static COLOR_BayerGB2RGBA: number;
				public static COLOR_BayerRG2RGBA: number;
				public static COLOR_BayerGR2RGBA: number;
				public static COLOR_COLORCVT_MAX: number;
				public static LSD_REFINE_NONE: number;
				public static LSD_REFINE_STD: number;
				public static LSD_REFINE_ADV: number;
				public static THRESH_BINARY: number;
				public static THRESH_BINARY_INV: number;
				public static THRESH_TRUNC: number;
				public static THRESH_TOZERO: number;
				public static THRESH_TOZERO_INV: number;
				public static THRESH_MASK: number;
				public static THRESH_OTSU: number;
				public static THRESH_TRIANGLE: number;
				public static ADAPTIVE_THRESH_MEAN_C: number;
				public static ADAPTIVE_THRESH_GAUSSIAN_C: number;
				public static CV_SHAPE_RECT: number;
				public static CV_SHAPE_CROSS: number;
				public static CV_SHAPE_ELLIPSE: number;
				public static CV_SHAPE_CUSTOM: number;
				public static GC_INIT_WITH_RECT: number;
				public static GC_INIT_WITH_MASK: number;
				public static GC_EVAL: number;
				public static GC_EVAL_FREEZE_MODEL: number;
				public static MORPH_RECT: number;
				public static MORPH_CROSS: number;
				public static MORPH_ELLIPSE: number;
				public static DIST_LABEL_CCOMP: number;
				public static DIST_LABEL_PIXEL: number;
				public static DIST_USER: number;
				public static DIST_L1: number;
				public static DIST_L2: number;
				public static DIST_C: number;
				public static DIST_L12: number;
				public static DIST_FAIR: number;
				public static DIST_WELSCH: number;
				public static DIST_HUBER: number;
				public static TM_SQDIFF: number;
				public static TM_SQDIFF_NORMED: number;
				public static TM_CCORR: number;
				public static TM_CCORR_NORMED: number;
				public static TM_CCOEFF: number;
				public static TM_CCOEFF_NORMED: number;
				public static DIST_MASK_3: number;
				public static DIST_MASK_5: number;
				public static DIST_MASK_PRECISE: number;
				public static CC_STAT_LEFT: number;
				public static CC_STAT_TOP: number;
				public static CC_STAT_WIDTH: number;
				public static CC_STAT_HEIGHT: number;
				public static CC_STAT_AREA: number;
				public static CC_STAT_MAX: number;
				public static CV_BLUR_NO_SCALE: number;
				public static CV_BLUR: number;
				public static CV_GAUSSIAN: number;
				public static CV_MEDIAN: number;
				public static CV_BILATERAL: number;
				public static MARKER_CROSS: number;
				public static MARKER_TILTED_CROSS: number;
				public static MARKER_STAR: number;
				public static MARKER_DIAMOND: number;
				public static MARKER_SQUARE: number;
				public static MARKER_TRIANGLE_UP: number;
				public static MARKER_TRIANGLE_DOWN: number;
				public static HoughLinesPointSet(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static circle(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: number, param3: org.opencv.core.Scalar, param4: number, param5: number, param6: number): void;
				public static goodFeaturesToTrack(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: number, param3: number, param4: number, param5: org.opencv.core.Mat, param6: number, param7: number, param8: boolean, param9: number): void;
				public static floodFill(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: org.opencv.core.Rect): number;
				public static rectangle(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect, param2: org.opencv.core.Scalar, param3: number, param4: number, param5: number): void;
				public static getGaborKernel(param0: org.opencv.core.Size, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.core.Mat;
				public static intersectConvexConvex(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: boolean): number;
				public static GaussianBlur(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number, param4: number): void;
				public static accumulateProduct(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static integral(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static Scharr(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static sqrBoxFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Size, param4: org.opencv.core.Point, param5: boolean): void;
				public static minAreaRect(param0: org.opencv.core.MatOfPoint2f): org.opencv.core.RotatedRect;
				public static goodFeaturesToTrack(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: number, param3: number, param4: number, param5: org.opencv.core.Mat, param6: number, param7: number): void;
				public static drawMarker(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Scalar): void;
				public static Scharr(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static circle(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: number, param3: org.opencv.core.Scalar, param4: number, param5: number): void;
				public static createHanningWindow(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: number): void;
				public static connectedComponentsWithStats(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): number;
				public static ellipse(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Size, param3: number, param4: number, param5: number, param6: org.opencv.core.Scalar, param7: number, param8: number, param9: number): void;
				public static distanceTransformWithLabels(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): void;
				public static applyColorMap(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static grabCut(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Rect, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: number, param6: number): void;
				public static linearPolar(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Point, param3: number, param4: number): void;
				public static polylines(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: boolean, param3: org.opencv.core.Scalar, param4: number, param5: number, param6: number): void;
				public static connectedComponents(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): number;
				public static HoughLines(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static morphologyEx(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat): void;
				public static ellipse(param0: org.opencv.core.Mat, param1: org.opencv.core.RotatedRect, param2: org.opencv.core.Scalar): void;
				public static cornerSubPix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: org.opencv.core.Size, param4: org.opencv.core.TermCriteria): void;
				public static arrowedLine(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: number): void;
				public static cornerMinEigenVal(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static createLineSegmentDetector(param0: number, param1: number, param2: number, param3: number): org.opencv.imgproc.LineSegmentDetector;
				public static goodFeaturesToTrack(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: number, param3: number, param4: number, param5: org.opencv.core.Mat, param6: number, param7: boolean): void;
				public static goodFeaturesToTrack(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: number, param3: number, param4: number, param5: org.opencv.core.Mat): void;
				public static moments(param0: org.opencv.core.Mat): org.opencv.imgproc.Moments;
				public static getRectSubPix(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: org.opencv.core.Point, param3: org.opencv.core.Mat, param4: number): void;
				public static filter2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Point): void;
				public static putText(param0: org.opencv.core.Mat, param1: string, param2: org.opencv.core.Point, param3: number, param4: number, param5: org.opencv.core.Scalar, param6: number, param7: number, param8: boolean): void;
				public static connectedComponentsWithStats(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): number;
				public static accumulateSquare(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static watershed(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static createLineSegmentDetector(param0: number, param1: number, param2: number): org.opencv.imgproc.LineSegmentDetector;
				public static createLineSegmentDetector(param0: number, param1: number): org.opencv.imgproc.LineSegmentDetector;
				public static pointPolygonTest(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.Point, param2: boolean): number;
				public static filter2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Point, param5: number): void;
				public static resize(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size): void;
				public static integral3(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): void;
				public static warpPerspective(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size): void;
				public static Canny(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static drawContours(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: number, param3: org.opencv.core.Scalar, param4: number): void;
				public static ellipse(param0: org.opencv.core.Mat, param1: org.opencv.core.RotatedRect, param2: org.opencv.core.Scalar, param3: number): void;
				public static polylines(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: boolean, param3: org.opencv.core.Scalar, param4: number): void;
				public static blur(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size): void;
				public static getPerspectiveTransform(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): org.opencv.core.Mat;
				public static drawMarker(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Scalar, param3: number, param4: number, param5: number): void;
				public static ellipse(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Size, param3: number, param4: number, param5: number, param6: org.opencv.core.Scalar, param7: number): void;
				public static blur(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: org.opencv.core.Point, param4: number): void;
				public static getGaussianKernel(param0: number, param1: number, param2: number): org.opencv.core.Mat;
				public static fitEllipseAMS(param0: org.opencv.core.Mat): org.opencv.core.RotatedRect;
				public static arrowedLine(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: number, param5: number, param6: number, param7: number): void;
				public static cornerHarris(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static polylines(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: boolean, param3: org.opencv.core.Scalar, param4: number, param5: number): void;
				public static fillConvexPoly(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: org.opencv.core.Scalar): void;
				public static ellipse(param0: org.opencv.core.Mat, param1: org.opencv.core.RotatedRect, param2: org.opencv.core.Scalar, param3: number, param4: number): void;
				public static pyrMeanShiftFiltering(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: org.opencv.core.TermCriteria): void;
				public static erode(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Point, param4: number, param5: number, param6: org.opencv.core.Scalar): void;
				public static approxPolyDP(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f, param2: number, param3: boolean): void;
				public static convexityDefects(param0: org.opencv.core.MatOfPoint, param1: org.opencv.core.MatOfInt, param2: org.opencv.core.MatOfInt4): void;
				public static ellipse2Poly(param0: org.opencv.core.Point, param1: org.opencv.core.Size, param2: number, param3: number, param4: number, param5: number, param6: org.opencv.core.MatOfPoint): void;
				public static circle(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: number, param3: org.opencv.core.Scalar, param4: number): void;
				public static invertAffineTransform(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static fitEllipseDirect(param0: org.opencv.core.Mat): org.opencv.core.RotatedRect;
				public static floodFill(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: org.opencv.core.Rect, param5: org.opencv.core.Scalar, param6: org.opencv.core.Scalar): number;
				public static arrowedLine(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: number, param5: number): void;
				public static integral2(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static sqrBoxFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Size, param4: org.opencv.core.Point, param5: boolean, param6: number): void;
				public static drawMarker(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Scalar, param3: number, param4: number, param5: number, param6: number): void;
				public static accumulate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static calcHist(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.MatOfInt, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.MatOfInt, param5: org.opencv.core.MatOfFloat): void;
				public static convexHull(param0: org.opencv.core.MatOfPoint, param1: org.opencv.core.MatOfInt, param2: boolean): void;
				public static rectangle(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar): void;
				public static ellipse(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Size, param3: number, param4: number, param5: number, param6: org.opencv.core.Scalar, param7: number, param8: number): void;
				public static Canny(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static contourArea(param0: org.opencv.core.Mat): number;
				public static createLineSegmentDetector(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): org.opencv.imgproc.LineSegmentDetector;
				public static boxFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Size, param4: org.opencv.core.Point, param5: boolean, param6: number): void;
				public static drawMarker(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Scalar, param3: number): void;
				public static accumulateSquare(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static createLineSegmentDetector(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.imgproc.LineSegmentDetector;
				public static cornerMinEigenVal(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static dilate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static Canny(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: boolean): void;
				public static rotatedRectangleIntersection(param0: org.opencv.core.RotatedRect, param1: org.opencv.core.RotatedRect, param2: org.opencv.core.Mat): number;
				public static goodFeaturesToTrack(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: number, param3: number, param4: number): void;
				public static getRectSubPix(param0: org.opencv.core.Mat, param1: org.opencv.core.Size, param2: org.opencv.core.Point, param3: org.opencv.core.Mat): void;
				public static createLineSegmentDetector(): org.opencv.imgproc.LineSegmentDetector;
				public static drawContours(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: number, param3: org.opencv.core.Scalar, param4: number, param5: number): void;
				public static HoughCircles(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static isContourConvex(param0: org.opencv.core.MatOfPoint): boolean;
				public static Scharr(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static findContours(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: org.opencv.core.Mat, param3: number, param4: number, param5: org.opencv.core.Point): void;
				public static Sobel(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static getGaussianKernel(param0: number, param1: number): org.opencv.core.Mat;
				public static warpPerspective(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size, param4: number, param5: number, param6: org.opencv.core.Scalar): void;
				public static boxFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Size, param4: org.opencv.core.Point): void;
				public static integral3(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number): void;
				public static convertMaps(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: boolean): void;
				public static cvtColorTwoPlane(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static arrowedLine(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar): void;
				public static applyColorMap(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static findContours(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static convexHull(param0: org.opencv.core.MatOfPoint, param1: org.opencv.core.MatOfInt): void;
				public static fillConvexPoly(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: org.opencv.core.Scalar, param3: number, param4: number): void;
				public static fillPoly(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: org.opencv.core.Scalar, param3: number): void;
				public static pyrUp(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number): void;
				public static HoughLinesP(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static sqrBoxFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Size, param4: org.opencv.core.Point): void;
				public static goodFeaturesToTrack(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: number, param3: number, param4: number, param5: org.opencv.core.Mat, param6: number): void;
				public static convertMaps(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): void;
				public static equalizeHist(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static getFontScaleFromHeight(param0: number, param1: number): number;
				public static Scharr(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static moments(param0: org.opencv.core.Mat, param1: boolean): org.opencv.imgproc.Moments;
				public static integral3(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static dilate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Point): void;
				public static medianBlur(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static polylines(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: boolean, param3: org.opencv.core.Scalar): void;
				public static preCornerDetect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static putText(param0: org.opencv.core.Mat, param1: string, param2: org.opencv.core.Point, param3: number, param4: number, param5: org.opencv.core.Scalar, param6: number): void;
				public static getAffineTransform(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfPoint2f): org.opencv.core.Mat;
				public static accumulateWeighted(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat): void;
				public static preCornerDetect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static drawContours(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: number, param3: org.opencv.core.Scalar, param4: number, param5: number, param6: org.opencv.core.Mat): void;
				public static line(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: number, param5: number, param6: number): void;
				public static rectangle(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: number, param5: number): void;
				public static matchTemplate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static sepFilter2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Point): void;
				public static connectedComponents(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
				public static putText(param0: org.opencv.core.Mat, param1: string, param2: org.opencv.core.Point, param3: number, param4: number, param5: org.opencv.core.Scalar, param6: number, param7: number): void;
				public static HoughCircles(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static warpAffine(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size, param4: number): void;
				public static contourArea(param0: org.opencv.core.Mat, param1: boolean): number;
				public static cvtColor(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static getStructuringElement(param0: number, param1: org.opencv.core.Size, param2: org.opencv.core.Point): org.opencv.core.Mat;
				public static HoughCircles(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static distanceTransform(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static spatialGradient(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static getDerivKernels(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static getRotationMatrix2D(param0: org.opencv.core.Point, param1: number, param2: number): org.opencv.core.Mat;
				public static warpPolar(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: org.opencv.core.Point, param4: number, param5: number): void;
				public static calcBackProject(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.MatOfInt, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.MatOfFloat, param5: number): void;
				public static dilate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Point, param4: number, param5: number, param6: org.opencv.core.Scalar): void;
				public static morphologyEx(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Point, param5: number, param6: number): void;
				public static minEnclosingTriangle(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
				public static floodFill(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: org.opencv.core.Rect, param5: org.opencv.core.Scalar, param6: org.opencv.core.Scalar, param7: number): number;
				public static calcHist(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.MatOfInt, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.MatOfInt, param5: org.opencv.core.MatOfFloat, param6: boolean): void;
				public static fillPoly(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: org.opencv.core.Scalar, param3: number, param4: number): void;
				public static HoughLines(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static fillPoly(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: org.opencv.core.Scalar, param3: number, param4: number, param5: org.opencv.core.Point): void;
				public static arrowedLine(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: number, param5: number, param6: number): void;
				public static createLineSegmentDetector(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.imgproc.LineSegmentDetector;
				public static ellipse(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Size, param3: number, param4: number, param5: number, param6: org.opencv.core.Scalar): void;
				public static pyrDown(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number): void;
				public static getGaborKernel(param0: org.opencv.core.Size, param1: number, param2: number, param3: number, param4: number): org.opencv.core.Mat;
				public static phaseCorrelate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): org.opencv.core.Point;
				public static HoughLinesP(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static Sobel(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static floodFill(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: org.opencv.core.Rect, param5: org.opencv.core.Scalar): number;
				public static morphologyEx(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Point, param5: number, param6: number, param7: org.opencv.core.Scalar): void;
				public static Canny(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static sepFilter2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Point, param6: number, param7: number): void;
				public static connectedComponentsWithStats(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number): number;
				public static line(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar): void;
				public static warpAffine(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size): void;
				public static remap(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number): void;
				public static fillPoly(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: org.opencv.core.Scalar): void;
				public static EMD(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat): number;
				public static rectangle(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect, param2: org.opencv.core.Scalar, param3: number): void;
				public static erode(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static distanceTransform(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static erode(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Point): void;
				public static threshold(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): number;
				public static warpPerspective(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size, param4: number, param5: number): void;
				public static drawContours(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: number, param3: org.opencv.core.Scalar): void;
				public static erode(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Point, param4: number): void;
				public static HoughCircles(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static accumulate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static blur(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: org.opencv.core.Point): void;
				public static boxPoints(param0: org.opencv.core.RotatedRect, param1: org.opencv.core.Mat): void;
				public static matchShapes(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): number;
				public static drawContours(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: number, param3: org.opencv.core.Scalar, param4: number, param5: number, param6: org.opencv.core.Mat, param7: number): void;
				public static fitLine(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static boxFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Size): void;
				public static createCLAHE(param0: number): org.opencv.imgproc.CLAHE;
				public static connectedComponents(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): number;
				public static filter2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Point, param5: number, param6: number): void;
				public static bilateralFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static minEnclosingCircle(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.Point, param2: native.Array<number>): void;
				public static pyrDown(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size): void;
				public static Laplacian(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static fillConvexPoly(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: org.opencv.core.Scalar, param3: number): void;
				public static pyrDown(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static warpPerspective(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size, param4: number): void;
				public static spatialGradient(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static connectedComponentsWithAlgorithm(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): number;
				public static HoughLines(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static GaussianBlur(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number, param4: number, param5: number): void;
				public static dilate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Point, param4: number): void;
				public static resize(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number, param4: number): void;
				public static cvtColor(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static cornerMinEigenVal(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static circle(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: number, param3: org.opencv.core.Scalar): void;
				public static pyrMeanShiftFiltering(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static rectangle(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: number): void;
				public static getFontScaleFromHeight(param0: number, param1: number, param2: number): number;
				public static grabCut(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Rect, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: number): void;
				public static putText(param0: org.opencv.core.Mat, param1: string, param2: org.opencv.core.Point, param3: number, param4: number, param5: org.opencv.core.Scalar): void;
				public static HoughCircles(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static cornerEigenValsAndVecs(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static EMD(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): number;
				public static demosaicing(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static createCLAHE(): org.opencv.imgproc.CLAHE;
				public static cornerEigenValsAndVecs(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static erode(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Point, param4: number, param5: number): void;
				public static intersectConvexConvex(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): number;
				public static createCLAHE(param0: number, param1: org.opencv.core.Size): org.opencv.imgproc.CLAHE;
				public static GaussianBlur(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number): void;
				public static morphologyEx(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Point, param5: number): void;
				public static arcLength(param0: org.opencv.core.MatOfPoint2f, param1: boolean): number;
				public static createLineSegmentDetector(param0: number): org.opencv.imgproc.LineSegmentDetector;
				public static connectedComponentsWithStatsWithAlgorithm(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number, param6: number): number;
				public static createLineSegmentDetector(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.imgproc.LineSegmentDetector;
				public static sqrBoxFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Size): void;
				public static morphologyEx(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Point): void;
				public static boundingRect(param0: org.opencv.core.Mat): org.opencv.core.Rect;
				public static phaseCorrelate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.core.Point;
				public static EMD(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): number;
				public static pyrUp(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size): void;
				public constructor();
				public static getDerivKernels(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: boolean, param6: number): void;
				public static goodFeaturesToTrack(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: number, param3: number, param4: number, param5: org.opencv.core.Mat, param6: number, param7: boolean, param8: number): void;
				public static Laplacian(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static HoughLines(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static cornerHarris(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static rectangle(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect, param2: org.opencv.core.Scalar, param3: number, param4: number): void;
				public static Canny(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: boolean): void;
				public static HoughLines(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static clipLine(param0: org.opencv.core.Rect, param1: org.opencv.core.Point, param2: org.opencv.core.Point): boolean;
				public static floodFill(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar): number;
				public static adaptiveThreshold(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static pyrUp(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static Sobel(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static sepFilter2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Point, param6: number): void;
				public static spatialGradient(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static logPolar(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Point, param3: number, param4: number): void;
				public static bilateralFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static compareHist(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): number;
				public static boxFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Size, param4: org.opencv.core.Point, param5: boolean): void;
				public static matchTemplate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.core.Mat): void;
				public static goodFeaturesToTrack(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: number, param3: number, param4: number, param5: org.opencv.core.Mat, param6: number, param7: number, param8: boolean): void;
				public static remap(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): void;
				public static line(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: number, param5: number): void;
				public static integral2(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static Sobel(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static dilate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Point, param4: number, param5: number): void;
				public static integral(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static integral2(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static Laplacian(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static sepFilter2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static accumulateWeighted(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static drawContours(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>, param2: number, param3: org.opencv.core.Scalar, param4: number, param5: number, param6: org.opencv.core.Mat, param7: number, param8: org.opencv.core.Point): void;
				public static rectangle(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: number, param5: number, param6: number): void;
				public static pyrMeanShiftFiltering(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static getDerivKernels(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: boolean): void;
				public static resize(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number): void;
				public static Sobel(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static warpAffine(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size, param4: number, param5: number, param6: org.opencv.core.Scalar): void;
				public static line(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Point, param3: org.opencv.core.Scalar, param4: number): void;
				public static rectangle(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect, param2: org.opencv.core.Scalar): void;
				public static resize(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: number, param4: number, param5: number): void;
				public static filter2D(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: org.opencv.core.Mat): void;
				public static Laplacian(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static getPerspectiveTransform(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.core.Mat;
				public static HuMoments(param0: org.opencv.imgproc.Moments, param1: org.opencv.core.Mat): void;
				public static getStructuringElement(param0: number, param1: org.opencv.core.Size): org.opencv.core.Mat;
				public static getTextSize(param0: string, param1: number, param2: number, param3: number, param4: native.Array<number>): org.opencv.core.Size;
				public static getGaborKernel(param0: org.opencv.core.Size, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.core.Mat;
				public static drawMarker(param0: org.opencv.core.Mat, param1: org.opencv.core.Point, param2: org.opencv.core.Scalar, param3: number, param4: number): void;
				public static fitEllipse(param0: org.opencv.core.MatOfPoint2f): org.opencv.core.RotatedRect;
				public static Laplacian(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static remap(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number, param6: org.opencv.core.Scalar): void;
				public static demosaicing(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static phaseCorrelate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: native.Array<number>): org.opencv.core.Point;
				public static HoughLinesP(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static accumulateProduct(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static distanceTransformWithLabels(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static warpAffine(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size, param4: number, param5: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module imgproc {
			export class LineSegmentDetector extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.imgproc.LineSegmentDetector>;
				public compareSegments(param0: org.opencv.core.Size, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): number;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public drawSegments(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public compareSegments(param0: org.opencv.core.Size, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): number;
				public finalize(): void;
				public constructor(param0: number);
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.imgproc.LineSegmentDetector;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module imgproc {
			export class Moments {
				public static class: java.lang.Class<org.opencv.imgproc.Moments>;
				public m00: number;
				public m10: number;
				public m01: number;
				public m20: number;
				public m11: number;
				public m02: number;
				public m30: number;
				public m21: number;
				public m12: number;
				public m03: number;
				public mu20: number;
				public mu11: number;
				public mu02: number;
				public mu30: number;
				public mu21: number;
				public mu12: number;
				public mu03: number;
				public nu20: number;
				public nu11: number;
				public nu02: number;
				public nu30: number;
				public nu21: number;
				public nu12: number;
				public nu03: number;
				public set_nu02(param0: number): void;
				public get_mu30(): number;
				public get_mu20(): number;
				public set_mu11(param0: number): void;
				public set_m03(param0: number): void;
				public constructor();
				public set_m20(param0: number): void;
				public get_m21(): number;
				public get_nu03(): number;
				public get_m01(): number;
				public get_m11(): number;
				public set_m11(param0: number): void;
				public get_m20(): number;
				public set_mu02(param0: number): void;
				public set_nu20(param0: number): void;
				public get_nu20(): number;
				public get_m10(): number;
				public get_mu02(): number;
				public get_m00(): number;
				public set_m00(param0: number): void;
				public get_mu12(): number;
				public toString(): string;
				public set_mu12(param0: number): void;
				public get_nu30(): number;
				public set_mu20(param0: number): void;
				public get_nu21(): number;
				public get_nu11(): number;
				public get_mu03(): number;
				public set_m12(param0: number): void;
				public get_m12(): number;
				public get_nu02(): number;
				public set_mu30(param0: number): void;
				public set_nu21(param0: number): void;
				public constructor(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number);
				public get_m02(): number;
				public get_nu12(): number;
				public set_m01(param0: number): void;
				public constructor(param0: native.Array<number>);
				public set_m30(param0: number): void;
				public set_nu12(param0: number): void;
				public get_mu11(): number;
				public set_mu21(param0: number): void;
				public get_mu21(): number;
				public get_m30(): number;
				public set_m02(param0: number): void;
				public completeState(): void;
				public set_nu03(param0: number): void;
				public set_m21(param0: number): void;
				public get_m03(): number;
				public set_nu30(param0: number): void;
				public set_m10(param0: number): void;
				public set(param0: native.Array<number>): void;
				public set_nu11(param0: number): void;
				public set_mu03(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module imgproc {
			export class Subdiv2D {
				public static class: java.lang.Class<org.opencv.imgproc.Subdiv2D>;
				public nativeObj: number;
				public static PTLOC_ERROR: number;
				public static PTLOC_OUTSIDE_RECT: number;
				public static PTLOC_INSIDE: number;
				public static PTLOC_VERTEX: number;
				public static PTLOC_ON_EDGE: number;
				public static NEXT_AROUND_ORG: number;
				public static NEXT_AROUND_DST: number;
				public static PREV_AROUND_ORG: number;
				public static PREV_AROUND_DST: number;
				public static NEXT_AROUND_LEFT: number;
				public static NEXT_AROUND_RIGHT: number;
				public static PREV_AROUND_LEFT: number;
				public static PREV_AROUND_RIGHT: number;
				public getEdgeList(param0: org.opencv.core.MatOfFloat4): void;
				public getVertex(param0: number, param1: native.Array<number>): org.opencv.core.Point;
				public rotateEdge(param0: number, param1: number): number;
				public getLeadingEdgeList(param0: org.opencv.core.MatOfInt): void;
				public insert(param0: org.opencv.core.Point): number;
				public edgeDst(param0: number, param1: org.opencv.core.Point): number;
				public nextEdge(param0: number): number;
				public finalize(): void;
				public static __fromPtr__(param0: number): org.opencv.imgproc.Subdiv2D;
				public getTriangleList(param0: org.opencv.core.MatOfFloat6): void;
				public insert(param0: org.opencv.core.MatOfPoint2f): void;
				public constructor();
				public edgeOrg(param0: number): number;
				public locate(param0: org.opencv.core.Point, param1: native.Array<number>, param2: native.Array<number>): number;
				public getVertex(param0: number): org.opencv.core.Point;
				public findNearest(param0: org.opencv.core.Point): number;
				public getEdge(param0: number, param1: number): number;
				public getNativeObjAddr(): number;
				public getVoronoiFacetList(param0: org.opencv.core.MatOfInt, param1: java.util.List<org.opencv.core.MatOfPoint2f>, param2: org.opencv.core.MatOfPoint2f): void;
				public symEdge(param0: number): number;
				public constructor(param0: org.opencv.core.Rect);
				public initDelaunay(param0: org.opencv.core.Rect): void;
				public edgeDst(param0: number): number;
				public constructor(param0: number);
				public edgeOrg(param0: number, param1: org.opencv.core.Point): number;
				public findNearest(param0: org.opencv.core.Point, param1: org.opencv.core.Point): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class ANN_MLP extends org.opencv.ml.StatModel {
				public static class: java.lang.Class<org.opencv.ml.ANN_MLP>;
				public static BACKPROP: number;
				public static RPROP: number;
				public static ANNEAL: number;
				public static UPDATE_WEIGHTS: number;
				public static NO_INPUT_SCALE: number;
				public static NO_OUTPUT_SCALE: number;
				public static IDENTITY: number;
				public static SIGMOID_SYM: number;
				public static GAUSSIAN: number;
				public static RELU: number;
				public static LEAKYRELU: number;
				public getAnnealFinalT(): number;
				public finalize(): void;
				public getRpropDWMin(): number;
				public setBackpropWeightScale(param0: number): void;
				public setTrainMethod(param0: number, param1: number): void;
				public getBackpropMomentumScale(): number;
				public getRpropDWMax(): number;
				public setActivationFunction(param0: number, param1: number): void;
				public setTrainMethod(param0: number, param1: number, param2: number): void;
				public setAnnealFinalT(param0: number): void;
				public static create(): org.opencv.ml.ANN_MLP;
				public setRpropDW0(param0: number): void;
				public setRpropDWPlus(param0: number): void;
				public setTermCriteria(param0: org.opencv.core.TermCriteria): void;
				public getAnnealInitialT(): number;
				public setAnnealItePerStep(param0: number): void;
				public getWeights(param0: number): org.opencv.core.Mat;
				public getRpropDW0(): number;
				public getRpropDWMinus(): number;
				public static __fromPtr__(param0: number): org.opencv.ml.StatModel;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getAnnealCoolingRatio(): number;
				public getTrainMethod(): number;
				public getRpropDWPlus(): number;
				public setLayerSizes(param0: org.opencv.core.Mat): void;
				public setActivationFunction(param0: number, param1: number, param2: number): void;
				public setActivationFunction(param0: number): void;
				public setBackpropMomentumScale(param0: number): void;
				public setTrainMethod(param0: number): void;
				public setAnnealInitialT(param0: number): void;
				public getAnnealItePerStep(): number;
				public static __fromPtr__(param0: number): org.opencv.ml.ANN_MLP;
				public getBackpropWeightScale(): number;
				public getLayerSizes(): org.opencv.core.Mat;
				public setRpropDWMin(param0: number): void;
				public constructor(param0: number);
				public setAnnealCoolingRatio(param0: number): void;
				public setRpropDWMinus(param0: number): void;
				public getTermCriteria(): org.opencv.core.TermCriteria;
				public setRpropDWMax(param0: number): void;
				public static load(param0: string): org.opencv.ml.ANN_MLP;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class Boost extends org.opencv.ml.DTrees {
				public static class: java.lang.Class<org.opencv.ml.Boost>;
				public static DISCRETE: number;
				public static REAL: number;
				public static LOGIT: number;
				public static GENTLE: number;
				public static __fromPtr__(param0: number): org.opencv.ml.Boost;
				public static __fromPtr__(param0: number): org.opencv.ml.DTrees;
				public static __fromPtr__(param0: number): org.opencv.ml.StatModel;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getBoostType(): number;
				public finalize(): void;
				public static load(param0: string): org.opencv.ml.DTrees;
				public static create(): org.opencv.ml.Boost;
				public static load(param0: string, param1: string): org.opencv.ml.Boost;
				public getWeightTrimRate(): number;
				public setBoostType(param0: number): void;
				public getWeakCount(): number;
				public static load(param0: string): org.opencv.ml.Boost;
				public setWeightTrimRate(param0: number): void;
				public constructor(param0: number);
				public static load(param0: string, param1: string): org.opencv.ml.DTrees;
				public static create(): org.opencv.ml.DTrees;
				public setWeakCount(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class DTrees extends org.opencv.ml.StatModel {
				public static class: java.lang.Class<org.opencv.ml.DTrees>;
				public static PREDICT_AUTO: number;
				public static PREDICT_SUM: number;
				public static PREDICT_MAX_VOTE: number;
				public static PREDICT_MASK: number;
				public getPriors(): org.opencv.core.Mat;
				public getUse1SERule(): boolean;
				public setMaxDepth(param0: number): void;
				public finalize(): void;
				public getMaxCategories(): number;
				public getMaxDepth(): number;
				public setTruncatePrunedTree(param0: boolean): void;
				public setRegressionAccuracy(param0: number): void;
				public setUseSurrogates(param0: boolean): void;
				public setMaxCategories(param0: number): void;
				public getTruncatePrunedTree(): boolean;
				public getCVFolds(): number;
				public getRegressionAccuracy(): number;
				public static create(): org.opencv.ml.DTrees;
				public setCVFolds(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.ml.DTrees;
				public static __fromPtr__(param0: number): org.opencv.ml.StatModel;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setPriors(param0: org.opencv.core.Mat): void;
				public setUse1SERule(param0: boolean): void;
				public getUseSurrogates(): boolean;
				public static load(param0: string): org.opencv.ml.DTrees;
				public getMinSampleCount(): number;
				public constructor(param0: number);
				public static load(param0: string, param1: string): org.opencv.ml.DTrees;
				public setMinSampleCount(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class EM extends org.opencv.ml.StatModel {
				public static class: java.lang.Class<org.opencv.ml.EM>;
				public static DEFAULT_NCLUSTERS: number;
				public static DEFAULT_MAX_ITERS: number;
				public static START_E_STEP: number;
				public static START_M_STEP: number;
				public static START_AUTO_STEP: number;
				public static COV_MAT_SPHERICAL: number;
				public static COV_MAT_DIAGONAL: number;
				public static COV_MAT_GENERIC: number;
				public static COV_MAT_DEFAULT: number;
				public trainE(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): boolean;
				public getCovarianceMatrixType(): number;
				public getWeights(): org.opencv.core.Mat;
				public trainM(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): boolean;
				public trainEM(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): boolean;
				public finalize(): void;
				public trainEM(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): boolean;
				public static load(param0: string, param1: string): org.opencv.ml.EM;
				public trainE(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): boolean;
				public getCovs(param0: java.util.List<org.opencv.core.Mat>): void;
				public setClustersNumber(param0: number): void;
				public predict(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): number;
				public trainM(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): boolean;
				public static create(): org.opencv.ml.EM;
				public trainM(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): boolean;
				public setTermCriteria(param0: org.opencv.core.TermCriteria): void;
				public static __fromPtr__(param0: number): org.opencv.ml.StatModel;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public trainE(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): boolean;
				public trainE(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): boolean;
				public trainEM(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): boolean;
				public trainM(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): boolean;
				public static __fromPtr__(param0: number): org.opencv.ml.EM;
				public predict2(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): native.Array<number>;
				public predict(param0: org.opencv.core.Mat): number;
				public getMeans(): org.opencv.core.Mat;
				public predict(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
				public static load(param0: string): org.opencv.ml.EM;
				public trainEM(param0: org.opencv.core.Mat): boolean;
				public trainE(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): boolean;
				public constructor(param0: number);
				public getTermCriteria(): org.opencv.core.TermCriteria;
				public setCovarianceMatrixType(param0: number): void;
				public trainE(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): boolean;
				public getClustersNumber(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class KNearest extends org.opencv.ml.StatModel {
				public static class: java.lang.Class<org.opencv.ml.KNearest>;
				public static BRUTE_FORCE: number;
				public static KDTREE: number;
				public findNearest(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): number;
				public static __fromPtr__(param0: number): org.opencv.ml.StatModel;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setDefaultK(param0: number): void;
				public getDefaultK(): number;
				public setIsClassifier(param0: boolean): void;
				public findNearest(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): number;
				public finalize(): void;
				public getAlgorithmType(): number;
				public setEmax(param0: number): void;
				public getIsClassifier(): boolean;
				public getEmax(): number;
				public static create(): org.opencv.ml.KNearest;
				public constructor(param0: number);
				public findNearest(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat): number;
				public setAlgorithmType(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.ml.KNearest;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class LogisticRegression extends org.opencv.ml.StatModel {
				public static class: java.lang.Class<org.opencv.ml.LogisticRegression>;
				public static REG_DISABLE: number;
				public static REG_L1: number;
				public static REG_L2: number;
				public static BATCH: number;
				public static MINI_BATCH: number;
				public static __fromPtr__(param0: number): org.opencv.ml.LogisticRegression;
				public static __fromPtr__(param0: number): org.opencv.ml.StatModel;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getRegularization(): number;
				public get_learnt_thetas(): org.opencv.core.Mat;
				public setIterations(param0: number): void;
				public getTrainMethod(): number;
				public static load(param0: string): org.opencv.ml.LogisticRegression;
				public finalize(): void;
				public predict(param0: org.opencv.core.Mat): number;
				public setLearningRate(param0: number): void;
				public setTrainMethod(param0: number): void;
				public getMiniBatchSize(): number;
				public predict(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
				public predict(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): number;
				public getLearningRate(): number;
				public setMiniBatchSize(param0: number): void;
				public constructor(param0: number);
				public setRegularization(param0: number): void;
				public static create(): org.opencv.ml.LogisticRegression;
				public static load(param0: string, param1: string): org.opencv.ml.LogisticRegression;
				public getTermCriteria(): org.opencv.core.TermCriteria;
				public getIterations(): number;
				public setTermCriteria(param0: org.opencv.core.TermCriteria): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class Ml {
				public static class: java.lang.Class<org.opencv.ml.Ml>;
				public static ROW_SAMPLE: number;
				public static COL_SAMPLE: number;
				public static VAR_NUMERICAL: number;
				public static VAR_ORDERED: number;
				public static VAR_CATEGORICAL: number;
				public static TEST_ERROR: number;
				public static TRAIN_ERROR: number;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class NormalBayesClassifier extends org.opencv.ml.StatModel {
				public static class: java.lang.Class<org.opencv.ml.NormalBayesClassifier>;
				public static create(): org.opencv.ml.NormalBayesClassifier;
				public static __fromPtr__(param0: number): org.opencv.ml.StatModel;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static load(param0: string, param1: string): org.opencv.ml.NormalBayesClassifier;
				public finalize(): void;
				public constructor(param0: number);
				public static load(param0: string): org.opencv.ml.NormalBayesClassifier;
				public static __fromPtr__(param0: number): org.opencv.ml.NormalBayesClassifier;
				public predictProb(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): number;
				public predictProb(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class ParamGrid {
				public static class: java.lang.Class<org.opencv.ml.ParamGrid>;
				public nativeObj: number;
				public static create(param0: number, param1: number): org.opencv.ml.ParamGrid;
				public static create(): org.opencv.ml.ParamGrid;
				public get_maxVal(): number;
				public static __fromPtr__(param0: number): org.opencv.ml.ParamGrid;
				public set_minVal(param0: number): void;
				public finalize(): void;
				public getNativeObjAddr(): number;
				public static create(param0: number): org.opencv.ml.ParamGrid;
				public set_maxVal(param0: number): void;
				public static create(param0: number, param1: number, param2: number): org.opencv.ml.ParamGrid;
				public get_logStep(): number;
				public set_logStep(param0: number): void;
				public get_minVal(): number;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class RTrees extends org.opencv.ml.DTrees {
				public static class: java.lang.Class<org.opencv.ml.RTrees>;
				public static load(param0: string, param1: string): org.opencv.ml.RTrees;
				public static __fromPtr__(param0: number): org.opencv.ml.DTrees;
				public static create(): org.opencv.ml.RTrees;
				public static __fromPtr__(param0: number): org.opencv.ml.StatModel;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getActiveVarCount(): number;
				public setCalculateVarImportance(param0: boolean): void;
				public finalize(): void;
				public static load(param0: string): org.opencv.ml.DTrees;
				public static __fromPtr__(param0: number): org.opencv.ml.RTrees;
				public getCalculateVarImportance(): boolean;
				public getVotes(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static load(param0: string): org.opencv.ml.RTrees;
				public getVarImportance(): org.opencv.core.Mat;
				public setActiveVarCount(param0: number): void;
				public constructor(param0: number);
				public static load(param0: string, param1: string): org.opencv.ml.DTrees;
				public getTermCriteria(): org.opencv.core.TermCriteria;
				public static create(): org.opencv.ml.DTrees;
				public setTermCriteria(param0: org.opencv.core.TermCriteria): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class SVM extends org.opencv.ml.StatModel {
				public static class: java.lang.Class<org.opencv.ml.SVM>;
				public static CUSTOM: number;
				public static LINEAR: number;
				public static POLY: number;
				public static RBF: number;
				public static SIGMOID: number;
				public static CHI2: number;
				public static INTER: number;
				public static C_SVC: number;
				public static NU_SVC: number;
				public static ONE_CLASS: number;
				public static EPS_SVR: number;
				public static NU_SVR: number;
				public static C: number;
				public static GAMMA: number;
				public static P: number;
				public static NU: number;
				public static COEF: number;
				public static DEGREE: number;
				public setNu(param0: number): void;
				public setClassWeights(param0: org.opencv.core.Mat): void;
				public getType(): number;
				public finalize(): void;
				public trainAuto(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat): boolean;
				public trainAuto(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.ml.ParamGrid, param5: org.opencv.ml.ParamGrid, param6: org.opencv.ml.ParamGrid, param7: org.opencv.ml.ParamGrid): boolean;
				public getClassWeights(): org.opencv.core.Mat;
				public trainAuto(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: number): boolean;
				public setCoef0(param0: number): void;
				public trainAuto(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.ml.ParamGrid, param5: org.opencv.ml.ParamGrid, param6: org.opencv.ml.ParamGrid): boolean;
				public static getDefaultGridPtr(param0: number): org.opencv.ml.ParamGrid;
				public getGamma(): number;
				public trainAuto(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.ml.ParamGrid, param5: org.opencv.ml.ParamGrid, param6: org.opencv.ml.ParamGrid, param7: org.opencv.ml.ParamGrid, param8: org.opencv.ml.ParamGrid): boolean;
				public setTermCriteria(param0: org.opencv.core.TermCriteria): void;
				public getKernelType(): number;
				public setType(param0: number): void;
				public trainAuto(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.ml.ParamGrid, param5: org.opencv.ml.ParamGrid, param6: org.opencv.ml.ParamGrid, param7: org.opencv.ml.ParamGrid, param8: org.opencv.ml.ParamGrid, param9: org.opencv.ml.ParamGrid, param10: boolean): boolean;
				public static __fromPtr__(param0: number): org.opencv.ml.StatModel;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setC(param0: number): void;
				public getUncompressedSupportVectors(): org.opencv.core.Mat;
				public static create(): org.opencv.ml.SVM;
				public getCoef0(): number;
				public getDecisionFunction(param0: number, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): number;
				public trainAuto(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.ml.ParamGrid): boolean;
				public getP(): number;
				public static __fromPtr__(param0: number): org.opencv.ml.SVM;
				public setGamma(param0: number): void;
				public getSupportVectors(): org.opencv.core.Mat;
				public trainAuto(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.ml.ParamGrid, param5: org.opencv.ml.ParamGrid, param6: org.opencv.ml.ParamGrid, param7: org.opencv.ml.ParamGrid, param8: org.opencv.ml.ParamGrid, param9: org.opencv.ml.ParamGrid): boolean;
				public getNu(): number;
				public setKernel(param0: number): void;
				public getC(): number;
				public setDegree(param0: number): void;
				public static load(param0: string): org.opencv.ml.SVM;
				public constructor(param0: number);
				public getTermCriteria(): org.opencv.core.TermCriteria;
				public trainAuto(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.ml.ParamGrid, param5: org.opencv.ml.ParamGrid): boolean;
				public getDegree(): number;
				public setP(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class SVMSGD extends org.opencv.ml.StatModel {
				public static class: java.lang.Class<org.opencv.ml.SVMSGD>;
				public static SGD: number;
				public static ASGD: number;
				public static SOFT_MARGIN: number;
				public static HARD_MARGIN: number;
				public static create(): org.opencv.ml.SVMSGD;
				public getMarginRegularization(): number;
				public getWeights(): org.opencv.core.Mat;
				public finalize(): void;
				public getSvmsgdType(): number;
				public getStepDecreasingPower(): number;
				public setOptimalParameters(param0: number): void;
				public setOptimalParameters(): void;
				public setStepDecreasingPower(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.ml.SVMSGD;
				public setOptimalParameters(param0: number, param1: number): void;
				public getShift(): number;
				public setMarginType(param0: number): void;
				public setTermCriteria(param0: org.opencv.core.TermCriteria): void;
				public static load(param0: string, param1: string): org.opencv.ml.SVMSGD;
				public setInitialStepSize(param0: number): void;
				public setSvmsgdType(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.ml.StatModel;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getMarginType(): number;
				public static load(param0: string): org.opencv.ml.SVMSGD;
				public setMarginRegularization(param0: number): void;
				public getInitialStepSize(): number;
				public constructor(param0: number);
				public getTermCriteria(): org.opencv.core.TermCriteria;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class StatModel extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ml.StatModel>;
				public static UPDATE_MODEL: number;
				public static RAW_OUTPUT: number;
				public static COMPRESSED_INPUT: number;
				public static PREPROCESSED_INPUT: number;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.ml.StatModel;
				public isClassifier(): boolean;
				public calcError(param0: org.opencv.ml.TrainData, param1: boolean, param2: org.opencv.core.Mat): number;
				public finalize(): void;
				public train(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat): boolean;
				public predict(param0: org.opencv.core.Mat): number;
				public predict(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
				public predict(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): number;
				public train(param0: org.opencv.ml.TrainData): boolean;
				public constructor(param0: number);
				public isTrained(): boolean;
				public getVarCount(): number;
				public train(param0: org.opencv.ml.TrainData, param1: number): boolean;
				public empty(): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ml {
			export class TrainData {
				public static class: java.lang.Class<org.opencv.ml.TrainData>;
				public nativeObj: number;
				public getTestSamples(): org.opencv.core.Mat;
				public getCatOfs(): org.opencv.core.Mat;
				public static create(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat): org.opencv.ml.TrainData;
				public getNTrainSamples(): number;
				public setTrainTestSplit(param0: number, param1: boolean): void;
				public getCatCount(param0: number): number;
				public setTrainTestSplitRatio(param0: number): void;
				public getLayout(): number;
				public static getSubVector(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.core.Mat;
				public getTrainSamples(param0: number): org.opencv.core.Mat;
				public getClassLabels(): org.opencv.core.Mat;
				public getResponseType(): number;
				public getDefaultSubstValues(): org.opencv.core.Mat;
				public getSamples(): org.opencv.core.Mat;
				public static create(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): org.opencv.ml.TrainData;
				public getTrainSampleIdx(): org.opencv.core.Mat;
				public getSample(param0: org.opencv.core.Mat, param1: number, param2: number): void;
				public getTrainSamples(param0: number, param1: boolean, param2: boolean): org.opencv.core.Mat;
				public getNVars(): number;
				public setTrainTestSplit(param0: number): void;
				public getTrainSampleWeights(): org.opencv.core.Mat;
				public getNAllVars(): number;
				public getNTestSamples(): number;
				public getNSamples(): number;
				public getTestSampleIdx(): org.opencv.core.Mat;
				public getVarSymbolFlags(): org.opencv.core.Mat;
				public getTestNormCatResponses(): org.opencv.core.Mat;
				public getNames(param0: java.util.List<string>): void;
				public getTrainSamples(param0: number, param1: boolean): org.opencv.core.Mat;
				public getCatMap(): org.opencv.core.Mat;
				public getTrainSamples(): org.opencv.core.Mat;
				public getNormCatResponses(): org.opencv.core.Mat;
				public getResponses(): org.opencv.core.Mat;
				public getVarType(): org.opencv.core.Mat;
				public static create(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): org.opencv.ml.TrainData;
				public getTestSampleWeights(): org.opencv.core.Mat;
				public static create(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat, param6: org.opencv.core.Mat): org.opencv.ml.TrainData;
				public finalize(): void;
				public getSampleWeights(): org.opencv.core.Mat;
				public getMissing(): org.opencv.core.Mat;
				public getValues(param0: number, param1: org.opencv.core.Mat, param2: number): void;
				public getVarIdx(): org.opencv.core.Mat;
				public static getSubMatrix(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): org.opencv.core.Mat;
				public getTestResponses(): org.opencv.core.Mat;
				public getTrainResponses(): org.opencv.core.Mat;
				public static create(param0: org.opencv.core.Mat, param1: number, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): org.opencv.ml.TrainData;
				public getNativeObjAddr(): number;
				public getTrainNormCatResponses(): org.opencv.core.Mat;
				public static __fromPtr__(param0: number): org.opencv.ml.TrainData;
				public constructor(param0: number);
				public setTrainTestSplitRatio(param0: number, param1: boolean): void;
				public shuffleTrainTest(): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module objdetect {
			export class BaseCascadeClassifier extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.objdetect.BaseCascadeClassifier>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.objdetect.BaseCascadeClassifier;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module objdetect {
			export class CascadeClassifier {
				public static class: java.lang.Class<org.opencv.objdetect.CascadeClassifier>;
				public nativeObj: number;
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: number, param3: number, param4: number, param5: org.opencv.core.Size, param6: org.opencv.core.Size): void;
				public detectMultiScale2(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: number, param4: number): void;
				public finalize(): void;
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: number, param3: number, param4: number, param5: org.opencv.core.Size): void;
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: number, param3: number, param4: number): void;
				public constructor(param0: string);
				public constructor();
				public detectMultiScale3(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: org.opencv.core.MatOfDouble, param4: number, param5: number): void;
				public detectMultiScale3(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: org.opencv.core.MatOfDouble, param4: number, param5: number, param6: number, param7: org.opencv.core.Size, param8: org.opencv.core.Size): void;
				public load(param0: string): boolean;
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: number, param3: number): void;
				public detectMultiScale2(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: number, param4: number, param5: number): void;
				public empty(): boolean;
				public detectMultiScale2(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt): void;
				public detectMultiScale3(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: org.opencv.core.MatOfDouble, param4: number, param5: number, param6: number): void;
				public detectMultiScale3(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: org.opencv.core.MatOfDouble, param4: number, param5: number, param6: number, param7: org.opencv.core.Size, param8: org.opencv.core.Size, param9: boolean): void;
				public detectMultiScale2(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: number, param4: number, param5: number, param6: org.opencv.core.Size, param7: org.opencv.core.Size): void;
				public detectMultiScale3(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: org.opencv.core.MatOfDouble, param4: number): void;
				public getNativeObjAddr(): number;
				public static convert(param0: string, param1: string): boolean;
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: number): void;
				public getFeatureType(): number;
				public detectMultiScale3(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: org.opencv.core.MatOfDouble): void;
				public static __fromPtr__(param0: number): org.opencv.objdetect.CascadeClassifier;
				public detectMultiScale3(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: org.opencv.core.MatOfDouble, param4: number, param5: number, param6: number, param7: org.opencv.core.Size): void;
				public isOldFormatCascade(): boolean;
				public constructor(param0: number);
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect): void;
				public getOriginalWindowSize(): org.opencv.core.Size;
				public detectMultiScale2(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: number): void;
				public detectMultiScale2(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfInt, param3: number, param4: number, param5: number, param6: org.opencv.core.Size): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module objdetect {
			export class HOGDescriptor {
				public static class: java.lang.Class<org.opencv.objdetect.HOGDescriptor>;
				public nativeObj: number;
				public static DESCR_FORMAT_COL_BY_COL: number;
				public static DESCR_FORMAT_ROW_BY_ROW: number;
				public static DEFAULT_NLEVELS: number;
				public static L2Hys: number;
				public compute(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfFloat): void;
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfDouble, param3: number, param4: org.opencv.core.Size, param5: org.opencv.core.Size, param6: number, param7: number): void;
				public get_svmDetector(): org.opencv.core.MatOfFloat;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: org.opencv.core.MatOfDouble, param3: number): void;
				public constructor();
				public computeGradient(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size, param4: org.opencv.core.Size): void;
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfDouble, param3: number, param4: org.opencv.core.Size, param5: org.opencv.core.Size, param6: number, param7: number, param8: boolean): void;
				public setSVMDetector(param0: org.opencv.core.Mat): void;
				public get_signedGradient(): boolean;
				public computeGradient(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public constructor(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.Size, param3: org.opencv.core.Size, param4: number, param5: number, param6: number, param7: number, param8: number, param9: boolean, param10: number, param11: boolean);
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfDouble): void;
				public get_nbins(): number;
				public constructor(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.Size, param3: org.opencv.core.Size, param4: number, param5: number, param6: number, param7: number, param8: number);
				public get_L2HysThreshold(): number;
				public load(param0: string): boolean;
				public save(param0: string): void;
				public load(param0: string, param1: string): boolean;
				public get_winSize(): org.opencv.core.Size;
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfDouble, param3: number, param4: org.opencv.core.Size, param5: org.opencv.core.Size): void;
				public get_winSigma(): number;
				public static __fromPtr__(param0: number): org.opencv.objdetect.HOGDescriptor;
				public static getDaimlerPeopleDetector(): org.opencv.core.MatOfFloat;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: org.opencv.core.MatOfDouble, param3: number, param4: org.opencv.core.Size, param5: org.opencv.core.Size): void;
				public constructor(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.Size, param3: org.opencv.core.Size, param4: number, param5: number, param6: number, param7: number, param8: number, param9: boolean);
				public getWinSigma(): number;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: org.opencv.core.MatOfDouble, param3: number, param4: org.opencv.core.Size, param5: org.opencv.core.Size, param6: org.opencv.core.MatOfPoint): void;
				public get_nlevels(): number;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: org.opencv.core.MatOfDouble, param3: number, param4: org.opencv.core.Size): void;
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfDouble, param3: number): void;
				public finalize(): void;
				public constructor(param0: string);
				public get_blockStride(): org.opencv.core.Size;
				public get_cellSize(): org.opencv.core.Size;
				public compute(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfFloat, param2: org.opencv.core.Size, param3: org.opencv.core.Size, param4: org.opencv.core.MatOfPoint): void;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfPoint, param2: org.opencv.core.MatOfDouble): void;
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfDouble, param3: number, param4: org.opencv.core.Size): void;
				public save(param0: string, param1: string): void;
				public constructor(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.Size, param3: org.opencv.core.Size, param4: number);
				public constructor(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.Size, param3: org.opencv.core.Size, param4: number, param5: number, param6: number);
				public constructor(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.Size, param3: org.opencv.core.Size, param4: number, param5: number, param6: number, param7: number);
				public compute(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfFloat, param2: org.opencv.core.Size, param3: org.opencv.core.Size): void;
				public getNativeObjAddr(): number;
				public get_histogramNormType(): number;
				public detectMultiScale(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfDouble, param3: number, param4: org.opencv.core.Size, param5: org.opencv.core.Size, param6: number): void;
				public constructor(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.Size, param3: org.opencv.core.Size, param4: number, param5: number);
				public computeGradient(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Size): void;
				public get_derivAperture(): number;
				public static getDefaultPeopleDetector(): org.opencv.core.MatOfFloat;
				public constructor(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.Size, param3: org.opencv.core.Size, param4: number, param5: number, param6: number, param7: number, param8: number, param9: boolean, param10: number);
				public compute(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfFloat, param2: org.opencv.core.Size): void;
				public checkDetectorSize(): boolean;
				public constructor(param0: number);
				public getDescriptorSize(): number;
				public get_blockSize(): org.opencv.core.Size;
				public get_gammaCorrection(): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module objdetect {
			export class Objdetect {
				public static class: java.lang.Class<org.opencv.objdetect.Objdetect>;
				public static CASCADE_DO_CANNY_PRUNING: number;
				public static CASCADE_SCALE_IMAGE: number;
				public static CASCADE_FIND_BIGGEST_OBJECT: number;
				public static CASCADE_DO_ROUGH_SEARCH: number;
				public static DetectionBasedTracker_DETECTED_NOT_SHOWN_YET: number;
				public static DetectionBasedTracker_DETECTED: number;
				public static DetectionBasedTracker_DETECTED_TEMPORARY_LOST: number;
				public static DetectionBasedTracker_WRONG_OBJECT: number;
				public static groupRectangles(param0: org.opencv.core.MatOfRect, param1: org.opencv.core.MatOfInt, param2: number, param3: number): void;
				public static groupRectangles(param0: org.opencv.core.MatOfRect, param1: org.opencv.core.MatOfInt, param2: number): void;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module objdetect {
			export class QRCodeDetector {
				public static class: java.lang.Class<org.opencv.objdetect.QRCodeDetector>;
				public nativeObj: number;
				public setEpsX(param0: number): void;
				public setEpsY(param0: number): void;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): boolean;
				public static __fromPtr__(param0: number): org.opencv.objdetect.QRCodeDetector;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module osgi {
			export class OpenCVInterface {
				public static class: java.lang.Class<org.opencv.osgi.OpenCVInterface>;
				/**
				 * Constructs a new instance of the org.opencv.osgi.OpenCVInterface interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
				});
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module osgi {
			export class OpenCVNativeLoader extends org.opencv.osgi.OpenCVInterface {
				public static class: java.lang.Class<org.opencv.osgi.OpenCVNativeLoader>;
				public constructor();
				public init(): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module phase_unwrapping {
			export class HistogramPhaseUnwrapping extends org.opencv.phase_unwrapping.PhaseUnwrapping {
				public static class: java.lang.Class<org.opencv.phase_unwrapping.HistogramPhaseUnwrapping>;
				public static __fromPtr__(param0: number): org.opencv.phase_unwrapping.PhaseUnwrapping;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.phase_unwrapping.HistogramPhaseUnwrapping;
				public finalize(): void;
				public constructor(param0: number);
				public getInverseReliabilityMap(param0: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module phase_unwrapping {
			export class PhaseUnwrapping extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.phase_unwrapping.PhaseUnwrapping>;
				public static __fromPtr__(param0: number): org.opencv.phase_unwrapping.PhaseUnwrapping;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public unwrapPhaseMap(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public unwrapPhaseMap(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module phase_unwrapping {
			export class Phase_unwrapping {
				public static class: java.lang.Class<org.opencv.phase_unwrapping.Phase_unwrapping>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class AlignExposures extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.photo.AlignExposures>;
				public process(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.photo.AlignExposures;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class AlignMTB extends org.opencv.photo.AlignExposures {
				public static class: java.lang.Class<org.opencv.photo.AlignMTB>;
				public process(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getExcludeRange(): number;
				public shiftMat(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Point): void;
				public setExcludeRange(param0: number): void;
				public setMaxBits(param0: number): void;
				public finalize(): void;
				public computeBitmaps(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public getMaxBits(): number;
				public static __fromPtr__(param0: number): org.opencv.photo.AlignMTB;
				public static __fromPtr__(param0: number): org.opencv.photo.AlignExposures;
				public calculateShift(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.core.Point;
				public constructor(param0: number);
				public setCut(param0: boolean): void;
				public process(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>): void;
				public getCut(): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class CalibrateCRF extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.photo.CalibrateCRF>;
				public static __fromPtr__(param0: number): org.opencv.photo.CalibrateCRF;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public process(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class CalibrateDebevec extends org.opencv.photo.CalibrateCRF {
				public static class: java.lang.Class<org.opencv.photo.CalibrateDebevec>;
				public setSamples(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.photo.CalibrateDebevec;
				public getLambda(): number;
				public static __fromPtr__(param0: number): org.opencv.photo.CalibrateCRF;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getSamples(): number;
				public setLambda(param0: number): void;
				public setRandom(param0: boolean): void;
				public getRandom(): boolean;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class CalibrateRobertson extends org.opencv.photo.CalibrateCRF {
				public static class: java.lang.Class<org.opencv.photo.CalibrateRobertson>;
				public static __fromPtr__(param0: number): org.opencv.photo.CalibrateCRF;
				public setMaxIter(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getMaxIter(): number;
				public getThreshold(): number;
				public static __fromPtr__(param0: number): org.opencv.photo.CalibrateRobertson;
				public setThreshold(param0: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public getRadiance(): org.opencv.core.Mat;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class MergeDebevec extends org.opencv.photo.MergeExposures {
				public static class: java.lang.Class<org.opencv.photo.MergeDebevec>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.photo.MergeExposures;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.photo.MergeDebevec;
				public process(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public process(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class MergeExposures extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.photo.MergeExposures>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.photo.MergeExposures;
				public finalize(): void;
				public constructor(param0: number);
				public process(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class MergeMertens extends org.opencv.photo.MergeExposures {
				public static class: java.lang.Class<org.opencv.photo.MergeMertens>;
				public getSaturationWeight(): number;
				public setExposureWeight(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getContrastWeight(): number;
				public setSaturationWeight(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.photo.MergeExposures;
				public static __fromPtr__(param0: number): org.opencv.photo.MergeMertens;
				public finalize(): void;
				public setContrastWeight(param0: number): void;
				public process(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat): void;
				public constructor(param0: number);
				public process(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public getExposureWeight(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class MergeRobertson extends org.opencv.photo.MergeExposures {
				public static class: java.lang.Class<org.opencv.photo.MergeRobertson>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.photo.MergeExposures;
				public static __fromPtr__(param0: number): org.opencv.photo.MergeRobertson;
				public finalize(): void;
				public constructor(param0: number);
				public process(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public process(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class Photo {
				public static class: java.lang.Class<org.opencv.photo.Photo>;
				public static INPAINT_NS: number;
				public static INPAINT_TELEA: number;
				public static NORMAL_CLONE: number;
				public static MIXED_CLONE: number;
				public static MONOCHROME_TRANSFER: number;
				public static RECURS_FILTER: number;
				public static NORMCONV_FILTER: number;
				public static LDR_SIZE: number;
				public static fastNlMeansDenoisingMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static stylization(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static createCalibrateDebevec(param0: number, param1: number): org.opencv.photo.CalibrateDebevec;
				public static fastNlMeansDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfFloat, param3: number): void;
				public static createTonemapDrago(param0: number, param1: number): org.opencv.photo.TonemapDrago;
				public static seamlessClone(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Point, param4: org.opencv.core.Mat, param5: number): void;
				public static denoise_TVL1(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number): void;
				public static detailEnhance(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public constructor();
				public static createMergeMertens(param0: number): org.opencv.photo.MergeMertens;
				public static createMergeRobertson(): org.opencv.photo.MergeRobertson;
				public static edgePreservingFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static edgePreservingFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static detailEnhance(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static textureFlattening(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static createTonemapDrago(param0: number, param1: number, param2: number): org.opencv.photo.TonemapDrago;
				public static denoise_TVL1(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static createAlignMTB(param0: number, param1: number): org.opencv.photo.AlignMTB;
				public static fastNlMeansDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static fastNlMeansDenoisingColored(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static createMergeMertens(param0: number, param1: number, param2: number): org.opencv.photo.MergeMertens;
				public static colorChange(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static inpaint(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static createCalibrateRobertson(): org.opencv.photo.CalibrateRobertson;
				public static createAlignMTB(param0: number, param1: number, param2: boolean): org.opencv.photo.AlignMTB;
				public static createTonemapDrago(param0: number): org.opencv.photo.TonemapDrago;
				public static createTonemapMantiuk(param0: number, param1: number): org.opencv.photo.TonemapMantiuk;
				public static fastNlMeansDenoisingMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number, param4: org.opencv.core.MatOfFloat, param5: number, param6: number): void;
				public static createTonemapMantiuk(): org.opencv.photo.TonemapMantiuk;
				public static fastNlMeansDenoisingMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static createTonemapDrago(): org.opencv.photo.TonemapDrago;
				public static fastNlMeansDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfFloat, param3: number, param4: number, param5: number): void;
				public static createTonemap(): org.opencv.photo.Tonemap;
				public static createTonemapReinhard(param0: number, param1: number, param2: number, param3: number): org.opencv.photo.TonemapReinhard;
				public static createMergeMertens(): org.opencv.photo.MergeMertens;
				public static fastNlMeansDenoisingMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number, param4: org.opencv.core.MatOfFloat, param5: number): void;
				public static fastNlMeansDenoisingColored(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static illuminationChange(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static createAlignMTB(): org.opencv.photo.AlignMTB;
				public static createTonemapReinhard(param0: number, param1: number, param2: number): org.opencv.photo.TonemapReinhard;
				public static createTonemapMantiuk(param0: number, param1: number, param2: number): org.opencv.photo.TonemapMantiuk;
				public static createTonemapReinhard(): org.opencv.photo.TonemapReinhard;
				public static fastNlMeansDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfFloat): void;
				public static colorChange(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static createCalibrateDebevec(param0: number, param1: number, param2: boolean): org.opencv.photo.CalibrateDebevec;
				public static fastNlMeansDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static createCalibrateRobertson(param0: number, param1: number): org.opencv.photo.CalibrateRobertson;
				public static pencilSketch(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static colorChange(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static fastNlMeansDenoisingMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number, param4: org.opencv.core.MatOfFloat, param5: number, param6: number, param7: number): void;
				public static createCalibrateDebevec(): org.opencv.photo.CalibrateDebevec;
				public static decolor(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static createTonemap(param0: number): org.opencv.photo.Tonemap;
				public static illuminationChange(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static createTonemapMantiuk(param0: number): org.opencv.photo.TonemapMantiuk;
				public static createAlignMTB(param0: number): org.opencv.photo.AlignMTB;
				public static textureFlattening(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static stylization(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static colorChange(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): void;
				public static edgePreservingFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static pencilSketch(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static fastNlMeansDenoisingColoredMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static createMergeDebevec(): org.opencv.photo.MergeDebevec;
				public static detailEnhance(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static createCalibrateRobertson(param0: number): org.opencv.photo.CalibrateRobertson;
				public static createTonemapReinhard(param0: number, param1: number): org.opencv.photo.TonemapReinhard;
				public static edgePreservingFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static fastNlMeansDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static fastNlMeansDenoisingColored(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static pencilSketch(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static createTonemapReinhard(param0: number): org.opencv.photo.TonemapReinhard;
				public static fastNlMeansDenoisingMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number, param4: org.opencv.core.MatOfFloat): void;
				public static illuminationChange(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static stylization(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static createCalibrateDebevec(param0: number): org.opencv.photo.CalibrateDebevec;
				public static pencilSketch(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): void;
				public static fastNlMeansDenoisingMulti(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static createMergeMertens(param0: number, param1: number): org.opencv.photo.MergeMertens;
				public static fastNlMeansDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static fastNlMeansDenoisingColored(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static fastNlMeansDenoisingColored(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static textureFlattening(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static fastNlMeansDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfFloat, param3: number, param4: number): void;
				public static denoise_TVL1(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat): void;
				public static textureFlattening(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class Tonemap extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.photo.Tonemap>;
				public setGamma(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public getGamma(): number;
				public process(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.photo.Tonemap;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class TonemapDrago extends org.opencv.photo.Tonemap {
				public static class: java.lang.Class<org.opencv.photo.TonemapDrago>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getBias(): number;
				public getSaturation(): number;
				public setBias(param0: number): void;
				public setSaturation(param0: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.photo.TonemapDrago;
				public static __fromPtr__(param0: number): org.opencv.photo.Tonemap;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class TonemapMantiuk extends org.opencv.photo.Tonemap {
				public static class: java.lang.Class<org.opencv.photo.TonemapMantiuk>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.photo.TonemapMantiuk;
				public getScale(): number;
				public getSaturation(): number;
				public setSaturation(param0: number): void;
				public setScale(param0: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.photo.Tonemap;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module photo {
			export class TonemapReinhard extends org.opencv.photo.Tonemap {
				public static class: java.lang.Class<org.opencv.photo.TonemapReinhard>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getIntensity(): number;
				public setColorAdaptation(param0: number): void;
				public setIntensity(param0: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public getLightAdaptation(): number;
				public static __fromPtr__(param0: number): org.opencv.photo.TonemapReinhard;
				public getColorAdaptation(): number;
				public setLightAdaptation(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.photo.Tonemap;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module plot {
			export class Plot {
				public static class: java.lang.Class<org.opencv.plot.Plot>;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module plot {
			export class Plot2d extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.plot.Plot2d>;
				public static __fromPtr__(param0: number): org.opencv.plot.Plot2d;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setPlotLineWidth(param0: number): void;
				public setShowText(param0: boolean): void;
				public static create(param0: org.opencv.core.Mat): org.opencv.plot.Plot2d;
				public finalize(): void;
				public setPlotTextColor(param0: org.opencv.core.Scalar): void;
				public setPlotBackgroundColor(param0: org.opencv.core.Scalar): void;
				public setMinX(param0: number): void;
				public setMinY(param0: number): void;
				public setPlotLineColor(param0: org.opencv.core.Scalar): void;
				public setPointIdxToPrint(param0: number): void;
				public static create(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): org.opencv.plot.Plot2d;
				public setPlotSize(param0: number, param1: number): void;
				public render(param0: org.opencv.core.Mat): void;
				public setInvertOrientation(param0: boolean): void;
				public setMaxX(param0: number): void;
				public setMaxY(param0: number): void;
				public setPlotAxisColor(param0: org.opencv.core.Scalar): void;
				public constructor(param0: number);
				public setGridLinesNumber(param0: number): void;
				public setShowGrid(param0: boolean): void;
				public setNeedPlotLine(param0: boolean): void;
				public setPlotGridColor(param0: org.opencv.core.Scalar): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module structured_light {
			export class GrayCodePattern extends org.opencv.structured_light.StructuredLightPattern {
				public static class: java.lang.Class<org.opencv.structured_light.GrayCodePattern>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getImagesForShadowMasks(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static create(param0: number, param1: number): org.opencv.structured_light.GrayCodePattern;
				public finalize(): void;
				public constructor(param0: number);
				public getProjPixel(param0: java.util.List<org.opencv.core.Mat>, param1: number, param2: number, param3: org.opencv.core.Point): boolean;
				public setWhiteThreshold(param0: number): void;
				public setBlackThreshold(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.structured_light.StructuredLightPattern;
				public static __fromPtr__(param0: number): org.opencv.structured_light.GrayCodePattern;
				public getNumberOfPatternImages(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module structured_light {
			export class Params {
				public static class: java.lang.Class<org.opencv.structured_light.Params>;
				public nativeObj: number;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
				public static __fromPtr__(param0: number): org.opencv.structured_light.Params;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module structured_light {
			export class SinusoidalPattern extends org.opencv.structured_light.StructuredLightPattern {
				public static class: java.lang.Class<org.opencv.structured_light.SinusoidalPattern>;
				public computePhaseMap(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public static __fromPtr__(param0: number): org.opencv.structured_light.StructuredLightPattern;
				public unwrapPhaseMap(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Size, param3: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.structured_light.SinusoidalPattern;
				public static create(): org.opencv.structured_light.SinusoidalPattern;
				public findProCamMatches(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.Mat>): void;
				public unwrapPhaseMap(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Size): void;
				public constructor(param0: number);
				public computePhaseMap(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public computeDataModulationTerm(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public computePhaseMap(param0: java.util.List<org.opencv.core.Mat>, param1: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module structured_light {
			export class StructuredLightPattern extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.structured_light.StructuredLightPattern>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.structured_light.StructuredLightPattern;
				public generate(param0: java.util.List<org.opencv.core.Mat>): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module structured_light {
			export class Structured_light {
				public static class: java.lang.Class<org.opencv.structured_light.Structured_light>;
				public static FTP: number;
				public static PSP: number;
				public static FAPS: number;
				public static DECODE_3D_UNDERWORLD: number;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module text {
			export class BaseOCR {
				public static class: java.lang.Class<org.opencv.text.BaseOCR>;
				public nativeObj: number;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
				public static __fromPtr__(param0: number): org.opencv.text.BaseOCR;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module text {
			export class Callback {
				public static class: java.lang.Class<org.opencv.text.Callback>;
				public nativeObj: number;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
				public static __fromPtr__(param0: number): org.opencv.text.Callback;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module text {
			export class ClassifierCallback {
				public static class: java.lang.Class<org.opencv.text.ClassifierCallback>;
				public nativeObj: number;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
				public static __fromPtr__(param0: number): org.opencv.text.ClassifierCallback;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module text {
			export class ERFilter extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.text.ERFilter>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.text.ERFilter;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module text {
			export class OCRBeamSearchDecoder extends org.opencv.text.BaseOCR {
				public static class: java.lang.Class<org.opencv.text.OCRBeamSearchDecoder>;
				public static create(param0: string, param1: string, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): org.opencv.text.OCRBeamSearchDecoder;
				public run(param0: org.opencv.core.Mat, param1: number): string;
				public static __fromPtr__(param0: number): org.opencv.text.OCRBeamSearchDecoder;
				public run(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): string;
				public static create(param0: string, param1: string, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): org.opencv.text.OCRBeamSearchDecoder;
				public run(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): string;
				public finalize(): void;
				public constructor(param0: number);
				public static create(param0: string, param1: string, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number): org.opencv.text.OCRBeamSearchDecoder;
				public static __fromPtr__(param0: number): org.opencv.text.BaseOCR;
				public run(param0: org.opencv.core.Mat, param1: number, param2: number): string;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module text {
			export class OCRHMMDecoder extends org.opencv.text.BaseOCR {
				public static class: java.lang.Class<org.opencv.text.OCRHMMDecoder>;
				public run(param0: org.opencv.core.Mat, param1: number): string;
				public run(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): string;
				public static create(param0: string, param1: string, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number): org.opencv.text.OCRHMMDecoder;
				public static create(param0: string, param1: string, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): org.opencv.text.OCRHMMDecoder;
				public run(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): string;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.text.BaseOCR;
				public static create(param0: string, param1: string, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): org.opencv.text.OCRHMMDecoder;
				public static __fromPtr__(param0: number): org.opencv.text.OCRHMMDecoder;
				public run(param0: org.opencv.core.Mat, param1: number, param2: number): string;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module text {
			export class OCRTesseract extends org.opencv.text.BaseOCR {
				public static class: java.lang.Class<org.opencv.text.OCRTesseract>;
				public static create(param0: string, param1: string, param2: string, param3: number, param4: number): org.opencv.text.OCRTesseract;
				public static create(param0: string, param1: string): org.opencv.text.OCRTesseract;
				public run(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): string;
				public static __fromPtr__(param0: number): org.opencv.text.OCRTesseract;
				public run(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): string;
				public finalize(): void;
				public static __fromPtr__(param0: number): org.opencv.text.BaseOCR;
				public static create(): org.opencv.text.OCRTesseract;
				public run(param0: org.opencv.core.Mat, param1: number, param2: number): string;
				public run(param0: org.opencv.core.Mat, param1: number): string;
				public static create(param0: string, param1: string, param2: string, param3: number): org.opencv.text.OCRTesseract;
				public setWhiteList(param0: string): void;
				public constructor(param0: number);
				public static create(param0: string): org.opencv.text.OCRTesseract;
				public static create(param0: string, param1: string, param2: string): org.opencv.text.OCRTesseract;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module text {
			export class Text {
				public static class: java.lang.Class<org.opencv.text.Text>;
				public static OCR_DECODER_VITERBI: number;
				public static ERGROUPING_ORIENTATION_HORIZ: number;
				public static ERGROUPING_ORIENTATION_ANY: number;
				public static PSM_OSD_ONLY: number;
				public static PSM_AUTO_OSD: number;
				public static PSM_AUTO_ONLY: number;
				public static PSM_AUTO: number;
				public static PSM_SINGLE_COLUMN: number;
				public static PSM_SINGLE_BLOCK_VERT_TEXT: number;
				public static PSM_SINGLE_BLOCK: number;
				public static PSM_SINGLE_LINE: number;
				public static PSM_SINGLE_WORD: number;
				public static PSM_CIRCLE_WORD: number;
				public static PSM_SINGLE_CHAR: number;
				public static OCR_KNN_CLASSIFIER: number;
				public static OCR_CNN_CLASSIFIER: number;
				public static ERFILTER_NM_RGBLGrad: number;
				public static ERFILTER_NM_IHSGrad: number;
				public static OCR_LEVEL_WORD: number;
				public static OCR_LEVEL_TEXTLINE: number;
				public static OEM_TESSERACT_ONLY: number;
				public static OEM_CUBE_ONLY: number;
				public static OEM_TESSERACT_CUBE_COMBINED: number;
				public static OEM_DEFAULT: number;
				public static detectRegions(param0: org.opencv.core.Mat, param1: org.opencv.text.ERFilter, param2: org.opencv.text.ERFilter, param3: org.opencv.core.MatOfRect, param4: number, param5: string, param6: number): void;
				public static createERFilterNM1(param0: string, param1: number, param2: number, param3: number): org.opencv.text.ERFilter;
				public static createERFilterNM2(param0: string): org.opencv.text.ERFilter;
				public static createERFilterNM2(param0: string, param1: number): org.opencv.text.ERFilter;
				public static detectRegions(param0: org.opencv.core.Mat, param1: org.opencv.text.ERFilter, param2: org.opencv.text.ERFilter, param3: org.opencv.core.MatOfRect, param4: number): void;
				public static computeNMChannels(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: number): void;
				public static detectRegions(param0: org.opencv.core.Mat, param1: org.opencv.text.ERFilter, param2: org.opencv.text.ERFilter, param3: java.util.List<org.opencv.core.MatOfPoint>): void;
				public static erGrouping(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.MatOfPoint>, param3: org.opencv.core.MatOfRect): void;
				public static erGrouping(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.MatOfPoint>, param3: org.opencv.core.MatOfRect, param4: number): void;
				public constructor();
				public static detectRegions(param0: org.opencv.core.Mat, param1: org.opencv.text.ERFilter, param2: org.opencv.text.ERFilter, param3: org.opencv.core.MatOfRect, param4: number, param5: string): void;
				public static detectRegions(param0: org.opencv.core.Mat, param1: org.opencv.text.ERFilter, param2: org.opencv.text.ERFilter, param3: org.opencv.core.MatOfRect): void;
				public static createERFilterNM1(param0: string, param1: number, param2: number, param3: number, param4: number): org.opencv.text.ERFilter;
				public static createERFilterNM1(param0: string, param1: number, param2: number, param3: number, param4: number, param5: boolean): org.opencv.text.ERFilter;
				public static createERFilterNM1(param0: string, param1: number, param2: number): org.opencv.text.ERFilter;
				public static createERFilterNM1(param0: string, param1: number): org.opencv.text.ERFilter;
				public static createERFilterNM1(param0: string): org.opencv.text.ERFilter;
				public static computeNMChannels(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>): void;
				public static erGrouping(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.MatOfPoint>, param3: org.opencv.core.MatOfRect, param4: number, param5: string): void;
				public static erGrouping(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: java.util.List<org.opencv.core.MatOfPoint>, param3: org.opencv.core.MatOfRect, param4: number, param5: string, param6: number): void;
				public static createERFilterNM1(param0: string, param1: number, param2: number, param3: number, param4: number, param5: boolean, param6: number): org.opencv.text.ERFilter;
				public static createOCRHMMTransitionsTable(param0: string, param1: java.util.List<string>): org.opencv.core.Mat;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module text {
			export class TextDetector {
				public static class: java.lang.Class<org.opencv.text.TextDetector>;
				public nativeObj: number;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfFloat): void;
				public finalize(): void;
				public constructor(param0: number);
				public getNativeObjAddr(): number;
				public static __fromPtr__(param0: number): org.opencv.text.TextDetector;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module text {
			export class TextDetectorCNN extends org.opencv.text.TextDetector {
				public static class: java.lang.Class<org.opencv.text.TextDetectorCNN>;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect, param2: org.opencv.core.MatOfFloat): void;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.text.TextDetector;
				public static create(param0: string, param1: string): org.opencv.text.TextDetectorCNN;
				public static __fromPtr__(param0: number): org.opencv.text.TextDetectorCNN;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module tracking {
			export class MultiTracker extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.tracking.MultiTracker>;
				public static create(): org.opencv.tracking.MultiTracker;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.tracking.MultiTracker;
				public getObjects(): org.opencv.core.MatOfRect2d;
				public update(param0: org.opencv.core.Mat, param1: org.opencv.core.MatOfRect2d): boolean;
				public constructor();
				public add(param0: org.opencv.tracking.Tracker, param1: org.opencv.core.Mat, param2: org.opencv.core.Rect2d): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module tracking {
			export class Tracker extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.tracking.Tracker>;
				public static __fromPtr__(param0: number): org.opencv.tracking.Tracker;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public update(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect2d): boolean;
				public finalize(): void;
				public constructor(param0: number);
				public init(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect2d): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module tracking {
			export class TrackerBoosting extends org.opencv.tracking.Tracker {
				public static class: java.lang.Class<org.opencv.tracking.TrackerBoosting>;
				public static __fromPtr__(param0: number): org.opencv.tracking.Tracker;
				public static __fromPtr__(param0: number): org.opencv.tracking.TrackerBoosting;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static create(): org.opencv.tracking.TrackerBoosting;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module tracking {
			export class TrackerCSRT extends org.opencv.tracking.Tracker {
				public static class: java.lang.Class<org.opencv.tracking.TrackerCSRT>;
				public static __fromPtr__(param0: number): org.opencv.tracking.Tracker;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(): org.opencv.tracking.TrackerCSRT;
				public static __fromPtr__(param0: number): org.opencv.tracking.TrackerCSRT;
				public finalize(): void;
				public constructor(param0: number);
				public setInitialMask(param0: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module tracking {
			export class TrackerGOTURN extends org.opencv.tracking.Tracker {
				public static class: java.lang.Class<org.opencv.tracking.TrackerGOTURN>;
				public static __fromPtr__(param0: number): org.opencv.tracking.Tracker;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.tracking.TrackerGOTURN;
				public static create(): org.opencv.tracking.TrackerGOTURN;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module tracking {
			export class TrackerKCF extends org.opencv.tracking.Tracker {
				public static class: java.lang.Class<org.opencv.tracking.TrackerKCF>;
				public static GRAY: number;
				public static CN: number;
				public static CUSTOM: number;
				public static __fromPtr__(param0: number): org.opencv.tracking.Tracker;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(): org.opencv.tracking.TrackerKCF;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.tracking.TrackerKCF;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module tracking {
			export class TrackerMIL extends org.opencv.tracking.Tracker {
				public static class: java.lang.Class<org.opencv.tracking.TrackerMIL>;
				public static __fromPtr__(param0: number): org.opencv.tracking.Tracker;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(): org.opencv.tracking.TrackerMIL;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.tracking.TrackerMIL;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module tracking {
			export class TrackerMOSSE extends org.opencv.tracking.Tracker {
				public static class: java.lang.Class<org.opencv.tracking.TrackerMOSSE>;
				public static __fromPtr__(param0: number): org.opencv.tracking.Tracker;
				public static create(): org.opencv.tracking.TrackerMOSSE;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.tracking.TrackerMOSSE;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module tracking {
			export class TrackerMedianFlow extends org.opencv.tracking.Tracker {
				public static class: java.lang.Class<org.opencv.tracking.TrackerMedianFlow>;
				public static __fromPtr__(param0: number): org.opencv.tracking.Tracker;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(): org.opencv.tracking.TrackerMedianFlow;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.tracking.TrackerMedianFlow;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module tracking {
			export class TrackerTLD extends org.opencv.tracking.Tracker {
				public static class: java.lang.Class<org.opencv.tracking.TrackerTLD>;
				public static __fromPtr__(param0: number): org.opencv.tracking.Tracker;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.tracking.TrackerTLD;
				public finalize(): void;
				public constructor(param0: number);
				public static create(): org.opencv.tracking.TrackerTLD;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module tracking {
			export class Tracking {
				public static class: java.lang.Class<org.opencv.tracking.Tracking>;
				public static TrackerSamplerCSC_MODE_INIT_POS: number;
				public static TrackerSamplerCSC_MODE_INIT_NEG: number;
				public static TrackerSamplerCSC_MODE_TRACK_POS: number;
				public static TrackerSamplerCSC_MODE_TRACK_NEG: number;
				public static TrackerSamplerCSC_MODE_DETECT: number;
				public static TrackerSamplerCS_MODE_POSITIVE: number;
				public static TrackerSamplerCS_MODE_NEGATIVE: number;
				public static TrackerSamplerCS_MODE_CLASSIFY: number;
				public static CvFeatureParams_HAAR: number;
				public static CvFeatureParams_LBP: number;
				public static CvFeatureParams_HOG: number;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module utils {
			export class Converters {
				public static class: java.lang.Class<org.opencv.utils.Converters>;
				public static vector_Rect2d_to_Mat(param0: java.util.List<org.opencv.core.Rect2d>): org.opencv.core.Mat;
				public static Mat_to_vector_vector_Point3f(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint3f>): void;
				public static Mat_to_vector_int(param0: org.opencv.core.Mat, param1: java.util.List<java.lang.Integer>): void;
				public constructor();
				public static vector_Point2f_to_Mat(param0: java.util.List<org.opencv.core.Point>): org.opencv.core.Mat;
				public static Mat_to_vector_vector_KeyPoint(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfKeyPoint>): void;
				public static Mat_to_vector_uchar(param0: org.opencv.core.Mat, param1: java.util.List<java.lang.Byte>): void;
				public static vector_KeyPoint_to_Mat(param0: java.util.List<org.opencv.core.KeyPoint>): org.opencv.core.Mat;
				public static Mat_to_vector_Point3f(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Point3>): void;
				public static Mat_to_vector_DMatch(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.DMatch>): void;
				public static Mat_to_vector_vector_Point2f(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint2f>): void;
				public static vector_vector_DMatch_to_Mat(param0: java.util.List<org.opencv.core.MatOfDMatch>, param1: java.util.List<org.opencv.core.Mat>): org.opencv.core.Mat;
				public static vector_char_to_Mat(param0: java.util.List<java.lang.Byte>): org.opencv.core.Mat;
				public static vector_int_to_Mat(param0: java.util.List<java.lang.Integer>): org.opencv.core.Mat;
				public static Mat_to_vector_vector_Point(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfPoint>): void;
				public static Mat_to_vector_Point2d(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Point>): void;
				public static vector_vector_KeyPoint_to_Mat(param0: java.util.List<org.opencv.core.MatOfKeyPoint>, param1: java.util.List<org.opencv.core.Mat>): org.opencv.core.Mat;
				public static vector_Point_to_Mat(param0: java.util.List<org.opencv.core.Point>): org.opencv.core.Mat;
				public static vector_Point3d_to_Mat(param0: java.util.List<org.opencv.core.Point3>): org.opencv.core.Mat;
				public static Mat_to_vector_vector_char(param0: org.opencv.core.Mat, param1: java.util.List<java.util.List<java.lang.Byte>>): void;
				public static Mat_to_vector_float(param0: org.opencv.core.Mat, param1: java.util.List<java.lang.Float>): void;
				public static vector_vector_Point3f_to_Mat(param0: java.util.List<org.opencv.core.MatOfPoint3f>, param1: java.util.List<org.opencv.core.Mat>): org.opencv.core.Mat;
				public static Mat_to_vector_RotatedRect(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.RotatedRect>): void;
				public static Mat_to_vector_Rect(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Rect>): void;
				public static Mat_to_vector_Point3d(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Point3>): void;
				public static Mat_to_vector_Point3(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Point3>): void;
				public static Mat_to_vector_vector_DMatch(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.MatOfDMatch>): void;
				public static vector_uchar_to_Mat(param0: java.util.List<java.lang.Byte>): org.opencv.core.Mat;
				public static vector_vector_char_to_Mat(param0: java.util.List<org.opencv.core.MatOfByte>, param1: java.util.List<org.opencv.core.Mat>): org.opencv.core.Mat;
				public static vector_Rect_to_Mat(param0: java.util.List<org.opencv.core.Rect>): org.opencv.core.Mat;
				public static Mat_to_vector_KeyPoint(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.KeyPoint>): void;
				public static vector_float_to_Mat(param0: java.util.List<java.lang.Float>): org.opencv.core.Mat;
				public static vector_RotatedRect_to_Mat(param0: java.util.List<org.opencv.core.RotatedRect>): org.opencv.core.Mat;
				public static Mat_to_vector_Point(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Point>): void;
				public static vector_Point3i_to_Mat(param0: java.util.List<org.opencv.core.Point3>): org.opencv.core.Mat;
				public static Mat_to_vector_char(param0: org.opencv.core.Mat, param1: java.util.List<java.lang.Byte>): void;
				public static Mat_to_vector_Point3i(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Point3>): void;
				public static vector_vector_Point_to_Mat(param0: java.util.List<org.opencv.core.MatOfPoint>, param1: java.util.List<org.opencv.core.Mat>): org.opencv.core.Mat;
				public static vector_DMatch_to_Mat(param0: java.util.List<org.opencv.core.DMatch>): org.opencv.core.Mat;
				public static vector_Point_to_Mat(param0: java.util.List<org.opencv.core.Point>, param1: number): org.opencv.core.Mat;
				public static vector_Point3_to_Mat(param0: java.util.List<org.opencv.core.Point3>, param1: number): org.opencv.core.Mat;
				public static Mat_to_vector_Rect2d(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Rect2d>): void;
				public static vector_vector_Point2f_to_Mat(param0: java.util.List<org.opencv.core.MatOfPoint2f>, param1: java.util.List<org.opencv.core.Mat>): org.opencv.core.Mat;
				public static Mat_to_vector_Point2f(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Point>): void;
				public static Mat_to_vector_Mat(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>): void;
				public static vector_double_to_Mat(param0: java.util.List<java.lang.Double>): org.opencv.core.Mat;
				public static Mat_to_vector_double(param0: org.opencv.core.Mat, param1: java.util.List<java.lang.Double>): void;
				public static vector_Point3f_to_Mat(param0: java.util.List<org.opencv.core.Point3>): org.opencv.core.Mat;
				public static vector_Point2d_to_Mat(param0: java.util.List<org.opencv.core.Point>): org.opencv.core.Mat;
				public static vector_Mat_to_Mat(param0: java.util.List<org.opencv.core.Mat>): org.opencv.core.Mat;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module video {
			export class BackgroundSubtractor extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.video.BackgroundSubtractor>;
				public getBackgroundImage(param0: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public apply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static __fromPtr__(param0: number): org.opencv.video.BackgroundSubtractor;
				public finalize(): void;
				public constructor(param0: number);
				public apply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module video {
			export class BackgroundSubtractorKNN extends org.opencv.video.BackgroundSubtractor {
				public static class: java.lang.Class<org.opencv.video.BackgroundSubtractorKNN>;
				public setShadowValue(param0: number): void;
				public getShadowThreshold(): number;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.video.BackgroundSubtractorKNN;
				public getkNNSamples(): number;
				public finalize(): void;
				public getHistory(): number;
				public setkNNSamples(param0: number): void;
				public getNSamples(): number;
				public getDetectShadows(): boolean;
				public setShadowThreshold(param0: number): void;
				public setDetectShadows(param0: boolean): void;
				public setNSamples(param0: number): void;
				public getShadowValue(): number;
				public static __fromPtr__(param0: number): org.opencv.video.BackgroundSubtractor;
				public setHistory(param0: number): void;
				public constructor(param0: number);
				public setDist2Threshold(param0: number): void;
				public getDist2Threshold(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module video {
			export class BackgroundSubtractorMOG2 extends org.opencv.video.BackgroundSubtractor {
				public static class: java.lang.Class<org.opencv.video.BackgroundSubtractorMOG2>;
				public static __fromPtr__(param0: number): org.opencv.video.BackgroundSubtractorMOG2;
				public setShadowValue(param0: number): void;
				public getVarMax(): number;
				public setVarThresholdGen(param0: number): void;
				public finalize(): void;
				public getHistory(): number;
				public getNMixtures(): number;
				public setShadowThreshold(param0: number): void;
				public setVarInit(param0: number): void;
				public setDetectShadows(param0: boolean): void;
				public getVarMin(): number;
				public getBackgroundRatio(): number;
				public getVarInit(): number;
				public setNMixtures(param0: number): void;
				public getVarThresholdGen(): number;
				public getShadowThreshold(): number;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getDetectShadows(): boolean;
				public setComplexityReductionThreshold(param0: number): void;
				public getVarThreshold(): number;
				public getShadowValue(): number;
				public apply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static __fromPtr__(param0: number): org.opencv.video.BackgroundSubtractor;
				public setHistory(param0: number): void;
				public setVarMin(param0: number): void;
				public constructor(param0: number);
				public setVarThreshold(param0: number): void;
				public getComplexityReductionThreshold(): number;
				public setVarMax(param0: number): void;
				public apply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public setBackgroundRatio(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module video {
			export class DISOpticalFlow extends org.opencv.video.DenseOpticalFlow {
				public static class: java.lang.Class<org.opencv.video.DISOpticalFlow>;
				public static PRESET_ULTRAFAST: number;
				public static PRESET_FAST: number;
				public static PRESET_MEDIUM: number;
				public setVariationalRefinementDelta(param0: number): void;
				public getGradientDescentIterations(): number;
				public setFinestScale(param0: number): void;
				public setUseMeanNormalization(param0: boolean): void;
				public finalize(): void;
				public getPatchStride(): number;
				public static create(param0: number): org.opencv.video.DISOpticalFlow;
				public setUseSpatialPropagation(param0: boolean): void;
				public getVariationalRefinementIterations(): number;
				public getFinestScale(): number;
				public setVariationalRefinementGamma(param0: number): void;
				public getPatchSize(): number;
				public setPatchStride(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getUseMeanNormalization(): boolean;
				public setGradientDescentIterations(param0: number): void;
				public static create(): org.opencv.video.DISOpticalFlow;
				public setVariationalRefinementIterations(param0: number): void;
				public getVariationalRefinementAlpha(): number;
				public static __fromPtr__(param0: number): org.opencv.video.DenseOpticalFlow;
				public setVariationalRefinementAlpha(param0: number): void;
				public getVariationalRefinementGamma(): number;
				public getVariationalRefinementDelta(): number;
				public setPatchSize(param0: number): void;
				public constructor(param0: number);
				public getUseSpatialPropagation(): boolean;
				public static __fromPtr__(param0: number): org.opencv.video.DISOpticalFlow;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module video {
			export class DenseOpticalFlow extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.video.DenseOpticalFlow>;
				public static __fromPtr__(param0: number): org.opencv.video.DenseOpticalFlow;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public collectGarbage(): void;
				public finalize(): void;
				public constructor(param0: number);
				public calc(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module video {
			export class FarnebackOpticalFlow extends org.opencv.video.DenseOpticalFlow {
				public static class: java.lang.Class<org.opencv.video.FarnebackOpticalFlow>;
				public setPolySigma(param0: number): void;
				public getWinSize(): number;
				public getPolySigma(): number;
				public getNumIters(): number;
				public static __fromPtr__(param0: number): org.opencv.video.FarnebackOpticalFlow;
				public static create(param0: number): org.opencv.video.FarnebackOpticalFlow;
				public finalize(): void;
				public static create(param0: number, param1: number, param2: boolean, param3: number, param4: number, param5: number, param6: number, param7: number): org.opencv.video.FarnebackOpticalFlow;
				public static create(param0: number, param1: number, param2: boolean, param3: number, param4: number, param5: number, param6: number): org.opencv.video.FarnebackOpticalFlow;
				public getPolyN(): number;
				public getFlags(): number;
				public static create(param0: number, param1: number, param2: boolean): org.opencv.video.FarnebackOpticalFlow;
				public setWinSize(param0: number): void;
				public static create(param0: number, param1: number): org.opencv.video.FarnebackOpticalFlow;
				public getNumLevels(): number;
				public setPolyN(param0: number): void;
				public static create(): org.opencv.video.FarnebackOpticalFlow;
				public setNumIters(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setFastPyramids(param0: boolean): void;
				public getFastPyramids(): boolean;
				public getPyrScale(): number;
				public setNumLevels(param0: number): void;
				public setFlags(param0: number): void;
				public static create(param0: number, param1: number, param2: boolean, param3: number, param4: number): org.opencv.video.FarnebackOpticalFlow;
				public static __fromPtr__(param0: number): org.opencv.video.DenseOpticalFlow;
				public static create(param0: number, param1: number, param2: boolean, param3: number, param4: number, param5: number): org.opencv.video.FarnebackOpticalFlow;
				public static create(param0: number, param1: number, param2: boolean, param3: number): org.opencv.video.FarnebackOpticalFlow;
				public setPyrScale(param0: number): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module video {
			export class KalmanFilter {
				public static class: java.lang.Class<org.opencv.video.KalmanFilter>;
				public nativeObj: number;
				public constructor(param0: number, param1: number);
				public constructor(param0: number, param1: number, param2: number);
				public get_errorCovPost(): org.opencv.core.Mat;
				public finalize(): void;
				public get_transitionMatrix(): org.opencv.core.Mat;
				public get_measurementNoiseCov(): org.opencv.core.Mat;
				public get_gain(): org.opencv.core.Mat;
				public constructor();
				public get_statePre(): org.opencv.core.Mat;
				public get_controlMatrix(): org.opencv.core.Mat;
				public set_statePost(param0: org.opencv.core.Mat): void;
				public set_measurementNoiseCov(param0: org.opencv.core.Mat): void;
				public set_transitionMatrix(param0: org.opencv.core.Mat): void;
				public set_processNoiseCov(param0: org.opencv.core.Mat): void;
				public get_processNoiseCov(): org.opencv.core.Mat;
				public set_errorCovPre(param0: org.opencv.core.Mat): void;
				public set_errorCovPost(param0: org.opencv.core.Mat): void;
				public getNativeObjAddr(): number;
				public get_statePost(): org.opencv.core.Mat;
				public static __fromPtr__(param0: number): org.opencv.video.KalmanFilter;
				public set_statePre(param0: org.opencv.core.Mat): void;
				public predict(param0: org.opencv.core.Mat): org.opencv.core.Mat;
				public constructor(param0: number, param1: number, param2: number, param3: number);
				public get_measurementMatrix(): org.opencv.core.Mat;
				public set_measurementMatrix(param0: org.opencv.core.Mat): void;
				public constructor(param0: number);
				public predict(): org.opencv.core.Mat;
				public set_gain(param0: org.opencv.core.Mat): void;
				public get_errorCovPre(): org.opencv.core.Mat;
				public correct(param0: org.opencv.core.Mat): org.opencv.core.Mat;
				public set_controlMatrix(param0: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module video {
			export class SparseOpticalFlow extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.video.SparseOpticalFlow>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public calc(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat, param5: org.opencv.core.Mat): void;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.video.SparseOpticalFlow;
				public calc(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module video {
			export class SparsePyrLKOpticalFlow extends org.opencv.video.SparseOpticalFlow {
				public static class: java.lang.Class<org.opencv.video.SparsePyrLKOpticalFlow>;
				public static create(param0: org.opencv.core.Size, param1: number): org.opencv.video.SparsePyrLKOpticalFlow;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getWinSize(): org.opencv.core.Size;
				public static create(param0: org.opencv.core.Size): org.opencv.video.SparsePyrLKOpticalFlow;
				public getMinEigThreshold(): number;
				public finalize(): void;
				public static create(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.TermCriteria, param3: number): org.opencv.video.SparsePyrLKOpticalFlow;
				public setWinSize(param0: org.opencv.core.Size): void;
				public getMaxLevel(): number;
				public setFlags(param0: number): void;
				public static create(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.TermCriteria, param3: number, param4: number): org.opencv.video.SparsePyrLKOpticalFlow;
				public static create(param0: org.opencv.core.Size, param1: number, param2: org.opencv.core.TermCriteria): org.opencv.video.SparsePyrLKOpticalFlow;
				public setMinEigThreshold(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.video.SparsePyrLKOpticalFlow;
				public constructor(param0: number);
				public static create(): org.opencv.video.SparsePyrLKOpticalFlow;
				public getFlags(): number;
				public setMaxLevel(param0: number): void;
				public getTermCriteria(): org.opencv.core.TermCriteria;
				public static __fromPtr__(param0: number): org.opencv.video.SparseOpticalFlow;
				public setTermCriteria(param0: org.opencv.core.TermCriteria): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module video {
			export class VariationalRefinement extends org.opencv.video.DenseOpticalFlow {
				public static class: java.lang.Class<org.opencv.video.VariationalRefinement>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getSorIterations(): number;
				public static __fromPtr__(param0: number): org.opencv.video.VariationalRefinement;
				public finalize(): void;
				public getAlpha(): number;
				public setAlpha(param0: number): void;
				public setFixedPointIterations(param0: number): void;
				public setGamma(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.video.DenseOpticalFlow;
				public static create(): org.opencv.video.VariationalRefinement;
				public getFixedPointIterations(): number;
				public setOmega(param0: number): void;
				public setDelta(param0: number): void;
				public setSorIterations(param0: number): void;
				public constructor(param0: number);
				public getOmega(): number;
				public getDelta(): number;
				public getGamma(): number;
				public calcUV(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module video {
			export class Video {
				public static class: java.lang.Class<org.opencv.video.Video>;
				public static OPTFLOW_USE_INITIAL_FLOW: number;
				public static OPTFLOW_LK_GET_MIN_EIGENVALS: number;
				public static OPTFLOW_FARNEBACK_GAUSSIAN: number;
				public static MOTION_TRANSLATION: number;
				public static MOTION_EUCLIDEAN: number;
				public static MOTION_AFFINE: number;
				public static MOTION_HOMOGRAPHY: number;
				public static buildOpticalFlowPyramid(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: number, param4: boolean, param5: number): number;
				public static buildOpticalFlowPyramid(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: number, param4: boolean, param5: number, param6: number): number;
				public static writeOpticalFlow(param0: string, param1: org.opencv.core.Mat): boolean;
				public static calcOpticalFlowPyrLK(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfPoint2f, param3: org.opencv.core.MatOfPoint2f, param4: org.opencv.core.MatOfByte, param5: org.opencv.core.MatOfFloat, param6: org.opencv.core.Size): void;
				public static CamShift(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect, param2: org.opencv.core.TermCriteria): org.opencv.core.RotatedRect;
				public static findTransformECC(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): number;
				public static calcOpticalFlowPyrLK(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfPoint2f, param3: org.opencv.core.MatOfPoint2f, param4: org.opencv.core.MatOfByte, param5: org.opencv.core.MatOfFloat, param6: org.opencv.core.Size, param7: number, param8: org.opencv.core.TermCriteria, param9: number, param10: number): void;
				public static calcOpticalFlowPyrLK(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfPoint2f, param3: org.opencv.core.MatOfPoint2f, param4: org.opencv.core.MatOfByte, param5: org.opencv.core.MatOfFloat, param6: org.opencv.core.Size, param7: number, param8: org.opencv.core.TermCriteria): void;
				public static calcOpticalFlowPyrLK(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfPoint2f, param3: org.opencv.core.MatOfPoint2f, param4: org.opencv.core.MatOfByte, param5: org.opencv.core.MatOfFloat, param6: org.opencv.core.Size, param7: number): void;
				public static calcOpticalFlowFarneback(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public constructor();
				public static createBackgroundSubtractorKNN(): org.opencv.video.BackgroundSubtractorKNN;
				public static createBackgroundSubtractorKNN(param0: number, param1: number): org.opencv.video.BackgroundSubtractorKNN;
				public static buildOpticalFlowPyramid(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: number, param4: boolean): number;
				public static createBackgroundSubtractorMOG2(param0: number): org.opencv.video.BackgroundSubtractorMOG2;
				public static createBackgroundSubtractorMOG2(param0: number, param1: number): org.opencv.video.BackgroundSubtractorMOG2;
				public static calcOpticalFlowPyrLK(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfPoint2f, param3: org.opencv.core.MatOfPoint2f, param4: org.opencv.core.MatOfByte, param5: org.opencv.core.MatOfFloat, param6: org.opencv.core.Size, param7: number, param8: org.opencv.core.TermCriteria, param9: number): void;
				public static createBackgroundSubtractorKNN(param0: number): org.opencv.video.BackgroundSubtractorKNN;
				public static findTransformECC(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): number;
				public static findTransformECC(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.core.TermCriteria, param5: org.opencv.core.Mat): number;
				public static meanShift(param0: org.opencv.core.Mat, param1: org.opencv.core.Rect, param2: org.opencv.core.TermCriteria): number;
				public static buildOpticalFlowPyramid(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: number): number;
				public static createBackgroundSubtractorMOG2(param0: number, param1: number, param2: boolean): org.opencv.video.BackgroundSubtractorMOG2;
				public static readOpticalFlow(param0: string): org.opencv.core.Mat;
				public static calcOpticalFlowPyrLK(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfPoint2f, param3: org.opencv.core.MatOfPoint2f, param4: org.opencv.core.MatOfByte, param5: org.opencv.core.MatOfFloat): void;
				public static buildOpticalFlowPyramid(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.Size, param3: number, param4: boolean, param5: number, param6: number, param7: boolean): number;
				public static createBackgroundSubtractorMOG2(): org.opencv.video.BackgroundSubtractorMOG2;
				public static createBackgroundSubtractorKNN(param0: number, param1: number, param2: boolean): org.opencv.video.BackgroundSubtractorKNN;
				public static findTransformECC(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: org.opencv.core.TermCriteria): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module videoio {
			export class VideoCapture {
				public static class: java.lang.Class<org.opencv.videoio.VideoCapture>;
				public nativeObj: number;
				public constructor(param0: number, param1: number);
				public getBackendName(): string;
				public release(): void;
				public set(param0: number, param1: number): boolean;
				public finalize(): void;
				public getNativeObjAddr(): number;
				public static __fromPtr__(param0: number): org.opencv.videoio.VideoCapture;
				public get(param0: number): number;
				public open(param0: string): boolean;
				public open(param0: number, param1: number): boolean;
				public constructor(param0: string);
				public constructor();
				public open(param0: number): boolean;
				public retrieve(param0: org.opencv.core.Mat, param1: number): boolean;
				public retrieve(param0: org.opencv.core.Mat): boolean;
				public grab(): boolean;
				public isOpened(): boolean;
				public constructor(param0: string, param1: number);
				public constructor(param0: number);
				public read(param0: org.opencv.core.Mat): boolean;
				public open(param0: string, param1: number): boolean;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module videoio {
			export class VideoWriter {
				public static class: java.lang.Class<org.opencv.videoio.VideoWriter>;
				public nativeObj: number;
				public getBackendName(): string;
				public release(): void;
				public constructor(param0: string, param1: number, param2: number, param3: number, param4: org.opencv.core.Size, param5: boolean);
				public set(param0: number, param1: number): boolean;
				public finalize(): void;
				public getNativeObjAddr(): number;
				public constructor(param0: string, param1: number, param2: number, param3: org.opencv.core.Size);
				public get(param0: number): number;
				public static __fromPtr__(param0: number): org.opencv.videoio.VideoWriter;
				public open(param0: string, param1: number, param2: number, param3: org.opencv.core.Size): boolean;
				public constructor();
				public constructor(param0: string, param1: number, param2: number, param3: number, param4: org.opencv.core.Size);
				public write(param0: org.opencv.core.Mat): void;
				public open(param0: string, param1: number, param2: number, param3: number, param4: org.opencv.core.Size): boolean;
				public isOpened(): boolean;
				public open(param0: string, param1: number, param2: number, param3: number, param4: org.opencv.core.Size, param5: boolean): boolean;
				public constructor(param0: number);
				public open(param0: string, param1: number, param2: number, param3: org.opencv.core.Size, param4: boolean): boolean;
				public constructor(param0: string, param1: number, param2: number, param3: org.opencv.core.Size, param4: boolean);
				public static fourcc(param0: string, param1: string, param2: string, param3: string): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module videoio {
			export class Videoio {
				public static class: java.lang.Class<org.opencv.videoio.Videoio>;
				public static VIDEOWRITER_PROP_QUALITY: number;
				public static VIDEOWRITER_PROP_FRAMEBYTES: number;
				public static VIDEOWRITER_PROP_NSTRIPES: number;
				public static CAP_PROP_DC1394_OFF: number;
				public static CAP_PROP_DC1394_MODE_MANUAL: number;
				public static CAP_PROP_DC1394_MODE_AUTO: number;
				public static CAP_PROP_DC1394_MODE_ONE_PUSH_AUTO: number;
				public static CAP_PROP_DC1394_MAX: number;
				public static CAP_OPENNI_DEPTH_GENERATOR: number;
				public static CAP_OPENNI_IMAGE_GENERATOR: number;
				public static CAP_OPENNI_IR_GENERATOR: number;
				public static CAP_OPENNI_GENERATORS_MASK: number;
				public static CAP_PROP_OPENNI_OUTPUT_MODE: number;
				public static CAP_PROP_OPENNI_FRAME_MAX_DEPTH: number;
				public static CAP_PROP_OPENNI_BASELINE: number;
				public static CAP_PROP_OPENNI_FOCAL_LENGTH: number;
				public static CAP_PROP_OPENNI_REGISTRATION: number;
				public static CAP_PROP_OPENNI_REGISTRATION_ON: number;
				public static CAP_PROP_OPENNI_APPROX_FRAME_SYNC: number;
				public static CAP_PROP_OPENNI_MAX_BUFFER_SIZE: number;
				public static CAP_PROP_OPENNI_CIRCLE_BUFFER: number;
				public static CAP_PROP_OPENNI_MAX_TIME_DURATION: number;
				public static CAP_PROP_OPENNI_GENERATOR_PRESENT: number;
				public static CAP_PROP_OPENNI2_SYNC: number;
				public static CAP_PROP_OPENNI2_MIRROR: number;
				public static CAP_OPENNI_IMAGE_GENERATOR_PRESENT: number;
				public static CAP_OPENNI_IMAGE_GENERATOR_OUTPUT_MODE: number;
				public static CAP_OPENNI_DEPTH_GENERATOR_PRESENT: number;
				public static CAP_OPENNI_DEPTH_GENERATOR_BASELINE: number;
				public static CAP_OPENNI_DEPTH_GENERATOR_FOCAL_LENGTH: number;
				public static CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION: number;
				public static CAP_OPENNI_DEPTH_GENERATOR_REGISTRATION_ON: number;
				public static CAP_OPENNI_IR_GENERATOR_PRESENT: number;
				public static CAP_OPENNI_DEPTH_MAP: number;
				public static CAP_OPENNI_POINT_CLOUD_MAP: number;
				public static CAP_OPENNI_DISPARITY_MAP: number;
				public static CAP_OPENNI_DISPARITY_MAP_32F: number;
				public static CAP_OPENNI_VALID_DEPTH_MASK: number;
				public static CAP_OPENNI_BGR_IMAGE: number;
				public static CAP_OPENNI_GRAY_IMAGE: number;
				public static CAP_OPENNI_IR_IMAGE: number;
				public static CAP_OPENNI_VGA_30HZ: number;
				public static CAP_OPENNI_SXGA_15HZ: number;
				public static CAP_OPENNI_SXGA_30HZ: number;
				public static CAP_OPENNI_QVGA_30HZ: number;
				public static CAP_OPENNI_QVGA_60HZ: number;
				public static CAP_PROP_GSTREAMER_QUEUE_LENGTH: number;
				public static CAP_PROP_PVAPI_MULTICASTIP: number;
				public static CAP_PROP_PVAPI_FRAMESTARTTRIGGERMODE: number;
				public static CAP_PROP_PVAPI_DECIMATIONHORIZONTAL: number;
				public static CAP_PROP_PVAPI_DECIMATIONVERTICAL: number;
				public static CAP_PROP_PVAPI_BINNINGX: number;
				public static CAP_PROP_PVAPI_BINNINGY: number;
				public static CAP_PROP_PVAPI_PIXELFORMAT: number;
				public static CAP_PVAPI_FSTRIGMODE_FREERUN: number;
				public static CAP_PVAPI_FSTRIGMODE_SYNCIN1: number;
				public static CAP_PVAPI_FSTRIGMODE_SYNCIN2: number;
				public static CAP_PVAPI_FSTRIGMODE_FIXEDRATE: number;
				public static CAP_PVAPI_FSTRIGMODE_SOFTWARE: number;
				public static CAP_PVAPI_DECIMATION_OFF: number;
				public static CAP_PVAPI_DECIMATION_2OUTOF4: number;
				public static CAP_PVAPI_DECIMATION_2OUTOF8: number;
				public static CAP_PVAPI_DECIMATION_2OUTOF16: number;
				public static CAP_PVAPI_PIXELFORMAT_MONO8: number;
				public static CAP_PVAPI_PIXELFORMAT_MONO16: number;
				public static CAP_PVAPI_PIXELFORMAT_BAYER8: number;
				public static CAP_PVAPI_PIXELFORMAT_BAYER16: number;
				public static CAP_PVAPI_PIXELFORMAT_RGB24: number;
				public static CAP_PVAPI_PIXELFORMAT_BGR24: number;
				public static CAP_PVAPI_PIXELFORMAT_RGBA32: number;
				public static CAP_PVAPI_PIXELFORMAT_BGRA32: number;
				public static CAP_PROP_XI_DOWNSAMPLING: number;
				public static CAP_PROP_XI_DATA_FORMAT: number;
				public static CAP_PROP_XI_OFFSET_X: number;
				public static CAP_PROP_XI_OFFSET_Y: number;
				public static CAP_PROP_XI_TRG_SOURCE: number;
				public static CAP_PROP_XI_TRG_SOFTWARE: number;
				public static CAP_PROP_XI_GPI_SELECTOR: number;
				public static CAP_PROP_XI_GPI_MODE: number;
				public static CAP_PROP_XI_GPI_LEVEL: number;
				public static CAP_PROP_XI_GPO_SELECTOR: number;
				public static CAP_PROP_XI_GPO_MODE: number;
				public static CAP_PROP_XI_LED_SELECTOR: number;
				public static CAP_PROP_XI_LED_MODE: number;
				public static CAP_PROP_XI_MANUAL_WB: number;
				public static CAP_PROP_XI_AUTO_WB: number;
				public static CAP_PROP_XI_AEAG: number;
				public static CAP_PROP_XI_EXP_PRIORITY: number;
				public static CAP_PROP_XI_AE_MAX_LIMIT: number;
				public static CAP_PROP_XI_AG_MAX_LIMIT: number;
				public static CAP_PROP_XI_AEAG_LEVEL: number;
				public static CAP_PROP_XI_TIMEOUT: number;
				public static CAP_PROP_XI_EXPOSURE: number;
				public static CAP_PROP_XI_EXPOSURE_BURST_COUNT: number;
				public static CAP_PROP_XI_GAIN_SELECTOR: number;
				public static CAP_PROP_XI_GAIN: number;
				public static CAP_PROP_XI_DOWNSAMPLING_TYPE: number;
				public static CAP_PROP_XI_BINNING_SELECTOR: number;
				public static CAP_PROP_XI_BINNING_VERTICAL: number;
				public static CAP_PROP_XI_BINNING_HORIZONTAL: number;
				public static CAP_PROP_XI_BINNING_PATTERN: number;
				public static CAP_PROP_XI_DECIMATION_SELECTOR: number;
				public static CAP_PROP_XI_DECIMATION_VERTICAL: number;
				public static CAP_PROP_XI_DECIMATION_HORIZONTAL: number;
				public static CAP_PROP_XI_DECIMATION_PATTERN: number;
				public static CAP_PROP_XI_TEST_PATTERN_GENERATOR_SELECTOR: number;
				public static CAP_PROP_XI_TEST_PATTERN: number;
				public static CAP_PROP_XI_IMAGE_DATA_FORMAT: number;
				public static CAP_PROP_XI_SHUTTER_TYPE: number;
				public static CAP_PROP_XI_SENSOR_TAPS: number;
				public static CAP_PROP_XI_AEAG_ROI_OFFSET_X: number;
				public static CAP_PROP_XI_AEAG_ROI_OFFSET_Y: number;
				public static CAP_PROP_XI_AEAG_ROI_WIDTH: number;
				public static CAP_PROP_XI_AEAG_ROI_HEIGHT: number;
				public static CAP_PROP_XI_BPC: number;
				public static CAP_PROP_XI_WB_KR: number;
				public static CAP_PROP_XI_WB_KG: number;
				public static CAP_PROP_XI_WB_KB: number;
				public static CAP_PROP_XI_WIDTH: number;
				public static CAP_PROP_XI_HEIGHT: number;
				public static CAP_PROP_XI_REGION_SELECTOR: number;
				public static CAP_PROP_XI_REGION_MODE: number;
				public static CAP_PROP_XI_LIMIT_BANDWIDTH: number;
				public static CAP_PROP_XI_SENSOR_DATA_BIT_DEPTH: number;
				public static CAP_PROP_XI_OUTPUT_DATA_BIT_DEPTH: number;
				public static CAP_PROP_XI_IMAGE_DATA_BIT_DEPTH: number;
				public static CAP_PROP_XI_OUTPUT_DATA_PACKING: number;
				public static CAP_PROP_XI_OUTPUT_DATA_PACKING_TYPE: number;
				public static CAP_PROP_XI_IS_COOLED: number;
				public static CAP_PROP_XI_COOLING: number;
				public static CAP_PROP_XI_TARGET_TEMP: number;
				public static CAP_PROP_XI_CHIP_TEMP: number;
				public static CAP_PROP_XI_HOUS_TEMP: number;
				public static CAP_PROP_XI_HOUS_BACK_SIDE_TEMP: number;
				public static CAP_PROP_XI_SENSOR_BOARD_TEMP: number;
				public static CAP_PROP_XI_CMS: number;
				public static CAP_PROP_XI_APPLY_CMS: number;
				public static CAP_PROP_XI_IMAGE_IS_COLOR: number;
				public static CAP_PROP_XI_COLOR_FILTER_ARRAY: number;
				public static CAP_PROP_XI_GAMMAY: number;
				public static CAP_PROP_XI_GAMMAC: number;
				public static CAP_PROP_XI_SHARPNESS: number;
				public static CAP_PROP_XI_CC_MATRIX_00: number;
				public static CAP_PROP_XI_CC_MATRIX_01: number;
				public static CAP_PROP_XI_CC_MATRIX_02: number;
				public static CAP_PROP_XI_CC_MATRIX_03: number;
				public static CAP_PROP_XI_CC_MATRIX_10: number;
				public static CAP_PROP_XI_CC_MATRIX_11: number;
				public static CAP_PROP_XI_CC_MATRIX_12: number;
				public static CAP_PROP_XI_CC_MATRIX_13: number;
				public static CAP_PROP_XI_CC_MATRIX_20: number;
				public static CAP_PROP_XI_CC_MATRIX_21: number;
				public static CAP_PROP_XI_CC_MATRIX_22: number;
				public static CAP_PROP_XI_CC_MATRIX_23: number;
				public static CAP_PROP_XI_CC_MATRIX_30: number;
				public static CAP_PROP_XI_CC_MATRIX_31: number;
				public static CAP_PROP_XI_CC_MATRIX_32: number;
				public static CAP_PROP_XI_CC_MATRIX_33: number;
				public static CAP_PROP_XI_DEFAULT_CC_MATRIX: number;
				public static CAP_PROP_XI_TRG_SELECTOR: number;
				public static CAP_PROP_XI_ACQ_FRAME_BURST_COUNT: number;
				public static CAP_PROP_XI_DEBOUNCE_EN: number;
				public static CAP_PROP_XI_DEBOUNCE_T0: number;
				public static CAP_PROP_XI_DEBOUNCE_T1: number;
				public static CAP_PROP_XI_DEBOUNCE_POL: number;
				public static CAP_PROP_XI_LENS_MODE: number;
				public static CAP_PROP_XI_LENS_APERTURE_VALUE: number;
				public static CAP_PROP_XI_LENS_FOCUS_MOVEMENT_VALUE: number;
				public static CAP_PROP_XI_LENS_FOCUS_MOVE: number;
				public static CAP_PROP_XI_LENS_FOCUS_DISTANCE: number;
				public static CAP_PROP_XI_LENS_FOCAL_LENGTH: number;
				public static CAP_PROP_XI_LENS_FEATURE_SELECTOR: number;
				public static CAP_PROP_XI_LENS_FEATURE: number;
				public static CAP_PROP_XI_DEVICE_MODEL_ID: number;
				public static CAP_PROP_XI_DEVICE_SN: number;
				public static CAP_PROP_XI_IMAGE_DATA_FORMAT_RGB32_ALPHA: number;
				public static CAP_PROP_XI_IMAGE_PAYLOAD_SIZE: number;
				public static CAP_PROP_XI_TRANSPORT_PIXEL_FORMAT: number;
				public static CAP_PROP_XI_SENSOR_CLOCK_FREQ_HZ: number;
				public static CAP_PROP_XI_SENSOR_CLOCK_FREQ_INDEX: number;
				public static CAP_PROP_XI_SENSOR_OUTPUT_CHANNEL_COUNT: number;
				public static CAP_PROP_XI_FRAMERATE: number;
				public static CAP_PROP_XI_COUNTER_SELECTOR: number;
				public static CAP_PROP_XI_COUNTER_VALUE: number;
				public static CAP_PROP_XI_ACQ_TIMING_MODE: number;
				public static CAP_PROP_XI_AVAILABLE_BANDWIDTH: number;
				public static CAP_PROP_XI_BUFFER_POLICY: number;
				public static CAP_PROP_XI_LUT_EN: number;
				public static CAP_PROP_XI_LUT_INDEX: number;
				public static CAP_PROP_XI_LUT_VALUE: number;
				public static CAP_PROP_XI_TRG_DELAY: number;
				public static CAP_PROP_XI_TS_RST_MODE: number;
				public static CAP_PROP_XI_TS_RST_SOURCE: number;
				public static CAP_PROP_XI_IS_DEVICE_EXIST: number;
				public static CAP_PROP_XI_ACQ_BUFFER_SIZE: number;
				public static CAP_PROP_XI_ACQ_BUFFER_SIZE_UNIT: number;
				public static CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_SIZE: number;
				public static CAP_PROP_XI_BUFFERS_QUEUE_SIZE: number;
				public static CAP_PROP_XI_ACQ_TRANSPORT_BUFFER_COMMIT: number;
				public static CAP_PROP_XI_RECENT_FRAME: number;
				public static CAP_PROP_XI_DEVICE_RESET: number;
				public static CAP_PROP_XI_COLUMN_FPN_CORRECTION: number;
				public static CAP_PROP_XI_ROW_FPN_CORRECTION: number;
				public static CAP_PROP_XI_SENSOR_MODE: number;
				public static CAP_PROP_XI_HDR: number;
				public static CAP_PROP_XI_HDR_KNEEPOINT_COUNT: number;
				public static CAP_PROP_XI_HDR_T1: number;
				public static CAP_PROP_XI_HDR_T2: number;
				public static CAP_PROP_XI_KNEEPOINT1: number;
				public static CAP_PROP_XI_KNEEPOINT2: number;
				public static CAP_PROP_XI_IMAGE_BLACK_LEVEL: number;
				public static CAP_PROP_XI_HW_REVISION: number;
				public static CAP_PROP_XI_DEBUG_LEVEL: number;
				public static CAP_PROP_XI_AUTO_BANDWIDTH_CALCULATION: number;
				public static CAP_PROP_XI_FFS_FILE_ID: number;
				public static CAP_PROP_XI_FFS_FILE_SIZE: number;
				public static CAP_PROP_XI_FREE_FFS_SIZE: number;
				public static CAP_PROP_XI_USED_FFS_SIZE: number;
				public static CAP_PROP_XI_FFS_ACCESS_KEY: number;
				public static CAP_PROP_XI_SENSOR_FEATURE_SELECTOR: number;
				public static CAP_PROP_XI_SENSOR_FEATURE_VALUE: number;
				public static CAP_PROP_IOS_DEVICE_FOCUS: number;
				public static CAP_PROP_IOS_DEVICE_EXPOSURE: number;
				public static CAP_PROP_IOS_DEVICE_FLASH: number;
				public static CAP_PROP_IOS_DEVICE_WHITEBALANCE: number;
				public static CAP_PROP_IOS_DEVICE_TORCH: number;
				public static CAP_PROP_GIGA_FRAME_OFFSET_X: number;
				public static CAP_PROP_GIGA_FRAME_OFFSET_Y: number;
				public static CAP_PROP_GIGA_FRAME_WIDTH_MAX: number;
				public static CAP_PROP_GIGA_FRAME_HEIGH_MAX: number;
				public static CAP_PROP_GIGA_FRAME_SENS_WIDTH: number;
				public static CAP_PROP_GIGA_FRAME_SENS_HEIGH: number;
				public static CAP_PROP_INTELPERC_PROFILE_COUNT: number;
				public static CAP_PROP_INTELPERC_PROFILE_IDX: number;
				public static CAP_PROP_INTELPERC_DEPTH_LOW_CONFIDENCE_VALUE: number;
				public static CAP_PROP_INTELPERC_DEPTH_SATURATION_VALUE: number;
				public static CAP_PROP_INTELPERC_DEPTH_CONFIDENCE_THRESHOLD: number;
				public static CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_HORZ: number;
				public static CAP_PROP_INTELPERC_DEPTH_FOCAL_LENGTH_VERT: number;
				public static CAP_INTELPERC_DEPTH_GENERATOR: number;
				public static CAP_INTELPERC_IMAGE_GENERATOR: number;
				public static CAP_INTELPERC_IR_GENERATOR: number;
				public static CAP_INTELPERC_GENERATORS_MASK: number;
				public static CAP_INTELPERC_DEPTH_MAP: number;
				public static CAP_INTELPERC_UVDEPTH_MAP: number;
				public static CAP_INTELPERC_IR_MAP: number;
				public static CAP_INTELPERC_IMAGE: number;
				public static CAP_PROP_GPHOTO2_PREVIEW: number;
				public static CAP_PROP_GPHOTO2_WIDGET_ENUMERATE: number;
				public static CAP_PROP_GPHOTO2_RELOAD_CONFIG: number;
				public static CAP_PROP_GPHOTO2_RELOAD_ON_CHANGE: number;
				public static CAP_PROP_GPHOTO2_COLLECT_MSGS: number;
				public static CAP_PROP_GPHOTO2_FLUSH_MSGS: number;
				public static CAP_PROP_SPEED: number;
				public static CAP_PROP_APERTURE: number;
				public static CAP_PROP_EXPOSUREPROGRAM: number;
				public static CAP_PROP_VIEWFINDER: number;
				public static CAP_PROP_IMAGES_BASE: number;
				public static CAP_PROP_IMAGES_LAST: number;
				public static CAP_PROP_POS_MSEC: number;
				public static CAP_PROP_POS_FRAMES: number;
				public static CAP_PROP_POS_AVI_RATIO: number;
				public static CAP_PROP_FRAME_WIDTH: number;
				public static CAP_PROP_FRAME_HEIGHT: number;
				public static CAP_PROP_FPS: number;
				public static CAP_PROP_FOURCC: number;
				public static CAP_PROP_FRAME_COUNT: number;
				public static CAP_PROP_FORMAT: number;
				public static CAP_PROP_MODE: number;
				public static CAP_PROP_BRIGHTNESS: number;
				public static CAP_PROP_CONTRAST: number;
				public static CAP_PROP_SATURATION: number;
				public static CAP_PROP_HUE: number;
				public static CAP_PROP_GAIN: number;
				public static CAP_PROP_EXPOSURE: number;
				public static CAP_PROP_CONVERT_RGB: number;
				public static CAP_PROP_WHITE_BALANCE_BLUE_U: number;
				public static CAP_PROP_RECTIFICATION: number;
				public static CAP_PROP_MONOCHROME: number;
				public static CAP_PROP_SHARPNESS: number;
				public static CAP_PROP_AUTO_EXPOSURE: number;
				public static CAP_PROP_GAMMA: number;
				public static CAP_PROP_TEMPERATURE: number;
				public static CAP_PROP_TRIGGER: number;
				public static CAP_PROP_TRIGGER_DELAY: number;
				public static CAP_PROP_WHITE_BALANCE_RED_V: number;
				public static CAP_PROP_ZOOM: number;
				public static CAP_PROP_FOCUS: number;
				public static CAP_PROP_GUID: number;
				public static CAP_PROP_ISO_SPEED: number;
				public static CAP_PROP_BACKLIGHT: number;
				public static CAP_PROP_PAN: number;
				public static CAP_PROP_TILT: number;
				public static CAP_PROP_ROLL: number;
				public static CAP_PROP_IRIS: number;
				public static CAP_PROP_SETTINGS: number;
				public static CAP_PROP_BUFFERSIZE: number;
				public static CAP_PROP_AUTOFOCUS: number;
				public static CAP_PROP_SAR_NUM: number;
				public static CAP_PROP_SAR_DEN: number;
				public static CAP_PROP_BACKEND: number;
				public static CAP_PROP_CHANNEL: number;
				public static CAP_PROP_AUTO_WB: number;
				public static CAP_PROP_WB_TEMPERATURE: number;
				public static CAP_ANY: number;
				public static CAP_VFW: number;
				public static CAP_V4L: number;
				public static CAP_V4L2: number;
				public static CAP_FIREWIRE: number;
				public static CAP_FIREWARE: number;
				public static CAP_IEEE1394: number;
				public static CAP_DC1394: number;
				public static CAP_CMU1394: number;
				public static CAP_QT: number;
				public static CAP_UNICAP: number;
				public static CAP_DSHOW: number;
				public static CAP_PVAPI: number;
				public static CAP_OPENNI: number;
				public static CAP_OPENNI_ASUS: number;
				public static CAP_ANDROID: number;
				public static CAP_XIAPI: number;
				public static CAP_AVFOUNDATION: number;
				public static CAP_GIGANETIX: number;
				public static CAP_MSMF: number;
				public static CAP_WINRT: number;
				public static CAP_INTELPERC: number;
				public static CAP_OPENNI2: number;
				public static CAP_OPENNI2_ASUS: number;
				public static CAP_GPHOTO2: number;
				public static CAP_GSTREAMER: number;
				public static CAP_FFMPEG: number;
				public static CAP_IMAGES: number;
				public static CAP_ARAVIS: number;
				public static CAP_OPENCV_MJPEG: number;
				public static CAP_INTEL_MFX: number;
				public static CAP_XINE: number;
				public static getBackendName(param0: number): string;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class BoostDesc extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.BoostDesc>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number, param1: boolean, param2: number): org.opencv.xfeatures2d.BoostDesc;
				public static create(param0: number, param1: boolean): org.opencv.xfeatures2d.BoostDesc;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.BoostDesc;
				public setScaleFactor(param0: number): void;
				public finalize(): void;
				public setUseScaleOrientation(param0: boolean): void;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public getUseScaleOrientation(): boolean;
				public static create(param0: number): org.opencv.xfeatures2d.BoostDesc;
				public getScaleFactor(): number;
				public constructor(param0: number);
				public static create(): org.opencv.xfeatures2d.BoostDesc;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class BriefDescriptorExtractor extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.BriefDescriptorExtractor>;
				public static create(param0: number): org.opencv.xfeatures2d.BriefDescriptorExtractor;
				public static create(param0: number, param1: boolean): org.opencv.xfeatures2d.BriefDescriptorExtractor;
				public static create(): org.opencv.xfeatures2d.BriefDescriptorExtractor;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.BriefDescriptorExtractor;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class DAISY extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.DAISY>;
				public static NRM_NONE: number;
				public static NRM_PARTIAL: number;
				public static NRM_FULL: number;
				public static NRM_SIFT: number;
				public static create(): org.opencv.xfeatures2d.DAISY;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number, param1: number): org.opencv.xfeatures2d.DAISY;
				public finalize(): void;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: org.opencv.core.Mat): org.opencv.xfeatures2d.DAISY;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: org.opencv.core.Mat, param5: boolean): org.opencv.xfeatures2d.DAISY;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: org.opencv.core.Mat, param5: boolean, param6: boolean): org.opencv.xfeatures2d.DAISY;
				public static create(param0: number): org.opencv.xfeatures2d.DAISY;
				public static create(param0: number, param1: number, param2: number, param3: number): org.opencv.xfeatures2d.DAISY;
				public constructor(param0: number);
				public static create(param0: number, param1: number, param2: number): org.opencv.xfeatures2d.DAISY;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.DAISY;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class FREAK extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.FREAK>;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.FREAK;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: boolean, param1: boolean, param2: number, param3: number, param4: org.opencv.core.MatOfInt): org.opencv.xfeatures2d.FREAK;
				public static create(param0: boolean, param1: boolean, param2: number, param3: number): org.opencv.xfeatures2d.FREAK;
				public static create(param0: boolean, param1: boolean, param2: number): org.opencv.xfeatures2d.FREAK;
				public finalize(): void;
				public constructor(param0: number);
				public static create(param0: boolean, param1: boolean): org.opencv.xfeatures2d.FREAK;
				public static create(): org.opencv.xfeatures2d.FREAK;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static create(param0: boolean): org.opencv.xfeatures2d.FREAK;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class HarrisLaplaceFeatureDetector extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.HarrisLaplaceFeatureDetector>;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.xfeatures2d.HarrisLaplaceFeatureDetector;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.HarrisLaplaceFeatureDetector;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number, param1: number, param2: number, param3: number): org.opencv.xfeatures2d.HarrisLaplaceFeatureDetector;
				public static create(param0: number): org.opencv.xfeatures2d.HarrisLaplaceFeatureDetector;
				public static create(param0: number, param1: number, param2: number): org.opencv.xfeatures2d.HarrisLaplaceFeatureDetector;
				public finalize(): void;
				public constructor(param0: number);
				public static create(): org.opencv.xfeatures2d.HarrisLaplaceFeatureDetector;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static create(param0: number, param1: number): org.opencv.xfeatures2d.HarrisLaplaceFeatureDetector;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class LATCH extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.LATCH>;
				public static create(): org.opencv.xfeatures2d.LATCH;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number): org.opencv.xfeatures2d.LATCH;
				public static create(param0: number, param1: boolean): org.opencv.xfeatures2d.LATCH;
				public static create(param0: number, param1: boolean, param2: number, param3: number): org.opencv.xfeatures2d.LATCH;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.LATCH;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static create(param0: number, param1: boolean, param2: number): org.opencv.xfeatures2d.LATCH;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class LUCID extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.LUCID>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number): org.opencv.xfeatures2d.LUCID;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.LUCID;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static create(param0: number, param1: number): org.opencv.xfeatures2d.LUCID;
				public static create(): org.opencv.xfeatures2d.LUCID;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class MSDDetector extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.MSDDetector>;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.MSDDetector;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class PCTSignatures extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.xfeatures2d.PCTSignatures>;
				public static UNIFORM: number;
				public static REGULAR: number;
				public static NORMAL: number;
				public static MINUS: number;
				public static GAUSSIAN: number;
				public static HEURISTIC: number;
				public static L0_25: number;
				public static L0_5: number;
				public static L1: number;
				public static L2: number;
				public static L2SQUARED: number;
				public static L5: number;
				public static L_INFINITY: number;
				public getWeightEntropy(): number;
				public getSamplingPoints(): org.opencv.core.MatOfPoint2f;
				public getWeightA(): number;
				public getDropThreshold(): number;
				public computeSignatures(param0: java.util.List<org.opencv.core.Mat>, param1: java.util.List<org.opencv.core.Mat>): void;
				public getClusterMinSize(): number;
				public setIterationCount(param0: number): void;
				public setTranslations(param0: org.opencv.core.MatOfFloat): void;
				public setTranslation(param0: number, param1: number): void;
				public setInitSeedIndexes(param0: org.opencv.core.MatOfInt): void;
				public setWeightA(param0: number): void;
				public setWeightContrast(param0: number): void;
				public static create(param0: org.opencv.core.MatOfPoint2f, param1: number): org.opencv.xfeatures2d.PCTSignatures;
				public setGrayscaleBits(param0: number): void;
				public getGrayscaleBits(): number;
				public getIterationCount(): number;
				public static create(param0: number): org.opencv.xfeatures2d.PCTSignatures;
				public static drawSignature(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static create(): org.opencv.xfeatures2d.PCTSignatures;
				public getWeightX(): number;
				public getSampleCount(): number;
				public setWeightB(param0: number): void;
				public static drawSignature(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public getWeightY(): number;
				public finalize(): void;
				public setDistanceFunction(param0: number): void;
				public static drawSignature(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static create(param0: number, param1: number, param2: number): org.opencv.xfeatures2d.PCTSignatures;
				public setJoiningDistance(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.PCTSignatures;
				public static create(param0: org.opencv.core.MatOfPoint2f, param1: org.opencv.core.MatOfInt): org.opencv.xfeatures2d.PCTSignatures;
				public getInitSeedCount(): number;
				public setWeights(param0: org.opencv.core.MatOfFloat): void;
				public setWeightY(param0: number): void;
				public setWeightEntropy(param0: number): void;
				public getWeightB(): number;
				public getMaxClustersCount(): number;
				public getJoiningDistance(): number;
				public computeSignature(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setWindowRadius(param0: number): void;
				public static create(param0: number, param1: number): org.opencv.xfeatures2d.PCTSignatures;
				public getInitSeedIndexes(): org.opencv.core.MatOfInt;
				public getDistanceFunction(): number;
				public setClusterMinSize(param0: number): void;
				public getWeightContrast(): number;
				public setMaxClustersCount(param0: number): void;
				public setSamplingPoints(param0: org.opencv.core.MatOfPoint2f): void;
				public getWindowRadius(): number;
				public setWeightL(param0: number): void;
				public setWeightX(param0: number): void;
				public static generateInitPoints(param0: org.opencv.core.MatOfPoint2f, param1: number, param2: number): void;
				public setDropThreshold(param0: number): void;
				public constructor(param0: number);
				public setWeight(param0: number, param1: number): void;
				public getWeightL(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class PCTSignaturesSQFD extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.xfeatures2d.PCTSignaturesSQFD>;
				public computeQuadraticFormDistances(param0: org.opencv.core.Mat, param1: java.util.List<org.opencv.core.Mat>, param2: org.opencv.core.MatOfFloat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number, param1: number): org.opencv.xfeatures2d.PCTSignaturesSQFD;
				public static create(): org.opencv.xfeatures2d.PCTSignaturesSQFD;
				public static create(param0: number): org.opencv.xfeatures2d.PCTSignaturesSQFD;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.PCTSignaturesSQFD;
				public static create(param0: number, param1: number, param2: number): org.opencv.xfeatures2d.PCTSignaturesSQFD;
				public computeQuadraticFormDistance(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class SIFT extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.SIFT>;
				public static create(param0: number, param1: number, param2: number, param3: number): org.opencv.xfeatures2d.SIFT;
				public static create(param0: number): org.opencv.xfeatures2d.SIFT;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number, param1: number, param2: number): org.opencv.xfeatures2d.SIFT;
				public static create(param0: number, param1: number): org.opencv.xfeatures2d.SIFT;
				public finalize(): void;
				public constructor(param0: number);
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.xfeatures2d.SIFT;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.SIFT;
				public static create(): org.opencv.xfeatures2d.SIFT;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class SURF extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.SURF>;
				public setHessianThreshold(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getNOctaves(): number;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.SURF;
				public getUpright(): boolean;
				public setExtended(param0: boolean): void;
				public static create(param0: number, param1: number, param2: number, param3: boolean): org.opencv.xfeatures2d.SURF;
				public finalize(): void;
				public static create(param0: number): org.opencv.xfeatures2d.SURF;
				public getExtended(): boolean;
				public setUpright(param0: boolean): void;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static create(param0: number, param1: number, param2: number): org.opencv.xfeatures2d.SURF;
				public setNOctaveLayers(param0: number): void;
				public static create(param0: number, param1: number, param2: number, param3: boolean, param4: boolean): org.opencv.xfeatures2d.SURF;
				public static create(): org.opencv.xfeatures2d.SURF;
				public setNOctaves(param0: number): void;
				public constructor(param0: number);
				public getHessianThreshold(): number;
				public static create(param0: number, param1: number): org.opencv.xfeatures2d.SURF;
				public getNOctaveLayers(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class StarDetector extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.StarDetector>;
				public static create(param0: number, param1: number): org.opencv.xfeatures2d.StarDetector;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(param0: number, param1: number, param2: number): org.opencv.xfeatures2d.StarDetector;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.xfeatures2d.StarDetector;
				public static create(param0: number, param1: number, param2: number, param3: number): org.opencv.xfeatures2d.StarDetector;
				public finalize(): void;
				public constructor(param0: number);
				public static create(param0: number): org.opencv.xfeatures2d.StarDetector;
				public static create(): org.opencv.xfeatures2d.StarDetector;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.StarDetector;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class VGG extends org.opencv.features2d.Feature2D {
				public static class: java.lang.Class<org.opencv.xfeatures2d.VGG>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(): org.opencv.xfeatures2d.VGG;
				public setUseNormalizeDescriptor(param0: boolean): void;
				public setScaleFactor(param0: number): void;
				public finalize(): void;
				public setUseScaleOrientation(param0: boolean): void;
				public static __fromPtr__(param0: number): org.opencv.features2d.Feature2D;
				public setUseNormalizeImage(param0: boolean): void;
				public static create(param0: number, param1: number, param2: boolean): org.opencv.xfeatures2d.VGG;
				public static __fromPtr__(param0: number): org.opencv.xfeatures2d.VGG;
				public getUseNormalizeImage(): boolean;
				public getUseScaleOrientation(): boolean;
				public getSigma(): number;
				public static create(param0: number, param1: number): org.opencv.xfeatures2d.VGG;
				public static create(param0: number, param1: number, param2: boolean, param3: boolean, param4: number): org.opencv.xfeatures2d.VGG;
				public static create(param0: number, param1: number, param2: boolean, param3: boolean): org.opencv.xfeatures2d.VGG;
				public getScaleFactor(): number;
				public constructor(param0: number);
				public getUseNormalizeDescriptor(): boolean;
				public setSigma(param0: number): void;
				public static create(param0: number, param1: number, param2: boolean, param3: boolean, param4: number, param5: boolean): org.opencv.xfeatures2d.VGG;
				public static create(param0: number): org.opencv.xfeatures2d.VGG;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xfeatures2d {
			export class Xfeatures2d {
				public static class: java.lang.Class<org.opencv.xfeatures2d.Xfeatures2d>;
				public static SURF_CUDA_X_ROW: number;
				public static SURF_CUDA_Y_ROW: number;
				public static SURF_CUDA_LAPLACIAN_ROW: number;
				public static SURF_CUDA_OCTAVE_ROW: number;
				public static SURF_CUDA_SIZE_ROW: number;
				public static SURF_CUDA_ANGLE_ROW: number;
				public static SURF_CUDA_HESSIAN_ROW: number;
				public static SURF_CUDA_ROWS_COUNT: number;
				public static matchGMS(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.MatOfKeyPoint, param3: org.opencv.core.MatOfKeyPoint, param4: org.opencv.core.MatOfDMatch, param5: org.opencv.core.MatOfDMatch, param6: boolean): void;
				public static matchGMS(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.MatOfKeyPoint, param3: org.opencv.core.MatOfKeyPoint, param4: org.opencv.core.MatOfDMatch, param5: org.opencv.core.MatOfDMatch, param6: boolean, param7: boolean): void;
				public static matchGMS(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.MatOfKeyPoint, param3: org.opencv.core.MatOfKeyPoint, param4: org.opencv.core.MatOfDMatch, param5: org.opencv.core.MatOfDMatch, param6: boolean, param7: boolean, param8: number): void;
				public static matchGMS(param0: org.opencv.core.Size, param1: org.opencv.core.Size, param2: org.opencv.core.MatOfKeyPoint, param3: org.opencv.core.MatOfKeyPoint, param4: org.opencv.core.MatOfDMatch, param5: org.opencv.core.MatOfDMatch): void;
				public constructor();
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class AdaptiveManifoldFilter extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.AdaptiveManifoldFilter>;
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static create(): org.opencv.ximgproc.AdaptiveManifoldFilter;
				public collectGarbage(): void;
				public finalize(): void;
				public constructor(param0: number);
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.AdaptiveManifoldFilter;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class ContourFitting extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.ContourFitting>;
				public setFDSize(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.ContourFitting;
				public getCtrSize(): number;
				public estimateTransformation(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: native.Array<number>, param4: boolean): void;
				public estimateTransformation(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: native.Array<number>): void;
				public finalize(): void;
				public constructor(param0: number);
				public setCtrSize(param0: number): void;
				public getFDSize(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class DTFilter extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.DTFilter>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.DTFilter;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class DisparityFilter extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.DisparityFilter>;
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Rect): void;
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public finalize(): void;
				public constructor(param0: number);
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Rect, param5: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.DisparityFilter;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class DisparityWLSFilter extends org.opencv.ximgproc.DisparityFilter {
				public static class: java.lang.Class<org.opencv.ximgproc.DisparityWLSFilter>;
				public getLRCthresh(): number;
				public getLambda(): number;
				public setSigmaColor(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getConfidenceMap(): org.opencv.core.Mat;
				public setLRCthresh(param0: number): void;
				public setLambda(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.DisparityWLSFilter;
				public finalize(): void;
				public getROI(): org.opencv.core.Rect;
				public getSigmaColor(): number;
				public setDepthDiscontinuityRadius(param0: number): void;
				public constructor(param0: number);
				public getDepthDiscontinuityRadius(): number;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.DisparityFilter;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class EdgeAwareInterpolator extends org.opencv.ximgproc.SparseMatchInterpolator {
				public static class: java.lang.Class<org.opencv.ximgproc.EdgeAwareInterpolator>;
				public getK(): number;
				public getLambda(): number;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setLambda(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.EdgeAwareInterpolator;
				public getFGSSigma(): number;
				public getUsePostProcessing(): boolean;
				public setFGSSigma(param0: number): void;
				public finalize(): void;
				public getFGSLambda(): number;
				public getSigma(): number;
				public setUsePostProcessing(param0: boolean): void;
				public setFGSLambda(param0: number): void;
				public setK(param0: number): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SparseMatchInterpolator;
				public setSigma(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class EdgeBoxes extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.EdgeBoxes>;
				public getBeta(): number;
				public getMaxBoxes(): number;
				public getMinScore(): number;
				public setMinBoxArea(param0: number): void;
				public getEdgeMinMag(): number;
				public finalize(): void;
				public getAlpha(): number;
				public setMaxBoxes(param0: number): void;
				public getBoundingBoxes(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.MatOfRect): void;
				public setMaxAspectRatio(param0: number): void;
				public getGamma(): number;
				public getKappa(): number;
				public setEdgeMinMag(param0: number): void;
				public getEdgeMergeThr(): number;
				public getMaxAspectRatio(): number;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setClusterMinMag(param0: number): void;
				public getClusterMinMag(): number;
				public setAlpha(param0: number): void;
				public setBeta(param0: number): void;
				public setEdgeMergeThr(param0: number): void;
				public getMinBoxArea(): number;
				public setGamma(param0: number): void;
				public getEta(): number;
				public setKappa(param0: number): void;
				public setMinScore(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.EdgeBoxes;
				public setEta(param0: number): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class FastBilateralSolverFilter extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.FastBilateralSolverFilter>;
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.FastBilateralSolverFilter;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class FastGlobalSmootherFilter extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.FastGlobalSmootherFilter>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.FastGlobalSmootherFilter;
				public finalize(): void;
				public constructor(param0: number);
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class FastLineDetector extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.FastLineDetector>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public detect(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public drawSegments(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public drawSegments(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: boolean): void;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.ximgproc.FastLineDetector;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class GraphSegmentation extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.GraphSegmentation>;
				public getK(): number;
				public getSigma(): number;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public processImage(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public setMinSize(param0: number): void;
				public setK(param0: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public setSigma(param0: number): void;
				public getMinSize(): number;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.GraphSegmentation;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class GuidedFilter extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.GuidedFilter>;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.GuidedFilter;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public filter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class RFFeatureGetter extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.RFFeatureGetter>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getFeatures(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.RFFeatureGetter;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class RidgeDetectionFilter extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.RidgeDetectionFilter>;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.ximgproc.RidgeDetectionFilter;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.RidgeDetectionFilter;
				public static create(param0: number, param1: number, param2: number): org.opencv.ximgproc.RidgeDetectionFilter;
				public finalize(): void;
				public static create(): org.opencv.ximgproc.RidgeDetectionFilter;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.ximgproc.RidgeDetectionFilter;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): org.opencv.ximgproc.RidgeDetectionFilter;
				public getRidgeFilteredImage(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static create(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.ximgproc.RidgeDetectionFilter;
				public static create(param0: number, param1: number, param2: number, param3: number): org.opencv.ximgproc.RidgeDetectionFilter;
				public constructor(param0: number);
				public static create(param0: number): org.opencv.ximgproc.RidgeDetectionFilter;
				public static create(param0: number, param1: number): org.opencv.ximgproc.RidgeDetectionFilter;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class SelectiveSearchSegmentation extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.SelectiveSearchSegmentation>;
				public switchToSingleStrategy(param0: number, param1: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public switchToSelectiveSearchQuality(): void;
				public switchToSelectiveSearchQuality(param0: number, param1: number, param2: number): void;
				public addImage(param0: org.opencv.core.Mat): void;
				public finalize(): void;
				public addGraphSegmentation(param0: org.opencv.ximgproc.GraphSegmentation): void;
				public setBaseImage(param0: org.opencv.core.Mat): void;
				public switchToSelectiveSearchFast(param0: number, param1: number, param2: number): void;
				public switchToSelectiveSearchFast(): void;
				public addStrategy(param0: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy): void;
				public clearGraphSegmentations(): void;
				public switchToSelectiveSearchFast(param0: number, param1: number): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentation;
				public switchToSingleStrategy(param0: number): void;
				public switchToSelectiveSearchQuality(param0: number, param1: number): void;
				public constructor(param0: number);
				public switchToSelectiveSearchFast(param0: number): void;
				public process(param0: org.opencv.core.MatOfRect): void;
				public switchToSelectiveSearchQuality(param0: number): void;
				public clearImages(): void;
				public clearStrategies(): void;
				public switchToSingleStrategy(): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class SelectiveSearchSegmentationStrategy extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.SelectiveSearchSegmentationStrategy>;
				public setImage(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setImage(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public merge(param0: number, param1: number): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentationStrategy;
				public get(param0: number, param1: number): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class SelectiveSearchSegmentationStrategyColor extends org.opencv.ximgproc.SelectiveSearchSegmentationStrategy {
				public static class: java.lang.Class<org.opencv.ximgproc.SelectiveSearchSegmentationStrategyColor>;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyColor;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentationStrategy;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class SelectiveSearchSegmentationStrategyFill extends org.opencv.ximgproc.SelectiveSearchSegmentationStrategy {
				public static class: java.lang.Class<org.opencv.ximgproc.SelectiveSearchSegmentationStrategyFill>;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyFill;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentationStrategy;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class SelectiveSearchSegmentationStrategyMultiple extends org.opencv.ximgproc.SelectiveSearchSegmentationStrategy {
				public static class: java.lang.Class<org.opencv.ximgproc.SelectiveSearchSegmentationStrategyMultiple>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentationStrategy;
				public addStrategy(param0: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy, param1: number): void;
				public clearStrategies(): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyMultiple;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class SelectiveSearchSegmentationStrategySize extends org.opencv.ximgproc.SelectiveSearchSegmentationStrategy {
				public static class: java.lang.Class<org.opencv.ximgproc.SelectiveSearchSegmentationStrategySize>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentationStrategy;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentationStrategySize;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class SelectiveSearchSegmentationStrategyTexture extends org.opencv.ximgproc.SelectiveSearchSegmentationStrategy {
				public static class: java.lang.Class<org.opencv.ximgproc.SelectiveSearchSegmentationStrategyTexture>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyTexture;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SelectiveSearchSegmentationStrategy;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class SparseMatchInterpolator extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.SparseMatchInterpolator>;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
				public interpolate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SparseMatchInterpolator;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class StructuredEdgeDetection extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.StructuredEdgeDetection>;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.StructuredEdgeDetection;
				public edgesNms(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public computeOrientation(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public finalize(): void;
				public constructor(param0: number);
				public detectEdges(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public edgesNms(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): void;
				public edgesNms(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public edgesNms(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: boolean): void;
				public edgesNms(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class SuperpixelLSC extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.SuperpixelLSC>;
				public iterate(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getNumberOfSuperpixels(): number;
				public enforceLabelConnectivity(param0: number): void;
				public iterate(): void;
				public getLabelContourMask(param0: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SuperpixelLSC;
				public getLabels(param0: org.opencv.core.Mat): void;
				public getLabelContourMask(param0: org.opencv.core.Mat, param1: boolean): void;
				public finalize(): void;
				public constructor(param0: number);
				public enforceLabelConnectivity(): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class SuperpixelSEEDS extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.SuperpixelSEEDS>;
				public iterate(param0: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getNumberOfSuperpixels(): number;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SuperpixelSEEDS;
				public getLabelContourMask(param0: org.opencv.core.Mat): void;
				public getLabels(param0: org.opencv.core.Mat): void;
				public getLabelContourMask(param0: org.opencv.core.Mat, param1: boolean): void;
				public finalize(): void;
				public constructor(param0: number);
				public iterate(param0: org.opencv.core.Mat, param1: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class SuperpixelSLIC extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.ximgproc.SuperpixelSLIC>;
				public iterate(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.ximgproc.SuperpixelSLIC;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public getNumberOfSuperpixels(): number;
				public enforceLabelConnectivity(param0: number): void;
				public iterate(): void;
				public getLabelContourMask(param0: org.opencv.core.Mat): void;
				public getLabels(param0: org.opencv.core.Mat): void;
				public getLabelContourMask(param0: org.opencv.core.Mat, param1: boolean): void;
				public finalize(): void;
				public constructor(param0: number);
				public enforceLabelConnectivity(): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module ximgproc {
			export class Ximgproc {
				public static class: java.lang.Class<org.opencv.ximgproc.Ximgproc>;
				public static BINARIZATION_NIBLACK: number;
				public static BINARIZATION_SAUVOLA: number;
				public static BINARIZATION_WOLF: number;
				public static BINARIZATION_NICK: number;
				public static HDO_RAW: number;
				public static HDO_DESKEW: number;
				public static WMF_EXP: number;
				public static WMF_IV1: number;
				public static WMF_IV2: number;
				public static WMF_COS: number;
				public static WMF_JAC: number;
				public static WMF_OFF: number;
				public static DTF_NC: number;
				public static DTF_IC: number;
				public static DTF_RF: number;
				public static GUIDED_FILTER: number;
				public static AM_FILTER: number;
				public static THINNING_ZHANGSUEN: number;
				public static THINNING_GUOHALL: number;
				public static FHT_MIN: number;
				public static FHT_MAX: number;
				public static FHT_ADD: number;
				public static FHT_AVE: number;
				public static SLIC: number;
				public static SLICO: number;
				public static MSLIC: number;
				public static ARO_0_45: number;
				public static ARO_45_90: number;
				public static ARO_90_135: number;
				public static ARO_315_0: number;
				public static ARO_315_45: number;
				public static ARO_45_135: number;
				public static ARO_315_135: number;
				public static ARO_CTR_HOR: number;
				public static ARO_CTR_VER: number;
				public static createSelectiveSearchSegmentationStrategyFill(): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyFill;
				public static createSelectiveSearchSegmentationStrategyTexture(): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyTexture;
				public static rollingGuidanceFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static createFastGlobalSmootherFilter(param0: org.opencv.core.Mat, param1: number, param2: number): org.opencv.ximgproc.FastGlobalSmootherFilter;
				public static niBlackThreshold(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static GradientDericheX(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static dtFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number): void;
				public static dtFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static createSelectiveSearchSegmentationStrategyMultiple(): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyMultiple;
				public static createRFFeatureGetter(): org.opencv.ximgproc.RFFeatureGetter;
				public static qdft(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: boolean): void;
				public static createEdgeBoxes(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number): org.opencv.ximgproc.EdgeBoxes;
				public static createDisparityWLSFilterGeneric(param0: boolean): org.opencv.ximgproc.DisparityWLSFilter;
				public static createStructuredEdgeDetection(param0: string, param1: org.opencv.ximgproc.RFFeatureGetter): org.opencv.ximgproc.StructuredEdgeDetection;
				public static GradientDericheY(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static createRightMatcher(param0: org.opencv.calib3d.StereoMatcher): org.opencv.calib3d.StereoMatcher;
				public static l0Smooth(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static createSuperpixelSEEDS(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: boolean): org.opencv.ximgproc.SuperpixelSEEDS;
				public static fastGlobalSmootherFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): void;
				public static fastGlobalSmootherFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number): void;
				public static createEdgeBoxes(param0: number): org.opencv.ximgproc.EdgeBoxes;
				public static transformFD(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static createDTFilter(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number, param4: number): org.opencv.ximgproc.DTFilter;
				public static createContourFitting(param0: number, param1: number): org.opencv.ximgproc.ContourFitting;
				public static fourierDescriptor(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static rollingGuidanceFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static createSelectiveSearchSegmentationStrategyColor(): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyColor;
				public static fastBilateralSolverFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static createSelectiveSearchSegmentationStrategyMultiple(param0: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyMultiple;
				public static createSuperpixelLSC(param0: org.opencv.core.Mat): org.opencv.ximgproc.SuperpixelLSC;
				public static qmultiply(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static covarianceEstimation(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static createEdgeBoxes(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number): org.opencv.ximgproc.EdgeBoxes;
				public static createSuperpixelSEEDS(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.ximgproc.SuperpixelSEEDS;
				public static createFastLineDetector(param0: number): org.opencv.ximgproc.FastLineDetector;
				public static createEdgeAwareInterpolator(): org.opencv.ximgproc.EdgeAwareInterpolator;
				public static createEdgeBoxes(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): org.opencv.ximgproc.EdgeBoxes;
				public static createDTFilter(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number): org.opencv.ximgproc.DTFilter;
				public static createEdgeBoxes(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): org.opencv.ximgproc.EdgeBoxes;
				public static createEdgeBoxes(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): org.opencv.ximgproc.EdgeBoxes;
				public static rollingGuidanceFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static anisotropicDiffusion(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static colorMatchTemplate(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static FastHoughTransform(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static bilateralTextureFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static l0Smooth(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static createSuperpixelSEEDS(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.ximgproc.SuperpixelSEEDS;
				public static FastHoughTransform(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static createGraphSegmentation(param0: number): org.opencv.ximgproc.GraphSegmentation;
				public static weightedMedianFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: org.opencv.core.Mat): void;
				public static createSuperpixelSEEDS(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.ximgproc.SuperpixelSEEDS;
				public static createSuperpixelLSC(param0: org.opencv.core.Mat, param1: number, param2: number): org.opencv.ximgproc.SuperpixelLSC;
				public static weightedMedianFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): void;
				public static FastHoughTransform(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static fourierDescriptor(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static createSuperpixelSLIC(param0: org.opencv.core.Mat): org.opencv.ximgproc.SuperpixelSLIC;
				public static weightedMedianFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static fastBilateralSolverFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number, param6: number): void;
				public static rollingGuidanceFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static createFastLineDetector(): org.opencv.ximgproc.FastLineDetector;
				public static fastGlobalSmootherFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static createFastBilateralSolverFilter(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number): org.opencv.ximgproc.FastBilateralSolverFilter;
				public static createSelectiveSearchSegmentationStrategySize(): org.opencv.ximgproc.SelectiveSearchSegmentationStrategySize;
				public static createFastLineDetector(param0: number, param1: number, param2: number): org.opencv.ximgproc.FastLineDetector;
				public static thinning(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static bilateralTextureFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static createGraphSegmentation(): org.opencv.ximgproc.GraphSegmentation;
				public static createAMFilter(param0: number, param1: number): org.opencv.ximgproc.AdaptiveManifoldFilter;
				public static createFastLineDetector(param0: number, param1: number, param2: number, param3: number, param4: number, param5: boolean): org.opencv.ximgproc.FastLineDetector;
				public static fastBilateralSolverFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number, param6: number, param7: number): void;
				public static createFastBilateralSolverFilter(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.ximgproc.FastBilateralSolverFilter;
				public static rollingGuidanceFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static createFastLineDetector(param0: number, param1: number, param2: number, param3: number): org.opencv.ximgproc.FastLineDetector;
				public static createSuperpixelSLIC(param0: org.opencv.core.Mat, param1: number): org.opencv.ximgproc.SuperpixelSLIC;
				public static createGraphSegmentation(param0: number, param1: number, param2: number): org.opencv.ximgproc.GraphSegmentation;
				public static createSelectiveSearchSegmentationStrategyMultiple(param0: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy, param1: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyMultiple;
				public static rollingGuidanceFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static qunitary(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static createQuaternionImage(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public constructor();
				public static guidedFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): void;
				public static fastBilateralSolverFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static edgePreservingFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static contourSampling(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static createEdgeBoxes(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): org.opencv.ximgproc.EdgeBoxes;
				public static l0Smooth(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static bilateralTextureFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static createEdgeBoxes(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.ximgproc.EdgeBoxes;
				public static fourierDescriptor(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static fastBilateralSolverFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat): void;
				public static createSuperpixelSLIC(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number): org.opencv.ximgproc.SuperpixelSLIC;
				public static weightedMedianFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static createFastLineDetector(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.ximgproc.FastLineDetector;
				public static guidedFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static bilateralTextureFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static jointBilateralFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number): void;
				public static createGuidedFilter(param0: org.opencv.core.Mat, param1: number, param2: number): org.opencv.ximgproc.GuidedFilter;
				public static transformFD(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: boolean): void;
				public static createStructuredEdgeDetection(param0: string): org.opencv.ximgproc.StructuredEdgeDetection;
				public static createFastBilateralSolverFilter(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.ximgproc.FastBilateralSolverFilter;
				public static createSelectiveSearchSegmentationStrategyMultiple(param0: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy, param1: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy, param2: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyMultiple;
				public static amFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: boolean): void;
				public static fastBilateralSolverFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number): void;
				public static dtFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): void;
				public static createEdgeBoxes(param0: number, param1: number, param2: number, param3: number): org.opencv.ximgproc.EdgeBoxes;
				public static createFastGlobalSmootherFilter(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number, param4: number): org.opencv.ximgproc.FastGlobalSmootherFilter;
				public static createEdgeBoxes(): org.opencv.ximgproc.EdgeBoxes;
				public static createSuperpixelSLIC(param0: org.opencv.core.Mat, param1: number, param2: number): org.opencv.ximgproc.SuperpixelSLIC;
				public static createContourFitting(): org.opencv.ximgproc.ContourFitting;
				public static createEdgeBoxes(param0: number, param1: number): org.opencv.ximgproc.EdgeBoxes;
				public static createDTFilter(param0: org.opencv.core.Mat, param1: number, param2: number): org.opencv.ximgproc.DTFilter;
				public static createFastBilateralSolverFilter(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number, param4: number): org.opencv.ximgproc.FastBilateralSolverFilter;
				public static PeiLinNormalization(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static qconj(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static FastHoughTransform(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static thinning(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static createSelectiveSearchSegmentationStrategyMultiple(param0: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy, param1: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy, param2: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy, param3: org.opencv.ximgproc.SelectiveSearchSegmentationStrategy): org.opencv.ximgproc.SelectiveSearchSegmentationStrategyMultiple;
				public static createFastLineDetector(param0: number, param1: number): org.opencv.ximgproc.FastLineDetector;
				public static createEdgeBoxes(param0: number, param1: number, param2: number): org.opencv.ximgproc.EdgeBoxes;
				public static amFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static bilateralTextureFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static fastBilateralSolverFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: org.opencv.core.Mat, param4: number, param5: number): void;
				public static createDisparityWLSFilter(param0: org.opencv.calib3d.StereoMatcher): org.opencv.ximgproc.DisparityWLSFilter;
				public static niBlackThreshold(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static createContourFitting(param0: number): org.opencv.ximgproc.ContourFitting;
				public static jointBilateralFilter(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): void;
				public static createSelectiveSearchSegmentation(): org.opencv.ximgproc.SelectiveSearchSegmentation;
				public static createAMFilter(param0: number, param1: number, param2: boolean): org.opencv.ximgproc.AdaptiveManifoldFilter;
				public static createSuperpixelLSC(param0: org.opencv.core.Mat, param1: number): org.opencv.ximgproc.SuperpixelLSC;
				public static createGraphSegmentation(param0: number, param1: number): org.opencv.ximgproc.GraphSegmentation;
				public static createEdgeBoxes(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): org.opencv.ximgproc.EdgeBoxes;
				public static createFastGlobalSmootherFilter(param0: org.opencv.core.Mat, param1: number, param2: number, param3: number): org.opencv.ximgproc.FastGlobalSmootherFilter;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xphoto {
			export class GrayworldWB extends org.opencv.xphoto.WhiteBalancer {
				public static class: java.lang.Class<org.opencv.xphoto.GrayworldWB>;
				public static __fromPtr__(param0: number): org.opencv.xphoto.WhiteBalancer;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setSaturationThreshold(param0: number): void;
				public finalize(): void;
				public constructor(param0: number);
				public static __fromPtr__(param0: number): org.opencv.xphoto.GrayworldWB;
				public getSaturationThreshold(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xphoto {
			export class LearningBasedWB extends org.opencv.xphoto.WhiteBalancer {
				public static class: java.lang.Class<org.opencv.xphoto.LearningBasedWB>;
				public static __fromPtr__(param0: number): org.opencv.xphoto.LearningBasedWB;
				public static __fromPtr__(param0: number): org.opencv.xphoto.WhiteBalancer;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public setSaturationThreshold(param0: number): void;
				public getRangeMaxVal(): number;
				public extractSimpleFeatures(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public setHistBinNum(param0: number): void;
				public setRangeMaxVal(param0: number): void;
				public getHistBinNum(): number;
				public finalize(): void;
				public constructor(param0: number);
				public getSaturationThreshold(): number;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xphoto {
			export class SimpleWB extends org.opencv.xphoto.WhiteBalancer {
				public static class: java.lang.Class<org.opencv.xphoto.SimpleWB>;
				public static __fromPtr__(param0: number): org.opencv.xphoto.WhiteBalancer;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public getP(): number;
				public setInputMin(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.xphoto.SimpleWB;
				public setInputMax(param0: number): void;
				public setOutputMin(param0: number): void;
				public setOutputMax(param0: number): void;
				public getInputMin(): number;
				public getOutputMax(): number;
				public constructor(param0: number);
				public getInputMax(): number;
				public getOutputMin(): number;
				public setP(param0: number): void;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xphoto {
			export class TonemapDurand extends org.opencv.photo.Tonemap {
				public static class: java.lang.Class<org.opencv.xphoto.TonemapDurand>;
				public setSigmaColor(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public getContrast(): number;
				public getSigmaSpace(): number;
				public getSigmaColor(): number;
				public getSaturation(): number;
				public setSaturation(param0: number): void;
				public constructor(param0: number);
				public setContrast(param0: number): void;
				public setSigmaSpace(param0: number): void;
				public static __fromPtr__(param0: number): org.opencv.photo.Tonemap;
				public static __fromPtr__(param0: number): org.opencv.xphoto.TonemapDurand;
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xphoto {
			export class WhiteBalancer extends org.opencv.core.Algorithm {
				public static class: java.lang.Class<org.opencv.xphoto.WhiteBalancer>;
				public balanceWhite(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static __fromPtr__(param0: number): org.opencv.xphoto.WhiteBalancer;
				public static __fromPtr__(param0: number): org.opencv.core.Algorithm;
				public finalize(): void;
				public constructor(param0: number);
			}
		}
	}
}

declare module org {
	export module opencv {
		export module xphoto {
			export class Xphoto {
				public static class: java.lang.Class<org.opencv.xphoto.Xphoto>;
				public static BM3D_STEPALL: number;
				public static BM3D_STEP1: number;
				public static BM3D_STEP2: number;
				public static INPAINT_SHIFTMAP: number;
				public static HAAR: number;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number): void;
				public static dctDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number): void;
				public static applyChannelGains(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat): void;
				public static createTonemapDurand(param0: number, param1: number, param2: number, param3: number): org.opencv.xphoto.TonemapDurand;
				public static oilPainting(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static createLearningBasedWB(): org.opencv.xphoto.LearningBasedWB;
				public constructor();
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number): void;
				public static oilPainting(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static createGrayworldWB(): org.opencv.xphoto.GrayworldWB;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number): void;
				public static createTonemapDurand(param0: number, param1: number): org.opencv.xphoto.TonemapDurand;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number, param13: number): void;
				public static inpaint(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static createTonemapDurand(param0: number): org.opencv.xphoto.TonemapDurand;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static createTonemapDurand(param0: number, param1: number, param2: number, param3: number, param4: number): org.opencv.xphoto.TonemapDurand;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number): void;
				public static createSimpleWB(): org.opencv.xphoto.SimpleWB;
				public static createTonemapDurand(): org.opencv.xphoto.TonemapDurand;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number): void;
				public static createTonemapDurand(param0: number, param1: number, param2: number): org.opencv.xphoto.TonemapDurand;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: org.opencv.core.Mat, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number): void;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: number, param11: number, param12: number): void;
				public static dctDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number): void;
				public static createLearningBasedWB(param0: string): org.opencv.xphoto.LearningBasedWB;
				public static bm3dDenoising(param0: org.opencv.core.Mat, param1: org.opencv.core.Mat, param2: number, param3: number, param4: number): void;
			}
		}
	}
}

declare module cl {
	export module eye {
		export class CLCamera {
			public static class: java.lang.Class<cl.eye.CLCamera>;
			public static CLEYE_MONO_PROCESSED: number;
			public static CLEYE_COLOR_PROCESSED: number;
			public static CLEYE_MONO_RAW: number;
			public static CLEYE_COLOR_RAW: number;
			public static CLEYE_BAYER_RAW: number;
			public static CLEYE_QVGA: number;
			public static CLEYE_VGA: number;
			public static CLEYE_AUTO_GAIN: number;
			public static CLEYE_GAIN: number;
			public static CLEYE_AUTO_EXPOSURE: number;
			public static CLEYE_EXPOSURE: number;
			public static CLEYE_AUTO_WHITEBALANCE: number;
			public static CLEYE_WHITEBALANCE_RED: number;
			public static CLEYE_WHITEBALANCE_GREEN: number;
			public static CLEYE_WHITEBALANCE_BLUE: number;
			public static CLEYE_HFLIP: number;
			public static CLEYE_VFLIP: number;
			public static CLEYE_HKEYSTONE: number;
			public static CLEYE_VKEYSTONE: number;
			public static CLEYE_XOFFSET: number;
			public static CLEYE_YOFFSET: number;
			public static CLEYE_ROTATION: number;
			public static CLEYE_ZOOM: number;
			public static CLEYE_LENSCORRECTION1: number;
			public static CLEYE_LENSCORRECTION2: number;
			public static CLEYE_LENSCORRECTION3: number;
			public static CLEYE_LENSBRIGHTNESS: number;
			public getCameraParam(param0: number): number;
			public createCamera(param0: number, param1: number, param2: number, param3: number): boolean;
			public constructor();
			public stopCamera(): boolean;
			public static cameraCount(): number;
			public startCamera(): boolean;
			public static IsLibraryLoaded(): boolean;
			public getCameraFrame(param0: native.Array<number>, param1: number): boolean;
			public static cameraUUID(param0: number): string;
			public setCameraParam(param0: number, param1: number): boolean;
			public dispose(): void;
			public static loadLibrary(param0: string): void;
			public destroyCamera(): boolean;
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class AndroidFrameConverter extends org.bytedeco.javacv.FrameConverter<globalAndroid.graphics.Bitmap> {
				public static class: java.lang.Class<org.bytedeco.javacv.AndroidFrameConverter>;
				public convert(param0: any): org.bytedeco.javacv.Frame;
				public convert(param0: native.Array<number>, param1: number, param2: number): org.bytedeco.javacv.Frame;
				public convert(param0: org.bytedeco.javacv.Frame): any;
				public convert(param0: globalAndroid.graphics.Bitmap): org.bytedeco.javacv.Frame;
				public convert(param0: org.bytedeco.javacv.Frame): globalAndroid.graphics.Bitmap;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class BaseChildSettings   {
				public static class: java.lang.Class<org.bytedeco.javacv.BaseChildSettings>;
				public removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
				public getName(): string;
				public addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
				// public compareTo(param0: org.bytedeco.javacv.BaseChildSettings): number;
				public constructor();
			}
			// export module BaseChildSettings {
			// 	export class PropertyVetoExceptionThatNetBeansLikes {
			// 		public static class: java.lang.Class<org.bytedeco.javacv.BaseChildSettings.PropertyVetoExceptionThatNetBeansLikes>;
			// 		public call(): any;
			// 		public constructor(param0: string, param1: java.beans.PropertyChangeEvent);
			// 	}
			// }
		}
	}
}

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class BaseSettings extends java.beans.beancontext.BeanContextSupport implements java.lang.Comparable<org.bytedeco.javacv.BaseSettings>  {
// 				public static class: java.lang.Class<org.bytedeco.javacv.BaseSettings>;
// 				public removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 				public compareTo(param0: org.bytedeco.javacv.BaseSettings): number;
// 				public toArray(param0: native.Array<any>): native.Array<any>;
// 				public getName(): string;
// 				public addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 				public constructor();
// 				public toArray(): native.Array<any>;
// 			}
// 		}
// 	}
// }

declare module org {
	export module bytedeco {
		export module javacv {
			export class Blobs {
				public static class: java.lang.Class<org.bytedeco.javacv.Blobs>;
				public static BLOBLABEL: number;
				public static BLOBPARENT: number;
				public static BLOBCOLOR: number;
				public static BLOBAREA: number;
				public static BLOBPERIMETER: number;
				public static BLOBSUMX: number;
				public static BLOBSUMY: number;
				public static BLOBSUMXX: number;
				public static BLOBSUMYY: number;
				public static BLOBSUMXY: number;
				public static BLOBMINX: number;
				public static BLOBMAXX: number;
				public static BLOBMINY: number;
				public static BLOBMAXY: number;
				public static BLOBDATACOUNT: number;
				public static LabelMat: native.Array<native.Array<number>>;
				public static RegionData: native.Array<native.Array<number>>;
				public static MaxLabel: number;
				public LabelA: number;
				public LabelB: number;
				public LabelC: number;
				public LabelD: number;
				public ColorA: number;
				public ColorB: number;
				public ColorC: number;
				public ColorD: number;
				public jrow: number;
				public jcol: number;
				public static SubsumedLabel: native.Array<number>;
				public static CondensationMap: native.Array<number>;
				public ResetRegion(param0: number): void;
				public OldRegion(param0: number, param1: number, param2: number): void;
				public static SubsumptionChain(param0: number): number;
				public static SortRegions(param0: number): void;
				public static SubsumptionChain(param0: number, param1: number): number;
				public static NextRegion(param0: number, param1: number, param2: number, param3: number, param4: number): number;
				public constructor();
				public PrintRegionData(): void;
				public NewRegion(param0: number): void;
				public static PriorRegion(param0: number, param1: number, param2: number, param3: number, param4: number): number;
				public PrintRegionData(param0: number, param1: number): void;
				public Subsume(param0: number, param1: number, param2: number): void;
				public BlobAnalysis(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): number;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class BufferRing<B>  extends java.lang.Object {
				public static class: java.lang.Class<org.bytedeco.javacv.BufferRing<any>>;
				public position(): number;
				public release(): void;
				public get(): B;
				public constructor(param0: org.bytedeco.javacv.BufferRing.BufferFactory<B>, param1: number);
				public capacity(): number;
				public get(param0: number): B;
				public position(param0: number): org.bytedeco.javacv.BufferRing<any>;
			}
			export module BufferRing {
				export class BufferFactory<B>  extends java.lang.Object {
					public static class: java.lang.Class<org.bytedeco.javacv.BufferRing.BufferFactory<any>>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacv.BufferRing$BufferFactory interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						create(): B;
					});
					public constructor();
					public create(): B;
				}
				export class ReleasableBuffer {
					public static class: java.lang.Class<org.bytedeco.javacv.BufferRing.ReleasableBuffer>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacv.BufferRing$ReleasableBuffer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						release(): void;
					});
					public constructor();
					public release(): void;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class CameraDevice extends org.bytedeco.javacv.ProjectiveDevice {
				public static class: java.lang.Class<org.bytedeco.javacv.CameraDevice>;
				public static read(param0: string): native.Array<org.bytedeco.javacv.CameraDevice>;
				public constructor(param0: string, param1: org.bytedeco.javacpp.opencv_core.FileStorage);
				public getSettings(): org.bytedeco.javacv.ProjectiveDevice.Settings;
				public createFrameGrabber(): org.bytedeco.javacv.FrameGrabber;
				public static read(param0: org.bytedeco.javacpp.opencv_core.FileStorage): native.Array<org.bytedeco.javacv.CameraDevice>;
				public constructor(param0: string);
				public setSettings(param0: org.bytedeco.javacv.ProjectiveDevice.Settings): void;
				public setSettings(param0: org.bytedeco.javacv.CameraDevice.Settings): void;
				public constructor(param0: org.bytedeco.javacv.CameraDevice.Settings);
				public constructor(param0: string, param1: java.io.File);
				public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
				public static read(param0: string): native.Array<org.bytedeco.javacv.ProjectiveDevice>;
				public constructor(param0: string, param1: string);
			}
			export module CameraDevice {
				export class CalibratedSettings extends org.bytedeco.javacv.ProjectiveDevice.CalibratedSettings implements org.bytedeco.javacv.CameraDevice.Settings {
					public static class: java.lang.Class<org.bytedeco.javacv.CameraDevice.CalibratedSettings>;
					public getFormat(): string;
					public getFrameGrabber(): java.lang.Class<any>;
					public setImageMode(param0: org.bytedeco.javacv.FrameGrabber.ImageMode): void;
					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.CalibratedSettings);
					public getNumBuffers(): number;
					public setDeinterlace(param0: boolean): void;
					public isTriggerMode(): boolean;
					public getBitsPerPixel(): number;
					public getImageHeight(): number;
					public addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
					public constructor();
					public getResponseGamma(): number;
					public getDevicePath(): string;
					public getDeviceFile(): java.io.File;
					public setImageHeight(param0: number): void;
					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
					public setDeviceFilename(param0: string): void;
					public getTimeout(): number;
					public setFrameGrabber(param0: java.lang.Class<any>): void;
					public setFormat(param0: string): void;
					public getDeviceNumber(): java.lang.Integer;
					public setDevicePath(param0: string): void;
					public setImageWidth(param0: number): void;
					public setTriggerMode(param0: boolean): void;
					public getImageWidth(): number;
					public setDeviceFile(param0: java.io.File): void;
					public setName(param0: string): void;
					public getImageMode(): org.bytedeco.javacv.FrameGrabber.ImageMode;
					public setNumBuffers(param0: number): void;
					public setFrameRate(param0: number): void;
					public removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
					public getName(): string;
					public getDeviceFilename(): string;
					public setBitsPerPixel(param0: number): void;
					public setResponseGamma(param0: number): void;
					public setTimeout(param0: number): void;
					public getDescription(): string;
					public isDeinterlace(): boolean;
					public setDeviceNumber(param0: java.lang.Integer): void;
					public getFrameRate(): number;
				}
				export class CalibrationSettings extends org.bytedeco.javacv.ProjectiveDevice.CalibrationSettings implements org.bytedeco.javacv.CameraDevice.Settings {
					public static class: java.lang.Class<org.bytedeco.javacv.CameraDevice.CalibrationSettings>;
					public getFormat(): string;
					public getFrameGrabber(): java.lang.Class<any>;
					public setImageMode(param0: org.bytedeco.javacv.FrameGrabber.ImageMode): void;
					public getNumBuffers(): number;
					public setDeinterlace(param0: boolean): void;
					public isTriggerMode(): boolean;
					public getBitsPerPixel(): number;
					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.CalibrationSettings);
					public getImageHeight(): number;
					public addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
					public constructor();
					public getResponseGamma(): number;
					public getDevicePath(): string;
					public getDeviceFile(): java.io.File;
					public setImageHeight(param0: number): void;
					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
					public setDeviceFilename(param0: string): void;
					public getTimeout(): number;
					public setFrameGrabber(param0: java.lang.Class<any>): void;
					public setFormat(param0: string): void;
					public getDeviceNumber(): java.lang.Integer;
					public setDevicePath(param0: string): void;
					public setImageWidth(param0: number): void;
					public setTriggerMode(param0: boolean): void;
					public getImageWidth(): number;
					public setDeviceFile(param0: java.io.File): void;
					public setName(param0: string): void;
					public getImageMode(): org.bytedeco.javacv.FrameGrabber.ImageMode;
					public setNumBuffers(param0: number): void;
					public setFrameRate(param0: number): void;
					public removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
					public getName(): string;
					public getDeviceFilename(): string;
					public setBitsPerPixel(param0: number): void;
					public setResponseGamma(param0: number): void;
					public setTimeout(param0: number): void;
					public getDescription(): string;
					public isDeinterlace(): boolean;
					public setDeviceNumber(param0: java.lang.Integer): void;
					public getFrameRate(): number;
				}
				export class Settings {
					public static class: java.lang.Class<org.bytedeco.javacv.CameraDevice.Settings>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacv.CameraDevice$Settings interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						getName(): string;
						setName(param0: string): void;
						getResponseGamma(): number;
						setResponseGamma(param0: number): void;
						getDeviceNumber(): java.lang.Integer;
						setDeviceNumber(param0: java.lang.Integer): void;
						getDeviceFile(): java.io.File;
						setDeviceFile(param0: java.io.File): void;
						getDeviceFilename(): string;
						setDeviceFilename(param0: string): void;
						getDevicePath(): string;
						setDevicePath(param0: string): void;
						getFrameGrabber(): java.lang.Class<any>;
						setFrameGrabber(param0: java.lang.Class<any>): void;
						getDescription(): string;
						getFormat(): string;
						setFormat(param0: string): void;
						getImageWidth(): number;
						setImageWidth(param0: number): void;
						getImageHeight(): number;
						setImageHeight(param0: number): void;
						getFrameRate(): number;
						setFrameRate(param0: number): void;
						isTriggerMode(): boolean;
						setTriggerMode(param0: boolean): void;
						getBitsPerPixel(): number;
						setBitsPerPixel(param0: number): void;
						getImageMode(): org.bytedeco.javacv.FrameGrabber.ImageMode;
						setImageMode(param0: org.bytedeco.javacv.FrameGrabber.ImageMode): void;
						getTimeout(): number;
						setTimeout(param0: number): void;
						getNumBuffers(): number;
						setNumBuffers(param0: number): void;
						isDeinterlace(): boolean;
						setDeinterlace(param0: boolean): void;
						addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
						removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
					});
					public constructor();
					public getFormat(): string;
					public getFrameGrabber(): java.lang.Class<any>;
					public setImageMode(param0: org.bytedeco.javacv.FrameGrabber.ImageMode): void;
					public getNumBuffers(): number;
					public setDeinterlace(param0: boolean): void;
					public isTriggerMode(): boolean;
					public getBitsPerPixel(): number;
					public getImageHeight(): number;
					public addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
					public getResponseGamma(): number;
					public getDevicePath(): string;
					public getDeviceFile(): java.io.File;
					public setImageHeight(param0: number): void;
					public setDeviceFilename(param0: string): void;
					public getTimeout(): number;
					public setFrameGrabber(param0: java.lang.Class<any>): void;
					public setFormat(param0: string): void;
					public getDeviceNumber(): java.lang.Integer;
					public setDevicePath(param0: string): void;
					public setImageWidth(param0: number): void;
					public setTriggerMode(param0: boolean): void;
					public getImageWidth(): number;
					public setDeviceFile(param0: java.io.File): void;
					public setName(param0: string): void;
					public getImageMode(): org.bytedeco.javacv.FrameGrabber.ImageMode;
					public setNumBuffers(param0: number): void;
					public setFrameRate(param0: number): void;
					public removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
					public getName(): string;
					public getDeviceFilename(): string;
					public setBitsPerPixel(param0: number): void;
					public setResponseGamma(param0: number): void;
					public setTimeout(param0: number): void;
					public getDescription(): string;
					public isDeinterlace(): boolean;
					public setDeviceNumber(param0: java.lang.Integer): void;
					public getFrameRate(): number;
				}
				export class SettingsImplementation extends org.bytedeco.javacv.ProjectiveDevice.Settings implements org.bytedeco.javacv.CameraDevice.Settings {
					public static class: java.lang.Class<org.bytedeco.javacv.CameraDevice.SettingsImplementation>;
					public getFormat(): string;
					public getFrameGrabber(): java.lang.Class<any>;
					public setImageMode(param0: org.bytedeco.javacv.FrameGrabber.ImageMode): void;
					public getNumBuffers(): number;
					public setDeinterlace(param0: boolean): void;
					public isTriggerMode(): boolean;
					public getBitsPerPixel(): number;
					public getImageHeight(): number;
					public addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
					public constructor();
					public getResponseGamma(): number;
					public getDevicePath(): string;
					public getDeviceFile(): java.io.File;
					public setImageHeight(param0: number): void;
					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
					public setDeviceFilename(param0: string): void;
					public getTimeout(): number;
					public setFrameGrabber(param0: java.lang.Class<any>): void;
					public setFormat(param0: string): void;
					public getDeviceNumber(): java.lang.Integer;
					public setDevicePath(param0: string): void;
					public setImageWidth(param0: number): void;
					public setTriggerMode(param0: boolean): void;
					public getImageWidth(): number;
					public setDeviceFile(param0: java.io.File): void;
					public getImageMode(): org.bytedeco.javacv.FrameGrabber.ImageMode;
					public setName(param0: string): void;
					public setNumBuffers(param0: number): void;
					public setFrameRate(param0: number): void;
					public removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
					public getDeviceFilename(): string;
					public setBitsPerPixel(param0: number): void;
					public getName(): string;
					public setResponseGamma(param0: number): void;
					public setTimeout(param0: number): void;
					public getDescription(): string;
					public isDeinterlace(): boolean;
					public setDeviceNumber(param0: java.lang.Integer): void;
					public getFrameRate(): number;
				}
			}
		}
	}
}

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class CameraSettings extends org.bytedeco.javacv.BaseSettings {
// 				public static class: java.lang.Class<org.bytedeco.javacv.CameraSettings>;
// 				public getMonitorWindowsScale(): number;
// 				public setFrameGrabber(param0: java.lang.Class<any>): void;
// 				public toArray(): native.Array<org.bytedeco.javacv.CameraDevice.Settings>;
// 				public getQuantity(): number;
// 				public toArray(param0: native.Array<any>): native.Array<any>;
// 				public constructor(param0: boolean);
// 				public getFrameGrabber(): java.lang.Class<any>;
// 				public setMonitorWindowsScale(param0: number): void;
// 				public constructor();
// 				public setQuantity(param0: number): void;
// 				public toArray(): native.Array<any>;
// 			}
// 		}
// 	}
// }

declare module org {
	export module bytedeco {
		export module javacv {
			export class CanvasFrame {
				public static class: java.lang.Class<org.bytedeco.javacv.CanvasFrame>;
				public static global: org.bytedeco.javacv.CanvasFrame;
				public static DEFAULT_LATENCY: number;
				public canvas: any;
				public needInitialResize: boolean;
				public initialScale: number;
				public inverseGamma: number;
				public createGraphics(): any;
				public static getScreenDevices(): native.Array<any>;
				public initCanvas(param0: boolean, param1: any, param2: number): void;
				public getCanvasSize(): any;
				public static getScreenDescriptions(): native.Array<string>;
				public showImage(param0: any): void;
				public static tile(param0: native.Array<org.bytedeco.javacv.CanvasFrame>): void;
				public setLatency(param0: number): void;
				public constructor(param0: string);
				public constructor(param0: string, param1: number, param2: any, param3: number);
				public setCanvasSize(param0: number, param1: number): void;
				public waitKey(): any;
				public constructor(param0: string, param1: number);
				public getCanvasScale(): number;
				public static getGamma(param0: number): number;
				public releaseGraphics(param0: any): void;
				public static getDefaultScreenDevice(): any;
				public getCanvas(): any;
				public constructor(param0: string, param1: any, param2: number);
				public waitKey(param0: number): any;
				public static getScreenDevice(param0: number): any;
				public constructor(param0: string, param1: number, param2: any);
				public static getDefaultGamma(): number;
				public getLatency(): number;
				public static getDisplayMode(param0: number): any;
				public showImage(param0: org.bytedeco.javacv.Frame, param1: boolean): void;
				public waitLatency(): void;
				public showColor(param0: any): void;
				public showImage(param0: org.bytedeco.javacv.Frame): void;
				public static getGamma(param0: any): number;
				public setCanvasScale(param0: number): void;
				public constructor(param0: string, param1: any);
			}
			export module CanvasFrame {
				export class Exception {
					public static class: java.lang.Class<org.bytedeco.javacv.CanvasFrame.Exception>;
					public constructor(param0: string, param1: java.lang.Throwable);
					public constructor(param0: string);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class ColorCalibrator {
				public static class: java.lang.Class<org.bytedeco.javacv.ColorCalibrator>;
				public calibrate(param0: native.Array<any>, param1: native.Array<any>): number;
				public constructor(param0: org.bytedeco.javacv.ProjectiveDevice);
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class DC1394FrameGrabber extends org.bytedeco.javacv.FrameGrabber {
				public static class: java.lang.Class<org.bytedeco.javacv.DC1394FrameGrabber>;
				public release(): void;
				public start(param0: boolean, param1: boolean): void;
				public getFrameRate(): number;
				public static createDefault(param0: string): org.bytedeco.javacv.DC1394FrameGrabber;
				public finalize(): void;
				public setImageMode(param0: org.bytedeco.javacv.FrameGrabber.ImageMode): void;
				public static createDefault(param0: string): org.bytedeco.javacv.FrameGrabber;
				public static createDefault(param0: number): org.bytedeco.javacv.DC1394FrameGrabber;
				public static tryLoad(): void;
				public constructor();
				public static getDeviceDescriptions(): native.Array<string>;
				public stop(): void;
				public trigger(): void;
				public getImageHeight(): number;
				public start(): void;
				public static createDefault(param0: number): org.bytedeco.javacv.FrameGrabber;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.DC1394FrameGrabber;
				public constructor(param0: number);
				public getGamma(): number;
				public getImageWidth(): number;
				public grab(): org.bytedeco.javacv.Frame;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FrameGrabber;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class FFmpegFrameFilter extends org.bytedeco.javacv.FrameFilter {
				public static class: java.lang.Class<org.bytedeco.javacv.FFmpegFrameFilter>;
				public pullSamples(): org.bytedeco.javacv.Frame;
				public pullImage(): org.bytedeco.javacv.Frame;
				public push(param0: org.bytedeco.javacv.Frame, param1: number): void;
				public finalize(): void;
				public static tryLoad(): void;
				public push(param0: org.bytedeco.javacv.Frame): void;
				public getAudioChannels(): number;
				public constructor();
				public pull(): org.bytedeco.javacv.Frame;
				public getSampleRate(): number;
				public getImageHeight(): number;
				public start(): void;
				public constructor(param0: string, param1: number);
				public push(param0: number, param1: org.bytedeco.javacv.Frame): void;
				public release(): void;
				public getPixelFormat(): number;
				public getFrameRate(): number;
				public push(param0: number, param1: org.bytedeco.javacv.Frame, param2: number): void;
				public constructor(param0: string, param1: number, param2: number);
				public getAspectRatio(): number;
				public stop(): void;
				public pushImage(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: native.Array<java.nio.Buffer>): void;
				public pushSamples(param0: number, param1: number, param2: number, param3: number, param4: native.Array<java.nio.Buffer>): void;
				public getSampleFormat(): number;
				public constructor(param0: string, param1: string, param2: number, param3: number, param4: number);
				public getImageWidth(): number;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class FFmpegFrameGrabber extends org.bytedeco.javacv.FrameGrabber {
				public static class: java.lang.Class<org.bytedeco.javacv.FFmpegFrameGrabber>;
				public getVideoCodec(): number;
				public setAudioFrameNumber(param0: number): void;
				public static createDefault(param0: string): org.bytedeco.javacv.FrameGrabber;
				public getAudioChannels(): number;
				public getLengthInTime(): number;
				public getAudioCodec(): number;
				public getLengthInAudioFrames(): number;
				public constructor();
				public getVideoBitrate(): number;
				public static getDeviceDescriptions(): native.Array<string>;
				public grabKeyFrame(): org.bytedeco.javacv.Frame;
				public getSampleRate(): number;
				public grabPacket(): any;
				public getImageHeight(): number;
				public static createDefault(param0: number): org.bytedeco.javacv.FFmpegFrameGrabber;
				public static createDefault(param0: string): org.bytedeco.javacv.FFmpegFrameGrabber;
				public grab(): org.bytedeco.javacv.Frame;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FFmpegFrameGrabber;
				public hasAudio(): boolean;
				public getAudioMetadata(param0: string): string;
				public setAudioTimestamp(param0: number): void;
				public grabSamples(): org.bytedeco.javacv.Frame;
				public getVideoMetadata(param0: string): string;
				public constructor(param0: java.io.InputStream);
				public getAspectRatio(): number;
				public getAudioBitrate(): number;
				public getLengthInFrames(): number;
				public getAudioFrameRate(): number;
				public getSampleFormat(): number;
				public getImageWidth(): number;
				public finalize(): void;
				public static tryLoad(): void;
				public constructor(param0: string);
				public start(): void;
				public getVideoFrameRate(): number;
				public setVideoFrameNumber(param0: number): void;
				public static createDefault(param0: number): org.bytedeco.javacv.FrameGrabber;
				public getGamma(): number;
				public setTimestamp(param0: number): void;
				public getAudioMetadata(): java.util.Map<string,string>;
				public setVideoTimestamp(param0: number): void;
				public grabImage(): org.bytedeco.javacv.Frame;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FrameGrabber;
				public getMetadata(): java.util.Map<string,string>;
				public release(): void;
				public getFormat(): string;
				public constructor(param0: java.io.File);
				public getPixelFormat(): number;
				public grabFrame(param0: boolean, param1: boolean, param2: boolean, param3: boolean): org.bytedeco.javacv.Frame;
				public getFrameRate(): number;
				public getVideoMetadata(): java.util.Map<string,string>;
				public grabFrame(): org.bytedeco.javacv.Frame;
				public setTimestamp(param0: number, param1: boolean): void;
				public getFormatContext(): any;
				public getLengthInVideoFrames(): number;
				public getMetadata(param0: string): string;
				public stop(): void;
				public trigger(): void;
				public constructor(param0: java.io.InputStream, param1: number);
				public setFrameNumber(param0: number): void;
				public hasVideo(): boolean;
			}
			export module FFmpegFrameGrabber {
				export class ReadCallback {
					public static class: java.lang.Class<org.bytedeco.javacv.FFmpegFrameGrabber.ReadCallback>;
					public call(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): number;
				}
				export class SeekCallback {
					public static class: java.lang.Class<org.bytedeco.javacv.FFmpegFrameGrabber.SeekCallback>;
					public call(param0: org.bytedeco.javacpp.Pointer, param1: number, param2: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class FFmpegFrameRecorder extends org.bytedeco.javacv.FrameRecorder {
				public static class: java.lang.Class<org.bytedeco.javacv.FFmpegFrameRecorder>;
				public recordSamples(param0: number, param1: number, param2: native.Array<java.nio.Buffer>): boolean;
				public constructor(param0: java.io.OutputStream, param1: number, param2: number);
				public static createDefault(param0: string, param1: number, param2: number): org.bytedeco.javacv.FrameRecorder;
				public recordSamples(param0: native.Array<java.nio.Buffer>): boolean;
				public static createDefault(param0: string, param1: number, param2: number): org.bytedeco.javacv.FFmpegFrameRecorder;
				public finalize(): void;
				public static tryLoad(): void;
				public constructor(param0: java.io.File, param1: number, param2: number);
				public record(param0: org.bytedeco.javacv.Frame): void;
				public constructor();
				public static createDefault(param0: java.io.File, param1: number, param2: number): org.bytedeco.javacv.FFmpegFrameRecorder;
				public start(): void;
				public recordPacket(param0: any): boolean;
				public constructor(param0: string, param1: number);
				public record(param0: org.bytedeco.javacv.Frame, param1: number): void;
				public getFrameNumber(): number;
				public setTimestamp(param0: number): void;
				public getTimestamp(): number;
				public recordImage(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: native.Array<java.nio.Buffer>): boolean;
				public constructor(param0: java.io.File, param1: number);
				public start(param0: any): void;
				public release(): void;
				public constructor(param0: string, param1: number, param2: number);
				public static createDefault(param0: java.io.File, param1: number, param2: number): org.bytedeco.javacv.FrameRecorder;
				public constructor(param0: java.io.File, param1: number, param2: number, param3: number);
				public stop(): void;
				public constructor(param0: java.io.OutputStream, param1: number, param2: number, param3: number);
				public setFrameNumber(param0: number): void;
				public constructor(param0: java.io.OutputStream, param1: number);
				public constructor(param0: string, param1: number, param2: number, param3: number);
			}
			export module FFmpegFrameRecorder {
				export class WriteCallback {
					public static class: java.lang.Class<org.bytedeco.javacv.FFmpegFrameRecorder.WriteCallback>;
					public call(param0: org.bytedeco.javacpp.Pointer, param1: org.bytedeco.javacpp.BytePointer, param2: number): number;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class FFmpegLockCallback {
				public static class: java.lang.Class<org.bytedeco.javacv.FFmpegLockCallback>;
				public static init(): void;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class FFmpegLogCallback {
				public static class: java.lang.Class<org.bytedeco.javacv.FFmpegLogCallback>;
				public call(param0: number, param1: org.bytedeco.javacpp.BytePointer): void;
				public static getInstance(): org.bytedeco.javacv.FFmpegLogCallback;
				public static set(): void;
				public constructor();
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class FlyCapture2FrameGrabber extends org.bytedeco.javacv.FrameGrabber {
				public static class: java.lang.Class<org.bytedeco.javacv.FlyCapture2FrameGrabber>;
				public static INITIALIZE: number;
				public static TRIGGER_INQ: number;
				public static IS_CAMERA_POWER: number;
				public static CAMERA_POWER: number;
				public static SOFTWARE_TRIGGER: number;
				public static SOFT_ASYNC_TRIGGER: number;
				public static IMAGE_DATA_FORMAT: number;
				public release(): void;
				public getFrameRate(): number;
				public finalize(): void;
				public setImageMode(param0: org.bytedeco.javacv.FrameGrabber.ImageMode): void;
				public static createDefault(param0: string): org.bytedeco.javacv.FrameGrabber;
				public static tryLoad(): void;
				public constructor();
				public static getDeviceDescriptions(): native.Array<string>;
				public stop(): void;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FlyCapture2FrameGrabber;
				public trigger(): void;
				public getImageHeight(): number;
				public start(): void;
				public static createDefault(param0: number): org.bytedeco.javacv.FrameGrabber;
				public constructor(param0: number);
				public getGamma(): number;
				public static createDefault(param0: string): org.bytedeco.javacv.FlyCapture2FrameGrabber;
				public getImageWidth(): number;
				public grab(): org.bytedeco.javacv.Frame;
				public static createDefault(param0: number): org.bytedeco.javacv.FlyCapture2FrameGrabber;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FrameGrabber;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class Frame {
				public static class: java.lang.Class<org.bytedeco.javacv.Frame>;
				public keyFrame: boolean;
				public static DEPTH_BYTE: number;
				public static DEPTH_UBYTE: number;
				public static DEPTH_SHORT: number;
				public static DEPTH_USHORT: number;
				public static DEPTH_INT: number;
				public static DEPTH_LONG: number;
				public static DEPTH_FLOAT: number;
				public static DEPTH_DOUBLE: number;
				public imageWidth: number;
				public imageHeight: number;
				public imageDepth: number;
				public imageChannels: number;
				public imageStride: number;
				public image: native.Array<java.nio.Buffer>;
				public sampleRate: number;
				public audioChannels: number;
				public samples: native.Array<java.nio.Buffer>;
				public opaque: any;
				public timestamp: number;
				public getTypes(): java.util.EnumSet<org.bytedeco.javacv.Frame.Type>;
				public createIndexer(param0: boolean): org.bytedeco.javacpp.indexer.Indexer;
				public constructor(param0: number, param1: number, param2: number, param3: number);
				public createIndexer(param0: boolean, param1: number): org.bytedeco.javacpp.indexer.Indexer;
				public createIndexer(): org.bytedeco.javacpp.indexer.Indexer;
				public constructor();
				public clone(): org.bytedeco.javacv.Frame;
			}
			export module Frame {
				export class Type {
					public static class: java.lang.Class<org.bytedeco.javacv.Frame.Type>;
					public static VIDEO: org.bytedeco.javacv.Frame.Type;
					public static AUDIO: org.bytedeco.javacv.Frame.Type;
					public static values(): native.Array<org.bytedeco.javacv.Frame.Type>;
					public static valueOf(param0: string): org.bytedeco.javacv.Frame.Type;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export abstract class FrameConverter<F>  extends java.lang.Object {
				public static class: java.lang.Class<org.bytedeco.javacv.FrameConverter<any>>;
				public frame: org.bytedeco.javacv.Frame;
				public convert(param0: org.bytedeco.javacv.Frame): F;
				public constructor();
				public convert(param0: F): org.bytedeco.javacv.Frame;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export abstract class FrameFilter {
				public static class: java.lang.Class<org.bytedeco.javacv.FrameFilter>;
				public filters: string;
				public imageWidth: number;
				public imageHeight: number;
				public pixelFormat: number;
				public frameRate: number;
				public aspectRatio: number;
				public videoInputs: number;
				public afilters: string;
				public audioChannels: number;
				public sampleFormat: number;
				public sampleRate: number;
				public audioInputs: number;
				public getVideoInputs(): number;
				public setPixelFormat(param0: number): void;
				public setSampleFormat(param0: number): void;
				public push(param0: org.bytedeco.javacv.Frame): void;
				public static createDefault(param0: string, param1: number, param2: number): org.bytedeco.javacv.FrameFilter;
				public getAudioChannels(): number;
				public setFrameRate(param0: number): void;
				public constructor();
				public flush(): void;
				public restart(): void;
				public pull(): org.bytedeco.javacv.Frame;
				public getSampleRate(): number;
				public getImageHeight(): number;
				public start(): void;
				public setSampleRate(param0: number): void;
				public setVideoInputs(param0: number): void;
				public setImageWidth(param0: number): void;
				public setFilters(param0: string): void;
				public close(): void;
				public release(): void;
				public getPixelFormat(): number;
				public getFrameRate(): number;
				public getAudioInputs(): number;
				public setAudioChannels(param0: number): void;
				public getAspectRatio(): number;
				public stop(): void;
				public setAspectRatio(param0: number): void;
				public setAudioInputs(param0: number): void;
				public getFilters(): string;
				public setImageHeight(param0: number): void;
				public getSampleFormat(): number;
				public getImageWidth(): number;
			}
			export module FrameFilter {
				export class Exception {
					public static class: java.lang.Class<org.bytedeco.javacv.FrameFilter.Exception>;
					public constructor(param0: string, param1: java.lang.Throwable);
					public constructor(param0: string);
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export abstract class FrameGrabber {
				public static class: java.lang.Class<org.bytedeco.javacv.FrameGrabber>;
				public static list: java.util.List<string>;
				public static SENSOR_PATTERN_RGGB: number;
				public static SENSOR_PATTERN_GBRG: number;
				public static SENSOR_PATTERN_GRBG: number;
				public static SENSOR_PATTERN_BGGR: number;
				public videoStream: number;
				public audioStream: number;
				public format: string;
				public videoCodecName: string;
				public audioCodecName: string;
				public imageWidth: number;
				public imageHeight: number;
				public audioChannels: number;
				public imageMode: org.bytedeco.javacv.FrameGrabber.ImageMode;
				public sensorPattern: number;
				public pixelFormat: number;
				public videoCodec: number;
				public videoBitrate: number;
				public imageScalingFlags: number;
				public aspectRatio: number;
				public frameRate: number;
				public sampleMode: org.bytedeco.javacv.FrameGrabber.SampleMode;
				public sampleFormat: number;
				public audioCodec: number;
				public audioBitrate: number;
				public sampleRate: number;
				public triggerMode: boolean;
				public bpp: number;
				public timeout: number;
				public numBuffers: number;
				public gamma: number;
				public deinterlace: boolean;
				public options: java.util.Map<string,string>;
				public videoOptions: java.util.Map<string,string>;
				public audioOptions: java.util.Map<string,string>;
				public metadata: java.util.Map<string,string>;
				public videoMetadata: java.util.Map<string,string>;
				public audioMetadata: java.util.Map<string,string>;
				public frameNumber: number;
				public timestamp: number;
				public maxDelay: number;
				public static init(): void;
				public setVideoCodec(param0: number): void;
				public setPixelFormat(param0: number): void;
				public setAudioMetadata(param0: string, param1: string): void;
				public getLengthInTime(): number;
				public static create(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: any): org.bytedeco.javacv.FrameGrabber;
				public getTimestamp(): number;
				public grab(): org.bytedeco.javacv.Frame;
				public getNumBuffers(): number;
				public static getDefault(): java.lang.Class<any>;
				public getDelayedFrame(): org.bytedeco.javacv.Frame;
				public setSampleMode(param0: org.bytedeco.javacv.FrameGrabber.SampleMode): void;
				public setAudioMetadata(param0: java.util.Map<string,string>): void;
				public getVideoMetadata(param0: string): string;
				public static create(param0: string, param1: number): org.bytedeco.javacv.FrameGrabber;
				public setVideoBitrate(param0: number): void;
				public getLengthInFrames(): number;
				public isTriggerMode(): boolean;
				public setAspectRatio(param0: number): void;
				public getSampleFormat(): number;
				public setNumBuffers(param0: number): void;
				public getImageWidth(): number;
				public setAudioOption(param0: string, param1: string): void;
				public getVideoCodecName(): string;
				public getVideoOptions(): java.util.Map<string,string>;
				public getVideoStream(): number;
				public isDeinterlace(): boolean;
				public getOption(param0: string): string;
				public setVideoCodecName(param0: string): void;
				public setSampleFormat(param0: number): void;
				public setDeinterlace(param0: boolean): void;
				public setOptions(param0: java.util.Map<string,string>): void;
				public setVideoOption(param0: string, param1: string): void;
				public setVideoStream(param0: number): void;
				public getVideoOption(param0: string): string;
				public setVideoMetadata(param0: string, param1: string): void;
				public getSensorPattern(): number;
				public static create(param0: string, param1: java.io.File): org.bytedeco.javacv.FrameGrabber;
				public getAudioMetadata(): java.util.Map<string,string>;
				public setFormat(param0: string): void;
				public getFormat(): string;
				public release(): void;
				public setSensorPattern(param0: number): void;
				public getVideoMetadata(): java.util.Map<string,string>;
				public getAudioCodecName(): string;
				public setTimeout(param0: number): void;
				public setGamma(param0: number): void;
				public setFrameNumber(param0: number): void;
				public setBitsPerPixel(param0: number): void;
				public setOption(param0: string, param1: string): void;
				public setMetadata(param0: string, param1: string): void;
				public getVideoCodec(): number;
				public static createDefault(param0: string): org.bytedeco.javacv.FrameGrabber;
				public getAudioChannels(): number;
				public setFrameRate(param0: number): void;
				public getAudioCodec(): number;
				public constructor();
				public flush(): void;
				public setAudioCodecName(param0: string): void;
				public getVideoBitrate(): number;
				public restart(): void;
				public getSampleRate(): number;
				public getImageHeight(): number;
				public getFrameNumber(): number;
				public setImageWidth(param0: number): void;
				public createArray(param0: native.Array<org.bytedeco.javacv.FrameGrabber>): org.bytedeco.javacv.FrameGrabber.Array;
				public getImageMode(): org.bytedeco.javacv.FrameGrabber.ImageMode;
				public getAudioOption(param0: string): string;
				public close(): void;
				public getBitsPerPixel(): number;
				public setVideoMetadata(param0: java.util.Map<string,string>): void;
				public getAudioMetadata(param0: string): string;
				public setMaxDelay(param0: number): void;
				public getTimeout(): number;
				public getAspectRatio(): number;
				public getAudioBitrate(): number;
				public getSampleMode(): org.bytedeco.javacv.FrameGrabber.SampleMode;
				public getImageScalingFlags(): number;
				public static create(param0: string, param1: string): org.bytedeco.javacv.FrameGrabber;
				public getAudioStream(): number;
				public setAudioStream(param0: number): void;
				public setTriggerMode(param0: boolean): void;
				public setAudioBitrate(param0: number): void;
				public setMetadata(param0: java.util.Map<string,string>): void;
				public getOptions(): java.util.Map<string,string>;
				public setImageScalingFlags(param0: number): void;
				public delayedGrab(param0: number): void;
				public setVideoOptions(param0: java.util.Map<string,string>): void;
				public start(): void;
				public setSampleRate(param0: number): void;
				public static createDefault(param0: number): org.bytedeco.javacv.FrameGrabber;
				public setAudioOptions(param0: java.util.Map<string,string>): void;
				public getGamma(): number;
				public setTimestamp(param0: number): void;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FrameGrabber;
				public getDelayedTime(): number;
				public getMetadata(): java.util.Map<string,string>;
				public getPixelFormat(): number;
				public getAudioOptions(): java.util.Map<string,string>;
				public getFrameRate(): number;
				public setImageMode(param0: org.bytedeco.javacv.FrameGrabber.ImageMode): void;
				public grabFrame(): org.bytedeco.javacv.Frame;
				public setAudioCodec(param0: number): void;
				public setAudioChannels(param0: number): void;
				public getMaxDelay(): number;
				public static get(param0: string): java.lang.Class<any>;
				public getMetadata(param0: string): string;
				public stop(): void;
				public trigger(): void;
				public setImageHeight(param0: number): void;
			}
			export module FrameGrabber {
				export class Array {
					public static class: java.lang.Class<org.bytedeco.javacv.FrameGrabber.Array>;
					public frameGrabbers: native.Array<org.bytedeco.javacv.FrameGrabber>;
					public setFrameGrabbers(param0: native.Array<org.bytedeco.javacv.FrameGrabber>): void;
					public trigger(): void;
					public getFrameGrabbers(): native.Array<org.bytedeco.javacv.FrameGrabber>;
					public stop(): void;
					public size(): number;
					public start(): void;
					public release(): void;
					public grab(): native.Array<org.bytedeco.javacv.Frame>;
					public constructor(param0: native.Array<org.bytedeco.javacv.FrameGrabber>);
				}
				export class Exception {
					public static class: java.lang.Class<org.bytedeco.javacv.FrameGrabber.Exception>;
					public constructor(param0: string, param1: java.lang.Throwable);
					public constructor(param0: string);
				}
				export class ImageMode {
					public static class: java.lang.Class<org.bytedeco.javacv.FrameGrabber.ImageMode>;
					public static COLOR: org.bytedeco.javacv.FrameGrabber.ImageMode;
					public static GRAY: org.bytedeco.javacv.FrameGrabber.ImageMode;
					public static RAW: org.bytedeco.javacv.FrameGrabber.ImageMode;
					public static valueOf(param0: string): org.bytedeco.javacv.FrameGrabber.ImageMode;
					public static values(): native.Array<org.bytedeco.javacv.FrameGrabber.ImageMode>;
				}
				export class PropertyEditor {
					public static class: java.lang.Class<org.bytedeco.javacv.FrameGrabber.PropertyEditor>;
					public constructor();
					public getTags(): native.Array<string>;
					public getAsText(): string;
					public setAsText(param0: string): void;
				}
				export class SampleMode {
					public static class: java.lang.Class<org.bytedeco.javacv.FrameGrabber.SampleMode>;
					public static SHORT: org.bytedeco.javacv.FrameGrabber.SampleMode;
					public static FLOAT: org.bytedeco.javacv.FrameGrabber.SampleMode;
					public static RAW: org.bytedeco.javacv.FrameGrabber.SampleMode;
					public static values(): native.Array<org.bytedeco.javacv.FrameGrabber.SampleMode>;
					public static valueOf(param0: string): org.bytedeco.javacv.FrameGrabber.SampleMode;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export abstract class FrameRecorder {
				public static class: java.lang.Class<org.bytedeco.javacv.FrameRecorder>;
				public static list: java.util.List<string>;
				public format: string;
				public videoCodecName: string;
				public audioCodecName: string;
				public imageWidth: number;
				public imageHeight: number;
				public audioChannels: number;
				public pixelFormat: number;
				public videoCodec: number;
				public videoBitrate: number;
				public imageScalingFlags: number;
				public gopSize: number;
				public aspectRatio: number;
				public frameRate: number;
				public videoQuality: number;
				public sampleFormat: number;
				public audioCodec: number;
				public audioBitrate: number;
				public sampleRate: number;
				public audioQuality: number;
				public interleaved: boolean;
				public options: java.util.Map<string,string>;
				public videoOptions: java.util.Map<string,string>;
				public audioOptions: java.util.Map<string,string>;
				public metadata: java.util.Map<string,string>;
				public videoMetadata: java.util.Map<string,string>;
				public audioMetadata: java.util.Map<string,string>;
				public frameNumber: number;
				public timestamp: number;
				public maxBFrames: number;
				public trellis: number;
				public maxDelay: number;
				public static init(): void;
				public getVideoCodec(): number;
				public getTrellis(): number;
				public setVideoCodec(param0: number): void;
				public setTrellis(param0: number): void;
				public setPixelFormat(param0: number): void;
				public setAudioMetadata(param0: string, param1: string): void;
				public getAudioChannels(): number;
				public setFrameRate(param0: number): void;
				public getAudioCodec(): number;
				public record(param0: org.bytedeco.javacv.Frame): void;
				public constructor();
				public setAudioCodecName(param0: string): void;
				public getVideoBitrate(): number;
				public setAudioQuality(param0: number): void;
				public setVideoQuality(param0: number): void;
				public getSampleRate(): number;
				public getImageHeight(): number;
				public getFrameNumber(): number;
				public setImageWidth(param0: number): void;
				public getTimestamp(): number;
				public static create(param0: java.lang.Class<any>, param1: java.lang.Class<any>, param2: any, param3: number, param4: number): org.bytedeco.javacv.FrameRecorder;
				public getAudioOption(param0: string): string;
				public static getDefault(): java.lang.Class<any>;
				public close(): void;
				public static create(param0: string, param1: java.io.File, param2: number, param3: number): org.bytedeco.javacv.FrameRecorder;
				public setVideoMetadata(param0: java.util.Map<string,string>): void;
				public getAudioMetadata(param0: string): string;
				public setMaxDelay(param0: number): void;
				public static create(param0: string, param1: string, param2: number, param3: number): org.bytedeco.javacv.FrameRecorder;
				public setAudioMetadata(param0: java.util.Map<string,string>): void;
				public isInterleaved(): boolean;
				public getVideoMetadata(param0: string): string;
				public getAspectRatio(): number;
				public setVideoBitrate(param0: number): void;
				public getGopSize(): number;
				public getAudioBitrate(): number;
				public getImageScalingFlags(): number;
				public setAspectRatio(param0: number): void;
				public getSampleFormat(): number;
				public getAudioQuality(): number;
				public getImageWidth(): number;
				public setAudioBitrate(param0: number): void;
				public setAudioOption(param0: string, param1: string): void;
				public static createDefault(param0: string, param1: number, param2: number): org.bytedeco.javacv.FrameRecorder;
				public getVideoCodecName(): string;
				public getVideoOptions(): java.util.Map<string,string>;
				public setMetadata(param0: java.util.Map<string,string>): void;
				public setGopSize(param0: number): void;
				public getOption(param0: string): string;
				public setVideoCodecName(param0: string): void;
				public setSampleFormat(param0: number): void;
				public getOptions(): java.util.Map<string,string>;
				public setMaxBFrames(param0: number): void;
				public setImageScalingFlags(param0: number): void;
				public setOptions(param0: java.util.Map<string,string>): void;
				public setVideoOptions(param0: java.util.Map<string,string>): void;
				public getMaxBFrames(): number;
				public setVideoOption(param0: string, param1: string): void;
				public setInterleaved(param0: boolean): void;
				public getVideoOption(param0: string): string;
				public setVideoMetadata(param0: string, param1: string): void;
				public start(): void;
				public setSampleRate(param0: number): void;
				public setAudioOptions(param0: java.util.Map<string,string>): void;
				public setTimestamp(param0: number): void;
				public getAudioMetadata(): java.util.Map<string,string>;
				public getMetadata(): java.util.Map<string,string>;
				public setFormat(param0: string): void;
				public getFormat(): string;
				public release(): void;
				public getPixelFormat(): number;
				public getAudioOptions(): java.util.Map<string,string>;
				public getFrameRate(): number;
				public getVideoMetadata(): java.util.Map<string,string>;
				public getAudioCodecName(): string;
				public setAudioCodec(param0: number): void;
				public setAudioChannels(param0: number): void;
				public getVideoQuality(): number;
				public getMaxDelay(): number;
				public static get(param0: string): java.lang.Class<any>;
				public static createDefault(param0: java.io.File, param1: number, param2: number): org.bytedeco.javacv.FrameRecorder;
				public getMetadata(param0: string): string;
				public stop(): void;
				public setFrameNumber(param0: number): void;
				public setImageHeight(param0: number): void;
				public setOption(param0: string, param1: string): void;
				public setMetadata(param0: string, param1: string): void;
			}
			export module FrameRecorder {
				export class Exception {
					public static class: java.lang.Class<org.bytedeco.javacv.FrameRecorder.Exception>;
					public constructor(param0: string, param1: java.lang.Throwable);
					public constructor(param0: string);
				}
			}
		}
	}
}

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class GLCanvasFrame extends org.bytedeco.javacv.CanvasFrame {
// 				public static class: java.lang.Class<org.bytedeco.javacv.GLCanvasFrame>;
// 				public constructor(param0: string, param1: any, param2: com.jogamp.opengl.GLCapabilitiesImmutable, param3: com.jogamp.opengl.GLContext, param4: number);
// 				public constructor(param0: string, param1: any, param2: com.jogamp.opengl.GLCapabilitiesImmutable, param3: com.jogamp.opengl.GLContext);
// 				public initCanvas(param0: boolean, param1: any, param2: number): void;
// 				public showImage(param0: number): void;
// 				public showImage(param0: any): void;
// 				public constructor(param0: string, param1: any, param2: number);
// 				public getGLCanvas(): com.jogamp.opengl.awt.GLCanvas;
// 				public constructor(param0: string, param1: number, param2: any, param3: com.jogamp.opengl.GLCapabilitiesImmutable, param4: com.jogamp.opengl.GLContext);
// 				public constructor(param0: string, param1: number, param2: any);
// 				public constructor(param0: string);
// 				public constructor(param0: string, param1: number, param2: any, param3: number);
// 				public showImage(param0: any): void;
// 				public showImage(param0: org.bytedeco.javacv.Frame, param1: boolean): void;
// 				public constructor(param0: string, param1: number);
// 				public showColor(param0: any): void;
// 				public showImage(param0: org.bytedeco.javacv.Frame): void;
// 				public constructor(param0: string, param1: number, param2: any, param3: com.jogamp.opengl.GLCapabilitiesImmutable, param4: com.jogamp.opengl.GLContext, param5: number);
// 				public static main(param0: native.Array<string>): void;
// 				public constructor(param0: string, param1: any);
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class GNImageAligner extends org.bytedeco.javacv.ImageAligner {
// 				public static class: java.lang.Class<org.bytedeco.javacv.GNImageAligner>;
// 				public settings: org.bytedeco.javacv.GNImageAligner.Settings;
// 				public n: number;
// 				public template: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 				public target: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 				public transformed: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 				public residual: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 				public mask: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 				public images: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 				public srcRoiPts: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public dstRoiPts: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public dstRoiPtsArray: org.bytedeco.javacpp.opencv_core.CvPoint;
// 				public roi: org.bytedeco.javacpp.opencv_core.CvRect;
// 				public temproi: org.bytedeco.javacpp.opencv_core.CvRect;
// 				public transformer: org.bytedeco.javacv.ImageTransformer;
// 				public hessianGradientTransformerData: native.Array<org.bytedeco.javacv.ImageTransformer.Data>;
// 				public residualTransformerData: native.Array<org.bytedeco.javacv.ImageTransformer.Data>;
// 				public parameters: org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public parametersArray: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>;
// 				public tempParameters: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>;
// 				public priorParameters: org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public hessian: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public gradient: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public update: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public prior: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public constraintGrad: native.Array<number>;
// 				public subspaceResidual: native.Array<number>;
// 				public subspaceJacobian: native.Array<native.Array<number>>;
// 				public updateScale: native.Array<number>;
// 				public subspaceCorrelated: native.Array<boolean>;
// 				public pyramidLevel: number;
// 				public RMSE: number;
// 				public residualUpdateNeeded: boolean;
// 				public lastLinePosition: number;
// 				public trials: number;
// 				public subspaceParameters: native.Array<number>;
// 				public tempSubspaceParameters: native.Array<native.Array<number>>;
// 				public setSettings(param0: org.bytedeco.javacv.ImageAligner.Settings): void;
// 				public constructor(param0: org.bytedeco.javacv.ImageTransformer, param1: org.bytedeco.javacv.ImageTransformer.Parameters, param2: org.bytedeco.javacpp.opencv_core.IplImage, param3: native.Array<number>, param4: org.bytedeco.javacpp.opencv_core.IplImage, param5: org.bytedeco.javacv.GNImageAligner.Settings);
// 				public constructor(param0: org.bytedeco.javacv.ImageTransformer, param1: org.bytedeco.javacv.ImageTransformer.Parameters);
// 				public getSettings(): org.bytedeco.javacv.GNImageAligner.Settings;
// 				public getRMSE(): number;
// 				public getParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public constructor(param0: org.bytedeco.javacv.ImageTransformer, param1: org.bytedeco.javacv.ImageTransformer.Parameters, param2: org.bytedeco.javacpp.opencv_core.IplImage, param3: native.Array<number>, param4: org.bytedeco.javacpp.opencv_core.IplImage);
// 				public setPriorParameters(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
// 				public iterate(param0: native.Array<number>): boolean;
// 				public getSettings(): org.bytedeco.javacv.ImageAligner.Settings;
// 				public doRegularization(param0: native.Array<number>): void;
// 				public getResidualImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public setTemplateImage(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: native.Array<number>): void;
// 				public getLastLinePosition(): number;
// 				public setTargetImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
// 				public getTargetImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public doHessianGradient(param0: native.Array<number>): void;
// 				public doRoi(): void;
// 				public getMaskImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getTransformedImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getTransformedRoiPts(): native.Array<number>;
// 				public getTemplateImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public setPyramidLevel(param0: number): void;
// 				public setConstrained(param0: boolean): void;
// 				public getPixelCount(): number;
// 				public getPyramidLevel(): number;
// 				public getPriorParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public getRoi(): org.bytedeco.javacpp.opencv_core.CvRect;
// 				public isConstrained(): boolean;
// 				public setParameters(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
// 				public getOutlierCount(): number;
// 				public doResidual(): void;
// 				public getImages(): native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 			}
// 			export module GNImageAligner {
// 				export class Settings extends org.bytedeco.javacv.ImageAligner.Settings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.GNImageAligner.Settings>;
// 					public getLineSearch(): native.Array<number>;
// 					public getDeltaMax(): number;
// 					public constructor(param0: org.bytedeco.javacv.ImageAligner.Settings);
// 					public getGammaTgamma(): org.bytedeco.javacpp.opencv_core.CvMat;
// 					public setDisplacementMax(param0: number): void;
// 					public getAlphaSubspace(): number;
// 					public setStepSize(param0: number): void;
// 					public getDisplacementMax(): number;
// 					public setDeltaMax(param0: number): void;
// 					public setAlphaSubspace(param0: number): void;
// 					public clone(): org.bytedeco.javacv.ImageAligner.Settings;
// 					public getDeltaMin(): number;
// 					public constructor();
// 					public setDeltaMin(param0: number): void;
// 					public setAlphaTikhonov(param0: number): void;
// 					public getAlphaTikhonov(): number;
// 					public getStepSize(): number;
// 					public setGammaTgamma(param0: org.bytedeco.javacpp.opencv_core.CvMat): void;
// 					public setLineSearch(param0: native.Array<number>): void;
// 					public clone(): org.bytedeco.javacv.GNImageAligner.Settings;
// 					public constructor(param0: org.bytedeco.javacv.GNImageAligner.Settings);
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class GNImageAlignerCL extends org.bytedeco.javacv.GNImageAligner implements org.bytedeco.javacv.ImageAlignerCL {
// 				public static class: java.lang.Class<org.bytedeco.javacv.GNImageAlignerCL>;
// 				public constructor(param0: org.bytedeco.javacv.ImageTransformerCL, param1: org.bytedeco.javacv.ImageTransformer.Parameters, param2: com.jogamp.opencl.CLImage2d, param3: native.Array<number>, param4: com.jogamp.opencl.CLImage2d);
// 				public getTemplateImageCL(): com.jogamp.opencl.CLImage2d;
// 				public getTargetImage(param0: boolean): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public setSettings(param0: org.bytedeco.javacv.ImageAligner.Settings): void;
// 				public getMaskImage(param0: boolean): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public constructor(param0: org.bytedeco.javacv.ImageTransformer, param1: org.bytedeco.javacv.ImageTransformer.Parameters, param2: org.bytedeco.javacpp.opencv_core.IplImage, param3: native.Array<number>, param4: org.bytedeco.javacpp.opencv_core.IplImage, param5: org.bytedeco.javacv.GNImageAligner.Settings);
// 				public constructor(param0: org.bytedeco.javacv.ImageTransformer, param1: org.bytedeco.javacv.ImageTransformer.Parameters);
// 				public finalize(): void;
// 				public getRMSE(): number;
// 				public getImages(param0: boolean): native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 				public getSettings(): org.bytedeco.javacv.GNImageAligner.Settings;
// 				public getResidualImage(param0: boolean): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public constructor(param0: org.bytedeco.javacv.ImageTransformer, param1: org.bytedeco.javacv.ImageTransformer.Parameters, param2: org.bytedeco.javacpp.opencv_core.IplImage, param3: native.Array<number>, param4: org.bytedeco.javacpp.opencv_core.IplImage);
// 				public iterate(param0: native.Array<number>): boolean;
// 				public getSettings(): org.bytedeco.javacv.ImageAligner.Settings;
// 				public constructor(param0: org.bytedeco.javacv.ImageTransformerCL, param1: org.bytedeco.javacv.ImageTransformer.Parameters, param2: com.jogamp.opencl.CLImage2d, param3: native.Array<number>, param4: com.jogamp.opencl.CLImage2d, param5: org.bytedeco.javacv.GNImageAligner.Settings);
// 				public getMaskImageCL(): com.jogamp.opencl.CLImage2d;
// 				public getResidualImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public setTemplateImage(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: native.Array<number>): void;
// 				public getTargetImageCL(): com.jogamp.opencl.CLImage2d;
// 				public setTargetImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
// 				public getTargetImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public doHessianGradient(param0: native.Array<number>): void;
// 				public doRoi(): void;
// 				public release(): void;
// 				public getMaskImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getTransformedImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getTransformedRoiPts(): native.Array<number>;
// 				public setTemplateImageCL(param0: com.jogamp.opencl.CLImage2d, param1: native.Array<number>): void;
// 				public getTemplateImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getTransformedImage(param0: boolean): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getPixelCount(): number;
// 				public getImagesCL(): native.Array<com.jogamp.opencl.CLImage2d>;
// 				public setPyramidLevel(param0: number): void;
// 				public setTargetImageCL(param0: com.jogamp.opencl.CLImage2d): void;
// 				public getPyramidLevel(): number;
// 				public getResidualImageCL(): com.jogamp.opencl.CLImage2d;
// 				public getRoi(): org.bytedeco.javacpp.opencv_core.CvRect;
// 				public getTransformedImageCL(): com.jogamp.opencl.CLImage2d;
// 				public getTemplateImage(param0: boolean): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public setParameters(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
// 				public getOutlierCount(): number;
// 				public doResidual(): void;
// 				public getImages(): native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class GeometricCalibrator {
// 				public static class: java.lang.Class<org.bytedeco.javacv.GeometricCalibrator>;
// 				public addMarkers(): void;
// 				public getAllImageMarkers(): java.util.LinkedList<native.Array<org.bytedeco.javacv.Marker>>;
// 				public drawMarkers(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
// 				public addMarkers(param0: native.Array<org.bytedeco.javacv.Marker>): void;
// 				public setAllObjectMarkers(param0: java.util.LinkedList<native.Array<org.bytedeco.javacv.Marker>>): void;
// 				public addMarkers(param0: native.Array<org.bytedeco.javacv.Marker>, param1: native.Array<org.bytedeco.javacv.Marker>): void;
// 				public getMarkedPlane(): org.bytedeco.javacv.MarkedPlane;
// 				public getImageCount(): number;
// 				public calibrateStereo(param0: boolean, param1: org.bytedeco.javacv.GeometricCalibrator): native.Array<number>;
// 				public setAllImageMarkers(param0: java.util.LinkedList<native.Array<org.bytedeco.javacv.Marker>>): void;
// 				public processImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): native.Array<org.bytedeco.javacv.Marker>;
// 				public calibrate(param0: boolean): native.Array<number>;
// 				public constructor(param0: org.bytedeco.javacv.GeometricCalibrator.Settings, param1: org.bytedeco.javacv.MarkerDetector.Settings, param2: org.bytedeco.javacv.MarkedPlane, param3: org.bytedeco.javacv.ProjectiveDevice);
// 				public getMarkerDetector(): org.bytedeco.javacv.MarkerDetector;
// 				public static computeReprojectionError(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: org.bytedeco.javacpp.opencv_core.CvMat, param6: org.bytedeco.javacpp.opencv_core.CvMat, param7: org.bytedeco.javacpp.opencv_core.CvMat): native.Array<number>;
// 				public static computeStereoError(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: org.bytedeco.javacpp.opencv_core.CvMat, param6: org.bytedeco.javacpp.opencv_core.CvMat): native.Array<number>;
// 				public getAllObjectMarkers(): java.util.LinkedList<native.Array<org.bytedeco.javacv.Marker>>;
// 				public getProjectiveDevice(): org.bytedeco.javacv.ProjectiveDevice;
// 			}
// 			export module GeometricCalibrator {
// 				export class Settings extends org.bytedeco.javacv.BaseChildSettings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.GeometricCalibrator.Settings>;
// 					public getDetectedBoardMin(): number;
// 					public setPatternSteadySize(param0: number): void;
// 					public constructor();
// 					public setDetectedBoardMin(param0: number): void;
// 					public getPatternMovedSize(): number;
// 					public setPatternMovedSize(param0: number): void;
// 					public getPatternSteadySize(): number;
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class HandMouse {
// 				public static class: java.lang.Class<org.bytedeco.javacv.HandMouse>;
// 				public isSteady(): boolean;
// 				public reset(): void;
// 				public getSettings(): org.bytedeco.javacv.HandMouse.Settings;
// 				public isClick(): boolean;
// 				public setSettings(param0: org.bytedeco.javacv.HandMouse.Settings): void;
// 				public getResultImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getX(): number;
// 				public getY(): number;
// 				public getRelativeResidual(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public update(param0: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvRect, param3: native.Array<number>): void;
// 				public constructor(param0: org.bytedeco.javacv.HandMouse.Settings);
// 				public constructor();
// 			}
// 			export module HandMouse {
// 				export class Settings extends org.bytedeco.javacv.BaseChildSettings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.HandMouse.Settings>;
// 					public getMopIterations(): number;
// 					public constructor(param0: org.bytedeco.javacv.HandMouse.Settings);
// 					public setThresholdLow(param0: number): void;
// 					public setUpdateAlpha(param0: number): void;
// 					public setEdgeAreaMax(param0: number): void;
// 					public getUpdateAlpha(): number;
// 					public setEdgeAreaMin(param0: number): void;
// 					public setClickSteadySize(param0: number): void;
// 					public getThresholdHigh(): number;
// 					public setMopIterations(param0: number): void;
// 					public setThresholdHigh(param0: number): void;
// 					public getBrightnessMin(): number;
// 					public getEdgeAreaMax(): number;
// 					public constructor();
// 					public getClickSteadySize(): number;
// 					public getClickSteadyTime(): number;
// 					public getThresholdLow(): number;
// 					public setBrightnessMin(param0: number): void;
// 					public setClickSteadyTime(param0: number): void;
// 					public getEdgeAreaMin(): number;
// 				}
// 			}
// 		}
// 	}
// }

declare module org {
	export module bytedeco {
		export module javacv {
			export class IPCameraFrameGrabber extends org.bytedeco.javacv.FrameGrabber {
				public static class: java.lang.Class<org.bytedeco.javacv.IPCameraFrameGrabber>;
				public stop(): void;
				public constructor(param0: java.net.URL, param1: number, param2: number, param3: java.util.concurrent.TimeUnit);
				public constructor(param0: string, param1: number, param2: number, param3: java.util.concurrent.TimeUnit);
				public release(): void;
				public trigger(): void;
				public start(): void;
				public grabBufferedImage(): any;
				public static tryLoad(): void;
				public grab(): org.bytedeco.javacv.Frame;
				public constructor(param0: string);
				public constructor();
			}
		}
	}
}

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ImageAligner {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ImageAligner>;
// 				/**
// 				 * Constructs a new instance of the org.bytedeco.javacv.ImageAligner interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
// 				 */
// 				public constructor(implementation: {
// 					getSettings(): org.bytedeco.javacv.ImageAligner.Settings;
// 					setSettings(param0: org.bytedeco.javacv.ImageAligner.Settings): void;
// 					getTemplateImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 					setTemplateImage(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: native.Array<number>): void;
// 					getTargetImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 					setTargetImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
// 					getPyramidLevel(): number;
// 					setPyramidLevel(param0: number): void;
// 					getParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 					setParameters(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
// 					getTransformedRoiPts(): native.Array<number>;
// 					getTransformedImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 					getResidualImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 					getMaskImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 					getRMSE(): number;
// 					getRoi(): org.bytedeco.javacpp.opencv_core.CvRect;
// 					getImages(): native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 					iterate(param0: native.Array<number>): boolean;
// 				});
// 				public constructor();
// 				public setSettings(param0: org.bytedeco.javacv.ImageAligner.Settings): void;
// 				public getMaskImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getTransformedImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getTransformedRoiPts(): native.Array<number>;
// 				public getRMSE(): number;
// 				public getParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public getTemplateImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public setPyramidLevel(param0: number): void;
// 				public getPyramidLevel(): number;
// 				public iterate(param0: native.Array<number>): boolean;
// 				public getSettings(): org.bytedeco.javacv.ImageAligner.Settings;
// 				public getRoi(): org.bytedeco.javacpp.opencv_core.CvRect;
// 				public getResidualImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public setTemplateImage(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: native.Array<number>): void;
// 				public setTargetImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
// 				public setParameters(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
// 				public getTargetImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getImages(): native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 			}
// 			export module ImageAligner {
// 				export class Settings extends org.bytedeco.javacv.BaseChildSettings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ImageAligner.Settings>;
// 					public setPyramidLevelMin(param0: number): void;
// 					public setPyramidLevelMax(param0: number): void;
// 					public constructor(param0: org.bytedeco.javacv.ImageAligner.Settings);
// 					public getThresholdsOutlier(): native.Array<number>;
// 					public setThresholdsMulRMSE(param0: boolean): void;
// 					public getPyramidLevelMin(): number;
// 					public setThresholdsZero(param0: native.Array<number>): void;
// 					public setThresholdsOutlier(param0: native.Array<number>): void;
// 					public clone(): org.bytedeco.javacv.ImageAligner.Settings;
// 					public constructor();
// 					public getThresholdsZero(): native.Array<number>;
// 					public isThresholdsMulRMSE(): boolean;
// 					public getPyramidLevelMax(): number;
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ImageAlignerCL extends org.bytedeco.javacv.ImageAligner {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ImageAlignerCL>;
// 				/**
// 				 * Constructs a new instance of the org.bytedeco.javacv.ImageAlignerCL interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
// 				 */
// 				public constructor(implementation: {
// 					getTemplateImageCL(): com.jogamp.opencl.CLImage2d;
// 					setTemplateImageCL(param0: com.jogamp.opencl.CLImage2d, param1: native.Array<number>): void;
// 					getTargetImageCL(): com.jogamp.opencl.CLImage2d;
// 					setTargetImageCL(param0: com.jogamp.opencl.CLImage2d): void;
// 					getTransformedImageCL(): com.jogamp.opencl.CLImage2d;
// 					getResidualImageCL(): com.jogamp.opencl.CLImage2d;
// 					getMaskImageCL(): com.jogamp.opencl.CLImage2d;
// 					getImagesCL(): native.Array<com.jogamp.opencl.CLImage2d>;
// 					getSettings(): org.bytedeco.javacv.ImageAligner.Settings;
// 					setSettings(param0: org.bytedeco.javacv.ImageAligner.Settings): void;
// 					getTemplateImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 					setTemplateImage(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: native.Array<number>): void;
// 					getTargetImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 					setTargetImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
// 					getPyramidLevel(): number;
// 					setPyramidLevel(param0: number): void;
// 					getParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 					setParameters(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
// 					getTransformedRoiPts(): native.Array<number>;
// 					getTransformedImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 					getResidualImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 					getMaskImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 					getRMSE(): number;
// 					getRoi(): org.bytedeco.javacpp.opencv_core.CvRect;
// 					getImages(): native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 					iterate(param0: native.Array<number>): boolean;
// 				});
// 				public constructor();
// 				public getTemplateImageCL(): com.jogamp.opencl.CLImage2d;
// 				public setSettings(param0: org.bytedeco.javacv.ImageAligner.Settings): void;
// 				public getRMSE(): number;
// 				public getParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public iterate(param0: native.Array<number>): boolean;
// 				public getSettings(): org.bytedeco.javacv.ImageAligner.Settings;
// 				public getMaskImageCL(): com.jogamp.opencl.CLImage2d;
// 				public getResidualImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getTargetImageCL(): com.jogamp.opencl.CLImage2d;
// 				public setTemplateImage(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: native.Array<number>): void;
// 				public setTargetImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
// 				public getTargetImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getMaskImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getTransformedImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getTransformedRoiPts(): native.Array<number>;
// 				public setTemplateImageCL(param0: com.jogamp.opencl.CLImage2d, param1: native.Array<number>): void;
// 				public getImagesCL(): native.Array<com.jogamp.opencl.CLImage2d>;
// 				public getTemplateImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public setPyramidLevel(param0: number): void;
// 				public setTargetImageCL(param0: com.jogamp.opencl.CLImage2d): void;
// 				public getPyramidLevel(): number;
// 				public getResidualImageCL(): com.jogamp.opencl.CLImage2d;
// 				public getRoi(): org.bytedeco.javacpp.opencv_core.CvRect;
// 				public getTransformedImageCL(): com.jogamp.opencl.CLImage2d;
// 				public setParameters(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
// 				public getImages(): native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 			}
// 		}
// 	}
// }

declare module org {
	export module bytedeco {
		export module javacv {
			export class ImageTransformer {
				public static class: java.lang.Class<org.bytedeco.javacv.ImageTransformer>;
				/**
				 * Constructs a new instance of the org.bytedeco.javacv.ImageTransformer interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
				 */
				public constructor(implementation: {
					createParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
					transform(param0: native.Array<org.bytedeco.javacv.ImageTransformer.Data>, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
					transform(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
				});
				public constructor();
				public transform(param0: native.Array<org.bytedeco.javacv.ImageTransformer.Data>, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
				public createParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
				public transform(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
			}
			export module ImageTransformer {
				export class Data {
					public static class: java.lang.Class<org.bytedeco.javacv.ImageTransformer.Data>;
					public srcImg: org.bytedeco.javacpp.opencv_core.IplImage;
					public subImg: org.bytedeco.javacpp.opencv_core.IplImage;
					public srcDotImg: org.bytedeco.javacpp.opencv_core.IplImage;
					public mask: org.bytedeco.javacpp.opencv_core.IplImage;
					public zeroThreshold: number;
					public outlierThreshold: number;
					public pyramidLevel: number;
					public transImg: org.bytedeco.javacpp.opencv_core.IplImage;
					public dstImg: org.bytedeco.javacpp.opencv_core.IplImage;
					public dstCount: number;
					public dstCountZero: number;
					public dstCountOutlier: number;
					public srcDstDot: number;
					public dstDstDot: java.nio.DoubleBuffer;
					public constructor();
					public constructor(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: org.bytedeco.javacpp.opencv_core.IplImage, param3: org.bytedeco.javacpp.opencv_core.IplImage, param4: number, param5: number, param6: number, param7: org.bytedeco.javacpp.opencv_core.IplImage, param8: org.bytedeco.javacpp.opencv_core.IplImage, param9: number);
				}
				export class Parameters {
					public static class: java.lang.Class<org.bytedeco.javacv.ImageTransformer.Parameters>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacv.ImageTransformer$Parameters interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						size(): number;
						get(): native.Array<number>;
						get(param0: number): number;
						set(param0: native.Array<number>): void;
						set(param0: number, param1: number): void;
						set(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
						reset(param0: boolean): void;
						getConstraintError(): number;
						compose(param0: org.bytedeco.javacv.ImageTransformer.Parameters, param1: boolean, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
						preoptimize(): boolean;
						getSubspace(): native.Array<number>;
						setSubspace(param0: native.Array<number>): void;
						clone(): org.bytedeco.javacv.ImageTransformer.Parameters;
					});
					public constructor();
					public clone(): org.bytedeco.javacv.ImageTransformer.Parameters;
					public reset(param0: boolean): void;
					public size(): number;
					public get(param0: number): number;
					public set(param0: native.Array<number>): void;
					public getConstraintError(): number;
					public set(param0: number, param1: number): void;
					public preoptimize(): boolean;
					public get(): native.Array<number>;
					public setSubspace(param0: native.Array<number>): void;
					public set(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
					public getSubspace(): native.Array<number>;
					public compose(param0: org.bytedeco.javacv.ImageTransformer.Parameters, param1: boolean, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
				}
			}
		}
	}
}

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ImageTransformerCL extends org.bytedeco.javacv.ImageTransformer {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ImageTransformerCL>;
// 				/**
// 				 * Constructs a new instance of the org.bytedeco.javacv.ImageTransformerCL interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
// 				 */
// 				public constructor(implementation: {
// 					getContext(): org.bytedeco.javacv.JavaCVCL;
// 					transform(param0: com.jogamp.opencl.CLImage2d, param1: com.jogamp.opencl.CLImage2d, param2: com.jogamp.opencl.CLImage2d, param3: com.jogamp.opencl.CLImage2d, param4: com.jogamp.opencl.CLImage2d, param5: com.jogamp.opencl.CLImage2d, param6: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param7: native.Array<boolean>, param8: org.bytedeco.javacv.ImageTransformerCL.InputData, param9: org.bytedeco.javacv.ImageTransformerCL.OutputData): void;
// 					createParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 					transform(param0: native.Array<org.bytedeco.javacv.ImageTransformer.Data>, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
// 					transform(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 				});
// 				public constructor();
// 				public transform(param0: native.Array<org.bytedeco.javacv.ImageTransformer.Data>, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
// 				public transform(param0: com.jogamp.opencl.CLImage2d, param1: com.jogamp.opencl.CLImage2d, param2: com.jogamp.opencl.CLImage2d, param3: com.jogamp.opencl.CLImage2d, param4: com.jogamp.opencl.CLImage2d, param5: com.jogamp.opencl.CLImage2d, param6: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param7: native.Array<boolean>, param8: org.bytedeco.javacv.ImageTransformerCL.InputData, param9: org.bytedeco.javacv.ImageTransformerCL.OutputData): void;
// 				public createParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 				public getContext(): org.bytedeco.javacv.JavaCVCL;
// 			}
// 			export module ImageTransformerCL {
// 				export class InputData {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ImageTransformerCL.InputData>;
// 					public pyramidLevel: number;
// 					public roiX: number;
// 					public roiY: number;
// 					public roiWidth: number;
// 					public roiHeight: number;
// 					public zeroThreshold: number;
// 					public outlierThreshold: number;
// 					public constructor(param0: boolean);
// 					public constructor();
// 					public writeBuffer(param0: org.bytedeco.javacv.JavaCVCL): com.jogamp.opencl.CLBuffer<java.nio.ByteBuffer>;
// 				}
// 				export class OutputData {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ImageTransformerCL.OutputData>;
// 					public dstCount: number;
// 					public dstCountZero: number;
// 					public dstCountOutlier: number;
// 					public srcDstDot: java.nio.FloatBuffer;
// 					public dstDstDot: java.nio.FloatBuffer;
// 					public constructor(param0: boolean);
// 					public constructor();
// 					public readBuffer(param0: org.bytedeco.javacv.JavaCVCL): com.jogamp.opencl.CLBuffer<java.nio.ByteBuffer>;
// 				}
// 			}
// 		}
// 	}
// }

declare module org {
	export module bytedeco {
		export module javacv {
			export class Java2DFrameConverter extends org.bytedeco.javacv.FrameConverter<any> {
				public static class: java.lang.Class<org.bytedeco.javacv.Java2DFrameConverter>;
				public static gamma22: native.Array<number>;
				public static gamma22inv: native.Array<number>;
				public bufferedImage: any;
				public static copy(param0: org.bytedeco.javacv.Frame, param1: any, param2: number): void;
				public getFrame(param0: any, param1: number): org.bytedeco.javacv.Frame;
				public static copy(param0: org.bytedeco.javacv.Frame, param1: any): void;
				public static applyGamma(param0: org.bytedeco.javacv.Frame, param1: number): void;
				public constructor();
				public convert(param0: any): org.bytedeco.javacv.Frame;
				public getBufferedImage(param0: org.bytedeco.javacv.Frame): any;
				public convert(param0: org.bytedeco.javacv.Frame): any;
				public static flipCopyWithGamma(param0: java.nio.ShortBuffer, param1: number, param2: java.nio.ShortBuffer, param3: number, param4: boolean, param5: number, param6: boolean, param7: number): void;
				public static flipCopyWithGamma(param0: java.nio.DoubleBuffer, param1: number, param2: java.nio.DoubleBuffer, param3: number, param4: number, param5: boolean, param6: number): void;
				public static flipCopyWithGamma(param0: java.nio.ByteBuffer, param1: number, param2: java.nio.ByteBuffer, param3: number, param4: boolean, param5: number, param6: boolean, param7: number): void;
				public static copy(param0: any, param1: org.bytedeco.javacv.Frame, param2: number, param3: boolean, param4: any): void;
				public convert(param0: any): org.bytedeco.javacv.Frame;
				public getFrame(param0: any, param1: number, param2: boolean): org.bytedeco.javacv.Frame;
				public static flipCopyWithGamma(param0: java.nio.FloatBuffer, param1: number, param2: java.nio.FloatBuffer, param3: number, param4: number, param5: boolean, param6: number): void;
				public static copy(param0: any, param1: org.bytedeco.javacv.Frame): void;
				public static encodeGamma22(param0: number): number;
				public static applyGamma(param0: java.nio.Buffer, param1: number, param2: number, param3: number): void;
				public static copy(param0: org.bytedeco.javacv.Frame, param1: any, param2: number, param3: boolean, param4: any): void;
				public getFrame(param0: any): org.bytedeco.javacv.Frame;
				public static flipCopyWithGamma(param0: java.nio.IntBuffer, param1: number, param2: java.nio.IntBuffer, param3: number, param4: number, param5: boolean, param6: number): void;
				public convert(param0: org.bytedeco.javacv.Frame): any;
				public static decodeGamma22(param0: number): number;
				public static getBufferedImageType(param0: org.bytedeco.javacv.Frame): number;
				public static copy(param0: any, param1: org.bytedeco.javacv.Frame, param2: number): void;
				public static cloneBufferedImage(param0: any): any;
				public getBufferedImage(param0: org.bytedeco.javacv.Frame, param1: number): any;
				public getBufferedImage(param0: org.bytedeco.javacv.Frame, param1: number, param2: boolean, param3: any): any;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class Java2DFrameUtils {
				public static class: java.lang.Class<org.bytedeco.javacv.Java2DFrameUtils>;
				public static toFrame(param0: any): org.bytedeco.javacv.Frame;
				public static toIplImage(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacpp.opencv_core.IplImage;
				public static toBufferedImage(param0: org.bytedeco.javacpp.opencv_core.Mat): any;
				public static deepCopy(param0: any): any;
				public constructor();
				public static toMat(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.opencv_core.Mat;
				public static toMat(param0: org.bytedeco.javacv.Frame): org.bytedeco.javacpp.opencv_core.Mat;
				public static toFrame(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacv.Frame;
				public static toIplImage(param0: org.bytedeco.javacv.Frame): org.bytedeco.javacpp.opencv_core.IplImage;
				public static toBufferedImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): any;
				public static toMat(param0: any): org.bytedeco.javacpp.opencv_core.Mat;
				public static toFrame(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacv.Frame;
				public static toBufferedImage(param0: org.bytedeco.javacv.Frame): any;
				public static toIplImage(param0: any): org.bytedeco.javacpp.opencv_core.IplImage;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class JavaCV {
				public static class: java.lang.Class<org.bytedeco.javacv.JavaCV>;
				public static SQRT2: number;
				public static FLT_EPSILON: number;
				public static DBL_EPSILON: number;
				public static adaptiveThreshold(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: org.bytedeco.javacpp.opencv_core.IplImage, param3: org.bytedeco.javacpp.opencv_core.IplImage, param4: boolean, param5: number, param6: number, param7: number, param8: number): void;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.CvMat): number;
				public static median(param0: native.Array<any>): any;
				public static getPlaneParameters(param0: native.Array<number>, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: org.bytedeco.javacpp.opencv_core.CvMat, param6: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static fractalTriangleWave(param0: native.Array<number>, param1: number, param2: number, param3: number, param4: number): void;
				public static norm(param0: native.Array<number>, param1: number): number;
				public static fractalTriangleWave(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: number): void;
				public static boundedRect(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvBox2D): org.bytedeco.javacpp.opencv_core.CvBox2D;
				public constructor();
				public static homogToRt(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: org.bytedeco.javacpp.opencv_core.CvMat, param6: org.bytedeco.javacpp.opencv_core.CvMat): number;
				public static hysteresisThreshold(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: number, param3: number, param4: number): void;
				public static distanceToLine(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number): number;
				public static boundingRect(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: number, param3: number, param4: number, param5: number): org.bytedeco.javacpp.opencv_core.CvRect;
				public static perspectiveTransform(param0: native.Array<number>, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static getPerspectiveTransform(param0: native.Array<number>, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: org.bytedeco.javacpp.opencv_core.CvMat, param6: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static fractalTriangleWave(param0: native.Array<number>, param1: number, param2: number, param3: number): void;
				public static cond(param0: org.bytedeco.javacpp.opencv_core.CvMat): number;
				public static norm(param0: native.Array<number>): number;
				public static median(param0: native.Array<number>): number;
				public static HtoRt(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static unitize(param0: number, param1: number): native.Array<number>;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvMat): number;
				public static norm(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number): number;
				public static perspectiveTransform(param0: native.Array<number>, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: org.bytedeco.javacpp.opencv_core.CvMat, param6: org.bytedeco.javacpp.opencv_core.CvMat, param7: boolean): void;
				public static cond(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvMat): number;
				public static homogToRt(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: org.bytedeco.javacpp.opencv_core.CvMat, param6: org.bytedeco.javacpp.opencv_core.CvMat, param7: org.bytedeco.javacpp.opencv_core.CvMat, param8: org.bytedeco.javacpp.opencv_core.CvMat): number;
				public static clamp(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: number, param3: number): void;
				public static cond(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number): number;
				public static fractalTriangleWave(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.CvMat): void;
				public static getPerspectiveTransform(param0: native.Array<number>, param1: native.Array<number>, param2: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static main(param0: native.Array<string>): void;
				public static HnToRt(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat): number;
			}
		}
	}
}

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class JavaCVCL {
// 				public static class: java.lang.Class<org.bytedeco.javacv.JavaCVCL>;
// 				public static fastCompilerOptions: string;
// 				public constructor(param0: boolean);
// 				public writeBuffer(param0: com.jogamp.opencl.CLBuffer<any>, param1: boolean): void;
// 				public finish(): void;
// 				public constructor();
// 				public flush(): void;
// 				public executeKernel(param0: com.jogamp.opencl.CLKernel, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.jogamp.opencl.CLEventList): void;
// 				public remap(param0: com.jogamp.opencl.CLImage2d, param1: com.jogamp.opencl.CLImage2d, param2: com.jogamp.opencl.CLImage2d, param3: com.jogamp.opencl.CLImage2d, param4: number): void;
// 				public getGLContext(): com.jogamp.opengl.GLContext;
// 				public remap(param0: com.jogamp.opencl.CLImage2d, param1: com.jogamp.opencl.CLImage2d, param2: com.jogamp.opencl.CLImage2d, param3: com.jogamp.opencl.CLImage2d): void;
// 				public constructor(param0: com.jogamp.opencl.CLContext, param1: com.jogamp.opencl.CLDevice);
// 				public readImage(param0: com.jogamp.opencl.CLImage2d, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: boolean): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public acquireGLObject(param0: com.jogamp.opencl.CLObject): void;
// 				public executeKernel(param0: com.jogamp.opencl.CLKernel, param1: number, param2: number, param3: number, param4: com.jogamp.opencl.CLEventList, param5: com.jogamp.opencl.CLEventList): void;
// 				public getCLContext(): com.jogamp.opencl.CLContext;
// 				public executeKernel(param0: com.jogamp.opencl.CLKernel, param1: number, param2: number, param3: number, param4: com.jogamp.opencl.CLEventList): void;
// 				public pyrDown(param0: com.jogamp.opencl.CLImage2d, param1: com.jogamp.opencl.CLImage2d): void;
// 				public createPinnedIplImage(param0: number, param1: number, param2: number, param3: number): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public constructor(param0: com.jogamp.opencl.CLContext);
// 				public executeKernel(param0: com.jogamp.opencl.CLKernel, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: com.jogamp.opencl.CLEventList): void;
// 				public executeKernel(param0: com.jogamp.opencl.CLKernel, param1: number, param2: number, param3: number): void;
// 				public releaseGLObject(param0: com.jogamp.opencl.CLObject): void;
// 				public static main(param0: native.Array<string>): void;
// 				public static alignFloor(param0: number, param1: number): number;
// 				public constructor(param0: com.jogamp.opengl.GLContext);
// 				public createPinnedBuffer(param0: number): com.jogamp.opencl.CLBuffer;
// 				public executeKernel(param0: com.jogamp.opencl.CLKernel, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number): void;
// 				public static getDefaultGLCapabilities(param0: com.jogamp.opengl.GLProfile): com.jogamp.opengl.GLCapabilities;
// 				public buildKernel(param0: string, param1: string, param2: string): com.jogamp.opencl.CLKernel;
// 				public static alignCeil(param0: number, param1: number): number;
// 				public finalize(): void;
// 				public releaseCLGLImage(param0: com.jogamp.opencl.gl.CLGLImage2d): void;
// 				public executeKernel(param0: com.jogamp.opencl.CLKernel, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number): void;
// 				public constructor(param0: com.jogamp.opengl.GLCapabilitiesImmutable, param1: com.jogamp.opengl.GLContext, param2: com.jogamp.opencl.CLDevice);
// 				public getGL2(): com.jogamp.opengl.GL2;
// 				public getGL(): com.jogamp.opengl.GL;
// 				public createIplImageFrom(param0: com.jogamp.opencl.CLImage2d): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getCLGLContext(): com.jogamp.opencl.gl.CLGLContext;
// 				public release(): void;
// 				public getCLCommandQueue(): com.jogamp.opencl.CLCommandQueue;
// 				public getGLU(): com.jogamp.opengl.glu.GLU;
// 				public readBuffer(param0: com.jogamp.opencl.CLBuffer<any>, param1: boolean): void;
// 				public writeImage(param0: com.jogamp.opencl.CLImage2d, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: boolean): com.jogamp.opencl.CLImage2d;
// 				public createCLGLImageFrom(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: native.Array<com.jogamp.opencl.CLMemory.Mem>): com.jogamp.opencl.gl.CLGLImage2d;
// 				public createCLImageFrom(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: native.Array<com.jogamp.opencl.CLMemory.Mem>): com.jogamp.opencl.CLImage2d;
// 				public buildKernels(param0: string, param1: java.lang.Class, param2: string, param3: native.Array<string>): native.Array<com.jogamp.opencl.CLKernel>;
// 				public executeKernel(param0: com.jogamp.opencl.CLKernel, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: com.jogamp.opencl.CLEventList, param8: com.jogamp.opencl.CLEventList): void;
// 				public executeKernel(param0: com.jogamp.opencl.CLKernel, param1: number, param2: number, param3: number, param4: number, param5: number, param6: number, param7: number, param8: number, param9: number, param10: com.jogamp.opencl.CLEventList, param11: com.jogamp.opencl.CLEventList): void;
// 				public buildKernels(param0: string, param1: string, param2: native.Array<string>): native.Array<com.jogamp.opencl.CLKernel>;
// 				public buildKernel(param0: string, param1: string): com.jogamp.opencl.CLKernel;
// 			}
// 			export module JavaCVCL {
// 				export class PinnedIplImage {
// 					public static class: java.lang.Class<org.bytedeco.javacv.JavaCVCL.PinnedIplImage>;
// 					public getCLBuffer(): com.jogamp.opencl.CLBuffer;
// 					public getByteBuffer(): java.nio.ByteBuffer;
// 					public release(): void;
// 				}
// 			}
// 		}
// 	}
// }

declare module org {
	export module bytedeco {
		export module javacv {
			export class JavaCvErrorCallback {
				public static class: java.lang.Class<org.bytedeco.javacv.JavaCvErrorCallback>;
				public constructor(param0: boolean, param1: any, param2: number);
				public call(param0: number, param1: org.bytedeco.javacpp.BytePointer, param2: org.bytedeco.javacpp.BytePointer, param3: org.bytedeco.javacpp.BytePointer, param4: number, param5: org.bytedeco.javacpp.Pointer): number;
				public constructor(param0: boolean, param1: any);
				public constructor(param0: boolean);
				public constructor();
			}
		}
	}
}

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class JavaFXFrameConverter extends org.bytedeco.javacv.FrameConverter<javafx.scene.image.Image> {
// 				public static class: java.lang.Class<org.bytedeco.javacv.JavaFXFrameConverter>;
// 				public convert(param0: any): org.bytedeco.javacv.Frame;
// 				public convert(param0: javafx.scene.image.Image): org.bytedeco.javacv.Frame;
// 				public convert(param0: org.bytedeco.javacv.Frame): any;
// 				public constructor();
// 				public convert(param0: org.bytedeco.javacv.Frame): javafx.scene.image.Image;
// 			}
// 			export module JavaFXFrameConverter {
// 				export class FramePixelReader {
// 					public static class: java.lang.Class<org.bytedeco.javacv.JavaFXFrameConverter.FramePixelReader>;
// 					public getPixels(param0: number, param1: number, param2: number, param3: number, param4: javafx.scene.image.WritablePixelFormat, param5: java.nio.Buffer, param6: number): void;
// 					public getPixels(param0: number, param1: number, param2: number, param3: number, param4: javafx.scene.image.WritablePixelFormat<java.nio.IntBuffer>, param5: native.Array<number>, param6: number, param7: number): void;
// 					public getPixels(param0: number, param1: number, param2: number, param3: number, param4: javafx.scene.image.WritablePixelFormat<java.nio.ByteBuffer>, param5: native.Array<number>, param6: number, param7: number): void;
// 					public getPixelFormat(): javafx.scene.image.PixelFormat;
// 					public getColor(param0: number, param1: number): javafx.scene.paint.Color;
// 					public getArgb(param0: number, param1: number): number;
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class LeptonicaFrameConverter extends org.bytedeco.javacv.FrameConverter<org.bytedeco.javacpp.lept.PIX> {
// 				public static class: java.lang.Class<org.bytedeco.javacv.LeptonicaFrameConverter>;
// 				public convert(param0: any): org.bytedeco.javacv.Frame;
// 				public convert(param0: org.bytedeco.javacv.Frame): any;
// 				// public convert(param0: org.bytedeco.javacv.Frame): org.bytedeco.javacpp.lept.PIX;
// 				// public convert(param0: org.bytedeco.javacpp.lept.PIX): org.bytedeco.javacv.Frame;
// 				public constructor();
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class MarkedPlane {
// 				public static class: java.lang.Class<org.bytedeco.javacv.MarkedPlane>;
// 				public setColors(param0: org.bytedeco.javacpp.opencv_core.CvScalar, param1: org.bytedeco.javacpp.opencv_core.CvScalar): void;
// 				public getBackgroundColor(): org.bytedeco.javacpp.opencv_core.CvScalar;
// 				public getHeight(): number;
// 				public getMarkers(): native.Array<org.bytedeco.javacv.Marker>;
// 				public setPrewarp(param0: org.bytedeco.javacpp.opencv_core.CvMat): void;
// 				public constructor(param0: number, param1: number, param2: native.Array<org.bytedeco.javacv.Marker>, param3: number);
// 				public getForegroundColor(): org.bytedeco.javacpp.opencv_core.CvScalar;
// 				public getPrewarp(): org.bytedeco.javacpp.opencv_core.CvMat;
// 				public getTotalWarp(param0: native.Array<org.bytedeco.javacv.Marker>, param1: org.bytedeco.javacpp.opencv_core.CvMat): number;
// 				public setForegroundColor(param0: org.bytedeco.javacpp.opencv_core.CvScalar): void;
// 				public getWidth(): number;
// 				public getImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public constructor(param0: number, param1: number, param2: native.Array<org.bytedeco.javacv.Marker>, param3: boolean, param4: org.bytedeco.javacpp.opencv_core.CvScalar, param5: org.bytedeco.javacpp.opencv_core.CvScalar, param6: number);
// 				public setBackgroundColor(param0: org.bytedeco.javacpp.opencv_core.CvScalar): void;
// 				public getTotalWarp(param0: native.Array<org.bytedeco.javacv.Marker>, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: boolean): number;
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class Marker {
// 				public static class: java.lang.Class<org.bytedeco.javacv.Marker>;
// 				public id: number;
// 				public corners: native.Array<number>;
// 				public confidence: number;
// 				public static createArray(param0: org.bytedeco.javacv.Marker.ArraySettings): native.Array<native.Array<org.bytedeco.javacv.Marker>>;
// 				public getCenter(): native.Array<number>;
// 				public draw(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: number, param3: org.bytedeco.javacpp.opencv_core.CvMat): void;
// 				public clone(): org.bytedeco.javacv.Marker;
// 				public toString(): string;
// 				public static createArray(param0: number, param1: number, param2: number, param3: number, param4: number, param5: number, param6: boolean, param7: number, param8: number): native.Array<native.Array<org.bytedeco.javacv.Marker>>;
// 				public static createArray(param0: org.bytedeco.javacv.Marker.ArraySettings, param1: number, param2: number): native.Array<native.Array<org.bytedeco.javacv.Marker>>;
// 				public constructor(param0: number, param1: native.Array<number>, param2: number);
// 				public getImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public hashCode(): number;
// 				public equals(param0: any): boolean;
// 				public constructor(param0: number, param1: native.Array<number>);
// 				public static applyWarp(param0: native.Array<org.bytedeco.javacv.Marker>, param1: org.bytedeco.javacpp.opencv_core.CvMat): void;
// 				public static getImage(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public draw(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
// 				public draw(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.CvScalar, param2: number, param3: number, param4: org.bytedeco.javacpp.opencv_core.CvMat): void;
// 			}
// 			export module Marker {
// 				export class ArraySettings extends org.bytedeco.javacv.BaseChildSettings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.Marker.ArraySettings>;
// 					public setRows(param0: number): void;
// 					public getSpacingX(): number;
// 					public getSizeY(): number;
// 					public setSizeY(param0: number): void;
// 					public setSizeX(param0: number): void;
// 					public setSpacingX(param0: number): void;
// 					public setSpacingY(param0: number): void;
// 					public setCheckered(param0: boolean): void;
// 					public constructor();
// 					public getColumns(): number;
// 					public setColumns(param0: number): void;
// 					public getSizeX(): number;
// 					public getSpacingY(): number;
// 					public isCheckered(): boolean;
// 					public getRows(): number;
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class MarkerDetector {
// 				public static class: java.lang.Class<org.bytedeco.javacv.MarkerDetector>;
// 				public getSettings(): org.bytedeco.javacv.MarkerDetector.Settings;
// 				public draw(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: native.Array<org.bytedeco.javacv.Marker>): void;
// 				public getThresholdedImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public setSettings(param0: org.bytedeco.javacv.MarkerDetector.Settings): void;
// 				public constructor(param0: org.bytedeco.javacv.MarkerDetector.Settings);
// 				public detect(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: boolean): native.Array<org.bytedeco.javacv.Marker>;
// 				public constructor();
// 			}
// 			export module MarkerDetector {
// 				export class Settings extends org.bytedeco.javacv.BaseChildSettings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.MarkerDetector.Settings>;
// 					public getThresholdWindowMin(): number;
// 					public setThresholdVarMultiplier(param0: number): void;
// 					public setThresholdWindowMin(param0: number): void;
// 					public setThresholdWindowMax(param0: number): void;
// 					public getThresholdKBlackMarkers(): number;
// 					public setThresholdKWhiteMarkers(param0: number): void;
// 					public constructor();
// 					public getThresholdVarMultiplier(): number;
// 					public getSubPixelWindow(): number;
// 					public getThresholdKWhiteMarkers(): number;
// 					public setSubPixelWindow(param0: number): void;
// 					public setThresholdKBlackMarkers(param0: number): void;
// 					public getThresholdWindowMax(): number;
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ObjectFinder {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ObjectFinder>;
// 				public constructor(param0: org.bytedeco.javacpp.opencv_core.IplImage);
// 				public find(param0: org.bytedeco.javacpp.opencv_core.IplImage): native.Array<number>;
// 				public constructor(param0: org.bytedeco.javacv.ObjectFinder.Settings);
// 				public static main(param0: native.Array<string>): void;
// 				public getSettings(): org.bytedeco.javacv.ObjectFinder.Settings;
// 				public setSettings(param0: org.bytedeco.javacv.ObjectFinder.Settings): void;
// 			}
// 			export module ObjectFinder {
// 				export class Settings extends org.bytedeco.javacv.BaseChildSettings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ObjectFinder.Settings>;
// 					public setDescriptorType(param0: number): void;
// 					public getObjectImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 					public getMatchesMin(): number;
// 					public getRansacReprojThreshold(): number;
// 					public getDistanceThreshold(): number;
// 					public setRansacReprojThreshold(param0: number): void;
// 					public setDescriptorChannels(param0: number): void;
// 					public setDistanceThreshold(param0: number): void;
// 					public setObjectImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
// 					public setThreshold(param0: number): void;
// 					public getThreshold(): number;
// 					public setNOctaves(param0: number): void;
// 					public setNOctaveLayers(param0: number): void;
// 					public isUseFLANN(): boolean;
// 					public getNOctaveLayers(): number;
// 					public constructor();
// 					public setMatchesMin(param0: number): void;
// 					public getDescriptorChannels(): number;
// 					public setDescriptorSize(param0: number): void;
// 					public getDescriptorType(): number;
// 					public getDescriptorSize(): number;
// 					public getNOctaves(): number;
// 					public setUseFLANN(param0: boolean): void;
// 				}
// 			}
// 		}
// 	}
// }

declare module org {
	export module bytedeco {
		export module javacv {
			export abstract class OpenCVFrameConverter<F>  extends org.bytedeco.javacv.FrameConverter<any> {
				public static class: java.lang.Class<org.bytedeco.javacv.OpenCVFrameConverter<any>>;
				public static getFrameDepth(param0: number): number;
				public convert(param0: any): org.bytedeco.javacv.Frame;
				public convertToIplImage(param0: org.bytedeco.javacv.Frame): org.bytedeco.javacpp.opencv_core.IplImage;
				public static getIplImageDepth(param0: number): number;
				public convert(param0: org.bytedeco.javacv.Frame): any;
				public convertToMat(param0: org.bytedeco.javacv.Frame): org.bytedeco.javacpp.opencv_core.Mat;
				public convert(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacv.Frame;
				public convertToOrgOpenCvCoreMat(param0: org.bytedeco.javacv.Frame): org.opencv.core.Mat;
				public convert(param0: org.opencv.core.Mat): org.bytedeco.javacv.Frame;
				public convert(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacv.Frame;
				public static getMatDepth(param0: number): number;
				public constructor();
			}
			export module OpenCVFrameConverter {
				export class ToIplImage extends org.bytedeco.javacv.OpenCVFrameConverter<org.bytedeco.javacpp.opencv_core.IplImage> {
					public static class: java.lang.Class<org.bytedeco.javacv.OpenCVFrameConverter.ToIplImage>;
					public convert(param0: org.bytedeco.javacv.Frame): any;
					public convert(param0: org.opencv.core.Mat): org.bytedeco.javacv.Frame;
					public convert(param0: any): org.bytedeco.javacv.Frame;
					public convert(param0: org.bytedeco.javacv.Frame): org.bytedeco.javacpp.opencv_core.IplImage;
					public constructor();
					public convert(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacv.Frame;
					public convert(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacv.Frame;
				}
				export class ToMat extends org.bytedeco.javacv.OpenCVFrameConverter<org.bytedeco.javacpp.opencv_core.Mat> {
					public static class: java.lang.Class<org.bytedeco.javacv.OpenCVFrameConverter.ToMat>;
					public convert(param0: org.bytedeco.javacv.Frame): any;
					public convert(param0: org.bytedeco.javacv.Frame): org.bytedeco.javacpp.opencv_core.Mat;
					public convert(param0: org.opencv.core.Mat): org.bytedeco.javacv.Frame;
					public convert(param0: any): org.bytedeco.javacv.Frame;
					public constructor();
					public convert(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacv.Frame;
					public convert(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacv.Frame;
				}
				export class ToOrgOpenCvCoreMat extends org.bytedeco.javacv.OpenCVFrameConverter<org.opencv.core.Mat> {
					public static class: java.lang.Class<org.bytedeco.javacv.OpenCVFrameConverter.ToOrgOpenCvCoreMat>;
					public convert(param0: org.bytedeco.javacv.Frame): any;
					public convert(param0: org.opencv.core.Mat): org.bytedeco.javacv.Frame;
					public convert(param0: any): org.bytedeco.javacv.Frame;
					public constructor();
					public convert(param0: org.bytedeco.javacv.Frame): org.opencv.core.Mat;
					public convert(param0: org.bytedeco.javacpp.opencv_core.Mat): org.bytedeco.javacv.Frame;
					public convert(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacv.Frame;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class OpenCVFrameGrabber extends org.bytedeco.javacv.FrameGrabber {
				public static class: java.lang.Class<org.bytedeco.javacv.OpenCVFrameGrabber>;
				public finalize(): void;
				public static createDefault(param0: string): org.bytedeco.javacv.FrameGrabber;
				public static tryLoad(): void;
				public getLengthInTime(): number;
				public constructor(param0: string);
				public constructor();
				public static getDeviceDescriptions(): native.Array<string>;
				public getImageHeight(): number;
				public start(): void;
				public constructor(param0: string, param1: number);
				public static createDefault(param0: number): org.bytedeco.javacv.OpenCVFrameGrabber;
				public static createDefault(param0: number): org.bytedeco.javacv.FrameGrabber;
				public getFrameNumber(): number;
				public static createDefault(param0: string): org.bytedeco.javacv.OpenCVFrameGrabber;
				public getGamma(): number;
				public setTimestamp(param0: number): void;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.OpenCVFrameGrabber;
				public getTimestamp(): number;
				public grab(): org.bytedeco.javacv.Frame;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FrameGrabber;
				public constructor(param0: java.io.File, param1: number);
				public release(): void;
				public getFormat(): string;
				public constructor(param0: java.io.File);
				public getPixelFormat(): number;
				public getFrameRate(): number;
				public setImageMode(param0: org.bytedeco.javacv.FrameGrabber.ImageMode): void;
				public getLengthInFrames(): number;
				public stop(): void;
				public trigger(): void;
				public setFrameNumber(param0: number): void;
				public constructor(param0: number);
				public getImageWidth(): number;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class OpenCVFrameRecorder extends org.bytedeco.javacv.FrameRecorder {
				public static class: java.lang.Class<org.bytedeco.javacv.OpenCVFrameRecorder>;
				public static createDefault(param0: string, param1: number, param2: number): org.bytedeco.javacv.FrameRecorder;
				public release(): void;
				public finalize(): void;
				public static tryLoad(): void;
				public constructor(param0: string, param1: number, param2: number);
				public static createDefault(param0: string, param1: number, param2: number): org.bytedeco.javacv.OpenCVFrameRecorder;
				public constructor(param0: java.io.File, param1: number, param2: number);
				public record(param0: org.bytedeco.javacv.Frame): void;
				public static createDefault(param0: java.io.File, param1: number, param2: number): org.bytedeco.javacv.FrameRecorder;
				public constructor();
				public stop(): void;
				public start(): void;
				public static createDefault(param0: java.io.File, param1: number, param2: number): org.bytedeco.javacv.OpenCVFrameRecorder;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class OpenKinect2FrameGrabber extends org.bytedeco.javacv.FrameGrabber {
				public static class: java.lang.Class<org.bytedeco.javacv.OpenKinect2FrameGrabber>;
				public static DEFAULT_DEPTH_WIDTH: number;
				public static DEFAULT_DEPTH_HEIGHT: number;
				public static DEFAULT_COLOR_WIDTH: number;
				public static DEFAULT_COLOR_HEIGHT: number;
				public getDepthImageWidth(): number;
				public enableIRStream(): void;
				public getIRImageWidth(): number;
				public grabVideo(): void;
				public setIRImageHeight(param0: number): void;
				public getByteOrder(): java.nio.ByteOrder;
				public finalize(): void;
				public static createDefault(param0: string): org.bytedeco.javacv.FrameGrabber;
				public getIRImage(): org.bytedeco.javacpp.opencv_core.IplImage;
				public static tryLoad(): void;
				public getDepthImageHeight(): number;
				public getIRImageHeight(): number;
				public setDepthImageWidth(param0: number): void;
				public constructor();
				public setIRImageWidth(param0: number): void;
				public static getDeviceDescriptions(): native.Array<string>;
				public getDepthImage(): org.bytedeco.javacpp.opencv_core.IplImage;
				public static createDefault(param0: number): org.bytedeco.javacv.OpenKinect2FrameGrabber;
				public setByteOrder(param0: java.nio.ByteOrder): void;
				public start(): void;
				public grabIR(): void;
				public static createDefault(param0: number): org.bytedeco.javacv.FrameGrabber;
				public enableColorStream(): void;
				public enableDepthStream(): void;
				public grab(): org.bytedeco.javacv.Frame;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FrameGrabber;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.OpenKinect2FrameGrabber;
				public grabDepth(): void;
				public release(): void;
				public static createDefault(param0: string): org.bytedeco.javacv.OpenKinect2FrameGrabber;
				public stop(): void;
				public trigger(): void;
				public constructor(param0: number);
				public setDepthFrameRate(param0: number): void;
				public getVideoImage(): org.bytedeco.javacpp.opencv_core.IplImage;
				public setDepthImageHeight(param0: number): void;
				public getDepthFrameRate(): number;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class OpenKinectFrameGrabber extends org.bytedeco.javacv.FrameGrabber {
				public static class: java.lang.Class<org.bytedeco.javacv.OpenKinectFrameGrabber>;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.OpenKinectFrameGrabber;
				public getByteOrder(): java.nio.ByteOrder;
				public static createDefault(param0: string): org.bytedeco.javacv.OpenKinectFrameGrabber;
				public finalize(): void;
				public static createDefault(param0: string): org.bytedeco.javacv.FrameGrabber;
				public static tryLoad(): void;
				public grabDepth(): org.bytedeco.javacpp.opencv_core.IplImage;
				public constructor();
				public static getDeviceDescriptions(): native.Array<string>;
				public getDepthFormat(): number;
				public setByteOrder(param0: java.nio.ByteOrder): void;
				public start(): void;
				public static createDefault(param0: number): org.bytedeco.javacv.FrameGrabber;
				public getGamma(): number;
				public grab(): org.bytedeco.javacv.Frame;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FrameGrabber;
				public release(): void;
				public setVideoFormat(param0: number): void;
				public getVideoFormat(): number;
				public setImageMode(param0: org.bytedeco.javacv.FrameGrabber.ImageMode): void;
				public stop(): void;
				public static createDefault(param0: number): org.bytedeco.javacv.OpenKinectFrameGrabber;
				public trigger(): void;
				public grabIR(): org.bytedeco.javacpp.opencv_core.IplImage;
				public setDepthFormat(param0: number): void;
				public constructor(param0: number);
				public grabVideo(): org.bytedeco.javacpp.opencv_core.IplImage;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class PS3EyeFrameGrabber extends org.bytedeco.javacv.FrameGrabber {
				public static class: java.lang.Class<org.bytedeco.javacv.PS3EyeFrameGrabber>;
				public triggered: org.bytedeco.javacv.PS3EyeFrameGrabber.Triggered;
				public finalize(): void;
				public static createDefault(param0: string): org.bytedeco.javacv.FrameGrabber;
				public static tryLoad(): void;
				public constructor();
				public static getDeviceDescriptions(): native.Array<string>;
				public constructor(param0: number, param1: number, param2: number, param3: number, param4: any);
				public static createDefault(param0: number): org.bytedeco.javacv.PS3EyeFrameGrabber;
				public grab_RGB4(): org.bytedeco.javacpp.opencv_core.IplImage;
				public static listPS3Cameras(): native.Array<string>;
				public start(): void;
				public static createDefault(param0: number): org.bytedeco.javacv.FrameGrabber;
				public static createDefault(param0: string): org.bytedeco.javacv.PS3EyeFrameGrabber;
				public grab(): org.bytedeco.javacv.Frame;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.PS3EyeFrameGrabber;
				public static getCameraCount(): number;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FrameGrabber;
				public release(): void;
				public makeImage(param0: native.Array<number>): org.bytedeco.javacpp.opencv_core.IplImage;
				public getCamera(): cl.eye.CLCamera;
				public toString(): string;
				public grab_raw(): native.Array<number>;
				public stop(): void;
				public getUUID(): string;
				public constructor(param0: number, param1: number, param2: number, param3: number);
				public trigger(): void;
				public dispose(): void;
				public constructor(param0: number);
				public static main(param0: native.Array<string>): void;
			}
			export module PS3EyeFrameGrabber {
				export class Triggered {
					public static class: java.lang.Class<org.bytedeco.javacv.PS3EyeFrameGrabber.Triggered>;
					public static NO_TRIGGER: org.bytedeco.javacv.PS3EyeFrameGrabber.Triggered;
					public static HAS_FRAME: org.bytedeco.javacv.PS3EyeFrameGrabber.Triggered;
					public static NO_FRAME: org.bytedeco.javacv.PS3EyeFrameGrabber.Triggered;
					public static valueOf(param0: string): org.bytedeco.javacv.PS3EyeFrameGrabber.Triggered;
					public static values(): native.Array<org.bytedeco.javacv.PS3EyeFrameGrabber.Triggered>;
				}
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class Parallel {
				public static class: java.lang.Class<org.bytedeco.javacv.Parallel>;
				public static NUM_THREADS: string;
				public static getNumThreads(): number;
				public static run(param0: native.Array<java.lang.Runnable>): void;
				public static loop(param0: number, param1: number, param2: org.bytedeco.javacv.Parallel.Looper): void;
				public static getNumCores(): number;
				public static setNumThreads(param0: number): void;
				public static loop(param0: number, param1: number, param2: number, param3: org.bytedeco.javacv.Parallel.Looper): void;
				public constructor();
			}
			export module Parallel {
				export class Looper {
					public static class: java.lang.Class<org.bytedeco.javacv.Parallel.Looper>;
					/**
					 * Constructs a new instance of the org.bytedeco.javacv.Parallel$Looper interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
					 */
					public constructor(implementation: {
						loop(param0: number, param1: number, param2: number): void;
					});
					public constructor();
					public loop(param0: number, param1: number, param2: number): void;
				}
			}
		}
	}
}

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ProCamColorCalibrator {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ProCamColorCalibrator>;
// 				public getCameraColor(): any;
// 				public getUndistortedCameraImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getProjectorColors(): native.Array<any>;
// 				public addCameraColor(): void;
// 				public getMaskImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public getColorCount(): number;
// 				public addCameraColor(param0: any): void;
// 				public constructor(param0: org.bytedeco.javacv.ProCamColorCalibrator.Settings, param1: org.bytedeco.javacv.MarkerDetector.Settings, param2: org.bytedeco.javacv.MarkedPlane, param3: org.bytedeco.javacv.CameraDevice, param4: org.bytedeco.javacv.ProjectorDevice);
// 				public calibrate(): number;
// 				public processCameraImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): boolean;
// 				public getProjectorColor(): any;
// 				public getCameraColors(): native.Array<any>;
// 			}
// 			export module ProCamColorCalibrator {
// 				export class Settings extends org.bytedeco.javacv.BaseChildSettings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ProCamColorCalibrator.Settings>;
// 					public getDetectedBoardMin(): number;
// 					public getSamplesPerChannel(): number;
// 					public setSamplesPerChannel(param0: number): void;
// 					public constructor();
// 					public setDetectedBoardMin(param0: number): void;
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ProCamGeometricCalibrator {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ProCamGeometricCalibrator>;
// 				public addMarkers(): void;
// 				public addMarkers(param0: number): void;
// 				public getProjectorPlane(): org.bytedeco.javacv.MarkedPlane;
// 				public constructor(param0: org.bytedeco.javacv.ProCamGeometricCalibrator.Settings, param1: org.bytedeco.javacv.MarkerDetector.Settings, param2: org.bytedeco.javacv.MarkedPlane, param3: org.bytedeco.javacv.MarkedPlane, param4: native.Array<org.bytedeco.javacv.GeometricCalibrator>, param5: org.bytedeco.javacv.GeometricCalibrator);
// 				public drawMarkers(param0: org.bytedeco.javacpp.opencv_core.IplImage): void;
// 				public getBoardPlane(): org.bytedeco.javacv.MarkedPlane;
// 				public calibrate(param0: boolean, param1: boolean): native.Array<number>;
// 				public processCameraImage(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: number): native.Array<native.Array<org.bytedeco.javacv.Marker>>;
// 				public addMarkers(param0: native.Array<org.bytedeco.javacv.Marker>, param1: native.Array<org.bytedeco.javacv.Marker>): void;
// 				public processCameraImage(param0: org.bytedeco.javacpp.opencv_core.IplImage): native.Array<native.Array<org.bytedeco.javacv.Marker>>;
// 				public processMarkers(param0: native.Array<org.bytedeco.javacv.Marker>, param1: native.Array<org.bytedeco.javacv.Marker>): boolean;
// 				public getImageCount(): number;
// 				public processMarkers(): boolean;
// 				public getProjectorImage(): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public constructor(param0: org.bytedeco.javacv.ProCamGeometricCalibrator.Settings, param1: org.bytedeco.javacv.MarkerDetector.Settings, param2: org.bytedeco.javacv.MarkedPlane, param3: org.bytedeco.javacv.MarkedPlane, param4: org.bytedeco.javacv.ProjectiveDevice, param5: org.bytedeco.javacv.ProjectiveDevice);
// 				public processMarkers(param0: native.Array<org.bytedeco.javacv.Marker>, param1: native.Array<org.bytedeco.javacv.Marker>, param2: number): boolean;
// 				public getProjectorCalibrator(): org.bytedeco.javacv.GeometricCalibrator;
// 				public drawMarkers(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: number): void;
// 				public getCameraCalibrators(): native.Array<org.bytedeco.javacv.GeometricCalibrator>;
// 				public processMarkers(param0: number): boolean;
// 				public addMarkers(param0: native.Array<org.bytedeco.javacv.Marker>, param1: native.Array<org.bytedeco.javacv.Marker>, param2: number): void;
// 				public calibrate(param0: boolean, param1: boolean, param2: number): native.Array<number>;
// 			}
// 			export module ProCamGeometricCalibrator {
// 				export class Settings extends org.bytedeco.javacv.GeometricCalibrator.Settings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ProCamGeometricCalibrator.Settings>;
// 					public constructor();
// 					public setPrewarpUpdateErrorMax(param0: number): void;
// 					public isUseOnlyIntersection(): boolean;
// 					public setUseOnlyIntersection(param0: boolean): void;
// 					public setDetectedProjectorMin(param0: number): void;
// 					public getPrewarpUpdateErrorMax(): number;
// 					public getDetectedProjectorMin(): number;
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ProCamTransformer extends org.bytedeco.javacv.ImageTransformer {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ProCamTransformer>;
// 				public camera: org.bytedeco.javacv.CameraDevice;
// 				public projector: org.bytedeco.javacv.ProjectorDevice;
// 				public surfaceTransformer: org.bytedeco.javacv.ProjectiveColorTransformer;
// 				public projectorTransformer: org.bytedeco.javacv.ProjectiveColorTransformer;
// 				public projectorImage: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 				public surfaceImage: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 				public fillColor: org.bytedeco.javacpp.opencv_core.CvScalar;
// 				public roi: org.bytedeco.javacpp.opencv_core.CvRect;
// 				public frontoParallelH: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public invFrontoParallelH: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public invCameraMatrix: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public kernelData: org.bytedeco.javacpp.cvkernels.KernelData;
// 				public H1: native.Array<org.bytedeco.javacpp.opencv_core.CvMat>;
// 				public H2: native.Array<org.bytedeco.javacpp.opencv_core.CvMat>;
// 				public X: native.Array<org.bytedeco.javacpp.opencv_core.CvMat>;
// 				public transform(param0: native.Array<org.bytedeco.javacv.ImageTransformer.Data>, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
// 				public setProjectorImage(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: number, param2: number): void;
// 				public setProjectorImage(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: number, param2: number, param3: boolean): void;
// 				public getNumBiases(): number;
// 				public constructor(param0: native.Array<number>, param1: org.bytedeco.javacv.CameraDevice, param2: org.bytedeco.javacv.ProjectorDevice, param3: org.bytedeco.javacpp.opencv_core.CvMat);
// 				public getFillColor(): org.bytedeco.javacpp.opencv_core.CvScalar;
// 				public getProjectorTransformer(): org.bytedeco.javacv.ProjectiveColorTransformer;
// 				public getProjectorImage(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public createParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public getNumGains(): number;
// 				public setFillColor(param0: org.bytedeco.javacpp.opencv_core.CvScalar): void;
// 				public prepareTransforms(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: number, param4: org.bytedeco.javacv.ProCamTransformer.Parameters): void;
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: org.bytedeco.javacpp.opencv_core.CvRect, param3: number, param4: org.bytedeco.javacv.ImageTransformer.Parameters, param5: boolean): void;
// 				public getSurfaceTransformer(): org.bytedeco.javacv.ProjectiveColorTransformer;
// 				public createParameters(): org.bytedeco.javacv.ProCamTransformer.Parameters;
// 				public getSurfaceImage(param0: number): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 				public constructor(param0: native.Array<number>, param1: org.bytedeco.javacv.CameraDevice, param2: org.bytedeco.javacv.ProjectorDevice);
// 				public setSurfaceImage(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: number): void;
// 			}
// 			export module ProCamTransformer {
// 				export class Parameters extends org.bytedeco.javacv.ImageTransformer.Parameters {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ProCamTransformer.Parameters>;
// 					public clone(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 					public reset(param0: boolean): void;
// 					public size(): number;
// 					public clone(): org.bytedeco.javacv.ProCamTransformer.Parameters;
// 					public getSurfaceParameters(): org.bytedeco.javacv.ProjectiveColorTransformer.Parameters;
// 					public reset(param0: org.bytedeco.javacv.ProjectiveColorTransformer.Parameters, param1: org.bytedeco.javacv.ProjectiveColorTransformer.Parameters): void;
// 					public get(param0: number): number;
// 					public set(param0: native.Array<number>): void;
// 					public toString(): string;
// 					public constructor(param0: org.bytedeco.javacv.ProCamTransformer);
// 					public getProjectorParameters(): org.bytedeco.javacv.ProjectiveColorTransformer.Parameters;
// 					public getConstraintError(): number;
// 					public set(param0: number, param1: number): void;
// 					public preoptimize(): boolean;
// 					public getN0(): org.bytedeco.javacpp.opencv_core.CvMat;
// 					public constructor(param0: org.bytedeco.javacv.ProCamTransformer, param1: org.bytedeco.javacv.ProjectiveColorTransformer.Parameters, param2: org.bytedeco.javacv.ProjectiveColorTransformer.Parameters);
// 					public get(): native.Array<number>;
// 					public setSubspace(param0: native.Array<number>): void;
// 					public set(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
// 					public getSubspace(): native.Array<number>;
// 					public compose(param0: org.bytedeco.javacv.ImageTransformer.Parameters, param1: boolean, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 					public getN(): org.bytedeco.javacpp.opencv_core.CvMat;
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ProCamTransformerCL extends org.bytedeco.javacv.ProCamTransformer implements org.bytedeco.javacv.ImageTransformerCL {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ProCamTransformerCL>;
// 				public context: org.bytedeco.javacv.JavaCVCL;
// 				public nullSize: number;
// 				public H1Buffer: com.jogamp.opencl.CLBuffer<java.nio.FloatBuffer>;
// 				public H2Buffer: com.jogamp.opencl.CLBuffer<java.nio.FloatBuffer>;
// 				public XBuffer: com.jogamp.opencl.CLBuffer<java.nio.FloatBuffer>;
// 				public projectorImageCL: native.Array<com.jogamp.opencl.CLImage2d>;
// 				public surfaceImageCL: native.Array<com.jogamp.opencl.CLImage2d>;
// 				public constructor(param0: org.bytedeco.javacv.JavaCVCL, param1: native.Array<number>, param2: org.bytedeco.javacv.CameraDevice, param3: org.bytedeco.javacv.ProjectorDevice);
// 				public transform(param0: native.Array<org.bytedeco.javacv.ImageTransformer.Data>, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
// 				public transform(param0: com.jogamp.opencl.CLImage2d, param1: com.jogamp.opencl.CLImage2d, param2: com.jogamp.opencl.CLImage2d, param3: com.jogamp.opencl.CLImage2d, param4: com.jogamp.opencl.CLImage2d, param5: com.jogamp.opencl.CLImage2d, param6: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param7: native.Array<boolean>, param8: org.bytedeco.javacv.ImageTransformerCL.InputData, param9: org.bytedeco.javacv.ImageTransformerCL.OutputData): void;
// 				public getSurfaceImageCL(param0: number): com.jogamp.opencl.CLImage2d;
// 				public setSurfaceImageCL(param0: com.jogamp.opencl.CLImage2d, param1: number): void;
// 				public constructor(param0: native.Array<number>, param1: org.bytedeco.javacv.CameraDevice, param2: org.bytedeco.javacv.ProjectorDevice, param3: org.bytedeco.javacpp.opencv_core.CvMat);
// 				public getProjectorImageCL(param0: number): com.jogamp.opencl.CLImage2d;
// 				public prepareTransforms(param0: com.jogamp.opencl.CLBuffer, param1: com.jogamp.opencl.CLBuffer, param2: com.jogamp.opencl.CLBuffer, param3: number, param4: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>): void;
// 				public createParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public getProjectorTransformerCL(): org.bytedeco.javacv.ProjectiveColorTransformerCL;
// 				public prepareTransforms(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: number, param4: org.bytedeco.javacv.ProCamTransformer.Parameters): void;
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: org.bytedeco.javacpp.opencv_core.CvRect, param3: number, param4: org.bytedeco.javacv.ImageTransformer.Parameters, param5: boolean): void;
// 				public setProjectorImageCL(param0: com.jogamp.opencl.CLImage2d, param1: number, param2: number): void;
// 				public createParameters(): org.bytedeco.javacv.ProCamTransformer.Parameters;
// 				public getSurfaceTransformerCL(): org.bytedeco.javacv.ProjectiveColorTransformerCL;
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 				public constructor(param0: native.Array<number>, param1: org.bytedeco.javacv.CameraDevice, param2: org.bytedeco.javacv.ProjectorDevice);
// 				public constructor(param0: org.bytedeco.javacv.JavaCVCL, param1: native.Array<number>, param2: org.bytedeco.javacv.CameraDevice, param3: org.bytedeco.javacv.ProjectorDevice, param4: org.bytedeco.javacpp.opencv_core.CvMat);
// 				public getContext(): org.bytedeco.javacv.JavaCVCL;
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ProjectiveColorTransformer extends org.bytedeco.javacv.ProjectiveTransformer {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ProjectiveColorTransformer>;
// 				public static X24x4: java.lang.ThreadLocal<org.bytedeco.javacpp.opencv_core.CvMat>;
// 				public static temp3x1: java.lang.ThreadLocal<org.bytedeco.javacpp.opencv_core.CvMat>;
// 				public X: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public numGains: number;
// 				public numBiases: number;
// 				public X2: native.Array<org.bytedeco.javacpp.opencv_core.CvMat>;
// 				public constructor(param0: org.bytedeco.javacv.ProjectiveDevice, param1: org.bytedeco.javacv.ProjectiveDevice, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: native.Array<number>, param4: native.Array<number>);
// 				public prepareColorTransform(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number, param2: org.bytedeco.javacv.ProjectiveColorTransformer.Parameters, param3: boolean): void;
// 				public transform(param0: native.Array<org.bytedeco.javacv.ImageTransformer.Data>, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
// 				public constructor(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: native.Array<number>, param6: native.Array<number>, param7: org.bytedeco.javacpp.opencv_core.CvMat, param8: number, param9: number);
// 				public getNumBiases(): number;
// 				public transformColor(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: org.bytedeco.javacpp.opencv_core.CvRect, param3: number, param4: org.bytedeco.javacv.ImageTransformer.Parameters, param5: boolean): void;
// 				public createParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public constructor();
// 				public getNumGains(): number;
// 				public constructor(param0: native.Array<number>);
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: org.bytedeco.javacpp.opencv_core.CvRect, param3: number, param4: org.bytedeco.javacv.ImageTransformer.Parameters, param5: boolean): void;
// 				public createParameters(): org.bytedeco.javacv.ProjectiveColorTransformer.Parameters;
// 				public getX(): org.bytedeco.javacpp.opencv_core.CvMat;
// 				public constructor(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: native.Array<number>, param6: native.Array<number>);
// 				public createParameters(): org.bytedeco.javacv.ProjectiveTransformer.Parameters;
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 			}
// 			export module ProjectiveColorTransformer {
// 				export class Parameters extends org.bytedeco.javacv.ProjectiveTransformer.Parameters {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ProjectiveColorTransformer.Parameters>;
// 					public colorParameters: native.Array<number>;
// 					public identityColorParameters: native.Array<number>;
// 					public getA(): org.bytedeco.javacpp.opencv_core.CvMat;
// 					public resetColor(param0: boolean): void;
// 					public size(): number;
// 					public constructor(param0: org.bytedeco.javacv.ProjectiveColorTransformer);
// 					public get(param0: number): number;
// 					public getConstraintError(): number;
// 					public update(): void;
// 					public setSubspace(param0: native.Array<number>): void;
// 					public set(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
// 					public getSubspace(): native.Array<number>;
// 					public clone(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 					public clone(): org.bytedeco.javacv.ProjectiveColorTransformer.Parameters;
// 					public getIdentityColorParameters(): native.Array<number>;
// 					public reset(param0: boolean): void;
// 					public set(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: boolean): void;
// 					public clone(): org.bytedeco.javacv.ProjectiveTransformer.Parameters;
// 					public set(param0: native.Array<number>): void;
// 					public constructor(param0: org.bytedeco.javacv.ProjectiveTransformer);
// 					public getB(): org.bytedeco.javacpp.opencv_core.CvMat;
// 					public set(param0: number, param1: number): void;
// 					public compose(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: boolean): void;
// 					public getColorParameters(): native.Array<number>;
// 					public preoptimize(): boolean;
// 					public get(): native.Array<number>;
// 					public composeColor(param0: org.bytedeco.javacv.ImageTransformer.Parameters, param1: boolean, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 					public compose(param0: org.bytedeco.javacv.ImageTransformer.Parameters, param1: boolean, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ProjectiveColorTransformerCL extends org.bytedeco.javacv.ProjectiveColorTransformer implements org.bytedeco.javacv.ImageTransformerCL {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ProjectiveColorTransformerCL>;
// 				public context: org.bytedeco.javacv.JavaCVCL;
// 				public HBuffer: com.jogamp.opencl.CLBuffer<java.nio.FloatBuffer>;
// 				public XBuffer: com.jogamp.opencl.CLBuffer<java.nio.FloatBuffer>;
// 				public constructor(param0: org.bytedeco.javacv.ProjectiveDevice, param1: org.bytedeco.javacv.ProjectiveDevice, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: native.Array<number>, param4: native.Array<number>);
// 				public transform(param0: native.Array<org.bytedeco.javacv.ImageTransformer.Data>, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
// 				public constructor(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: native.Array<number>, param6: native.Array<number>, param7: org.bytedeco.javacpp.opencv_core.CvMat, param8: number, param9: number);
// 				public transform(param0: com.jogamp.opencl.CLImage2d, param1: com.jogamp.opencl.CLImage2d, param2: com.jogamp.opencl.CLImage2d, param3: com.jogamp.opencl.CLImage2d, param4: com.jogamp.opencl.CLImage2d, param5: com.jogamp.opencl.CLImage2d, param6: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param7: native.Array<boolean>, param8: org.bytedeco.javacv.ImageTransformerCL.InputData, param9: org.bytedeco.javacv.ImageTransformerCL.OutputData): void;
// 				public prepareHomographies(param0: com.jogamp.opencl.CLBuffer, param1: number, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
// 				public constructor(param0: org.bytedeco.javacv.JavaCVCL, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: org.bytedeco.javacpp.opencv_core.CvMat, param6: native.Array<number>, param7: native.Array<number>, param8: org.bytedeco.javacpp.opencv_core.CvMat, param9: number, param10: number);
// 				public createParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public prepareColorTransforms(param0: com.jogamp.opencl.CLBuffer, param1: number, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
// 				public constructor();
// 				public constructor(param0: native.Array<number>);
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: org.bytedeco.javacpp.opencv_core.CvRect, param3: number, param4: org.bytedeco.javacv.ImageTransformer.Parameters, param5: boolean): void;
// 				public createParameters(): org.bytedeco.javacv.ProjectiveColorTransformer.Parameters;
// 				public constructor(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: native.Array<number>, param6: native.Array<number>);
// 				public createParameters(): org.bytedeco.javacv.ProjectiveTransformer.Parameters;
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 				public getContext(): org.bytedeco.javacv.JavaCVCL;
// 			}
// 		}
// 	}
// }

declare module org {
	export module bytedeco {
		export module javacv {
			export class ProjectiveDevice {
				public static class: java.lang.Class<org.bytedeco.javacv.ProjectiveDevice>;
				public imageWidth: number;
				public imageHeight: number;
				public cameraMatrix: org.bytedeco.javacpp.opencv_core.CvMat;
				public distortionCoeffs: org.bytedeco.javacpp.opencv_core.CvMat;
				public extrParams: org.bytedeco.javacpp.opencv_core.CvMat;
				public reprojErrs: org.bytedeco.javacpp.opencv_core.CvMat;
				public avgReprojErr: number;
				public maxReprojErr: number;
				public R: org.bytedeco.javacpp.opencv_core.CvMat;
				public T: org.bytedeco.javacpp.opencv_core.CvMat;
				public E: org.bytedeco.javacpp.opencv_core.CvMat;
				public F: org.bytedeco.javacpp.opencv_core.CvMat;
				public avgEpipolarErr: number;
				public maxEpipolarErr: number;
				public colorOrder: string;
				public colorMixingMatrix: org.bytedeco.javacpp.opencv_core.CvMat;
				public additiveLight: org.bytedeco.javacpp.opencv_core.CvMat;
				public avgColorErr: number;
				public colorR2: number;
				public static normalize(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.CvMat): native.Array<number>;
				public getRGBColorOrder(): native.Array<number>;
				public static undistort(param0: native.Array<number>, param1: native.Array<number>): native.Array<number>;
				public undistort(param0: native.Array<number>): native.Array<number>;
				public readParameters(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
				public distort(param0: native.Array<number>): native.Array<number>;
				public setFixedPointMaps(param0: boolean): void;
				public constructor(param0: string);
				public undistort(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.opencv_core.IplImage;
				public getDistortMap2(): org.bytedeco.javacpp.opencv_core.IplImage;
				public static distort(param0: native.Array<number>, param1: native.Array<number>): native.Array<number>;
				public undistort(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage): void;
				public getDistortMap1(): org.bytedeco.javacpp.opencv_core.IplImage;
				public rescale(param0: number, param1: number): void;
				public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
				public getMapsPyramidLevel(): number;
				public getBackProjectionMatrix(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public static write(param0: string, param1: native.Array<native.Array<org.bytedeco.javacv.ProjectiveDevice>>): void;
				public isFixedPointMaps(): boolean;
				public static write(param0: string, param1: native.Array<org.bytedeco.javacv.ProjectiveDevice>): void;
				public constructor(param0: string, param1: string);
				public readParameters(param0: string): void;
				public getUndistortMap1(): org.bytedeco.javacpp.opencv_core.IplImage;
				public getRectifyingHomography(param0: org.bytedeco.javacv.ProjectiveDevice, param1: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public getUndistortMap2(): org.bytedeco.javacpp.opencv_core.IplImage;
				public writeParameters(param0: string): void;
				public readParameters(param0: java.io.File): void;
				public constructor(param0: string, param1: org.bytedeco.javacpp.opencv_core.FileStorage);
				public static unnormalize(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.CvMat): native.Array<number>;
				public toString(): string;
				public getSettings(): org.bytedeco.javacv.ProjectiveDevice.Settings;
				public setSettings(param0: org.bytedeco.javacv.ProjectiveDevice.Settings): void;
				public writeParameters(param0: java.io.File): void;
				public distort(param0: org.bytedeco.javacpp.opencv_core.IplImage): org.bytedeco.javacpp.opencv_core.IplImage;
				public constructor(param0: string, param1: java.io.File);
				public setMapsPyramidLevel(param0: number): void;
				public distort(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage): void;
				public static read(param0: string): native.Array<org.bytedeco.javacv.ProjectiveDevice>;
				public getFrontoParallelH(param0: native.Array<number>, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat): org.bytedeco.javacpp.opencv_core.CvMat;
				public writeParameters(param0: org.bytedeco.javacpp.opencv_core.FileStorage): void;
			}
			export module ProjectiveDevice {
				export class CalibratedSettings extends org.bytedeco.javacv.ProjectiveDevice.Settings {
					public static class: java.lang.Class<org.bytedeco.javacv.ProjectiveDevice.CalibratedSettings>;
					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
					public setParametersFile(param0: java.io.File): void;
					public constructor();
					public getParametersFilename(): string;
					public setParametersFilename(param0: string): void;
					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.CalibratedSettings);
					public getParametersFile(): java.io.File;
				}
				export class CalibrationSettings extends org.bytedeco.javacv.ProjectiveDevice.Settings {
					public static class: java.lang.Class<org.bytedeco.javacv.ProjectiveDevice.CalibrationSettings>;
					public setFixK4(param0: boolean): void;
					public isFixAspectRatio(): boolean;
					public isStereoSameFocalLength(): boolean;
					public setFixAspectRatio(param0: boolean): void;
					public getInitAspectRatio(): number;
					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.CalibrationSettings);
					public isFixK4(): boolean;
					public setFixK5(param0: boolean): void;
					public constructor();
					public isFixK5(): boolean;
					public isFixFocalLength(): boolean;
					public setFixK1(param0: boolean): void;
					public isStereoFixIntrinsic(): boolean;
					public isFixK6(): boolean;
					public setStereoSameFocalLength(param0: boolean): void;
					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
					public setUseIntrinsicGuess(param0: boolean): void;
					public setFixK6(param0: boolean): void;
					public setZeroTangentDist(param0: boolean): void;
					public setFixK2(param0: boolean): void;
					public setInitAspectRatio(param0: number): void;
					public setFixFocalLength(param0: boolean): void;
					public isUseIntrinsicGuess(): boolean;
					public isFixK3(): boolean;
					public setRationalModel(param0: boolean): void;
					public isZeroTangentDist(): boolean;
					public isFixK2(): boolean;
					public isFixPrincipalPoint(): boolean;
					public setFixK3(param0: boolean): void;
					public setFixPrincipalPoint(param0: boolean): void;
					public isFixK1(): boolean;
					public isRationalModel(): boolean;
					public setStereoFixIntrinsic(param0: boolean): void;
				}
				export class Exception {
					public static class: java.lang.Class<org.bytedeco.javacv.ProjectiveDevice.Exception>;
					public constructor(param0: string, param1: java.lang.Throwable);
					public constructor(param0: string);
				}
				export class Settings extends org.bytedeco.javacv.BaseChildSettings {
					public static class: java.lang.Class<org.bytedeco.javacv.ProjectiveDevice.Settings>;
					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
					public constructor();
					public getName(): string;
					public getResponseGamma(): number;
					public setResponseGamma(param0: number): void;
					public setName(param0: string): void;
				}
			}
		}
	}
}

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ProjectiveTransformer extends org.bytedeco.javacv.ImageTransformer {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ProjectiveTransformer>;
// 				public static H3x3: java.lang.ThreadLocal<org.bytedeco.javacpp.opencv_core.CvMat>;
// 				public static pts4x1: java.lang.ThreadLocal<org.bytedeco.javacpp.opencv_core.CvMat>;
// 				public K1: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public K2: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public invK1: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public invK2: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public R: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public t: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public n: org.bytedeco.javacpp.opencv_core.CvMat;
// 				public referencePoints1: native.Array<number>;
// 				public referencePoints2: native.Array<number>;
// 				public fillColor: org.bytedeco.javacpp.opencv_core.CvScalar;
// 				public kernelData: org.bytedeco.javacpp.cvkernels.KernelData;
// 				public H: native.Array<org.bytedeco.javacpp.opencv_core.CvMat>;
// 				public constructor(param0: org.bytedeco.javacv.ProjectiveDevice, param1: org.bytedeco.javacv.ProjectiveDevice, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: native.Array<number>, param4: native.Array<number>);
// 				public transform(param0: native.Array<org.bytedeco.javacv.ImageTransformer.Data>, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
// 				public getInvK2(): org.bytedeco.javacpp.opencv_core.CvMat;
// 				public getT(): org.bytedeco.javacpp.opencv_core.CvMat;
// 				public getFillColor(): org.bytedeco.javacpp.opencv_core.CvScalar;
// 				public createParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public constructor();
// 				public getK1(): org.bytedeco.javacpp.opencv_core.CvMat;
// 				public constructor(param0: native.Array<number>);
// 				public setFillColor(param0: org.bytedeco.javacpp.opencv_core.CvScalar): void;
// 				public getReferencePoints2(): native.Array<number>;
// 				public getN(): org.bytedeco.javacpp.opencv_core.CvMat;
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: org.bytedeco.javacpp.opencv_core.CvRect, param3: number, param4: org.bytedeco.javacv.ImageTransformer.Parameters, param5: boolean): void;
// 				public prepareHomography(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: number, param2: org.bytedeco.javacv.ProjectiveTransformer.Parameters, param3: boolean): void;
// 				public getR(): org.bytedeco.javacpp.opencv_core.CvMat;
// 				public getReferencePoints1(): native.Array<number>;
// 				public constructor(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: native.Array<number>, param6: native.Array<number>);
// 				public createParameters(): org.bytedeco.javacv.ProjectiveTransformer.Parameters;
// 				public getK2(): org.bytedeco.javacpp.opencv_core.CvMat;
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 				public getInvK1(): org.bytedeco.javacpp.opencv_core.CvMat;
// 			}
// 			export module ProjectiveTransformer {
// 				export class Parameters extends org.bytedeco.javacv.ImageTransformer.Parameters {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ProjectiveTransformer.Parameters>;
// 					public projectiveParameters: native.Array<number>;
// 					public fakeIdentity: boolean;
// 					public setUpdateNeeded(param0: boolean): void;
// 					public getT(): org.bytedeco.javacpp.opencv_core.CvMat;
// 					public size(): number;
// 					public isUpdateNeeded(): boolean;
// 					public get(param0: number): number;
// 					public toString(): string;
// 					public getConstraintError(): number;
// 					public update(): void;
// 					public setSubspace(param0: native.Array<number>): void;
// 					public set(param0: org.bytedeco.javacv.ImageTransformer.Parameters): void;
// 					public getSubspace(): native.Array<number>;
// 					public clone(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 					public reset(param0: boolean): void;
// 					public set(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: boolean): void;
// 					public getR(): org.bytedeco.javacpp.opencv_core.CvMat;
// 					public clone(): org.bytedeco.javacv.ProjectiveTransformer.Parameters;
// 					public set(param0: native.Array<number>): void;
// 					public constructor(param0: org.bytedeco.javacv.ProjectiveTransformer);
// 					public set(param0: number, param1: number): void;
// 					public compose(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: boolean, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: boolean): void;
// 					public preoptimize(): boolean;
// 					public get(): native.Array<number>;
// 					public compose(param0: org.bytedeco.javacv.ImageTransformer.Parameters, param1: boolean, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 					public getH(): org.bytedeco.javacpp.opencv_core.CvMat;
// 					public getN(): org.bytedeco.javacpp.opencv_core.CvMat;
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ProjectiveTransformerCL extends org.bytedeco.javacv.ProjectiveTransformer implements org.bytedeco.javacv.ImageTransformerCL {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ProjectiveTransformerCL>;
// 				public context: org.bytedeco.javacv.JavaCVCL;
// 				public HBuffer: com.jogamp.opencl.CLBuffer<java.nio.FloatBuffer>;
// 				public constructor(param0: org.bytedeco.javacv.ProjectiveDevice, param1: org.bytedeco.javacv.ProjectiveDevice, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: native.Array<number>, param4: native.Array<number>);
// 				public transform(param0: native.Array<org.bytedeco.javacv.ImageTransformer.Data>, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
// 				public transform(param0: com.jogamp.opencl.CLImage2d, param1: com.jogamp.opencl.CLImage2d, param2: com.jogamp.opencl.CLImage2d, param3: com.jogamp.opencl.CLImage2d, param4: com.jogamp.opencl.CLImage2d, param5: com.jogamp.opencl.CLImage2d, param6: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param7: native.Array<boolean>, param8: org.bytedeco.javacv.ImageTransformerCL.InputData, param9: org.bytedeco.javacv.ImageTransformerCL.OutputData): void;
// 				public constructor(param0: org.bytedeco.javacv.JavaCVCL);
// 				public prepareHomographies(param0: com.jogamp.opencl.CLBuffer, param1: number, param2: native.Array<org.bytedeco.javacv.ImageTransformer.Parameters>, param3: native.Array<boolean>): void;
// 				public constructor(param0: org.bytedeco.javacv.JavaCVCL, param1: native.Array<number>);
// 				public constructor(param0: org.bytedeco.javacv.JavaCVCL, param1: org.bytedeco.javacv.ProjectiveDevice, param2: org.bytedeco.javacv.ProjectiveDevice, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: native.Array<number>, param5: native.Array<number>);
// 				public createParameters(): org.bytedeco.javacv.ImageTransformer.Parameters;
// 				public constructor(param0: org.bytedeco.javacv.JavaCVCL, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: org.bytedeco.javacpp.opencv_core.CvMat, param6: native.Array<number>, param7: native.Array<number>);
// 				public constructor();
// 				public constructor(param0: native.Array<number>);
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: org.bytedeco.javacpp.opencv_core.CvRect, param3: number, param4: org.bytedeco.javacv.ImageTransformer.Parameters, param5: boolean): void;
// 				public constructor(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: org.bytedeco.javacpp.opencv_core.CvMat, param4: org.bytedeco.javacpp.opencv_core.CvMat, param5: native.Array<number>, param6: native.Array<number>);
// 				public createParameters(): org.bytedeco.javacv.ProjectiveTransformer.Parameters;
// 				public transform(param0: org.bytedeco.javacpp.opencv_core.CvMat, param1: org.bytedeco.javacpp.opencv_core.CvMat, param2: org.bytedeco.javacv.ImageTransformer.Parameters, param3: boolean): void;
// 				public getContext(): org.bytedeco.javacv.JavaCVCL;
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ProjectorDevice extends org.bytedeco.javacv.ProjectiveDevice {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ProjectorDevice>;
// 				public static read(param0: org.bytedeco.javacpp.opencv_core.FileStorage): native.Array<org.bytedeco.javacv.ProjectorDevice>;
// 				public getAttenuation(param0: number, param1: number, param2: org.bytedeco.javacpp.opencv_core.CvMat, param3: number): number;
// 				public constructor(param0: string, param1: org.bytedeco.javacpp.opencv_core.FileStorage);
// 				public constructor(param0: org.bytedeco.javacv.ProjectorDevice.Settings);
// 				public setSettings(param0: org.bytedeco.javacv.ProjectorDevice.Settings): void;
// 				public getSettings(): org.bytedeco.javacv.ProjectiveDevice.Settings;
// 				public constructor(param0: string);
// 				public setSettings(param0: org.bytedeco.javacv.ProjectiveDevice.Settings): void;
// 				public static read(param0: string): native.Array<org.bytedeco.javacv.ProjectorDevice>;
// 				public constructor(param0: string, param1: java.io.File);
// 				public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
// 				public static read(param0: string): native.Array<org.bytedeco.javacv.ProjectiveDevice>;
// 				public createCanvasFrame(): org.bytedeco.javacv.CanvasFrame;
// 				public constructor(param0: string, param1: string);
// 			}
// 			export module ProjectorDevice {
// 				export class CalibratedSettings extends org.bytedeco.javacv.ProjectiveDevice.CalibratedSettings implements org.bytedeco.javacv.ProjectorDevice.Settings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ProjectorDevice.CalibratedSettings>;
// 					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
// 					public getRefreshRate(): number;
// 					public getLatency(): number;
// 					public setImageWidth(param0: number): void;
// 					public getImageWidth(): number;
// 					public setBitDepth(param0: number): void;
// 					public isUseOpenGL(): boolean;
// 					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.CalibratedSettings);
// 					public setName(param0: string): void;
// 					public setLatency(param0: number): void;
// 					public removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 					public getImageHeight(): number;
// 					public getBitDepth(): number;
// 					public addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 					public constructor();
// 					public getName(): string;
// 					public getResponseGamma(): number;
// 					public setResponseGamma(param0: number): void;
// 					public setUseOpenGL(param0: boolean): void;
// 					public getScreenNumber(): number;
// 					public setScreenNumber(param0: number): void;
// 					public getDescription(): string;
// 					public setImageHeight(param0: number): void;
// 					public setRefreshRate(param0: number): void;
// 				}
// 				export class CalibrationSettings extends org.bytedeco.javacv.ProjectiveDevice.CalibrationSettings implements org.bytedeco.javacv.ProjectorDevice.Settings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ProjectorDevice.CalibrationSettings>;
// 					public setBrightnessForeground(param0: number): void;
// 					public getRefreshRate(): number;
// 					public isUseOpenGL(): boolean;
// 					public setBrightnessBackground(param0: number): void;
// 					public getBrightnessForeground(): number;
// 					public setLatency(param0: number): void;
// 					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.CalibrationSettings);
// 					public getImageHeight(): number;
// 					public addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 					public constructor();
// 					public getResponseGamma(): number;
// 					public getBrightnessBackground(): number;
// 					public setUseOpenGL(param0: boolean): void;
// 					public setScreenNumber(param0: number): void;
// 					public setImageHeight(param0: number): void;
// 					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
// 					public getLatency(): number;
// 					public setImageWidth(param0: number): void;
// 					public getImageWidth(): number;
// 					public setBitDepth(param0: number): void;
// 					public setName(param0: string): void;
// 					public removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 					public getBitDepth(): number;
// 					public getName(): string;
// 					public setResponseGamma(param0: number): void;
// 					public getScreenNumber(): number;
// 					public getDescription(): string;
// 					public setRefreshRate(param0: number): void;
// 				}
// 				export class Settings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ProjectorDevice.Settings>;
// 					/**
// 					 * Constructs a new instance of the org.bytedeco.javacv.ProjectorDevice$Settings interface with the provided implementation. An empty constructor exists calling super() when extending the interface class.
// 					 */
// 					public constructor(implementation: {
// 						getName(): string;
// 						setName(param0: string): void;
// 						getResponseGamma(): number;
// 						setResponseGamma(param0: number): void;
// 						getScreenNumber(): number;
// 						setScreenNumber(param0: number): void;
// 						getLatency(): number;
// 						setLatency(param0: number): void;
// 						getDescription(): string;
// 						getImageWidth(): number;
// 						setImageWidth(param0: number): void;
// 						getImageHeight(): number;
// 						setImageHeight(param0: number): void;
// 						getBitDepth(): number;
// 						setBitDepth(param0: number): void;
// 						getRefreshRate(): number;
// 						setRefreshRate(param0: number): void;
// 						isUseOpenGL(): boolean;
// 						setUseOpenGL(param0: boolean): void;
// 						addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 						removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 					});
// 					public constructor();
// 					public getRefreshRate(): number;
// 					public getLatency(): number;
// 					public setImageWidth(param0: number): void;
// 					public getImageWidth(): number;
// 					public setBitDepth(param0: number): void;
// 					public isUseOpenGL(): boolean;
// 					public setName(param0: string): void;
// 					public setLatency(param0: number): void;
// 					public removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 					public getImageHeight(): number;
// 					public getBitDepth(): number;
// 					public addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 					public getName(): string;
// 					public getResponseGamma(): number;
// 					public setResponseGamma(param0: number): void;
// 					public setUseOpenGL(param0: boolean): void;
// 					public getScreenNumber(): number;
// 					public setScreenNumber(param0: number): void;
// 					public getDescription(): string;
// 					public setImageHeight(param0: number): void;
// 					public setRefreshRate(param0: number): void;
// 				}
// 				export class SettingsImplementation extends org.bytedeco.javacv.ProjectiveDevice.Settings implements org.bytedeco.javacv.ProjectorDevice.Settings {
// 					public static class: java.lang.Class<org.bytedeco.javacv.ProjectorDevice.SettingsImplementation>;
// 					public constructor(param0: org.bytedeco.javacv.ProjectiveDevice.Settings);
// 					public getRefreshRate(): number;
// 					public getLatency(): number;
// 					public setImageWidth(param0: number): void;
// 					public getImageWidth(): number;
// 					public setBitDepth(param0: number): void;
// 					public isUseOpenGL(): boolean;
// 					public setName(param0: string): void;
// 					public setLatency(param0: number): void;
// 					public removePropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 					public getImageHeight(): number;
// 					public getBitDepth(): number;
// 					public addPropertyChangeListener(param0: java.beans.PropertyChangeListener): void;
// 					public constructor();
// 					public getName(): string;
// 					public getResponseGamma(): number;
// 					public setResponseGamma(param0: number): void;
// 					public setUseOpenGL(param0: boolean): void;
// 					public getScreenNumber(): number;
// 					public setScreenNumber(param0: number): void;
// 					public getDescription(): string;
// 					public setImageHeight(param0: number): void;
// 					public setRefreshRate(param0: number): void;
// 				}
// 			}
// 		}
// 	}
// }

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ProjectorSettings extends org.bytedeco.javacv.BaseSettings {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ProjectorSettings>;
// 				public getQuantity(): number;
// 				public toArray(param0: native.Array<any>): native.Array<any>;
// 				public constructor(param0: boolean);
// 				public toArray(): native.Array<org.bytedeco.javacv.ProjectorDevice.Settings>;
// 				public constructor();
// 				public setQuantity(param0: number): void;
// 				public toArray(): native.Array<any>;
// 			}
// 		}
// 	}
// }

declare module org {
	export module bytedeco {
		export module javacv {
			export class RealSenseFrameGrabber extends org.bytedeco.javacv.FrameGrabber {
				public static class: java.lang.Class<org.bytedeco.javacv.RealSenseFrameGrabber>;
				public static DEFAULT_DEPTH_WIDTH: number;
				public static DEFAULT_DEPTH_HEIGHT: number;
				public static DEFAULT_COLOR_WIDTH: number;
				public static DEFAULT_COLOR_HEIGHT: number;
				public static DEFAULT_COLOR_FRAMERATE: number;
				public setLR_Gain(param0: number): void;
				public setFramesQueueSize(param0: number): void;
				public setHardwareLoggerEnabled(param0: number): void;
				public set(param0: number): void;
				public setColorExposure(param0: number): void;
				public setDynamicFPS(param0: number): void;
				public getDepthImageHeight(): number;
				public setLR_AutoExposureEnabled(param0: number): void;
				public setColorBrightness(param0: number): void;
				public setColorWhiteBalance(param0: number): void;
				public grabDepth(): org.bytedeco.javacpp.opencv_core.IplImage;
				public setDepthImageWidth(param0: number): void;
				public setLaserPower(param0: number): void;
				public static getDeviceDescriptions(): native.Array<string>;
				public disableDepthStream(): void;
				public setAutoExposureBrightRatioSetPoint(param0: number): void;
				public setColorSharpness(param0: number): void;
				public setLR_Exposure(param0: number): void;
				public setColorContrast(param0: number): void;
				public grab(): org.bytedeco.javacv.Frame;
				public setGestureRecognitionPreset(): void;
				public setLongRange(): void;
				public setDisparityMultiplier(param0: number): void;
				public setAutoExposureKpDarkThreshold(param0: number): void;
				public setMidRange(): void;
				public setDepthControlSecondPeakThreshold(param0: number): void;
				public setDepthControlMinimumThreshold(param0: number): void;
				public setFisheyeExternalTrigger(param0: number): void;
				public grabVideo(): org.bytedeco.javacpp.opencv_core.IplImage;
				public setConfidenceThreshold(param0: number): void;
				public setIRImageHeight(param0: number): void;
				public getByteOrder(): java.nio.ByteOrder;
				public setAutoExposureKpExposure(param0: number): void;
				public setColorEnableAutoWhiteBalance(param0: number): void;
				public setIRImageWidth(param0: number): void;
				public setDepthControlTextureDifference(param0: number): void;
				public disableColorStream(): void;
				public setDepthControlTextureCountThreshold(param0: number): void;
				public enableColorStream(): void;
				public setMotionRange(param0: number): void;
				// public getRealSenseDevice(): org.bytedeco.javacpp.RealSense.device;
				public setAutoExposureTopEdge(param0: number): void;
				public release(): void;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.RealSenseFrameGrabber;
				public setColorEnableAutoExposure(param0: number): void;
				public setDepthControlEstimateMedianDecrement(param0: number): void;
				public setBackgroundSegmentationPreset(): void;
				public constructor(param0: number);
				public setFisheyeAutoExposureSkipFrames(param0: number): void;
				public setAutoExposureKpGain(param0: number): void;
				public setDepthFrameRate(param0: number): void;
				public setOption(param0: string, param1: string): void;
				public setIROnlyPreset(): void;
				public static createDefault(param0: string): org.bytedeco.javacv.RealSenseFrameGrabber;
				public setAutoExposureLeftEdge(param0: number): void;
				public setAutoExposureBottomEdge(param0: number): void;
				public enableIRStream(): void;
				public setFisheyeGain(param0: number): void;
				public setFisheyeAutoExposureMode(param0: number): void;
				public static createDefault(param0: string): org.bytedeco.javacv.FrameGrabber;
				public getIRImageHeight(): number;
				public setCursorPreset(): void;
				public constructor();
				public getIRFrameRate(): number;
				public enableDepthStream(): void;
				public setColorGain(param0: number): void;
				public setDepthControlEstimateMedianIncrement(param0: number): void;
				public setDefaultPreset(): void;
				public setFisheyeAutoExposureAntiflickerRate(param0: number): void;
				public setDepthClampMax(param0: number): void;
				public setColorHue(param0: number): void;
				public setFilterOption(param0: number): void;
				public setOption(param0: number, param1: number): void;
				public setFisheyeEnableAutoExposure(param0: number): void;
				public setDepthControlMedianThreshold(param0: number): void;
				public setFisheyeExposure(param0: number): void;
				public setAutoExposureMeanIntensitySetPoint(param0: number): void;
				public static main(param0: native.Array<string>): void;
				public setObjectScanningPreset(): void;
				public static createDefault(param0: number): org.bytedeco.javacv.RealSenseFrameGrabber;
				// public loadDevice(): org.bytedeco.javacpp.RealSense.device;
				public setDepthImageHeight(param0: number): void;
				public setEmitterEnabled(param0: number): void;
				public getDepthImageWidth(): number;
				public setFisheyeAutoExposurePixelSampleRate(param0: number): void;
				public setDepthControlScoreMaximumThreshold(param0: number): void;
				public getDepthScale(): number;
				public getIRImageWidth(): number;
				public finalize(): void;
				public static tryLoad(): void;
				public setDepthClampMin(param0: number): void;
				public setDepthControlLRThreshold(param0: number): void;
				public setByteOrder(param0: java.nio.ByteOrder): void;
				public start(): void;
				public setDisparityShift(param0: number): void;
				public setColorGamma(param0: number): void;
				public static createDefault(param0: number): org.bytedeco.javacv.FrameGrabber;
				public setColorSaturation(param0: number): void;
				public setDepthUnits(param0: number): void;
				public getGamma(): number;
				public setDepthControlNeighborThreshold(param0: number): void;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FrameGrabber;
				public getFrameRate(): number;
				public setIRFrameRate(param0: number): void;
				public setShortRange(): void;
				public setPreset(param0: number): void;
				public stop(): void;
				public trigger(): void;
				public setAccuracy(param0: number): void;
				public grabIR(): org.bytedeco.javacpp.opencv_core.IplImage;
				public disableIRStream(): void;
				public setFisheyeStobe(param0: number): void;
				public getDepthFrameRate(): number;
				public setAutoExposureRightEdge(param0: number): void;
			}
		}
	}
}

// declare module org {
// 	export module bytedeco {
// 		export module javacv {
// 			export class ReflectanceInitializer {
// 				public static class: java.lang.Class<org.bytedeco.javacv.ReflectanceInitializer>;
// 				public constructor(param0: org.bytedeco.javacv.CameraDevice, param1: org.bytedeco.javacv.ProjectorDevice, param2: number, param3: org.bytedeco.javacv.GNImageAligner.Settings, param4: number, param5: number);
// 				public initializeReflectance(param0: native.Array<org.bytedeco.javacpp.opencv_core.IplImage>, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: native.Array<number>, param3: native.Array<number>): org.bytedeco.javacpp.opencv_core.IplImage;
// 				public initializePlaneParameters(param0: org.bytedeco.javacpp.opencv_core.IplImage, param1: org.bytedeco.javacpp.opencv_core.IplImage, param2: native.Array<number>, param3: native.Array<number>, param4: native.Array<number>): org.bytedeco.javacpp.opencv_core.CvMat;
// 				public getProjectorImages(): native.Array<org.bytedeco.javacpp.opencv_core.IplImage>;
// 				public constructor(param0: org.bytedeco.javacv.CameraDevice, param1: org.bytedeco.javacv.ProjectorDevice, param2: number, param3: org.bytedeco.javacv.GNImageAligner.Settings);
// 			}
// 		}
// 	}
// }

declare module org {
	export module bytedeco {
		export module javacv {
			export class VideoInputFrameGrabber extends org.bytedeco.javacv.FrameGrabber {
				public static class: java.lang.Class<org.bytedeco.javacv.VideoInputFrameGrabber>;
				public static createDefault(param0: number): org.bytedeco.javacv.VideoInputFrameGrabber;
				public release(): void;
				public static createDefault(param0: string): org.bytedeco.javacv.VideoInputFrameGrabber;
				public finalize(): void;
				public static createDefault(param0: string): org.bytedeco.javacv.FrameGrabber;
				public static tryLoad(): void;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.VideoInputFrameGrabber;
				public constructor();
				public start(param0: number): void;
				public static getDeviceDescriptions(): native.Array<string>;
				public stop(): void;
				public trigger(): void;
				public getImageHeight(): number;
				public start(): void;
				public static createDefault(param0: number): org.bytedeco.javacv.FrameGrabber;
				public constructor(param0: number);
				public getGamma(): number;
				public getImageWidth(): number;
				public grab(): org.bytedeco.javacv.Frame;
				public static createDefault(param0: java.io.File): org.bytedeco.javacv.FrameGrabber;
			}
		}
	}
}

declare module org {
	export module bytedeco {
		export module javacv {
			export class cvkernels {
				public static class: java.lang.Class<org.bytedeco.javacv.cvkernels>;
				public static multiWarpColorTransform(param0: org.bytedeco.javacpp.cvkernels.KernelData, param1: org.bytedeco.javacpp.opencv_core.CvRect, param2: org.bytedeco.javacpp.opencv_core.CvScalar): void;
				public constructor();
			}
			export module cvkernels {
				export class ParallelData {
					public static class: java.lang.Class<org.bytedeco.javacv.cvkernels.ParallelData>;
				}
			}
		}
	}
}

//Generics information:
//org.bytedeco.javacv.BufferRing:1
//org.bytedeco.javacv.BufferRing.BufferFactory:1
//org.bytedeco.javacv.FrameConverter:1
//org.bytedeco.javacv.OpenCVFrameConverter:1

